import { Alert, Button, Card, Input, InputNumber, Select, Space, Typography } from 'antd'
import { useState } from 'react'
import {
  CartesianGrid,
  Legend,
  Line,
  LineChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from 'recharts'
import orchestrator from '../../services/ai/predictionOrchestrator'
import './AIPredictionDemo.css'

const { Title, Paragraph, Text } = Typography

/**
 * AI Prediction Demo
 * M·ªôt trang ƒë∆°n gi·∫£n cho ph√©p nh·∫≠p chu·ªói th·ªùi gian v√† sinh d·ª± b√°o qua predictionOrchestrator.
 * Features:
 *  - Nh·∫≠p series s·ªë (comma / space)
 *  - Ch·ªçn horizon (b∆∞·ªõc d·ª± ƒëo√°n)
 *  - Ch·ªçn ∆∞u ti√™n latency (fast / balanced)
 *  - Hi·ªÉn th·ªã: strategy, confidence, predictions
 *  - Bi·ªÉu ƒë·ªì k·∫øt h·ª£p d·ªØ li·ªáu l·ªãch s·ª≠ + d·ª± b√°o
 */
export default function AIPredictionDemo() {
  const [seriesInput, setSeriesInput] = useState('10,12,13,15,18,21,20,19,23,25,27,30')
  const [horizon, setHorizon] = useState(7)
  const [latencyPreference, setLatencyPreference] = useState('balanced')
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState(null)
  const [error, setError] = useState(null)

  function parseSeries(raw) {
    return raw
      .split(/[,\s]+/)
      .map((v) => v.trim())
      .filter((v) => v.length)
      .map((v) => Number(v))
      .filter((v) => !Number.isNaN(v))
  }

  async function handlePredict() {
    setLoading(true)
    setError(null)
    setResult(null)
    try {
      const series = parseSeries(seriesInput)
      if (!series.length) throw new Error('Chu·ªói ƒë·∫ßu v√†o r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá.')
      const prediction = await orchestrator.predict(series, { horizon, latencyPreference })
      setResult({ series, ...prediction })
    } catch (e) {
      setError(e.message || 'Prediction failed')
    } finally {
      setLoading(false)
    }
  }

  const chartData = (() => {
    if (!result) return []
    const base = result.series.map((v, i) => ({ index: i + 1, value: v }))
    const lastIndex = base.length
    const preds = (result.predictions || []).map((p, i) => ({
      index: lastIndex + i + 1,
      predicted: p,
    }))
    // Merge by index
    const map = new Map()
    base.forEach((d) => map.set(d.index, { index: d.index, value: d.value }))
    preds.forEach((d) => {
      const existing = map.get(d.index) || { index: d.index }
      map.set(d.index, { ...existing, predicted: d.predicted })
    })
    return Array.from(map.values())
  })()

  return (
    <div className="ai-prediction-demo">
      <Title level={2}>üîÆ AI Prediction Demo</Title>
      <Paragraph type="secondary">
        Demo s·ª≠ d·ª•ng <Text code>predictionOrchestrator</Text> ƒë·ªÉ t·ª± ƒë·ªông ch·ªçn chi·∫øn l∆∞·ª£c d·ª± b√°o ph√π
        h·ª£p (linear / smoothing / lstm / ensemble). Nh·∫≠p chu·ªói th·ªùi gian (t·ªëi thi·ªÉu v√†i ƒëi·ªÉm) v√†
        ch·ªçn horizon ƒë·ªÉ xem k·∫øt qu·∫£.
      </Paragraph>

      <Card title="C·∫•u h√¨nh" className="config-card" size="small">
        <Space direction="vertical" style={{ width: '100%' }} size="middle">
          <div className="field-group">
            <label>D·ªØ li·ªáu chu·ªói (numbers)</label>
            <Input.TextArea
              autoSize={{ minRows: 2, maxRows: 4 }}
              value={seriesInput}
              onChange={(e) => setSeriesInput(e.target.value)}
              placeholder="V√≠ d·ª•: 10,12,13,15,18,21,20,19,23"
            />
          </div>
          <div className="inline-fields">
            <div>
              <label>Horizon</label>
              <InputNumber min={1} max={60} value={horizon} onChange={(v) => setHorizon(v || 1)} />
            </div>
            <div>
              <label>Latency Preference</label>
              <Select
                value={latencyPreference}
                onChange={(v) => setLatencyPreference(v)}
                options={[
                  { value: 'fast', label: 'fast (∆∞u ti√™n t·ªëc ƒë·ªô)' },
                  { value: 'balanced', label: 'balanced (m·∫∑c ƒë·ªãnh)' },
                  { value: 'accuracy', label: 'accuracy (th·ª≠ LSTM khi ƒë·ªß)' },
                ]}
                style={{ minWidth: 200 }}
              />
            </div>
            <div style={{ alignSelf: 'end' }}>
              <Button type="primary" onClick={handlePredict} loading={loading}>
                Ch·∫°y d·ª± b√°o
              </Button>
            </div>
          </div>
        </Space>
      </Card>

      {error && (
        <Alert
          style={{ marginTop: 16 }}
          type="error"
          message="L·ªói d·ª± b√°o"
          description={error}
          showIcon
        />
      )}

      {result && !error && (
        <>
          <Card
            title={`K·∫øt qu·∫£ ‚Ä¢ Strategy: ${result.strategy || 'N/A'}`}
            className="result-card"
            size="small"
            extra={<span>Confidence: {(result.confidence * 100).toFixed(1)}%</span>}
            style={{ marginTop: 16 }}
          >
            {result.reason && result.strategy === 'rejected' && (
              <Alert type="warning" message="Rejected" description={result.reason} showIcon />
            )}
            <Paragraph style={{ marginTop: 8, marginBottom: 4 }}>Bi·ªÉu ƒë·ªì</Paragraph>
            <div style={{ width: '100%', height: 300 }}>
              <ResponsiveContainer>
                <LineChart data={chartData} margin={{ top: 10, right: 20, left: 0, bottom: 0 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="index" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="value" stroke="#3b82f6" name="Historical" />
                  <Line
                    type="monotone"
                    dataKey="predicted"
                    stroke="#ef4444"
                    name="Predicted"
                    strokeDasharray="5 2"
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
            <Paragraph style={{ marginTop: 12, marginBottom: 4 }}>Chi ti·∫øt JSON</Paragraph>
            <pre className="json-block">{JSON.stringify(result, null, 2)}</pre>
          </Card>
          <Card size="small" className="hints-card" title="Ghi ch√∫" style={{ marginTop: 16 }}>
            <ul className="hints-list">
              <li>
                Chu·ªói ng·∫Øn (&lt; 8) ‚Üí Linear regression, chu·ªói d√†i v·ªõi seasonality ‚Üí Ensemble.
              </li>
              <li>Latency = fast ∆∞u ti√™n chi·∫øn l∆∞·ª£c nh·∫π (linear / smoothing).</li>
              <li>LSTM c·∫ßn ƒë·ªß ƒëi·ªÉm d·ªØ li·ªáu (&gt;= lookback c·∫•u h√¨nh) m·ªõi ho·∫°t ƒë·ªông.</li>
              <li>
                Confidence t√≠nh t·ª´ nhi·ªÅu y·∫øu t·ªë (trend consistency, variability, model stats) ‚Üí ch·ªâ
                l√† ch·ªâ b√°o t∆∞∆°ng ƒë·ªëi.
              </li>
            </ul>
          </Card>
        </>
      )}
    </div>
  )
}
