/*! For license information please see 236.2c625b8b.chunk.js.LICENSE.txt */
(self.webpackChunkreact_google_sheets_project=self.webpackChunkreact_google_sheets_project||[]).push([[236],{2430:function(t,e,n){var a;!function(s,r,o){var i,c=256,l=o.pow(c,6),u=o.pow(2,52),h=2*u,d=255;function p(t,e,n){var a=[],d=y(g((e=1==e?{entropy:!0}:e||{}).entropy?[t,b(r)]:null==t?function(){try{var t;return i&&(t=i.randomBytes)?t=t(c):(t=new Uint8Array(c),(s.crypto||s.msCrypto).getRandomValues(t)),b(t)}catch(a){var e=s.navigator,n=e&&e.plugins;return[+new Date,s,n,s.screen,b(r)]}}():t,3),a),p=new f(a),x=function(){for(var t=p.g(6),e=l,n=0;t<u;)t=(t+n)*c,e*=c,n=p.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|p.g(4)},x.quick=function(){return p.g(4)/4294967296},x.double=x,y(b(p.S),r),(e.pass||n||function(t,e,n,a){return a&&(a.S&&m(a,p),t.state=function(){return m(p,{})}),n?(o.random=t,e):t})(x,d,"global"in e?e.global:this==o,e.state)}function f(t){var e,n=t.length,a=this,s=0,r=a.i=a.j=0,o=a.S=[];for(n||(t=[n++]);s<c;)o[s]=s++;for(s=0;s<c;s++)o[s]=o[r=d&r+t[s%n]+(e=o[s])],o[r]=e;(a.g=function(t){for(var e,n=0,s=a.i,r=a.j,o=a.S;t--;)e=o[s=d&s+1],n=n*c+o[d&(o[s]=o[r=d&r+e])+(o[r]=e)];return a.i=s,a.j=r,n})(c)}function m(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function g(t,e){var n,a=[],s=typeof t;if(e&&"object"==s)for(n in t)try{a.push(g(t[n],e-1))}catch(r){}return a.length?a:"string"==s?t:t+"\0"}function y(t,e){for(var n,a=t+"",s=0;s<a.length;)e[d&s]=d&(n^=19*e[d&s])+a.charCodeAt(s++);return b(e)}function b(t){return String.fromCharCode.apply(0,t)}if(y(o.random(),r),t.exports){t.exports=p;try{i=n(1234)}catch(x){}}else void 0===(a=function(){return p}.call(e,n,e,t))||(t.exports=a)}("undefined"!==typeof self?self:this,[],Math)},3236:(t,e,n)=>{"use strict";n.r(e),n.d(e,{Abs:()=>te,Acos:()=>ee,Acosh:()=>ne,AdadeltaOptimizer:()=>Zi,AdagradOptimizer:()=>Qi,AdamOptimizer:()=>ec,AdamaxOptimizer:()=>ic,Add:()=>ae,AddN:()=>se,All:()=>re,Any:()=>oe,ArgMax:()=>ie,ArgMin:()=>ce,Asin:()=>le,Asinh:()=>ue,Atan:()=>he,Atan2:()=>pe,Atanh:()=>de,AvgPool:()=>fe,AvgPool3D:()=>ge,AvgPool3DGrad:()=>ye,AvgPoolGrad:()=>me,BatchMatMul:()=>be,BatchToSpaceND:()=>xe,Bincount:()=>we,BitwiseAnd:()=>ve,BroadcastArgs:()=>Ie,BroadcastTo:()=>ke,Callback:()=>NS,CallbackList:()=>ew,Cast:()=>Ne,Ceil:()=>Se,ClipByValue:()=>Te,Complex:()=>Ce,ComplexAbs:()=>Ee,Concat:()=>Ae,Conv2D:()=>Re,Conv2DBackpropFilter:()=>Fe,Conv2DBackpropInput:()=>De,Conv3D:()=>_e,Conv3DBackpropFilterV2:()=>Oe,Conv3DBackpropInputV2:()=>Me,Cos:()=>Le,Cosh:()=>ze,CropAndResize:()=>We,Cumprod:()=>Pe,Cumsum:()=>Be,CustomCallback:()=>sw,DataStorage:()=>Y,DenseBincount:()=>Ve,DepthToSpace:()=>Ue,DepthwiseConv2dNative:()=>Ge,DepthwiseConv2dNativeBackpropFilter:()=>He,DepthwiseConv2dNativeBackpropInput:()=>je,Diag:()=>qe,Dilation2D:()=>Ke,Dilation2DBackpropFilter:()=>Ye,Dilation2DBackpropInput:()=>Xe,Draw:()=>Ze,ENV:()=>Jt,EarlyStopping:()=>CS,Einsum:()=>Qe,Elu:()=>$e,EluGrad:()=>tn,Environment:()=>Kt,Equal:()=>nn,Erf:()=>en,Exp:()=>an,ExpandDims:()=>sn,Expm1:()=>rn,FFT:()=>on,Fill:()=>cn,FlipLeftRight:()=>ln,Floor:()=>un,FloorDiv:()=>hn,FromPixels:()=>fs,FusedBatchNorm:()=>dn,FusedConv2D:()=>ys,FusedDepthwiseConv2D:()=>bs,GPGPUContext:()=>QL,GatherNd:()=>fn,GatherV2:()=>pn,GraphModel:()=>YT,Greater:()=>mn,GreaterEqual:()=>gn,History:()=>aw,IFFT:()=>bn,Identity:()=>yn,Imag:()=>xn,InputSpec:()=>ox,IsFinite:()=>wn,IsInf:()=>vn,IsNan:()=>kn,KernelBackend:()=>Z,LRN:()=>Mn,LRNGrad:()=>Ln,LayerVariable:()=>ax,LayersModel:()=>lv,LeakyRelu:()=>In,Less:()=>Nn,LessEqual:()=>Sn,LinSpace:()=>Tn,Log:()=>Cn,Log1p:()=>En,LogSoftmax:()=>_n,LogicalAnd:()=>An,LogicalNot:()=>Rn,LogicalOr:()=>Fn,LogicalXor:()=>Dn,LowerBound:()=>On,MathBackendCPU:()=>hE,MathBackendWebGL:()=>pP,MatrixBandPart:()=>zn,Max:()=>Pn,MaxPool:()=>Wn,MaxPool3D:()=>Un,MaxPool3DGrad:()=>Gn,MaxPoolGrad:()=>Vn,MaxPoolWithArgmax:()=>Hn,Maximum:()=>Bn,Mean:()=>jn,Min:()=>qn,Minimum:()=>Kn,MirrorPad:()=>Xn,Mod:()=>Yn,MomentumOptimizer:()=>lc,Multinomial:()=>Zn,Multiply:()=>Jn,Neg:()=>Qn,NonMaxSuppressionV3:()=>ta,NonMaxSuppressionV4:()=>ea,NonMaxSuppressionV5:()=>na,NotEqual:()=>$n,OP_SCOPE_SUFFIX:()=>Kr,OneHot:()=>sa,OnesLike:()=>aa,Optimizer:()=>Yi,OptimizerConstructors:()=>_l,Pack:()=>ra,PadV2:()=>oa,Pool:()=>ia,Pow:()=>ca,Prelu:()=>la,Prod:()=>ua,RMSPropOptimizer:()=>uc,RNN:()=>xk,RaggedGather:()=>ha,RaggedRange:()=>da,RaggedTensorToTensor:()=>pa,Range:()=>fa,Rank:()=>gr,Real:()=>ma,RealDiv:()=>Je,Reciprocal:()=>ga,Reduction:()=>vf,Relu:()=>ya,Relu6:()=>Ia,Reshape:()=>ba,ResizeBilinear:()=>va,ResizeBilinearGrad:()=>ka,ResizeNearestNeighbor:()=>xa,ResizeNearestNeighborGrad:()=>wa,Reverse:()=>Na,RotateWithOffset:()=>ms,Round:()=>Sa,Rsqrt:()=>Ta,SGDOptimizer:()=>cc,ScatterNd:()=>Ca,SearchSorted:()=>Aa,Select:()=>Ra,Selu:()=>Fa,Sequential:()=>pv,Sigmoid:()=>La,Sign:()=>Ma,Sin:()=>_a,Sinh:()=>Oa,Slice:()=>Da,Softmax:()=>Ua,Softplus:()=>za,SpaceToBatchND:()=>Wa,SparseFillEmptyRows:()=>Ga,SparseReshape:()=>Ha,SparseSegmentMean:()=>ja,SparseSegmentSum:()=>qa,SparseToDense:()=>Ka,SplitV:()=>Va,Sqrt:()=>Pa,Square:()=>Ya,SquaredDifference:()=>Xa,StaticRegexReplace:()=>Za,Step:()=>ps,StridedSlice:()=>Ja,StringNGrams:()=>Qa,StringSplit:()=>$a,StringToHashBucketFast:()=>ts,Sub:()=>es,Sum:()=>Ba,SymbolicTensor:()=>ix,Tan:()=>ns,Tanh:()=>as,Tensor:()=>pr,TensorBuffer:()=>lr,TensorScatterUpdate:()=>Ea,Tile:()=>ss,TopK:()=>rs,Transform:()=>os,Transpose:()=>is,Unique:()=>cs,Unpack:()=>ls,UnsortedSegmentSum:()=>us,UpperBound:()=>hs,Variable:()=>mr,ZerosLike:()=>ds,_FusedMatMul:()=>gs,abs:()=>nc,acos:()=>Ol,acosh:()=>Ml,add:()=>Ei,addN:()=>Ll,all:()=>zl,any:()=>Pl,argMax:()=>Bl,argMin:()=>Wl,asin:()=>Vl,asinh:()=>Ul,atan:()=>Gl,atan2:()=>Hl,atanh:()=>jl,avgPool:()=>cu,avgPool3d:()=>lu,backend:()=>wo,backend_util:()=>y,basicLSTMCell:()=>fu,batchNorm:()=>gu,batchNorm2d:()=>yu,batchNorm3d:()=>bu,batchNorm4d:()=>xu,batchToSpaceND:()=>mu,bincount:()=>wu,bitwiseAnd:()=>vu,booleanMaskAsync:()=>kp,broadcastArgs:()=>ku,broadcastTo:()=>Iu,broadcast_util:()=>i,browser:()=>u,buffer:()=>Ni,callbacks:()=>ES,cast:()=>Si,ceil:()=>Nu,clipByValue:()=>Su,clone:()=>Ti,complex:()=>Yr,concat:()=>uu,concat1d:()=>Tu,concat2d:()=>Cu,concat3d:()=>Eu,concat4d:()=>Au,constraints:()=>x,conv1d:()=>Fu,conv2d:()=>Ru,conv2dTranspose:()=>_u,conv3d:()=>Ou,conv3dTranspose:()=>Lu,copyRegisteredKernels:()=>Rs,cos:()=>zu,cosh:()=>Pu,cosineWindow:()=>Ap,cumprod:()=>Bu,cumsum:()=>Wu,customGrad:()=>Wi,data:()=>j,denseBincount:()=>Vu,deprecationWarn:()=>ao,depthToSpace:()=>Uu,depthwiseConv2d:()=>Gu,deregisterOp:()=>OS,device_util:()=>r,diag:()=>Hu,dilation2d:()=>ju,disableDeprecationWarnings:()=>no,dispose:()=>lo,disposeVariables:()=>so,div:()=>Ri,divNoNan:()=>Xu,dot:()=>Yu,dropout:()=>Cp,einsum:()=>Zu,elu:()=>Ju,enableDebugMode:()=>eo,enableProdMode:()=>to,enclosingPowerOfTwo:()=>Ep,engine:()=>ro,ensureShape:()=>Qu,env:()=>Yt,equal:()=>qu,erf:()=>$u,euclideanNorm:()=>ph,exp:()=>fh,expandDims:()=>mh,expm1:()=>gh,eye:()=>bh,fft:()=>Zd,fill:()=>Ji,findBackend:()=>yo,findBackendFactory:()=>bo,floor:()=>xh,floorDiv:()=>Ai,forceHalfFloat:()=>mP,fused:()=>m,gather:()=>wh,gatherND:()=>Tp,gather_util:()=>h,getBackend:()=>mo,getGradient:()=>Ns,getKernel:()=>Is,getKernelsForBackend:()=>Ss,gpgpu_util:()=>X,grad:()=>Mi,grads:()=>Li,greater:()=>vh,greaterEqual:()=>kh,ifft:()=>Jd,imag:()=>Oc,image:()=>Vf,inTopKAsync:()=>Rp,initializers:()=>w,input:()=>gv,io:()=>c,irfft:()=>Qd,isFinite:()=>Ih,isInf:()=>Nh,isNaN:()=>Sh,keep:()=>uo,kernel_impls:()=>b,layers:()=>v,leakyRelu:()=>Th,less:()=>Ch,lessEqual:()=>Eh,linalg:()=>Uf,linspace:()=>Ah,loadGraphModel:()=>ZT,loadGraphModelSync:()=>JT,loadLayersModel:()=>dv,localResponseNormalization:()=>Rh,log:()=>Fh,log1p:()=>Dh,logSigmoid:()=>Oh,logSoftmax:()=>Mh,logSumExp:()=>Lh,logicalAnd:()=>zh,logicalNot:()=>Ph,logicalOr:()=>Bh,logicalXor:()=>Wh,losses:()=>Gf,lowerBound:()=>Gh,matMul:()=>Dc,math:()=>l,max:()=>ch,maxPool:()=>Hh,maxPool3d:()=>jh,maxPoolWithArgmax:()=>qh,maximum:()=>oc,mean:()=>Kh,memory:()=>oo,meshgrid:()=>Zh,metrics:()=>k,min:()=>lh,minimum:()=>Jh,mirrorPad:()=>Qh,mod:()=>$h,model:()=>fv,models:()=>I,moments:()=>td,movingAverage:()=>Ip,mul:()=>Fi,multiRNNCell:()=>ed,multinomial:()=>nd,neg:()=>Mc,nextFrame:()=>Xf,norm:()=>dh,notEqual:()=>ad,oneHot:()=>_c,ones:()=>Yh,onesLike:()=>sd,op:()=>Xr,outerProduct:()=>rd,pad:()=>od,pad1d:()=>id,pad2d:()=>cd,pad3d:()=>ld,pad4d:()=>ud,pool:()=>dd,pow:()=>$i,prelu:()=>pd,print:()=>Ci,prod:()=>fd,profile:()=>io,raggedGather:()=>md,raggedRange:()=>gd,raggedTensorToTensor:()=>yd,rand:()=>bd,randomGamma:()=>Id,randomNormal:()=>Nd,randomStandardNormal:()=>Sd,randomUniform:()=>Td,randomUniformInt:()=>Cd,range:()=>Ed,ready:()=>fo,real:()=>Lc,reciprocal:()=>Ad,registerBackend:()=>xo,registerCallbackConstructor:()=>yv,registerGradient:()=>Cs,registerKernel:()=>Ts,registerOp:()=>DS,regularizers:()=>N,relu:()=>Rd,relu6:()=>Fd,removeBackend:()=>go,reshape:()=>iu,reverse:()=>Dd,reverse1d:()=>_d,reverse2d:()=>Od,reverse3d:()=>Md,reverse4d:()=>Ld,rfft:()=>tp,round:()=>zd,rsqrt:()=>Pd,scalar:()=>Ui,scatterND:()=>Np,scatter_util:()=>d,searchSorted:()=>Uh,selu:()=>Bd,separableConv2d:()=>Wd,sequential:()=>mv,serialization:()=>o,setBackend:()=>po,setPlatform:()=>vo,setWebGLContext:()=>qO,setdiff1dAsync:()=>Vd,shared:()=>q,sigmoid:()=>hu,sign:()=>Ud,signal:()=>Wf,sin:()=>Gd,sinh:()=>Hd,slice:()=>du,slice1d:()=>jd,slice2d:()=>qd,slice3d:()=>Kd,slice4d:()=>Xd,slice_util:()=>p,softmax:()=>Yd,softplus:()=>_h,spaceToBatchND:()=>hd,sparse:()=>Hf,sparseToDense:()=>Sp,spectral:()=>Bf,split:()=>$d,sqrt:()=>Di,square:()=>_i,squaredDifference:()=>ep,squeeze:()=>np,stack:()=>ap,step:()=>sp,stridedSlice:()=>rp,string:()=>jf,sub:()=>tc,sum:()=>uh,sumOutType:()=>Ir,tan:()=>op,tanh:()=>pu,tensor:()=>Jr,tensor1d:()=>ip,tensor2d:()=>cp,tensor3d:()=>Bc,tensor4d:()=>lp,tensor5d:()=>up,tensor6d:()=>hp,tensorScatterUpdate:()=>dp,tensor_util:()=>s,test_util:()=>f,tidy:()=>co,tile:()=>yh,time:()=>ho,topk:()=>pp,train:()=>qf,transpose:()=>zc,truncatedNormal:()=>fp,unique:()=>mp,unregisterGradient:()=>As,unregisterKernel:()=>Es,unsortedSegmentSum:()=>gp,unstack:()=>yp,upcastType:()=>kr,upperBound:()=>bp,util:()=>a,valueAndGrad:()=>zi,valueAndGrads:()=>Pi,variable:()=>xp,variableGrads:()=>Bi,version:()=>lj,version_converter:()=>QT,version_core:()=>Dl,version_cpu:()=>PR,version_layers:()=>Gw,version_webgl:()=>fP,webgl:()=>gP,webgl_util:()=>K,where:()=>Ku,whereAsync:()=>vp,zeros:()=>Xh,zerosLike:()=>Oi});var a={};n.r(a),n.d(a,{arraysEqual:()=>dt,arraysEqualWithNull:()=>ht,assert:()=>ot,assertNonNegativeIntegerDimensions:()=>Ut,assertNonNull:()=>ct,assertShapesMatch:()=>it,bytesFromStringArray:()=>Et,bytesPerElement:()=>Ct,checkConversionForErrors:()=>Nt,clamp:()=>tt,computeStrides:()=>Mt,convertBackendValuesAndArrayBuffer:()=>Pt,createScalarValue:()=>Ks,createShuffledIndices:()=>gt,decodeString:()=>Qs,distSquared:()=>rt,encodeString:()=>Js,fetch:()=>Zs,fingerPrint64:()=>qs,flatten:()=>tr,getArrayFromDType:()=>It,getTypedArrayFromDType:()=>kt,hasEncodingLoss:()=>Tt,hexToLong:()=>Ms,indexToLoc:()=>Ht,inferDtype:()=>Dt,inferFromImplicitShape:()=>xt,isBoolean:()=>Rt,isFunction:()=>_t,isInt:()=>pt,isNumber:()=>Ft,isPromise:()=>jt,isScalarShape:()=>ut,isString:()=>At,isTypedArray:()=>$s,isValidDtype:()=>St,locToIndex:()=>Gt,makeOnesTypedArray:()=>Bt,makeZerosNestedTypedArray:()=>Vt,makeZerosTypedArray:()=>Wt,nearestDivisor:()=>Ot,nearestLargerEven:()=>et,now:()=>Ys,parseAxisParam:()=>wt,randUniform:()=>st,repeatedTry:()=>bt,rightPad:()=>yt,shuffle:()=>Q,shuffleCombo:()=>$,sizeFromShape:()=>lt,sizeToSquarishShape:()=>mt,squeezeShape:()=>vt,sum:()=>at,swap:()=>nt,tanh:()=>ft,toNestedArray:()=>zt,toTypedArray:()=>Xs});var s={};n.r(s),n.d(s,{assertTypesMatch:()=>Cr,getTensorsInContainer:()=>Ar,isTensorInList:()=>Er,makeTypesMatch:()=>Tr});var r={};n.r(r),n.d(r,{isBrowser:()=>Wr,isMobile:()=>Br,mockIsMobile:()=>Pr});var o={};n.r(o),n.d(o,{Serializable:()=>ji,SerializationMap:()=>qi,getRegisteredName:()=>Xi,registerClass:()=>Ki});var i={};n.r(i),n.d(i,{assertAndGetBroadcastShape:()=>rc,getBroadcastDims:()=>ac,getReductionAxes:()=>sc});var c={};n.r(c),n.d(c,{CompositeArrayBuffer:()=>$r,browserFiles:()=>mc,browserHTTPRequest:()=>Nc,concatenateArrayBuffers:()=>_o,copyModel:()=>bi,decodeWeights:()=>No,decodeWeightsStream:()=>Ao,encodeWeights:()=>Io,fromMemory:()=>Ec,fromMemorySync:()=>Ac,getLoadHandlers:()=>Ho,getModelArtifactsForJSON:()=>zo,getModelArtifactsForJSONSync:()=>Lo,getModelArtifactsInfoForJSON:()=>Po,getSaveHandlers:()=>Go,getWeightSpecs:()=>Bo,http:()=>Ic,isHTTPScheme:()=>vc,listModels:()=>gi,loadWeights:()=>bc,moveModel:()=>xi,registerLoadRouter:()=>Uo,registerSaveRouter:()=>Vo,removeModel:()=>yi,weightsLoaderFactory:()=>xc,withSaveHandler:()=>Rc,withSaveHandlerSync:()=>Fc});var l={};n.r(l),n.d(l,{confusionMatrix:()=>Pc});var u={};n.r(u),n.d(u,{draw:()=>Kc,fromPixels:()=>Xc,fromPixelsAsync:()=>Hc,toPixels:()=>qc});var h={};n.r(h),n.d(h,{prepareAndValidate:()=>Yc});var d={};n.r(d),n.d(d,{calculateShapes:()=>Qc,validateInput:()=>Jc,validateUpdateShape:()=>Zc});var p={};n.r(p),n.d(p,{assertParamsValid:()=>el,computeFlatOffset:()=>fl,computeOutShape:()=>al,getNormalizedAxes:()=>il,isSliceContinous:()=>pl,maskToAxes:()=>nl,parseSliceParams:()=>ml,sliceInfo:()=>gl,startForAxis:()=>hl,startIndicesWithElidedDims:()=>cl,stopForAxis:()=>dl,stopIndicesWithElidedDims:()=>ll,stridesForAxis:()=>ul,stridesWithElidedDims:()=>sl});var f={};n.r(f),n.d(f,{TEST_EPSILON_FLOAT16:()=>xl,createVideoElement:()=>Rl,encodeStrings:()=>Al,expectArrayBuffersEqual:()=>El,expectArraysClose:()=>wl,expectArraysEqual:()=>Nl,expectNumbersClose:()=>Sl,expectPromiseToFail:()=>Il,expectValuesInRange:()=>Cl,play:()=>Fl,testEpsilon:()=>vl});var m={};n.r(m),n.d(m,{conv2d:()=>Lp,depthwiseConv2d:()=>Bp,matMul:()=>Wp});var g={};n.r(g),n.d(g,{collectGatherOpShapeInfo:()=>Jm,computeOutShape:()=>Zm,segOpComputeOptimalWindowSize:()=>Ym});var y={};n.r(y),n.d(y,{ERF_A1:()=>pm,ERF_A2:()=>fm,ERF_A3:()=>mm,ERF_A4:()=>gm,ERF_A5:()=>ym,ERF_P:()=>dm,PARALLELIZE_THRESHOLD:()=>nm,RowPartitionType:()=>Jf,SELU_SCALE:()=>hm,SELU_SCALEALPHA:()=>um,applyActivation:()=>Op,assertAndGetBroadcastShape:()=>rc,assertAxesAreInnerMostDims:()=>sh,assertParamsConsistent:()=>Yf,assignToTypedArray:()=>Im,axesAreInnerMostDims:()=>th,calculateShapes:()=>Qc,checkEinsumDimSizes:()=>Dm,checkPadOnDimRoundingMode:()=>ou,combineLocations:()=>eh,combineRaggedTensorToTensorShapes:()=>Qf,complexWithEvenIndex:()=>wm,complexWithOddIndex:()=>vm,computeConv2DInfo:()=>Yl,computeConv3DInfo:()=>Zl,computeDefaultPad:()=>Jl,computeDilation2DInfo:()=>ql,computeOptimalWindowSize:()=>am,computeOutAndReduceShapes:()=>nh,computeOutShape:()=>Zf,computePool2DInfo:()=>Kl,computePool3DInfo:()=>Xl,convertConv2DDataFormat:()=>ru,decodeEinsumEquation:()=>Rm,eitherStridesOrDilationsAreOne:()=>au,expandShapeToKeepDim:()=>ah,exponent:()=>Sm,exponents:()=>Nm,fromStringArrayToUint8:()=>$m,fromUint8ToStringArray:()=>Qm,getAxesPermutation:()=>rh,getBroadcastDims:()=>ac,getComplexWithIndex:()=>km,getEinsumComputePath:()=>_m,getEinsumPermutation:()=>Fm,getFusedBiasGradient:()=>_p,getFusedDyActivation:()=>Dp,getImageCenter:()=>sm,getInnerMostAxes:()=>ih,getPermuted:()=>om,getRaggedRank:()=>tm,getReductionAxes:()=>sc,getReshaped:()=>rm,getReshapedPermuted:()=>im,getRowPartitionTypesHelper:()=>$f,getSliceBeginCoords:()=>cm,getSliceSize:()=>lm,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>zm,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Pm,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Bm,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Um,getSparseReshapeInputOutputMismatchErrorMessage:()=>Hm,getSparseReshapeInputOutputMultipleErrorMessage:()=>Gm,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Wm,getSparseReshapeNegativeOutputDimErrorMessage:()=>Vm,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>Xm,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>jm,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>qm,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>Km,getUndoAxesPermutation:()=>oh,isIdentityPermutation:()=>Om,log:()=>ws,mergeRealAndImagArrays:()=>bm,prepareAndValidate:()=>Yc,prepareSplitSize:()=>Lm,segment_util:()=>g,shouldFuse:()=>Mp,slice_util:()=>p,splitRealAndImagArrays:()=>xm,stridesOrDilationsArePositive:()=>su,tupleValuesAreOne:()=>nu,upcastType:()=>kr,validateDefaultValueShape:()=>em,validateInput:()=>Jc,validateUpdateShape:()=>Zc,warn:()=>xs});var b={};n.r(b),n.d(b,{nonMaxSuppressionV3Impl:()=>tf,nonMaxSuppressionV4Impl:()=>ef,nonMaxSuppressionV5Impl:()=>nf,whereImpl:()=>wp});var x={};n.r(x),n.d(x,{maxNorm:()=>Dx,minMaxNorm:()=>Mx,nonNeg:()=>Ox,unitNorm:()=>_x});var w={};n.r(w),n.d(w,{constant:()=>Px,glorotNormal:()=>jx,glorotUniform:()=>Hx,heNormal:()=>qx,heUniform:()=>Kx,identity:()=>Ux,leCunNormal:()=>Xx,leCunUniform:()=>Yx,ones:()=>zx,orthogonal:()=>Zx,randomNormal:()=>Wx,randomUniform:()=>Bx,truncatedNormal:()=>Vx,varianceScaling:()=>Gx,zeros:()=>Lx});var v={};n.r(v),n.d(v,{Layer:()=>hx,RNN:()=>xk,RNNCell:()=>wk,activation:()=>$I,add:()=>cN,alphaDropout:()=>QN,average:()=>lN,averagePooling1d:()=>bN,averagePooling2d:()=>vN,averagePooling3d:()=>NN,avgPool1d:()=>xN,avgPool2d:()=>kN,avgPool3d:()=>SN,avgPooling1d:()=>wN,avgPooling2d:()=>IN,avgPooling3d:()=>TN,batchNormalization:()=>mN,bidirectional:()=>HN,categoryEncoding:()=>aS,centerCrop:()=>eS,concatenate:()=>uN,conv1d:()=>HI,conv2d:()=>jI,conv2dTranspose:()=>qI,conv3d:()=>KI,conv3dTranspose:()=>XI,convLstm2d:()=>WN,convLstm2dCell:()=>VN,cropping2D:()=>ZI,dense:()=>tN,depthwiseConv2d:()=>QI,dot:()=>fN,dropout:()=>eN,elu:()=>PI,embedding:()=>iN,flatten:()=>aN,gaussianDropout:()=>JN,gaussianNoise:()=>ZN,globalAveragePooling1d:()=>CN,globalAveragePooling2d:()=>EN,globalMaxPool1d:()=>qN,globalMaxPool2d:()=>KN,globalMaxPooling1d:()=>AN,globalMaxPooling2d:()=>RN,gru:()=>ON,gruCell:()=>MN,input:()=>gv,inputLayer:()=>zI,layerNormalization:()=>gN,leakyReLU:()=>WI,lstm:()=>LN,lstmCell:()=>zN,masking:()=>$N,maxPool1d:()=>XN,maxPool2d:()=>YN,maxPooling1d:()=>FN,maxPooling2d:()=>DN,maxPooling3d:()=>_N,maximum:()=>hN,minimum:()=>dN,multiply:()=>pN,permute:()=>oN,prelu:()=>VI,randomWidth:()=>sS,reLU:()=>BI,repeatVector:()=>sN,rescaling:()=>tS,reshape:()=>rN,resizing:()=>nS,rnn:()=>UN,separableConv2d:()=>YI,simpleRNN:()=>PN,simpleRNNCell:()=>BN,softmax:()=>UI,spatialDropout1d:()=>nN,stackedRNNCells:()=>GN,thresholdedReLU:()=>GI,timeDistributed:()=>jN,upSampling2d:()=>JI,zeroPadding2d:()=>yN});var k={};n.r(k),n.d(k,{MAPE:()=>mS,MSE:()=>bS,binaryAccuracy:()=>rS,binaryCrossentropy:()=>oS,categoricalAccuracy:()=>cS,categoricalCrossentropy:()=>lS,cosineProximity:()=>dS,mape:()=>gS,meanAbsoluteError:()=>pS,meanAbsolutePercentageError:()=>fS,meanSquaredError:()=>yS,mse:()=>xS,precision:()=>uS,r2Score:()=>wS,recall:()=>hS,sparseCategoricalAccuracy:()=>iS});var I={};n.r(I),n.d(I,{modelFromJSON:()=>hv});var N={};n.r(N),n.d(N,{l1:()=>kS,l1l2:()=>vS,l2:()=>IS});var S={};n.r(S),n.d(S,{json:()=>GS});var T={};n.r(T),n.d(T,{json:()=>HS});var C={};n.r(C),n.d(C,{json:()=>jS});var E={};n.r(E),n.d(E,{json:()=>qS});var A={};n.r(A),n.d(A,{json:()=>KS});var R={};n.r(R),n.d(R,{json:()=>XS});var F={};n.r(F),n.d(F,{json:()=>YS});var D={};n.r(D),n.d(D,{json:()=>ZS});var _={};n.r(_),n.d(_,{json:()=>JS});var O={};n.r(O),n.d(O,{json:()=>QS});var M={};n.r(M),n.d(M,{json:()=>$S});var L={};n.r(L),n.d(L,{json:()=>tT});var z={};n.r(z),n.d(z,{json:()=>eT});var P={};n.r(P),n.d(P,{json:()=>nT});var B={};n.r(B),n.d(B,{json:()=>aT});var W={};n.r(W),n.d(W,{json:()=>sT});var V={};n.r(V),n.d(V,{json:()=>rT});var U={};n.r(U),n.d(U,{json:()=>oT});var G={};n.r(G),n.d(G,{json:()=>iT});var H={};n.r(H),n.d(H,{OP_SCOPE_SUFFIX:()=>Kr,abs:()=>nc,acos:()=>Ol,acosh:()=>Ml,add:()=>Ei,addN:()=>Ll,all:()=>zl,any:()=>Pl,argMax:()=>Bl,argMin:()=>Wl,asin:()=>Vl,asinh:()=>Ul,atan:()=>Gl,atan2:()=>Hl,atanh:()=>jl,avgPool:()=>cu,avgPool3d:()=>lu,basicLSTMCell:()=>fu,batchNorm:()=>gu,batchNorm2d:()=>yu,batchNorm3d:()=>bu,batchNorm4d:()=>xu,batchToSpaceND:()=>mu,bincount:()=>wu,bitwiseAnd:()=>vu,booleanMaskAsync:()=>kp,broadcastArgs:()=>ku,broadcastTo:()=>Iu,buffer:()=>Ni,cast:()=>Si,ceil:()=>Nu,clipByValue:()=>Su,clone:()=>Ti,complex:()=>Yr,concat:()=>uu,concat1d:()=>Tu,concat2d:()=>Cu,concat3d:()=>Eu,concat4d:()=>Au,conv1d:()=>Fu,conv2d:()=>Ru,conv2dTranspose:()=>_u,conv3d:()=>Ou,conv3dTranspose:()=>Lu,cos:()=>zu,cosh:()=>Pu,cosineWindow:()=>Ap,cumprod:()=>Bu,cumsum:()=>Wu,denseBincount:()=>Vu,depthToSpace:()=>Uu,depthwiseConv2d:()=>Gu,diag:()=>Hu,dilation2d:()=>ju,div:()=>Ri,divNoNan:()=>Xu,dot:()=>Yu,dropout:()=>Cp,einsum:()=>Zu,elu:()=>Ju,enclosingPowerOfTwo:()=>Ep,ensureShape:()=>Qu,equal:()=>qu,erf:()=>$u,euclideanNorm:()=>ph,exp:()=>fh,expandDims:()=>mh,expm1:()=>gh,eye:()=>bh,fft:()=>Zd,fill:()=>Ji,floor:()=>xh,floorDiv:()=>Ai,fused:()=>m,gather:()=>wh,gatherND:()=>Tp,greater:()=>vh,greaterEqual:()=>kh,ifft:()=>Jd,imag:()=>Oc,image:()=>Vf,inTopKAsync:()=>Rp,irfft:()=>Qd,isFinite:()=>Ih,isInf:()=>Nh,isNaN:()=>Sh,leakyRelu:()=>Th,less:()=>Ch,lessEqual:()=>Eh,linalg:()=>Uf,linspace:()=>Ah,localResponseNormalization:()=>Rh,log:()=>Fh,log1p:()=>Dh,logSigmoid:()=>Oh,logSoftmax:()=>Mh,logSumExp:()=>Lh,logicalAnd:()=>zh,logicalNot:()=>Ph,logicalOr:()=>Bh,logicalXor:()=>Wh,losses:()=>Gf,lowerBound:()=>Gh,matMul:()=>Dc,max:()=>ch,maxPool:()=>Hh,maxPool3d:()=>jh,maxPoolWithArgmax:()=>qh,maximum:()=>oc,mean:()=>Kh,meshgrid:()=>Zh,min:()=>lh,minimum:()=>Jh,mirrorPad:()=>Qh,mod:()=>$h,moments:()=>td,movingAverage:()=>Ip,mul:()=>Fi,multiRNNCell:()=>ed,multinomial:()=>nd,neg:()=>Mc,norm:()=>dh,notEqual:()=>ad,oneHot:()=>_c,ones:()=>Yh,onesLike:()=>sd,op:()=>Xr,outerProduct:()=>rd,pad:()=>od,pad1d:()=>id,pad2d:()=>cd,pad3d:()=>ld,pad4d:()=>ud,pool:()=>dd,pow:()=>$i,prelu:()=>pd,print:()=>Ci,prod:()=>fd,raggedGather:()=>md,raggedRange:()=>gd,raggedTensorToTensor:()=>yd,rand:()=>bd,randomGamma:()=>Id,randomNormal:()=>Nd,randomStandardNormal:()=>Sd,randomUniform:()=>Td,randomUniformInt:()=>Cd,range:()=>Ed,real:()=>Lc,reciprocal:()=>Ad,relu:()=>Rd,relu6:()=>Fd,reshape:()=>iu,reverse:()=>Dd,reverse1d:()=>_d,reverse2d:()=>Od,reverse3d:()=>Md,reverse4d:()=>Ld,rfft:()=>tp,round:()=>zd,rsqrt:()=>Pd,scalar:()=>Ui,scatterND:()=>Np,searchSorted:()=>Uh,selu:()=>Bd,separableConv2d:()=>Wd,setdiff1dAsync:()=>Vd,sigmoid:()=>hu,sign:()=>Ud,signal:()=>Wf,sin:()=>Gd,sinh:()=>Hd,slice:()=>du,slice1d:()=>jd,slice2d:()=>qd,slice3d:()=>Kd,slice4d:()=>Xd,softmax:()=>Yd,softplus:()=>_h,spaceToBatchND:()=>hd,sparse:()=>Hf,sparseToDense:()=>Sp,spectral:()=>Bf,split:()=>$d,sqrt:()=>Di,square:()=>_i,squaredDifference:()=>ep,squeeze:()=>np,stack:()=>ap,step:()=>sp,stridedSlice:()=>rp,string:()=>jf,sub:()=>tc,sum:()=>uh,tan:()=>op,tanh:()=>pu,tensor:()=>Jr,tensor1d:()=>ip,tensor2d:()=>cp,tensor3d:()=>Bc,tensor4d:()=>lp,tensor5d:()=>up,tensor6d:()=>hp,tensorScatterUpdate:()=>dp,tile:()=>yh,topk:()=>pp,transpose:()=>zc,truncatedNormal:()=>fp,unique:()=>mp,unsortedSegmentSum:()=>gp,unstack:()=>yp,upperBound:()=>bp,variable:()=>xp,where:()=>Ku,whereAsync:()=>vp,zeros:()=>Xh,zerosLike:()=>Oi});var j={};n.r(j),n.d(j,{CSVDataset:()=>UC,Dataset:()=>RC,FileDataSource:()=>eE,TextLineDataset:()=>MC,URLDataSource:()=>nE,array:()=>DC,csv:()=>aE,func:()=>sE,generator:()=>rE,microphone:()=>iE,version_data:()=>cE,webcam:()=>oE,zip:()=>_C});var q={};n.r(q),n.d(q,{addImpl:()=>CE,bincountImpl:()=>FE,bincountReduceImpl:()=>DE,bitwiseAndImpl:()=>_E,castImpl:()=>kE,ceilImpl:()=>BE,concatImpl:()=>UE,equalImpl:()=>GE,expImpl:()=>qE,expm1Impl:()=>YE,floorDivImpl:()=>eA,floorImpl:()=>QE,gatherNdImpl:()=>sA,gatherV2Impl:()=>rA,greaterEqualImpl:()=>lA,greaterImpl:()=>oA,lessEqualImpl:()=>mA,lessImpl:()=>dA,linSpaceImpl:()=>bA,logImpl:()=>xA,maxImpl:()=>kA,maximumImpl:()=>IA,minimumImpl:()=>TA,multiplyImpl:()=>AA,negImpl:()=>_A,notEqualImpl:()=>MA,prodImpl:()=>VA,raggedGatherImpl:()=>qA,raggedRangeImpl:()=>XA,raggedTensorToTensorImpl:()=>$A,rangeImpl:()=>tR,rsqrtImpl:()=>eR,scatterImpl:()=>sR,sigmoidImpl:()=>rR,simpleAbsImpl:()=>dE,sliceImpl:()=>cR,sparseFillEmptyRowsImpl:()=>hR,sparseReshapeImpl:()=>dR,sparseSegmentReductionImpl:()=>pR,sqrtImpl:()=>fR,squaredDifferenceImpl:()=>yR,staticRegexReplaceImpl:()=>wR,stridedSliceImpl:()=>IR,stringNGramsImpl:()=>SR,stringSplitImpl:()=>CR,stringToHashBucketFastImpl:()=>ER,subImpl:()=>AR,tileImpl:()=>_R,topKImpl:()=>LR,transposeImpl:()=>PA,uniqueImpl:()=>zR});var K={};n.r(K),n.d(K,{assertNotComplex:()=>QM,bindCanvasToFramebuffer:()=>TM,bindColorTextureToFramebuffer:()=>CM,bindTextureToProgramUniformSampler:()=>SM,bindTextureUnit:()=>vM,bindVertexBufferToProgramAttribute:()=>wM,callAndCheck:()=>eM,canBeRepresented:()=>sM,createFragmentShader:()=>cM,createFramebuffer:()=>xM,createProgram:()=>hM,createStaticIndexBuffer:()=>mM,createStaticVertexBuffer:()=>fM,createTexture:()=>yM,createVertexShader:()=>iM,getBatchDim:()=>_M,getExtensionOrThrow:()=>oM,getFramebufferErrorMessage:()=>RM,getMaxTexturesInShader:()=>HM,getNumChannels:()=>gM,getProgramUniformLocation:()=>NM,getProgramUniformLocationOrThrow:()=>IM,getRowsCols:()=>OM,getShapeAs3D:()=>MM,getTextureShapeFromLogicalShape:()=>LM,getWebGLDisjointQueryTimerVersion:()=>jM,getWebGLErrorMessage:()=>rM,getWebGLMaxTextureSize:()=>VM,hasExtension:()=>qM,isCapableOfRenderingToFloatTexture:()=>XM,isDownloadFloatTextureEnabled:()=>YM,isReshapeFree:()=>PM,isWebGLFenceEnabled:()=>JM,isWebGLVersionEnabled:()=>KM,linkProgram:()=>dM,logShaderSourceAndInfoLog:()=>uM,resetMaxTextureSize:()=>UM,resetMaxTexturesInShader:()=>GM,unbindColorTextureFromFramebuffer:()=>EM,unbindTextureUnit:()=>kM,validateFramebuffer:()=>AM,validateProgram:()=>pM,validateTextureSize:()=>bM});var X={};n.r(X),n.d(X,{bindVertexProgramAttributeStreams:()=>HL,createBufferFromOutputTexture:()=>KL,createFloat16MatrixTexture:()=>zL,createFloat16PackedMatrixTexture:()=>GL,createFloat32MatrixTexture:()=>ML,createIndexBuffer:()=>DL,createPackedMatrixTexture:()=>VL,createUnsignedBytesMatrixTexture:()=>BL,createVertexBuffer:()=>FL,createVertexShader:()=>RL,downloadByteEncodedFloatMatrixFromOutputTexture:()=>YL,downloadFloat32MatrixFromBuffer:()=>XL,downloadMatrixFromPackedOutputTexture:()=>JL,downloadPackedMatrixFromBuffer:()=>ZL,getInternalFormatForFloat16MatrixTexture:()=>LL,getInternalFormatForFloat16PackedMatrixTexture:()=>UL,getInternalFormatForFloat32MatrixTexture:()=>OL,getInternalFormatForPackedMatrixTexture:()=>WL,getInternalFormatForUnsignedBytesMatrixTexture:()=>PL,uploadDenseMatrixToTexture:()=>jL,uploadPixelDataToTexture:()=>qL});class Y{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class Z{refCount(t){return J("refCount")}incRef(t){return J("incRef")}timerAvailable(){return!0}time(t){return J("time")}read(t){return J("read")}readSync(t){return J("readSync")}readToGPU(t,e){return J("readToGPU")}numDataIds(){return J("numDataIds")}disposeData(t,e){return J("disposeData")}write(t,e,n){return J("write")}move(t,e,n,a,s){return J("move")}createTensorFromGPUData(t,e,n){return J("createTensorFromGPUData")}memory(){return J("memory")}floatPrecision(){return J("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return J("dispose")}}function J(t){throw new Error("'".concat(t,"' not yet implemented or not found in the registry. ")+"This kernel may not be supported by the tfjs backend you have chosen")}function Q(t){let e=t.length,n=0;for(;e>0;)n=Math.random()*e|0,e--,nt(t,e,n)}function $(t,e){if(t.length!==e.length)throw new Error("Array sizes must match to be shuffled together "+"First array length was ".concat(t.length)+"Second array length was ".concat(e.length));let n=t.length,a=0;for(;n>0;)a=Math.random()*n|0,n--,nt(t,n,a),nt(e,n,a)}function tt(t,e,n){return Math.max(t,Math.min(e,n))}function et(t){return t%2===0?t:t+1}function nt(t,e,n){const a=t[e];t[e]=t[n],t[n]=a}function at(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function st(t,e){const n=Math.random();return e*n+(1-n)*t}function rt(t,e){let n=0;for(let a=0;a<t.length;a++){const s=Number(t[a])-Number(e[a]);n+=s*s}return n}function ot(t,e){if(!t)throw new Error("string"===typeof e?e:e())}function it(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";ot(dt(t,e),()=>n+" Shapes ".concat(t," and ").concat(e," must match"))}function ct(t){ot(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function lt(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function ut(t){return 0===t.length}function ht(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(null!==t[n]&&null!==e[n]&&t[n]!==e[n])return!1;return!0}function dt(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function pt(t){return t%1===0}function ft(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function mt(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function gt(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return Q(e),e}function yt(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function bt(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t=>0,n=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0;return new Promise((s,r)=>{let o=0;const i=()=>{if(t())return void s();o++;const c=e(o);null!=n&&o>=n?r():null!=a?a(i,c):setTimeout(i,c)};i()})}function xt(t,e){let n=1,a=-1;for(let r=0;r<t.length;++r)if(t[r]>=0)n*=t[r];else if(-1===t[r]){if(-1!==a)throw Error("Shapes can only have 1 implicit size. "+"Found -1 at dim ".concat(a," and dim ").concat(r));a=r}else if(t[r]<0)throw Error("Shapes can not be < 0. Found ".concat(t[r]," at dim ").concat(r));if(-1===a){if(e>0&&e!==n)throw Error("Size(".concat(e,") must match the product of shape ").concat(t));return t}if(0===n)throw Error("Cannot infer the missing size in [".concat(t,"] when ")+"there are 0 elements");if(e%n!==0)throw Error("The implicit shape can't be a fractional number. "+"Got ".concat(e," / ").concat(n));const s=t.slice();return s[a]=e/n,s}function wt(t,e){const n=e.length;return ot((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>"All values in axis param must be in range [-".concat(n,", ").concat(n,") but ")+"got axis ".concat(t)),ot(t.every(t=>pt(t)),()=>"All values in axis param must be integers but "+"got axis ".concat(t)),t.map(t=>t<0?n+t:t)}function vt(t,e){const n=[],a=[],s=null!=e&&Array.isArray(e)&&0===e.length,r=null==e||s?null:wt(e,t).sort();let o=0;for(let i=0;i<t.length;++i){if(null!=r){if(r[o]===i&&1!==t[i])throw new Error("Can't squeeze axis ".concat(i," since its dim '").concat(t[i],"' is not 1"));(null==r[o]||r[o]>i)&&1===t[i]&&(n.push(t[i]),a.push(i)),r[o]<=i&&o++}1!==t[i]&&(n.push(t[i]),a.push(i))}return{newShape:n,keptDims:a}}function kt(t,e){return It(t,e)}function It(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type ".concat(t));n=new Array(e)}return n}function Nt(t,e){for(let n=0;n<t.length;n++){const a=t[n];if(isNaN(a)||!isFinite(a))throw Error("A tensor of type ".concat(e," being uploaded contains ").concat(a,"."))}}function St(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function Tt(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function Ct(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype ".concat(t))}function Et(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function At(t){return"string"===typeof t||t instanceof String}function Rt(t){return"boolean"===typeof t}function Ft(t){return"number"===typeof t}function Dt(t){return Array.isArray(t)?Dt(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray?"int32":Ft(t)?"float32":At(t)?"string":Rt(t)?"bool":"float32"}function _t(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Ot(t,e){for(let n=e;n<t;++n)if(t%n===0)return n;return t}function Mt(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let a=e-3;a>=0;--a)n[a]=n[a+1]*t[a+1];return n}function Lt(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=new Array;if(1===e.length){const r=e[0]*(a?2:1);for(let e=0;e<r;e++)s[e]=n[t+e]}else{const r=e[0],o=e.slice(1),i=o.reduce((t,e)=>t*e)*(a?2:1);for(let e=0;e<r;e++)s[e]=Lt(t+e*i,o,n,a)}return s}function zt(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(0===t.length)return e[0];const a=t.reduce((t,e)=>t*e)*(n?2:1);if(0===a)return[];if(a!==e.length)throw new Error("[".concat(t,"] does not match the input size ").concat(e.length).concat(n?" for a complex tensor":"","."));return Lt(0,t,e,n)}function Pt(t,e){if(Array.isArray(t))return t;if("float32"===e)return t instanceof Float32Array?t:new Float32Array(t);if("int32"===e)return t instanceof Int32Array?t:new Int32Array(t);if("bool"===e||"string"===e)return Uint8Array.from(new Int32Array(t));throw new Error("Unknown dtype ".concat(e))}function Bt(t,e){const n=Wt(t,e);for(let a=0;a<n.length;a++)n[a]=1;return n}function Wt(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type ".concat(e))}function Vt(t,e){const n=t.reduce((t,e)=>t*e,1);if(null==e||"float32"===e)return zt(t,new Float32Array(n));if("int32"===e)return zt(t,new Int32Array(n));if("bool"===e)return zt(t,new Uint8Array(n));throw new Error("Unknown data type ".concat(e))}function Ut(t){t.forEach(e=>{ot(Number.isInteger(e)&&e>=0,()=>"Tensor must have a shape comprised of positive integers but got "+"shape [".concat(t,"]."))})}function Gt(t,e,n){if(0===e)return 0;if(1===e)return t[0];let a=t[t.length-1];for(let s=0;s<t.length-1;++s)a+=n[s]*t[s];return a}function Ht(t,e,n){if(0===e)return[];if(1===e)return[t];const a=new Array(e);for(let s=0;s<a.length-1;++s)a[s]=Math.floor(t/n[s]),t-=a[s]*n[s];return a[a.length-1]=t,a}function jt(t){return t&&t.then&&"function"===typeof t.then}const qt="tfjsflags";class Kt{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Xt,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(Yt().getBool("IS_TEST")||Yt().getBool("PROD")||console.warn("Platform ".concat(this.platformName," has already been set. ")+"Overwriting the platform with ".concat(t,"."))),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];Yt().getBool("IS_TEST")||Yt().getBool("PROD")||console.warn("Setting feature override from URL ".concat(t,": ").concat(e,".")),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(jt(e))throw new Error("Flag ".concat(t," cannot be synchronously evaluated. ")+"Please use getAsync() instead.");return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error("Cannot set flag ".concat(t," as it has not been registered."));this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '".concat(t,"': no evaluation function found."));return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if("undefined"===typeof this.global||"undefined"===typeof this.global.location||"undefined"===typeof this.global.location.search)return;const t=this.getQueryParams(this.global.location.search);if(qt in t){t[qt].split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){const n=e.toLowerCase();return"true"===n||"false"===n?"true"===n:"".concat(+n)===n?+n:e}(0,n)})}}}function Xt(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,function(t){for(var n=arguments.length,a=new Array(n>1?n-1:0),s=1;s<n;s++)a[s-1]=arguments[s];return function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,a[0],a[1]),a.join("=")}),e}function Yt(){return Jt}let Zt,Jt=null;function Qt(){if(null==Zt){let t;if("undefined"!==typeof window)t=window;else if("undefined"!==typeof n.g)t=n.g;else if("undefined"!==typeof process)t=process;else{if("undefined"===typeof self)throw new Error("Could not find a global object");t=self}Zt=t}return Zt}function $t(t,e){const n=function(){const t=Qt();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const a=e();return n.set(t,a),n.get(t)}}const te="Abs",ee="Acos",ne="Acosh",ae="Add",se="AddN",re="All",oe="Any",ie="ArgMax",ce="ArgMin",le="Asin",ue="Asinh",he="Atan",de="Atanh",pe="Atan2",fe="AvgPool",me="AvgPoolGrad",ge="AvgPool3D",ye="AvgPool3DGrad",be="BatchMatMul",xe="BatchToSpaceND",we="Bincount",ve="BitwiseAnd",ke="BroadcastTo",Ie="BroadcastArgs",Ne="Cast",Se="Ceil",Te="ClipByValue",Ce="Complex",Ee="ComplexAbs",Ae="Concat",Re="Conv2D",Fe="Conv2DBackpropFilter",De="Conv2DBackpropInput",_e="Conv3D",Oe="Conv3DBackpropFilterV2",Me="Conv3DBackpropInputV2",Le="Cos",ze="Cosh",Pe="Cumprod",Be="Cumsum",We="CropAndResize",Ve="DenseBincount",Ue="DepthToSpace",Ge="DepthwiseConv2dNative",He="DepthwiseConv2dNativeBackpropFilter",je="DepthwiseConv2dNativeBackpropInput",qe="Diag",Ke="Dilation2D",Xe="Dilation2DBackpropInput",Ye="Dilation2DBackpropFilter",Ze="Draw",Je="RealDiv",Qe="Einsum",$e="Elu",tn="EluGrad",en="Erf",nn="Equal",an="Exp",sn="ExpandDims",rn="Expm1",on="FFT",cn="Fill",ln="FlipLeftRight",un="Floor",hn="FloorDiv",dn="FusedBatchNorm",pn="GatherV2",fn="GatherNd",mn="Greater",gn="GreaterEqual",yn="Identity",bn="IFFT",xn="Imag",wn="IsFinite",vn="IsInf",kn="IsNan",In="LeakyRelu",Nn="Less",Sn="LessEqual",Tn="LinSpace",Cn="Log",En="Log1p",An="LogicalAnd",Rn="LogicalNot",Fn="LogicalOr",Dn="LogicalXor",_n="LogSoftmax",On="LowerBound",Mn="LRN",Ln="LRNGrad",zn="MatrixBandPart",Pn="Max",Bn="Maximum",Wn="MaxPool",Vn="MaxPoolGrad",Un="MaxPool3D",Gn="MaxPool3DGrad",Hn="MaxPoolWithArgmax",jn="Mean",qn="Min",Kn="Minimum",Xn="MirrorPad",Yn="Mod",Zn="Multinomial",Jn="Multiply",Qn="Neg",$n="NotEqual",ta="NonMaxSuppressionV3",ea="NonMaxSuppressionV4",na="NonMaxSuppressionV5",aa="OnesLike",sa="OneHot",ra="Pack",oa="PadV2",ia="Pool",ca="Pow",la="Prelu",ua="Prod",ha="RaggedGather",da="RaggedRange",pa="RaggedTensorToTensor",fa="Range",ma="Real",ga="Reciprocal",ya="Relu",ba="Reshape",xa="ResizeNearestNeighbor",wa="ResizeNearestNeighborGrad",va="ResizeBilinear",ka="ResizeBilinearGrad",Ia="Relu6",Na="Reverse",Sa="Round",Ta="Rsqrt",Ca="ScatterNd",Ea="TensorScatterUpdate",Aa="SearchSorted",Ra="Select",Fa="Selu",Da="Slice",_a="Sin",Oa="Sinh",Ma="Sign",La="Sigmoid",za="Softplus",Pa="Sqrt",Ba="Sum",Wa="SpaceToBatchND",Va="SplitV",Ua="Softmax",Ga="SparseFillEmptyRows",Ha="SparseReshape",ja="SparseSegmentMean",qa="SparseSegmentSum",Ka="SparseToDense",Xa="SquaredDifference",Ya="Square",Za="StaticRegexReplace",Ja="StridedSlice",Qa="StringNGrams",$a="StringSplit",ts="StringToHashBucketFast",es="Sub",ns="Tan",as="Tanh",ss="Tile",rs="TopK",os="Transform",is="Transpose",cs="Unique",ls="Unpack",us="UnsortedSegmentSum",hs="UpperBound",ds="ZerosLike",ps="Step",fs="FromPixels",ms="RotateWithOffset",gs="_FusedMatMul",ys="FusedConv2D",bs="FusedDepthwiseConv2D";function xs(){Yt().getBool("IS_TEST")||Yt().getBool("PROD")||console.warn(...arguments)}function ws(){Yt().getBool("IS_TEST")||Yt().getBool("PROD")||console.log(...arguments)}const vs=$t("kernelRegistry",()=>new Map),ks=$t("gradRegistry",()=>new Map);function Is(t,e){const n=Fs(t,e);return vs.get(n)}function Ns(t){return ks.get(t)}function Ss(t){const e=vs.entries(),n=[];for(;;){const{done:a,value:s}=e.next();if(a)break;const[r,o]=s,[i]=r.split("_");i===t&&n.push(o)}return n}function Ts(t){const{kernelName:e,backendName:n}=t,a=Fs(e,n);vs.has(a)&&xs("The kernel '".concat(e,"' for backend ")+"'".concat(n,"' is already registered")),vs.set(a,t)}function Cs(t){const{kernelName:e}=t;ks.has(e)&&Yt().getBool("DEBUG")&&xs("Overriding the gradient for '".concat(e,"'")),ks.set(e,t)}function Es(t,e){const n=Fs(t,e);if(!vs.has(n))throw new Error("The kernel '".concat(t,"' for backend ")+"'".concat(e,"' is not registered"));vs.delete(n)}function As(t){if(!ks.has(t))throw new Error("The gradient '".concat(t,"' for backend is not registered"));ks.delete(t)}function Rs(t,e){Ss(t).forEach(t=>{Ts(Object.assign({},t,{backendName:e}))})}function Fs(t,e){return"".concat(e,"_").concat(t)}function Ds(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray}var _s=n(7353);const Os=n.n(_s)()||_s;function Ms(t){return Os.fromString(t,!0,16)}const Ls=Ms("c3a5c85c97cb3127"),zs=Ms("b492b66fbe98f273"),Ps=Ms("9ae16a3b2f90404f");function Bs(t){return t.xor(t.shru(47))}function Ws(t,e,n){const a=t.slice(e,e+n);return Os.fromBytes(Array.from(a),!0,!0)}function Vs(t,e){return Ws(t,e,8)}function Us(t,e){return Ws(t,e,4)}function Gs(t,e){return 0===e?t:t.shru(e).or(t.shl(64-e))}function Hs(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ms("9ddfea08eb382d69"),a=t.xor(e).mul(n);a=a.xor(a.shru(47));let s=e.xor(a).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function js(t,e,n,a){return function(t,e,n,a,s,r){s=s.add(t),r=Gs(r.add(s).add(a),21);const o=s;return s=(s=s.add(e)).add(n),r=r.add(Gs(s,44)),[s.add(a),r.add(o)]}(Vs(t,e),Vs(t,e+8),Vs(t,e+16),Vs(t,e+24),n,a)}function qs(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.length;const n=Os.fromNumber(81,!0);if(e<=32)return e<=16?function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.length;if(e>=8){const n=Ps.add(2*e),a=Vs(t,0).add(Ps),s=Vs(t,e-8);return Hs(Gs(s,37).mul(n).add(a),Gs(a,25).add(s).mul(n),n)}if(e>=4){const n=Ps.add(2*e);return Hs(Us(t,0).shl(3).add(e),Us(t,e-4),n)}if(e>0){const n=t[0]+(t[e>>1]<<8),a=e+(t[e-1]<<2);return Bs(Ps.mul(n).xor(Ls.mul(a))).mul(Ps)}return Ps}(t,e):function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.length;const n=Ps.add(2*e),a=Vs(t,0).mul(zs),s=Vs(t,8),r=Vs(t,e-8).mul(n),o=Vs(t,e-16).mul(Ps);return Hs(Gs(a.add(s),43).add(Gs(r,30)).add(o),a.add(Gs(s.add(Ps),18)).add(r),n)}(t,e);if(e<=64)return function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.length;const n=Ps.add(2*e),a=Vs(t,0).mul(Ps),s=Vs(t,8),r=Vs(t,e-8).mul(n),o=Vs(t,e-16).mul(Ps),i=Gs(a.add(s),43).add(Gs(r,30)).add(o),c=Hs(i,a.add(Gs(s.add(Ps),18)).add(r),n),l=Vs(t,16).mul(n),u=Vs(t,24),h=i.add(Vs(t,e-32)).mul(n),d=c.add(Vs(t,e-24)).mul(n);return Hs(Gs(l.add(u),43).add(Gs(h,30)).add(d),l.add(Gs(u.add(a),18)).add(h),n)}(t,e);let a=n,s=n.mul(zs).add(113),r=Bs(s.mul(Ps).add(113)).mul(Ps),o=[Os.UZERO,Os.UZERO],i=[Os.UZERO,Os.UZERO];a=a.mul(Ps).add(Vs(t,0));let c=0;const l=64*(e-1>>6),u=l+(e-1&63)-63;do{a=Gs(a.add(s).add(o[0]).add(Vs(t,c+8)),37).mul(zs),s=Gs(s.add(o[1]).add(Vs(t,c+48)),42).mul(zs),a=a.xor(i[1]),s=s.add(o[0]).add(Vs(t,c+40)),r=Gs(r.add(i[0]),33).mul(zs),o=js(t,c,o[1].mul(zs),a.add(i[0])),i=js(t,c+32,r.add(i[1]),s.add(Vs(t,c+16))),[r,a]=[a,r],c+=64}while(c!==l);const h=zs.add(r.and(255).shl(1));return c=u,i[0]=i[0].add(e-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),a=Gs(a.add(s).add(o[0]).add(Vs(t,c+8)),37).mul(h),s=Gs(s.add(o[1]).add(Vs(t,c+48)),42).mul(h),a=a.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(Vs(t,c+40))),r=Gs(r.add(i[0]),33).mul(h),o=js(t,c,o[1].mul(h),a.add(i[0])),i=js(t,c+32,r.add(i[1]),s.add(Vs(t,c+16))),[r,a]=[a,r],Hs(Hs(o[0],i[0],h).add(Bs(s).mul(Ls)).add(r),Hs(o[1],i[1],h).add(a),h)}function Ks(t,e){return"string"===e?Js(t):Xs([t],e)}function Xs(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=tr(t)),Yt().getBool("DEBUG")&&Nt(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type ".concat(e))}function Ys(){return Yt().platform.now()}function Zs(t,e){return Yt().platform.fetch(t,e)}function Js(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return e=e||"utf-8",Yt().platform.encode(t,e)}function Qs(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return e=e||"utf-8",Yt().platform.decode(t,e)}function $s(t){return null!=Yt().platform.isTypedArray?Yt().platform.isTypedArray(t):Ds(t)}function tr(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(null==e&&(e=[]),"boolean"===typeof t||"number"===typeof t||"string"===typeof t||jt(t)||null==t||$s(t)&&n)e.push(t);else if(Array.isArray(t)||$s(t))for(let a=0;a<t.length;++a)tr(t[a],e,n);else{let a=-1;for(const e of Object.keys(t))/^([1-9]+[0-9]*|0)$/.test(e)&&(a=Math.max(a,Number(e)));for(let s=0;s<=a;s++)tr(t[s],e,n)}return e}class er{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ar)}profileKernel(t,e,n){let a;const s=()=>{a=n()};let r;const o=Ys();if(this.backendTimer.timerAvailable())r=this.backendTimer.time(s);else{s();for(const t of a)t.dataSync();r=Promise.resolve({kernelMs:Ys()-o})}if(Yt().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let i=0;i<a.length;i++){const e=a[i];e.data().then(n=>{nr(n,e.dtype,t)})}return{kernelName:t,outputs:a,inputs:e,timeMs:r.then(t=>t.kernelMs),extraInfo:r.then(t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:a,inputs:s,extraInfo:r}=t;n.forEach(t=>{Promise.all([t.data(),a,r]).then(n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])})})}}function nr(t,e,n){if("float32"!==e)return!1;for(let a=0;a<t.length;a++){const e=t[a];if(isNaN(e)||!isFinite(e))return console.warn("Found ".concat(e," in the result of '").concat(n,"'")),!0}return!1}class ar{logKernelProfile(t,e,n,a,s,r){const o="number"===typeof a?yt("".concat(a,"ms"),9):a.error,i=yt(t,25),c=e.rank,l=e.size,u=yt(e.shape.toString(),14);let h="";for(const d in s){const t=s[d];if(null!=t){const n=t.shape||e.shape,a=n.length;h+="".concat(d,": ").concat(a,"D ").concat(a>0?n:""," ")}}console.log("%c".concat(i,"\t%c").concat(o,"\t%c").concat(c,"D ").concat(u,"\t%c").concat(l,"\t%c").concat(h,"\t%c").concat(r),"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function sr(t,e,n,a){const s=Mt(e),r=function(t,e,n,a){const s=lt(e),r=a[a.length-1],o=new Array(r).fill(0),i=e.length,c="complex64"===n?cr(t):t;if(i>1)for(let l=0;l<s/r;l++){const t=l*r;for(let e=0;e<r;e++)o[e]=Math.max(o[e],rr(c[t+e],0,n).length)}return o}(t,e,n,s),o=e.length,i=ir(t,e,n,s,r),c=["Tensor"];return a&&(c.push("  dtype: ".concat(n)),c.push("  rank: ".concat(o)),c.push("  shape: [".concat(e,"]")),c.push("  values:")),c.push(i.map(t=>"    "+t).join("\n")),c.join("\n")}function rr(t,e,n){let a;return a=Array.isArray(t)?"".concat(parseFloat(t[0].toFixed(7))," + ")+"".concat(parseFloat(t[1].toFixed(7)),"j"):At(t)?"'".concat(t,"'"):"bool"===n?or(t):parseFloat(t.toFixed(7)).toString(),yt(a,e)}function or(t){return 0===t?"false":"true"}function ir(t,e,n,a,s){let r=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];const o="complex64"===n?2:1,i=e[0],c=e.length;if(0===c){if("complex64"===n){return[rr(cr(t)[0],0,n)]}return"bool"===n?[or(t[0])]:[t[0].toString()]}if(1===c){if(i>20){const e=3*o;let a=Array.from(t.slice(0,e)),r=Array.from(t.slice((i-3)*o,i*o));return"complex64"===n&&(a=cr(a),r=cr(r)),["["+a.map((t,e)=>rr(t,s[e],n)).join(", ")+", ..., "+r.map((t,e)=>rr(t,s[i-3+e],n)).join(", ")+"]"]}return["["+("complex64"===n?cr(t):Array.from(t)).map((t,e)=>rr(t,s[e],n)).join(", ")+"]"]}const l=e.slice(1),u=a.slice(1),h=a[0]*o,d=[];if(i>20){for(let e=0;e<3;e++){const a=e*h,r=a+h;d.push(...ir(t.slice(a,r),l,n,u,s,!1))}d.push("...");for(let e=i-3;e<i;e++){const a=e*h,r=a+h;d.push(...ir(t.slice(a,r),l,n,u,s,e===i-1))}}else for(let m=0;m<i;m++){const e=m*h,a=e+h;d.push(...ir(t.slice(e,a),l,n,u,s,m===i-1))}const p=2===c?",":"";d[0]="["+(i>0?d[0]+p:"");for(let m=1;m<d.length-1;m++)d[m]=" "+d[m]+p;let f=",\n";for(let m=2;m<c;m++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(r?"":f),d}function cr(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class lr{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=lt(t),null!=n){const t=n.length;ot(t===this.size,()=>"Length of values '".concat(t,"' does not match the size ")+"inferred by the shape '".concat(this.size,"'."))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||It(e,this.size),this.strides=Mt(t)}set(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),a=1;a<e;a++)n[a-1]=arguments[a];0===n.length&&(n=[0]),ot(n.length===this.rank,()=>"The number of provided coordinates (".concat(n.length,") must ")+"match the rank (".concat(this.rank,")"));const s=this.locToIndex(n);this.values[s]=t}get(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];0===e.length&&(e=[0]);let a=0;for(const r of e){if(r<0||r>=this.shape[a]){const t="Requested out of range element at ".concat(e,". ")+"  Buffer shape=".concat(this.shape);throw new Error(t)}a++}let s=e[e.length-1];for(let r=0;r<e.length-1;++r)s+=this.strides[r]*e[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return ur().makeTensor(this.values,this.shape,this.dtype)}}let ur=null,hr=null,dr=null;class pr{constructor(t,e,n,a){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=lt(t),this.strides=Mt(t),this.dataId=n,this.id=a,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return hr.buffer(this.shape,this.dtype,t)}bufferSync(){return hr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return zt(this.shape,t,"complex64"===this.dtype)}arraySync(){return zt(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const t=ur().read(this.dataId);if("string"===this.dtype){const n=await t;try{return n.map(t=>Qs(t))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataToGPU(t){return this.throwIfDisposed(),ur().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=ur().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>Qs(t))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await ur().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),ur().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(){let t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return hr.print(this,t)}clone(){return this.throwIfDisposed(),hr.clone(this)}toString(){let t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return sr(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),hr.cast(this,t)}variable(){let t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],e=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0;return this.throwIfDisposed(),ur().makeVariable(this,t,e,n)}}function fr(){return $t("Tensor",()=>pr)}Object.defineProperty(pr,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed}),fr();class mr extends pr{constructor(t,e,n,a){super(t.shape,t.dtype,t.dataId,a),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value (".concat(t.dtype,") and ")+"previous value (".concat(this.dtype,") must match"));if(!dt(t.shape,this.shape))throw new Error("shape of the new value (".concat(t.shape,") and ")+"previous value (".concat(this.shape,") must match"));ur().disposeTensor(this),this.dataId=t.dataId,ur().incRef(this,null)}dispose(){ur().disposeVariable(this),this.isDisposedInternal=!0}}var gr,yr,br,xr,wr;Object.defineProperty(mr,Symbol.hasInstance,{value:t=>t instanceof pr&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(gr||(gr={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(yr||(yr={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(br||(br={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(xr||(xr={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(wr||(wr={}));const vr={float32:xr,int32:yr,bool:br,complex64:wr};function kr(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error("Can not upcast ".concat(t," with ").concat(e))}return vr[t][e]}function Ir(t){return kr(t,"int32")}function Nr(t){return null!=t&&"object"===typeof t&&"texture"in t&&t.texture instanceof WebGLTexture}function Sr(t){return"undefined"!==typeof GPUBuffer&&null!=t&&"object"===typeof t&&"buffer"in t&&t.buffer instanceof GPUBuffer}function Tr(t,e){if(t.dtype===e.dtype)return[t,e];const n=kr(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Cr(t,e){ot(t.dtype===e.dtype,()=>"The dtypes of the first(".concat(t.dtype,") and")+" second(".concat(e.dtype,") input must match"))}function Er(t,e){return e.some(e=>e.id===t.id)}function Ar(t){const e=[];return Rr(t,e,new Set),e}function Rr(t,e,n){if(null==t)return;if(t instanceof pr)return void e.push(t);if(a=t,!Array.isArray(a)&&"object"!==typeof a)return;var a;const s=t;for(const r in s){const t=s[r];n.has(t)||(n.add(t),Rr(t,e,n))}}function Fr(t){return null!=t.kernelName}class Dr{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class _r{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Dr}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error("Backend '".concat(this.backendName,"' has not yet been initialized. Make ")+"sure to await tf.ready() or await tf.setBackend() before calling other methods");if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error("The highest priority backend '".concat(t,"' has not yet been ")+"initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return t in this.registryFactory?(xs("".concat(t," backend was already registered. ")+"Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error("Backend name '".concat(t,"' not found in registry"));if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new er(this.backendInstance),!0}setupRegisteredKernels(){Ss(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){Ss(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error("Cannot initialize backend ".concat(t,", no registration found."));try{const n=e.factory();if(!n||n instanceof Z||"function"!==typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,a=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,xs("Initialization of backend ".concat(t," failed")),xs(n.stack||n.message)),!1));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}}catch(n){return xs("Initialization of backend ".concat(t," failed")),xs(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error("".concat(t," backend not found in registry"));this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:a,asyncInit:s}=this.initializeBackend(n);if(s||a)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),a=n.backend,s=this.readSync(e),r=a.refCount(e);a.disposeData(e,!0),n.backend=t,t.move(e,s,n.shape,n.dtype,r),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,a=null;if(null==e){if("function"!==typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!==typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!==typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");a=t}return this.scopedRun(()=>this.startScope(a),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(a){throw e(),a}}nextTensorId(){return _r.nextTensorId++}nextVariableId(){return _r.nextVariableId++}clone(t){const e=Mr.runKernel(yn,{x:t}),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>{const e={x:t},n={dtype:"float32"};return Mr.runKernel(Ne,e,n)}}),[],{}),e}runKernel(t,e,n){null==this.backendName&&this.backend;if(!(null!=Is(t,this.backendName)))throw new Error("Kernel '".concat(t,"' not registered for backend '").concat(this.backendName,"'"));return this.runKernelFunc({kernelName:t,inputs:e,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const a=this.backend.numDataIds();let s=0;n.forEach(t=>{s+="complex64"===t.dtype?3:1});const r=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=a-e-s-r;if(o>0)throw new Error("Backend '".concat(this.backendName,"' has an internal memory leak ")+"(".concat(o," data ids) after running '").concat(t,"'"))}runKernelFunc(t){let e,n=[];const a=this.isTapeOn(),s=this.state.numBytes,r=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const c=Fr(t)?t.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Fr(t)){const{kernelName:e,inputs:s,attrs:r}=t;null==this.backendName&&this.backend;const c=Is(e,this.backendName);ot(null!=c,()=>"Cannot find registered kernel '".concat(e,"' for backend '").concat(this.backendName,"'")),o=()=>{const t=this.backend.numDataIds();i=c.kernelFunc({inputs:s,attrs:r,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(e,t,o);const l=o.map(t=>null!=t.rank?t:this.makeTensorFromTensorInfo(t));if(a){const t=this.getTensorsForGradient(e,s,l);n=this.saveTensorsForBackwardMode(t)}return l}}else{const{forwardFunc:e}=t,s=t=>{a&&(n=t.map(t=>this.keep(this.clone(t))))};o=()=>{const t=this.backend.numDataIds();i=this.tidy(()=>e(this.backend,s));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,t,n),n}}const{inputs:l,attrs:u}=t,h=Fr(t)?null:t.backwardsFunc;let d;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(c,l,()=>o()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),e=d.outputs):e=o()}),a&&this.addTapeNode(c,l,e,h,n,u),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-r,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map(t=>null!=l[t]?l[t].shape:null),outputShapes:e.map(t=>t.shape),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(i)?e:e[0]}saveTensorsForBackwardMode(t){const e=t.map(t=>this.keep(this.clone(t)));return e}getTensorsForGradient(t,e,n){const a=Ns(t);if(null!=a){const t=a.inputsToSave||[],s=a.outputsToSave||[];let r;a.saveAllInputs?(ot(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),r=Object.keys(e).map(t=>e[t])):r=t.map(t=>e[t]);const o=n.filter((t,e)=>s[e]);return r.concat(o)}return[]}makeTensor(t,e,n,a){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",a=a||this.backend;let s=t;"string"===n&&At(t[0])&&(s=t.map(t=>Js(t)));const r=a.write(s,e,n),o=new pr(e,n,r,this.nextTensorId());if(this.trackTensor(o,a),"string"===n){const t=this.state.tensorInfo.get(r),e=Et(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return o}makeTensorFromDataId(t,e,n,a){const s={dataId:t,shape:e,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,a)}makeTensorFromTensorInfo(t,e){const{dataId:n,shape:a,dtype:s}=t,r=new pr(a,s,n,this.nextTensorId());return this.trackTensor(r,e),r}makeVariable(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0;n=n||this.nextVariableId().toString(),null!=a&&a!==t.dtype&&(t=t.cast(a));const s=new mr(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error("Variable with name ".concat(s.name," was already registered"));return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*Ct(t.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n})),t instanceof mr||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;const e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,"string"===t.dtype&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),"complex64"!==t.dtype&&"string"!==t.dtype){const e=t.size*Ct(t.dtype);this.state.numBytes-=e}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const a of this.state.activeProfile.kernels)a.kernelTimeMs=await a.kernelTimeMs,a.extraInfo=await a.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,a,s,r){const o={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},i=Ns(t);null!=i&&(a=i.gradFunc),null!=a&&(o.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],a=Wt(t.size,t.dtype);return this.makeTensor(a,t.shape,t.dtype)}return t}),a(t.length>1?t:t[0],s,r))),this.state.activeTape.push(o)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Ar(t),n=new Set(e.map(t=>t.id));for(let s=0;s<this.state.activeScope.track.length;s++){const t=this.state.activeScope.track[s];t.kept||n.has(t.id)||t.dispose()}const a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==a.id||this.track(t)})}gradients(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(ot(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '".concat(n.dtype,"'"));const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));ot(s instanceof pr,()=>"The result y returned by f() must be a tensor.");const r=function(t,e,n){const a={},s={};for(let c=0;c<e.length;c++)a[e[c].id]=!0;for(let c=0;c<t.length;c++){const n=t[c],r=n.inputs;for(const t in r){const o=r[t];let i=!1;for(let t=0;t<e.length;t++)if(a[o.id]){n.outputs.forEach(t=>a[t.id]=!0),i=!0,s[n.id]=!0;break}if(i)break}}const r={};r[n.id]=!0;const o={};for(let c=t.length-1;c>=0;c--){const e=t[c],n=e.inputs;for(let t=0;t<e.outputs.length;t++)if(r[e.outputs[t].id]){for(const t in n)r[n[t].id]=!0,o[e.id]=!0;break}}const i=[];for(let c=0;c<t.length;c++){const e=t[c];if(s[e.id]&&o[e.id]){const t={};for(const s in e.inputs){const n=e.inputs[s];a[n.id]&&(t[s]=n)}const n=Object.assign({},e);n.inputs=t,n.outputs=e.outputs,i.push(n)}}return i}(this.state.activeTape,e,s);if(!a&&0===r.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[s.id]=null==n?function(t){const e=Bt(lt(t),"float32");return Mr.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n,a){for(let s=e.length-1;s>=0;s--){const r=e[s],o=[];if(r.outputs.forEach(e=>{const n=t[e.id];null!=n?o.push(n):o.push(null)}),null==r.gradient)throw new Error("Cannot compute gradient: gradient function not found "+"for ".concat(r.kernelName,"."));const i=r.gradient(o);for(const e in r.inputs){if(!(e in i))throw new Error("Cannot backprop through input ".concat(e,". ")+"Available gradients found: ".concat(Object.keys(i),"."));const s=n(()=>i[e]());if("float32"!==s.dtype)throw new Error("Error in gradient for op ".concat(r.kernelName,". The gradient of input ")+"".concat(e," must have 'float32' dtype, but has '").concat(s.dtype,"'"));const o=r.inputs[e];if(!dt(s.shape,o.shape))throw new Error("Error in gradient for op ".concat(r.kernelName,". The gradient of input ")+"'".concat(e,"' has shape '").concat(s.shape,"', which does not match ")+"the shape of the input '".concat(o.shape,"'"));if(null==t[o.id])t[o.id]=s;else{const e=t[o.id];t[o.id]=a(e,s),e.dispose()}}}}(t,r,t=>this.tidy(t),Lr);const a=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:s,grads:a}})}customGrad(t){var e=this;return ot(_t(t),()=>"The f passed in customGrad(f) must be a function."),function(){for(var n=arguments.length,a=new Array(n),s=0;s<n;s++)a[s]=arguments[s];let r;ot(a.every(t=>t instanceof pr),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};a.forEach((t,e)=>{o[e]=t});return e.runKernelFunc({forwardFunc:(e,n)=>(r=t(...a,n),ot(r.value instanceof pr,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),ot(_t(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(t,e)=>{const n=r.gradFunc(t,e),s=Array.isArray(n)?n:[n];ot(s.length===a.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),ot(s.every(t=>t instanceof pr),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const o={};return s.forEach((t,e)=>{o[e]=()=>t}),o},inputs:o})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){const e=Ys(),n=await this.backend.time(t);return n.wallMs=Ys()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Dr;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Or(){const t=Qt();if(null==t._tfengine){const e=new Kt(t);t._tfengine=new _r(e)}var e;return e=t._tfengine.ENV,Jt=e,ur=()=>t._tfengine,t._tfengine}_r.nextTensorId=0,_r.nextVariableId=0;const Mr=Or();function Lr(t,e){const n={a:t,b:e};return Mr.runKernel(ae,n)}let zr;function Pr(t){zr=t}function Br(t){if(void 0!==zr)return zr;if(t||"undefined"!==typeof navigator&&null!=navigator){if(t||(t=navigator),"ReactNative"===t.product)return!0;const e=t.userAgent||t.vendor||("undefined"!==typeof window?window.opera:"");if(!e){const e=t;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Wr(){return"undefined"!==typeof window&&null!=window.document||"undefined"!==typeof WorkerGlobalScope}const Vr=Yt();function Ur(t,e){let n=t;if($s(t))return"string"===e?[]:[t.length];if(Nr(t)){const e=t.channels||"RGBA";return[t.height,t.width*e.length]}if(Sr(t))return[t.buffer.size/(null==e?4:Ct(e))];if(!Array.isArray(t))return[];const a=[];for(;Array.isArray(n)||$s(n)&&"string"!==e;)a.push(n.length),n=n[0];return Array.isArray(t)&&Yt().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Gr(t,a,[]),a}function Gr(t,e,n){if(n=n||[],!Array.isArray(t)&&!$s(t))return void ot(0===e.length,()=>"Element arr[".concat(n.join("]["),"] is a primitive, ")+"but should be an array/TypedArray of ".concat(e[0]," elements"));ot(e.length>0,()=>"Element arr[".concat(n.join("]["),"] should be a primitive, ")+"but is an array of ".concat(t.length," elements")),ot(t.length===e[0],()=>"Element arr[".concat(n.join("]["),"] should have ").concat(e[0]," ")+"elements, but has ".concat(t.length," elements"));const a=e.slice(1);for(let s=0;s<t.length;++s)Gr(t[s],a,n.concat(s))}function Hr(t,e,n,a){if("string_or_numeric"!==t){if(null==t)throw new Error("Expected dtype cannot be null.");if("numeric"!==t&&t!==e||"numeric"===t&&"string"===e)throw new Error("Argument '".concat(n,"' passed to '").concat(a,"' must ")+"be ".concat(t," tensor, but got ").concat(e," tensor"))}}function jr(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(t instanceof fr())return Hr(a,t.dtype,e,n),t;let s=Dt(t);if("string"!==s&&["bool","int32","float32"].indexOf(a)>=0&&(s=a),Hr(a,s,e,n),null==t||!$s(t)&&!Array.isArray(t)&&"number"!==typeof t&&"boolean"!==typeof t&&"string"!==typeof t){const a=null==t?"null":t.constructor.name;throw new Error("Argument '".concat(e,"' passed to '").concat(n,"' must be a ")+"Tensor or TensorLike, but got '".concat(a,"'"))}const r=Ur(t,s);$s(t)||Array.isArray(t)||(t=[t]);const o="string"!==s?Xs(t,s):tr(t,[],!0);return Mr.makeTensor(o,r,s)}function qr(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(!Array.isArray(t))throw new Error("Argument ".concat(e," passed to ").concat(n," must be a ")+"`Tensor[]` or `TensorLike[]`");return t.map((t,s)=>jr(t,"".concat(e,"[").concat(s,"]"),n,a))}Vr.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Vr.registerFlag("IS_BROWSER",()=>Wr()),Vr.registerFlag("IS_NODE",()=>"undefined"!==typeof process&&"undefined"!==typeof process.versions&&"undefined"!==typeof process.versions.node),Vr.registerFlag("IS_CHROME",()=>"undefined"!==typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Vr.registerFlag("IS_SAFARI",()=>"undefined"!==typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),Vr.registerFlag("PROD",()=>!1),Vr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Vr.getBool("DEBUG")),Vr.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Vr.registerFlag("IS_TEST",()=>!1),Vr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>Vr.getBool("DEBUG")),Vr.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),Vr.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),Vr.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const Kr="__op";function Xr(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+"".concat(e.length," keys."));let n=e[0];const a=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Kr;const s=function(){Mr.startScope(n);try{const t=a(...arguments);return jt(t)&&console.error("Cannot return a Promise inside of tidy."),Mr.endScope(t),t}catch(t){throw Mr.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Yr=Xr({complex_:function(t,e){const n=jr(t,"real","complex"),a=jr(e,"imag","complex");it(n.shape,a.shape,"real and imag shapes, ".concat(n.shape," and ").concat(a.shape,", ")+"must match in call to tf.complex().");const s={real:n,imag:a};return Mr.runKernel(Ce,s)}});function Zr(t,e,n,a){if(null==a)a=Dt(t);else if("complex64"===a)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Sr(t)||Nr(t)){if("float32"!==a&&"int32"!==a)throw new Error("Creating tensor from GPU data only supports "+"'float32'|'int32' dtype, while the dtype is ".concat(a,"."));return Mr.backend.createTensorFromGPUData(t,e||n,a)}if(!$s(t)&&!Array.isArray(t)&&"number"!==typeof t&&"boolean"!==typeof t&&"string"!==typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Ut(e);const t=lt(e),a=lt(n);ot(t===a,()=>"Based on the provided shape, [".concat(e,"], the tensor should have ")+"".concat(t," values but has ").concat(a));for(let s=0;s<n.length;++s){const t=n[s],a=s!==n.length-1||t!==lt(e.slice(s));ot(n[s]===e[s]||!a,()=>"Error creating a new Tensor. Inferred shape "+"(".concat(n,") does not match the provided ")+"shape (".concat(e,"). "))}}return $s(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==a?Xs(t,a):tr(t,[],!0),Mr.makeTensor(t,e,a)}function Jr(t,e,n){return Zr(t,e,Ur(t,n),n)}const Qr={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class $r{static join(t){return new $r(t).slice()}constructor(t){if(this.shards=[],this.previousShardIndex=0,null==t)return;if(t instanceof Array||(t=[t]),0===(t=t.map(t=>$s(t)?t.buffer:t)).length)return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let n=0;n<t.length;n++){const a=t[n];n!==t.length-1&&a.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const s=e+a.byteLength;this.shards.push({buffer:a,start:e,end:s}),e=s}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.byteLength;if(0===this.shards.length)return new ArrayBuffer(0);if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),e=Math.min(this.byteLength,e),e<=t)return new ArrayBuffer(0);const n=this.findShardForByte(t);if(-1===n)throw new Error("Could not find start shard for byte ".concat(t));const a=new ArrayBuffer(e-t),s=new Uint8Array(a);let r=0;for(let o=n;o<this.shards.length;o++){const n=this.shards[o],a=t+r-n.start,i=r,c=Math.min(e,n.end)-n.start,l=new Uint8Array(n.buffer,a,c-a);if(s.set(l,i),r+=l.length,e<n.end)break}return a}findShardForByte(t){if(0===this.shards.length||t<0||t>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(e){return t<e.start?-1:t>=e.end?1:0}if(0===e(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(t,e){let n=0,a=t.length;for(;n<=a;){const s=Math.floor((a-n)/2)+n,r=e(t[s]);if(0===r)return s;r<0?a=s:n=s+1}return-1}(this.shards,e);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}function to(){Yt().set("PROD",!0)}function eo(){Yt().set("DEBUG",!0)}function no(){Yt().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function ao(t){Yt().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function so(){Mr.disposeVariables()}function ro(){return Mr}function oo(){return Mr.memory()}function io(t){return Mr.profile(t)}function co(t,e){return Mr.tidy(t,e)}function lo(t){Ar(t).forEach(t=>t.dispose())}function uo(t){return Mr.keep(t)}function ho(t){return Mr.time(t)}function po(t){return Mr.setBackend(t)}function fo(){return Mr.ready()}function mo(){return Mr.backendName}function go(t){Mr.removeBackend(t)}function yo(t){return Mr.findBackend(t)}function bo(t){return Mr.findBackendFactory(t)}function xo(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Mr.registerBackend(t,e,n)}function wo(){return Mr.backend}function vo(t,e){Yt().setPlatform(t,e)}dr=ao;const ko=4;async function Io(t,e){const n=[],a=[],s=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let r=0;r<s.length;++r){const o=s[r],i=Array.isArray(t)?t[r].tensor:t[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error("Unsupported dtype in weight '".concat(o,"': ").concat(i.dtype));const c={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const t=new Promise(async t=>{const e=await i.bytes(),n=e.reduce((t,e)=>t+e.length,0)+ko*e.length,a=new Uint8Array(n);let s=0;for(let r=0;r<e.length;r++){const t=e[r],n=new Uint8Array(new Uint32Array([t.length]).buffer);a.set(n,s),s+=ko,a.set(t,s),s+=t.length}t(a)});a.push(t)}else a.push(i.data());null!=e&&(c.group=e),n.push(c)}return{data:Ro(await Promise.all(a)),specs:n}}function No(t,e){const n=new $r(t),a={};let s=0;for(const r of e){const t=So(r,(t,e)=>n.slice(s+t,s+e));a[r.name]=Co(r,n.slice(s,s+t)),s+=t}return a}function So(t,e){const n=lt(t.shape);let a;if("quantization"in t){const e=t.quantization;a=Qr[e.dtype]}else{if("string"===t.dtype){let t=0;for(let a=0;a<n;a++)t+=ko+new Uint32Array(e(t,t+ko))[0];return t}a=Qr[t.dtype]}return n*a}async function To(t,e){const n=lt(t.shape);let a;if("quantization"in t){const e=t.quantization;a=Qr[e.dtype]}else{if("string"===t.dtype){let t=0;for(let a=0;a<n;a++)t+=ko+new Uint32Array(await e(t,t+ko))[0];return t}a=Qr[t.dtype]}return n*a}function Co(t,e){const n=t.name,a=t.dtype,s=t.shape,r=lt(s);let o,i=0;if("quantization"in t){const s=t.quantization;if("uint8"===s.dtype||"uint16"===s.dtype){if(!("min"in s)||!("scale"in s))throw new Error("Weight ".concat(t.name," with quantization ").concat(s.dtype," ")+"doesn't have corresponding metadata min and scale.")}else{if("float16"!==s.dtype)throw new Error("Weight ".concat(t.name," has unknown ")+"quantization dtype ".concat(s.dtype,". ")+"Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.");if("float32"!==a)throw new Error("Weight ".concat(t.name," is quantized with ").concat(s.dtype," ")+"which only supports weights of type float32 not ".concat(a,"."))}const c=Qr[s.dtype],l="uint8"===s.dtype?new Uint8Array(e):new Uint16Array(e);if("float32"===a)if("uint8"===s.dtype||"uint16"===s.dtype){o=new Float32Array(l.length);for(let t=0;t<l.length;t++){const e=l[t];o[t]=e*s.scale+s.min}}else{if("float16"!==s.dtype)throw new Error("Unsupported quantization type ".concat(s.dtype," ")+"for weight type float32.");{const t=function(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0===(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let n=1024;n<2048;n++)e[n]=939524096+(n-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return a=>{const s=new ArrayBuffer(4*a.length),r=new Uint32Array(s);for(let o=0;o<a.length;o++){const s=a[o],i=t[n[s>>10]+(1023&s)]+e[s>>10];r[o]=i}return new Float32Array(s)}}();o=t(l)}}else{if("int32"!==a)throw new Error("Unsupported dtype in weight '".concat(n,"': ").concat(a));if("uint8"!==s.dtype&&"uint16"!==s.dtype)throw new Error("Unsupported quantization type ".concat(s.dtype," ")+"for weight type int32.");o=new Int32Array(l.length);for(let t=0;t<l.length;t++){const e=l[t];o[t]=Math.round(e*s.scale+s.min)}}i+=r*c}else if("string"===a){const n=lt(t.shape);o=[];for(let t=0;t<n;t++){const t=new Uint32Array(e.slice(i,i+ko))[0];i+=ko;const n=new Uint8Array(e.slice(i,i+t));o.push(n),i+=t}}else{const t=Qr[a];if("float32"===a)o=new Float32Array(e);else if("int32"===a)o=new Int32Array(e);else{if("bool"!==a){if("complex64"===a){o=new Float32Array(e);const t=new Float32Array(o.length/2),n=new Float32Array(o.length/2);for(let e=0;e<t.length;e++)t[e]=o[2*e],n[e]=o[2*e+1];const a=Jr(t,s,"float32"),r=Jr(n,s,"float32"),i=Yr(a,r);return a.dispose(),r.dispose(),i}throw new Error("Unsupported dtype in weight '".concat(n,"': ").concat(a))}o=new Uint8Array(e)}i+=r*t}return Jr(o,s,a)}async function Eo(t,e,n){let a=new Uint8Array(e);for(;a.byteLength<n;){const{done:e,value:s}=await t.read();if(e&&null==s){const t=n-a.byteLength;throw new Error("Reader is done but ".concat(t," bytes are still expected"))}const r=new Uint8Array(a.length+s.byteLength);r.set(a,0),r.set(new Uint8Array(s),a.length),a=r}return a.buffer}async function Ao(t,e){const n={},a=t.getReader();let s=new ArrayBuffer(0);for(const r of e){const t=await To(r,async(t,e)=>(s=await Eo(a,s,e),s.slice(t,e)));s=await Eo(a,s,t);const e=s.slice(0,t);s=s.slice(t);const o=Co(r,e);if(n[r.name]=o,"webgpu"===mo()){const t=wo();"uploadToGPU"in t&&lt(o.shape)>=Yt().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&t.uploadToGPU(o.dataId)}}return n}function Ro(t){if(null===t)throw new Error("Invalid input value: ".concat(JSON.stringify(t)));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: ".concat(t.constructor.name))});const a=new Uint8Array(e);let s=0;return n.forEach(t=>{a.set(new Uint8Array(t.buffer),s),s+=t.byteLength}),a.buffer}const Fo="undefined"!==typeof Buffer&&("undefined"===typeof Blob||"undefined"===typeof atob||"undefined"===typeof btoa);function Do(t){return Fo?Buffer.byteLength(t,"utf8"):new Blob([t]).size}function _o(t){return $r.join(t)}function Oo(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function Mo(t,e){const n={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:e};return null!=t.signature&&(n.signature=t.signature),null!=t.userDefinedMetadata&&(n.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(n.modelInitializer=t.modelInitializer),null!=t.initializerSignature&&(n.initializerSignature=t.initializerSignature),null!=t.trainingConfig&&(n.trainingConfig=t.trainingConfig),n}function Lo(t,e,n){const a={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy};if(null!=t.trainingConfig&&(a.trainingConfig=t.trainingConfig),null!=t.weightsManifest){if(!e)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");a.weightSpecs=e,a.weightData=n}return null!=t.signature&&(a.signature=t.signature),null!=t.userDefinedMetadata&&(a.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(a.modelInitializer=t.modelInitializer),null!=t.initializerSignature&&(a.initializerSignature=t.initializerSignature),a}async function zo(t,e){let n,a;return null!=t.weightsManifest&&([n,a]=await e(t.weightsManifest)),Lo(t,n,a)}function Po(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Do(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Do(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:new $r(t.weightData).byteLength}}function Bo(t){const e=[];for(const n of t)e.push(...n.weights);return e}class Wo{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Wo.instance&&(Wo.instance=new Wo),Wo.instance}static registerSaveRouter(t){Wo.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Wo.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Wo.getHandlers(t,"save")}static getLoadHandlers(t,e){return Wo.getHandlers(t,"load",e)}static getHandlers(t,e,n){const a=[];return("load"===e?Wo.getInstance().loadRouters:Wo.getInstance().saveRouters).forEach(e=>{const s=e(t,n);null!==s&&a.push(s)}),a}}const Vo=t=>Wo.registerSaveRouter(t),Uo=t=>Wo.registerLoadRouter(t),Go=t=>Wo.getSaveHandlers(t),Ho=(t,e)=>Wo.getLoadHandlers(t,e),jo="tensorflowjs",qo="models_store",Ko="model_info_store";function Xo(){if(!Yt().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"===typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function Yo(t){const e=t.result;e.createObjectStore(qo,{keyPath:"modelPath"}),e.createObjectStore(Ko,{keyPath:"modelPath"})}class Zo{constructor(t){if(this.indexedDB=Xo(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const a=this.indexedDB.open(jo,1);a.onupgradeneeded=()=>Yo(a),a.onsuccess=()=>{const s=a.result;if(null==e){const e=s.transaction(qo,"readonly"),a=e.objectStore(qo).get(this.modelPath);a.onsuccess=()=>{if(null==a.result)return s.close(),n(new Error("Cannot find model with path '".concat(this.modelPath,"' ")+"in IndexedDB."));t(a.result.modelArtifacts)},a.onerror=t=>(s.close(),n(a.error)),e.oncomplete=()=>s.close()}else{e.weightData=$r.join(e.weightData);const a=Po(e),o=s.transaction(Ko,"readwrite");let i,c,l=o.objectStore(Ko);try{i=l.put({modelPath:this.modelPath,modelArtifactsInfo:a})}catch(r){return n(r)}i.onsuccess=()=>{c=s.transaction(qo,"readwrite");const i=c.objectStore(qo);let u;try{u=i.put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:a})}catch(r){return n(r)}u.onsuccess=()=>t({modelArtifactsInfo:a}),u.onerror=t=>{l=o.objectStore(Ko);const e=l.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(u.error)),e.onerror=t=>(s.close(),n(u.error))}},i.onerror=t=>(s.close(),n(i.error)),o.oncomplete=()=>{null==c?s.close():c.oncomplete=()=>s.close()}}},a.onerror=t=>n(a.error)})}}Zo.URL_SCHEME="indexeddb://";const Jo=t=>{return Yt().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Zo.URL_SCHEME)?(e=t.slice(Zo.URL_SCHEME.length),new Zo(e)):null;var e};Wo.registerSaveRouter(Jo),Wo.registerLoadRouter(Jo);class Qo{constructor(){this.indexedDB=Xo()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open(jo,1);n.onupgradeneeded=()=>Yo(n),n.onsuccess=()=>{const a=n.result,s=a.transaction(Ko,"readonly"),r=s.objectStore(Ko).getAll();r.onsuccess=()=>{const e={};for(const t of r.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},r.onerror=t=>(a.close(),e(r.error)),s.oncomplete=()=>a.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(Zo.URL_SCHEME)?e.slice(Zo.URL_SCHEME.length):e,new Promise((e,n)=>{const a=this.indexedDB.open(jo,1);a.onupgradeneeded=()=>Yo(a),a.onsuccess=()=>{const s=a.result,r=s.transaction(Ko,"readwrite"),o=r.objectStore(Ko),i=o.get(t);let c;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error("Cannot find model with path '".concat(t,"' ")+"in IndexedDB."));{const a=o.delete(t),r=()=>{c=s.transaction(qo,"readwrite");const a=c.objectStore(qo).delete(t);a.onsuccess=()=>e(i.result.modelArtifactsInfo),a.onerror=t=>n(i.error)};a.onsuccess=r,a.onerror=t=>(r(),s.close(),n(i.error))}},i.onerror=t=>(s.close(),n(i.error)),r.oncomplete=()=>{null==c?s.close():c.oncomplete=()=>s.close()}},a.onerror=t=>n(a.error)})}}const $o="/",ti="tensorflowjs_models",ei="info",ni="model_topology",ai="weight_specs",si="weight_data",ri="model_metadata";function oi(t){return{info:[ti,t,ei].join($o),topology:[ti,t,ni].join($o),weightSpecs:[ti,t,ai].join($o),weightData:[ti,t,si].join($o),modelMetadata:[ti,t,ri].join($o)}}function ii(t){for(const e of Object.values(t))window.localStorage.removeItem(e)}function ci(t){const e=t.split($o);if(e.length<3)throw new Error("Invalid key format: ".concat(t));return e.slice(1,e.length-1).join($o)}class li{constructor(t){if(!Yt().getBool("IS_BROWSER")||"undefined"===typeof window||"undefined"===typeof window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=oi(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(t.modelTopology),a=JSON.stringify(t.weightSpecs),s=Po(t),r=$r.join(t.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,a),this.LS.setItem(this.keys.weightData,function(t){if(Fo)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let a=0,s=e.length;a<s;a++)n+=String.fromCharCode(e[a]);return btoa(n)}(r));const e={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,signature:null!=t.signature?t.signature:void 0,userDefinedMetadata:null!=t.userDefinedMetadata?t.userDefinedMetadata:void 0,modelInitializer:null!=t.modelInitializer?t.modelInitializer:void 0,initializerSignature:null!=t.initializerSignature?t.initializerSignature:void 0,trainingConfig:null!=t.trainingConfig?t.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(e)),{modelArtifactsInfo:s}}catch(e){throw ii(this.keys),new Error("Failed to save model '".concat(this.modelPath,"' to local storage: ")+"size quota being exceeded is a possible cause of this failure: "+"modelTopologyBytes=".concat(s.modelTopologyBytes,", ")+"weightSpecsBytes=".concat(s.weightSpecsBytes,", ")+"weightDataBytes=".concat(s.weightDataBytes,"."))}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error("In local storage, there is no model with name '".concat(this.modelPath,"'"));if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error("In local storage, the topology of model '".concat(this.modelPath,"' ")+"is missing.");e.modelTopology=n;const a=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==a)throw new Error("In local storage, the weight specs of model '".concat(this.modelPath,"' ")+"are missing.");e.weightSpecs=a;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,null!=t.signature&&(e.signature=t.signature),null!=t.userDefinedMetadata&&(e.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(e.modelInitializer=t.modelInitializer),null!=t.initializerSignature&&(e.initializerSignature=t.initializerSignature),null!=t.trainingConfig&&(e.trainingConfig=t.trainingConfig)}const r=this.LS.getItem(this.keys.weightData);if(null==r)throw new Error("In local storage, the binary weight values of model "+"'".concat(this.modelPath,"' are missing."));return e.weightData=function(t){if(Fo){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let a=0;a<e.length;++a)n.set([e.charCodeAt(a)],a);return n.buffer}(r),e}}li.URL_SCHEME="localstorage://";const ui=t=>{return Yt().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(li.URL_SCHEME)?(e=t.slice(li.URL_SCHEME.length),new li(e)):null;var e};Wo.registerSaveRouter(ui),Wo.registerLoadRouter(ui);class hi{constructor(){ot(Yt().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),ot("undefined"===typeof window||"undefined"!==typeof window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=ti+$o,n=$o+ei;for(let a=0;a<this.LS.length;++a){const s=this.LS.key(a);if(s.startsWith(e)&&s.endsWith(n)){t[ci(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=oi(t=(e=t).startsWith(li.URL_SCHEME)?e.slice(li.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error("Cannot find model at path '".concat(t,"'"));const a=JSON.parse(this.LS.getItem(n.info));return ii(n),a}}const di="://";class pi{constructor(){this.managers={}}static getInstance(){return null==pi.instance&&(pi.instance=new pi),pi.instance}static registerManager(t,e){ot(null!=t,()=>"scheme must not be undefined or null."),t.endsWith(di)&&(t=t.slice(0,t.indexOf(di))),ot(t.length>0,()=>"scheme must not be an empty string.");const n=pi.getInstance();ot(null==n.managers[t],()=>"A model store manager is already registered for scheme '".concat(t,"'.")),n.managers[t]=e}static getManager(t){const e=pi.getInstance().managers[t];if(null==e)throw new Error("Cannot find model manager for scheme '".concat(t,"'"));return e}static getSchemes(){return Object.keys(pi.getInstance().managers)}}function fi(t){if(-1===t.indexOf(di))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+"".concat(pi.getSchemes().join(",")));return{scheme:t.split(di)[0],path:t.split(di)[1]}}async function mi(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];ot(t!==e,()=>"Old path and new path are the same: '".concat(t,"'"));const a=Wo.getLoadHandlers(t);ot(a.length>0,()=>"Copying failed because no load handler is found for source URL ".concat(t,".")),ot(a.length<2,()=>"Copying failed because more than one (".concat(a.length,") ")+"load handlers for source URL ".concat(t,"."));const s=a[0],r=Wo.getSaveHandlers(e);ot(r.length>0,()=>"Copying failed because no save handler is found for destination "+"URL ".concat(e,".")),ot(r.length<2,()=>"Copying failed because more than one (".concat(a.length,") ")+"save handlers for destination URL ".concat(e,"."));const o=r[0],i=fi(t).scheme,c=fi(t).path,l=i===fi(t).scheme,u=await s.load();n&&l&&await pi.getManager(i).removeModel(c);const h=await o.save(u);return n&&!l&&await pi.getManager(i).removeModel(c),h.modelArtifactsInfo}async function gi(){const t=pi.getSchemes(),e={};for(const n of t){const t=await pi.getManager(n).listModels();for(const a in t){e[n+di+a]=t[a]}}return e}async function yi(t){const e=fi(t);return pi.getManager(e.scheme).removeModel(e.path)}async function bi(t,e){return mi(t,e,!1)}async function xi(t,e){return mi(t,e,!0)}class wi{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got ".concat(e));return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){"undefined"!==typeof window&&Yt().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",t=>{if(t.source===window&&t.data.name===this.messageName){t.stopPropagation();(0,this.functionRefs[t.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))):setTimeout(t,e)}isTypedArray(t){return Ds(t)}}if(Yt().get("IS_BROWSER")){Yt().setPlatform("browser",new wi);try{pi.registerManager(li.URL_SCHEME,new hi)}catch(uj){}try{pi.registerManager(Zo.URL_SCHEME,new Qo)}catch(uj){}}const vi=()=>n(5817);let ki;class Ii{constructor(){this.util=n(8590),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=Yt().global.fetch?Yt().global.fetch(t,e):(null==ki&&(ki=vi()),ki(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got ".concat(e));return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}}function Ni(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32",n=arguments.length>2?arguments[2]:void 0;return e=e||"float32",Ut(t),new lr(t,e,n)}Yt().get("IS_NODE")&&!Yt().get("IS_BROWSER")&&Yt().setPlatform("node",new Ii);const Si=Xr({cast_:function(t,e){const n=jr(t,"x","cast");if(!St(e))throw new Error("Failed to cast to unknown dtype ".concat(e));if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const a={x:n},s={dtype:e};return Mr.runKernel(Ne,a,s)}});const Ti=Xr({clone_:function(t){const e={x:jr(t,"x","clone","string_or_numeric")};return Mr.runKernel(yn,e)}});function Ci(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];console.log(t.toString(e))}Or();hr={buffer:Ni,cast:Si,clone:Ti,print:Ci};const Ei=Xr({add_:function(t,e){let n=jr(t,"a","add"),a=jr(e,"b","add");[n,a]=Tr(n,a);const s={a:n,b:a};return Mr.runKernel(ae,s)}});const Ai=Xr({floorDiv_:function(t,e){let n=jr(t,"a","floorDiv"),a=jr(e,"b","floorDiv");[n,a]=Tr(n,a);const s={a:n,b:a};return Mr.runKernel(hn,s)}});const Ri=Xr({div_:function(t,e){let n=jr(t,"a","div"),a=jr(e,"b","div");if([n,a]=Tr(n,a),"int32"===n.dtype&&"int32"===a.dtype)return Ai(n,a);const s={a:n,b:a};return Mr.runKernel(Je,s,{})}});const Fi=Xr({mul_:function(t,e){let n=jr(t,"a","mul"),a=jr(e,"b","mul");[n,a]=Tr(n,a);const s={a:n,b:a};return Mr.runKernel(Jn,s)}});const Di=Xr({sqrt_:function(t){const e={x:jr(t,"x","sqrt","float32")};return Mr.runKernel(Pa,e)}});const _i=Xr({square_:function(t){const e=jr(t,"x","square");return Mr.runKernel("Square",{x:e},{})}});const Oi=Xr({zerosLike_:function(t){const e={x:jr(t,"x","zerosLike")};return Mr.runKernel(ds,e)}});function Mi(t){return ot(_t(t),()=>"The f passed in grad(f) must be a function"),(e,n)=>{const a=jr(e,"x","tf.grad","string_or_numeric"),s=null!=n?jr(n,"dy","tf.grad"):null;return Mr.tidy(()=>{const{value:e,grads:n}=Mr.gradients(()=>t(a),[a],s);return null!=s&&it(e.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Vi(n),n[0]})}}function Li(t){return ot(_t(t),()=>"The f passed in grads(f) must be a function"),(e,n)=>{ot(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const a=qr(e,"args","tf.grads","string_or_numeric"),s=null!=n?jr(n,"dy","tf.grads"):null;return Mr.tidy(()=>{const{value:e,grads:n}=Mr.gradients(()=>t(...a),a,s);return null!=s&&it(e.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Vi(n),n})}}function zi(t){return ot(_t(t),()=>"The f passed in valueAndGrad(f) must be a function"),(e,n)=>{ot(e instanceof pr,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),ot(null==n||n instanceof pr,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:a,value:s}=Mr.gradients(()=>t(e),[e],n);return Vi(a),{grad:a[0],value:s}}}function Pi(t){return ot(_t(t),()=>"The f passed in valueAndGrads(f) must be a function"),(e,n)=>{ot(Array.isArray(e)&&e.every(t=>t instanceof pr),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),ot(null==n||n instanceof pr,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const a=Mr.gradients(()=>t(...e),e,n);return null!=n&&it(a.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Vi(a.grads),a}}function Bi(t,e){ot(_t(t),()=>"The f passed in variableGrads(f) must be a function"),ot(null==e||Array.isArray(e)&&e.every(t=>t instanceof mr),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in Mr.registeredVariables)e.push(Mr.registeredVariables[t])}const a=n?e.filter(t=>!t.trainable):null,s=e.length;e=e.filter(t=>t.trainable),ot(e.length>0,()=>"variableGrads() expects at least one of the input variables to "+"be trainable, but none of the ".concat(s," variables is ")+"trainable.");const{value:r,grads:o}=Mr.gradients(t,e,null,!0);ot(o.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),ot(0===r.rank,()=>"The f passed in variableGrads(f) must return a scalar, but it "+"returned a rank-".concat(r.rank," tensor"));const i={};return e.forEach((t,e)=>{null!=o[e]&&(i[t.name]=o[e])}),null!=a&&a.forEach(t=>i[t.name]=null),{value:r,grads:i}}function Wi(t){return Mr.customGrad(t)}function Vi(t){if(t.filter(t=>null==t).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Ui(t,e){if(($s(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&$s(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Zr(t,[],[],e)}const Gi=new Map,Hi=new Map;class ji{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class qi{constructor(){this.classNameMap={}}static getMap(){return null==qi.instance&&(qi.instance=new qi),qi.instance}static register(t){qi.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Ki(t,e,n){ot(null!=t.className,()=>"Class being registered does not have the static className property defined."),ot("string"===typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),ot(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),"undefined"===typeof e&&(e="Custom"),"undefined"===typeof n&&(n=t.className);const a=e+">"+n;return qi.register(t),Gi.set(a,t),Hi.set(t,a),t}function Xi(t){return Hi.has(t)?Hi.get(t):t.className}class Yi extends ji{minimize(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2?arguments[2]:void 0;const{value:a,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:s[t.name]}));this.applyGradients(t)}else this.applyGradients(s);return lo(s),e?a:(a.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return Bi(t,e)}dispose(){null!=this.iterations_&&lo(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Ui(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+"".concat(this.getClassName()))}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(Yi,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class Zi extends Yi{static get className(){return"Adadelta"}constructor(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Mr.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const a=Mr.registeredVariables[e],s=!1;null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:"".concat(e,"/accum_grad"),variable:co(()=>Oi(a).variable(s))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:"".concat(e,"/accum_var"),variable:co(()=>Oi(a).variable(s))});const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const o=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;co(()=>{const t=Ei(Fi(o,this.rho),Fi(_i(r),1-this.rho)),e=Fi(Ri(Di(Ei(i,this.epsilon)),Di(Ei(o,this.epsilon))),r),n=Ei(Fi(i,this.rho),Fi(_i(e),1-this.rho));o.assign(t),i.assign(n);const s=Ei(Fi(e,-this.learningRate),a);a.assign(s)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(lo(this.accumulatedGrads.map(t=>t.variable)),lo(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2,n=!1;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function Ji(t,e,n){Ut(t);const a={shape:t,value:e,dtype:n=n||Dt(e)};return Mr.runKernel(cn,{},a)}class Qi extends Yi{static get className(){return"Adagrad"}constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1;super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const a=Mr.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:"".concat(e,"/accumulator"),variable:co(()=>Ji(a.shape,this.initialAccumulatorValue).variable(t))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const r=this.accumulatedGrads[n].variable;co(()=>{const t=Ei(r,_i(s));r.assign(t);const e=Ei(Fi(Ri(s,Di(Ei(t,Mr.backend.epsilon()))),-this.learningRate),a);a.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&lo(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(false)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}const $i=Xr({pow_:function(t,e){let n=jr(t,"base","pow"),a=jr(e,"exp","pow");[n,a]=Tr(n,a);const s={a:n,b:a};return Mr.runKernel(ca,s)}});const tc=Xr({sub_:function(t,e){let n=jr(t,"a","sub"),a=jr(e,"b","sub");[n,a]=Tr(n,a);const s={a:n,b:a};return Mr.runKernel(es,s)}});class ec extends Yi{static get className(){return"Adam"}constructor(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=a,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],co(()=>{this.accBeta1=Ui(e).variable(),this.accBeta2=Ui(n).variable()}),null==a&&(this.epsilon=Mr.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);co(()=>{const n=tc(1,this.accBeta1),a=tc(1,this.accBeta2);e.forEach((e,s)=>{const r=Mr.registeredVariables[e],o=!1;null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:"".concat(e,"/m"),variable:co(()=>Oi(r).variable(o))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:"".concat(e,"/v"),variable:co(()=>Oi(r).variable(o))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const c=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=Ei(Fi(c,this.beta1),Fi(i,1-this.beta1)),h=Ei(Fi(l,this.beta2),Fi(_i(i),1-this.beta2)),d=Ri(u,n),p=Ri(h,a);c.assign(u),l.assign(h);const f=Ei(Fi(Ri(d,Ei(Di(p),this.epsilon)),-this.learningRate),r);r.assign(f)}),this.accBeta1.assign(Fi(this.accBeta1,this.beta1)),this.accBeta2.assign(Fi(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&lo(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&lo(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),co(()=>{this.accBeta1.assign($i(this.beta1,this.iterations_+1)),this.accBeta2.assign($i(this.beta2,this.iterations_+1))});const e=t.length/2,n=!1;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}const nc=Xr({abs_:function(t){const e=jr(t,"x","abs");if("complex64"===e.dtype){const t={x:e};return Mr.runKernel(Ee,t)}{const t={x:e};return Mr.runKernel(te,t)}}});function ac(t,e){const n=t.length,a=[];for(let s=0;s<n;s++){const r=n-1-s,o=t[r]||1;(e[e.length-1-s]||1)>1&&1===o&&a.unshift(r)}return a}function sc(t,e){const n=[];for(let a=0;a<e.length;a++){const s=t[t.length-a-1],r=e.length-a-1,o=e[r];(null==s||1===s&&o>1)&&n.unshift(r)}return n}function rc(t,e){const n=Math.max(t.length,e.length),a=new Array(n);for(let s=0;s<n;s++){let r=t[t.length-s-1];null==r&&(r=1);let o=e[e.length-s-1];if(null==o&&(o=1),1===r)a[n-s-1]=o;else if(1===o)a[n-s-1]=r;else{if(r!==o){const n="Operands could not be broadcast together with shapes "+"".concat(t," and ").concat(e,".");throw Error(n)}a[n-s-1]=r}}return a}const oc=Xr({maximum_:function(t,e){let n=jr(t,"a","maximum"),a=jr(e,"b","maximum");[n,a]=Tr(n,a),"bool"===n.dtype&&(n=Si(n,"int32"),a=Si(a,"int32")),rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(Bn,s)}});class ic extends Yi{static get className(){return"Adamax"}constructor(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=a,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],co(()=>{this.iteration=Ui(0).variable(),this.accBeta1=Ui(e).variable()}),null==a&&(this.epsilon=Mr.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);co(()=>{const n=tc(1,this.accBeta1),a=Ri(-this.learningRate,Ei(Fi(this.iteration,this.decay),1));e.forEach((e,s)=>{const r=Mr.registeredVariables[e],o=!1;null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:"".concat(e,"/m"),variable:Oi(r).variable(o)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:"".concat(e,"/v"),variable:Oi(r).variable(o)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const c=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=Ei(Fi(c,this.beta1),Fi(i,1-this.beta1)),h=Fi(l,this.beta2),d=nc(i),p=oc(h,d);c.assign(u),l.assign(p);const f=Ei(Fi(Ri(a,n),Ri(u,Ei(p,this.epsilon))),r);r.assign(f)}),this.iteration.assign(Ei(this.iteration,1)),this.accBeta1.assign(Fi(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&lo(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&lo(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}class cc extends Yi{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const a=Array.isArray(t)?t[n].tensor:t[e];if(null==a)return;const s=Mr.registeredVariables[e];co(()=>{const t=Ei(Fi(this.c,a),s);s.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=uo(Ui(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}class lc extends cc{static get className(){return"Momentum"}constructor(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=Ui(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const a=Mr.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:"".concat(e,"/momentum"),variable:co(()=>Oi(a).variable(t))}}const s=this.accumulations[n].variable,r=Array.isArray(t)?t[n].tensor:t[e];null!=r&&co(()=>{let t;const e=Ei(Fi(this.m,s),r);t=this.useNesterov?Ei(Fi(this.c,Ei(r,Fi(e,this.m))),a):Ei(Fi(this.c,e),a),s.assign(e),a.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&lo(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(false)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}class uc extends Yi{static get className(){return"RMSProp"}constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=a,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==a&&(this.epsilon=Mr.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const a=Mr.registeredVariables[e],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:"".concat(e,"/rms"),variable:co(()=>Oi(a).variable(s))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:"".concat(e,"/momentum"),variable:co(()=>Oi(a).variable(s))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:"".concat(e,"/mg"),variable:co(()=>Oi(a).variable(s))});const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;co(()=>{const t=Ei(Fi(o,this.decay),Fi(_i(r),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,s=Ei(Fi(e,this.decay),Fi(r,1-this.decay)),c=Ri(Fi(r,this.learningRate),Di(tc(t,Ei(_i(s),this.epsilon)))),l=Ei(Fi(i,this.momentum),c);o.assign(t),e.assign(s),i.assign(l);const u=tc(a,l);a.assign(u)}else{const t=Ei(Fi(o,this.decay),Fi(_i(r),1-this.decay)),e=Ei(Fi(i,this.momentum),Ri(Fi(r,this.learningRate),Di(Ei(t,this.epsilon))));o.assign(t),i.assign(e);const n=tc(a,e);a.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&lo(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&lo(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&lo(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2,n=!1;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}const hc=[Zi,Qi,ec,ic,lc,uc,cc];function dc(t){return new Promise(t=>setTimeout(t)).then(t)}class pc{constructor(t){if(!Yt().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(pc.URL_SCHEME)&&(t=t.slice(pc.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelJsonFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"===typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=$r.join(t.weightData),n=window.URL.createObjectURL(new Blob([e],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const e=Mo(t,[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}]),a=window.URL.createObjectURL(new Blob([JSON.stringify(e)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=a,await dc(()=>s.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=n,await dc(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Po(t)}}}}pc.URL_SCHEME="downloads://";class fc{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, "+"but received ".concat(t));this.jsonFile=t[0],this.weightsFiles=t.slice(1)}async load(){return new Promise((t,e)=>{const n=new FileReader;n.onload=n=>{const a=JSON.parse(n.target.result),s=a.modelTopology;if(null==s)return void e(new Error("modelTopology field is missing from file ".concat(this.jsonFile.name)));if(null==a.weightsManifest)return void e(new Error("weightManifest field is missing from file ".concat(this.jsonFile.name)));if(0===this.weightsFiles.length)return void t({modelTopology:s});const r=zo(a,t=>this.loadWeights(t));t(r)},n.onerror=t=>e("Failed to read model topology and weights manifest JSON "+"from file '".concat(this.jsonFile.name,"'. BrowserFiles supports loading ")+"Keras-style tf.Model artifacts only."),n.readAsText(this.jsonFile)})}loadWeights(t){const e=[],n=[];for(const r of t)e.push(...r.weights),n.push(...r.paths);const a=this.checkManifestAndWeightFiles(t),s=n.map(t=>this.loadWeightsFile(t,a[t]));return Promise.all(s).then(t=>[e,t])}loadWeightsFile(t,e){return new Promise((n,a)=>{const s=new FileReader;s.onload=t=>{const e=t.target.result;n(e)},s.onerror=e=>a("Failed to weights data from file of path '".concat(t,"'.")),s.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){const e=[],n=this.weightsFiles.map(t=>Oo(t.name)),a={};for(const s of t)s.paths.forEach(t=>{const s=Oo(t);if(-1!==e.indexOf(s))throw new Error("Duplicate file basename found in weights manifest: "+"'".concat(s,"'"));if(e.push(s),-1===n.indexOf(s))throw new Error("Weight file with basename '".concat(s,"' is not provided."));a[t]=this.weightsFiles[n.indexOf(s)]});if(e.length!==this.weightsFiles.length)throw new Error("Mismatch in the number of files in weights manifest "+"(".concat(e.length,") and the number of weight files provided ")+"(".concat(this.weightsFiles.length,")."));return a}}function mc(t){return new fc(t)}function gc(t,e,n,a){!function(t){ot(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){ot(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but "+"got startFraction ".concat(t)),ot(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but "+"got endFraction ".concat(e)),ot(e>=t,()=>"startFraction must be no more than endFraction, but "+"got startFraction ".concat(t," and endFraction ")+"".concat(e))}(n=null==n?0:n,a=null==a?1:a);let s=0;return Promise.all(t.map(r=>(r.then(r=>{const o=n+ ++s/t.length*(a-n);return e(o),r}),r)))}async function yc(t,e){null==e&&(e={});const n=null==e.fetchFunc?Yt().platform.fetch:e.fetchFunc,a=t.map(t=>n(t,e.requestInit,{isBinary:!0})),s=(null==e.onProgress?await Promise.all(a):await gc(a,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(s):await gc(s,e.onProgress,.5,1)}async function bc(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0;return xc(t=>yc(t,{requestInit:a}))(t,e,n)}function xc(t){return async function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",a=arguments.length>2?arguments[2]:void 0;const s=e.map(()=>!1),r={},o=null!=a?a.map(()=>!1):[],i=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const c="quantization"in t?t.quantization.dtype:t.dtype,l=Qr[c]*lt(t.shape),u=()=>{s[e]=!0,null==r[e]&&(r[e]=[]),r[e].push({manifestEntry:t,groupOffset:n,sizeBytes:l})};null!=a?a.forEach((e,n)=>{e===t.name&&(u(),o[n]=!0)}):u(),i.push(t.name),n+=l})}),!o.every(t=>t)){const t=a.filter((t,e)=>!o[e]);throw new Error("Could not find weights in manifest with names: "+"".concat(t.join(", "),". \n")+"Manifest JSON has weights with names: "+"".concat(i.join(", "),"."))}const c=s.reduce((t,e,n)=>(e&&t.push(n),t),[]),l=[];c.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;l.push(e)})});const u=await t(l),h={};let d=0;return c.forEach(t=>{const n=e[t].paths.length,a=new $r(u.slice(d,d+n));r[t].forEach(t=>{const e=No(a.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const n in e)h[n]=e[n]}),d+=n}),h}}Wo.registerSaveRouter(t=>Yt().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(pc.URL_SCHEME)?function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"model";return new pc(t)}(t.slice(pc.URL_SCHEME.length)):null);class wc{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(ot("function"===typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=Yt().platform.fetch,ot(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&ot(2===t.length,()=>"URL paths for http must have a length of 2, "+"(actual length is ".concat(t.length,").")),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{},this.loadOptions=e}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=Mo(t,[{paths:["./model.weights.bin"],weights:t.weightSpecs}]);if(e.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=t.weightData){const n=$r.join(t.weightData);e.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const a=await this.fetch(this.path,e);if(a.ok)return{modelArtifactsInfo:Po(t),responses:[a]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+"".concat(a.status,"."))}async loadModelJSON(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error("Request to ".concat(this.path," failed with status code ")+"".concat(t.status,". Please verify this URL points to ")+"the model JSON of the model to load.");let e;try{e=await t.json()}catch(s){let t="Failed to parse model JSON of response from ".concat(this.path,".");throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=e.modelTopology,a=e.weightsManifest;if(null==n&&null==a)throw new Error("The JSON from HTTP path ".concat(this.path," contains neither model ")+"topology or manifest for weights.");return e}async load(){if(this.loadOptions.streamWeights)return this.loadStream();return zo(await this.loadModelJSON(),t=>this.loadWeights(t))}async loadStream(){const t=await this.loadModelJSON(),e=await this.getWeightUrls(t.weightsManifest),n=Bo(t.weightsManifest);return Object.assign(Object.assign({},t),{weightSpecs:n,getWeightStream:()=>function(t,e){var n;const a=null==e.fetchFunc?Yt().platform.fetch:e.fetchFunc;let s,r=0;return null===(n=e.onProgress)||void 0===n||n.call(e,0),new ReadableStream({pull:async n=>{for(var o;r<t.length;){if(!s){const n=(await a(t[r],e.requestInit,{isBinary:!0})).body;s=n.getReader()}const{done:i,value:c}=await s.read();if(!i)return void n.enqueue(c);r++,s=void 0,null===(o=e.onProgress)||void 0===o||o.call(e,r/t.length)}n.close()}})}(e,this.loadOptions)})}async getWeightUrls(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,a]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),a=t.substring(0,e),s=n>e?t.substring(n):"";return[a+"/",s]}(e),s=this.weightPathPrefix||n,r=[],o=[];for(const i of t)for(const t of i.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(t)):r.push(s+t+a);return this.weightUrlConverter&&r.push(...await Promise.all(o)),r}async loadWeights(t){const e=await this.getWeightUrls(t);return[Bo(t),await yc(e,this.loadOptions)]}}function vc(t){return null!=t.match(wc.URL_SCHEME_REGEX)}wc.URL_SCHEME_REGEX=/^https?:\/\//;const kc=(t,e)=>{if("undefined"===typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>vc(t)):vc(t),n)return Ic(t,e)}return null};function Ic(t,e){return new wc(t,e)}function Nc(t,e){return Ic(t,e)}Wo.registerSaveRouter(kc),Wo.registerLoadRouter(kc);class Sc{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}}class Tc{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}}class Cc{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}}function Ec(t,e,n,a){return new Cc(Ac(...arguments))}function Ac(t,e,n,a){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new Sc(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Sc({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Sc({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:a})}function Rc(t){return new Tc(t)}function Fc(t){return new Tc(t)}const Dc=Xr({matMul_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=jr(t,"a","matMul"),r=jr(e,"b","matMul");[s,r]=Tr(s,r);const o={a:s,b:r},i={transposeA:n,transposeB:a};return Mr.runKernel(be,o,i)}});const _c=Xr({oneHot_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"int32";if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is ".concat(e));const r={indices:jr(t,"indices","oneHot","int32")},o={dtype:s,depth:e,onValue:n,offValue:a};return Mr.runKernel(sa,r,o)}});const Oc=Xr({imag_:function(t){const e={input:jr(t,"input","imag")};return Mr.runKernel(xn,e)}});const Mc=Xr({neg_:function(t){const e={x:jr(t,"x","neg")};return Mr.runKernel(Qn,e)}});const Lc=Xr({real_:function(t){const e={input:jr(t,"input","real")};return Mr.runKernel(ma,e)}});const zc=Xr({transpose_:function(t,e,n){const a=jr(t,"x","transpose");if(null==e&&(e=a.shape.map((t,e)=>e).reverse()),ot(a.rank===e.length,()=>"Error in transpose: rank of input ".concat(a.rank," ")+"must match length of perm ".concat(e,".")),e.forEach(t=>{ot(t>=0&&t<a.rank,()=>"All entries in 'perm' must be between 0 and ".concat(a.rank-1)+" but got ".concat(e))}),a.rank<=1)return a.clone();const s={x:a},r={perm:e};return"complex64"===a.dtype?co(()=>{let t=Lc(a),e=Oc(a);return t=Mr.runKernel(is,{x:t},r),e=Mr.runKernel(is,{x:e},r),n&&(e=Mc(e)),Yr(t,e)}):Mr.runKernel(is,s,r)}});const Pc=Xr({confusionMatrix_:function(t,e,n){const a=jr(t,"labels","confusionMatrix"),s=jr(e,"predictions","confusionMatrix");ot(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, "+"but got ".concat(n)),ot(1===a.rank,()=>"Expected the rank of labels to be 1, but got ".concat(a.rank)),ot(1===s.rank,()=>"Expected the rank of predictions to be 1, "+"but got ".concat(s.rank)),ot(a.shape[0]===s.shape[0],()=>"Mismatch in the number of examples: "+"".concat(a.shape[0]," vs. ").concat(s.shape[0],". ")+"Labels and predictions should have the same number of elements."),ot(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+"".concat(n));const r=_c(Si(a,"int32"),n),o=_c(Si(s,"int32"),n),i=zc(r),c=Dc(i,o);return Si(c,"int32")}});function Bc(t,e,n){if(ct(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const a=Ur(t,n);if(3!==a.length&&1!==a.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===a.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Zr(t,e,a,n)}let Wc,Vc=!1;function Uc(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,a=!1,s=!1,r=!1,o=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!==typeof ImageData&&t instanceof ImageData)a=!0;else if("undefined"!==typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!==typeof HTMLImageElement&&t instanceof HTMLImageElement)r=!0;else if(null!=t.getContext)o=!0;else{if(!("undefined"!==typeof ImageBitmap&&t instanceof ImageBitmap))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, "+"but was ".concat(t.constructor.name));i=!0}if(null!=Is(fs,Mr.backendName)){const n={pixels:t},a={numChannels:e};return Mr.runKernel(fs,n,a)}const[c,l]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let u,h;if(o)u=t.getContext("2d").getImageData(0,0,c,l).data;else if(a||n)u=t.data;else if(r||s||i){if(null==Wc)if("undefined"===typeof document){if("undefined"===typeof OffscreenCanvas||"undefined"===typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Wc=new OffscreenCanvas(1,1).getContext("2d")}else Wc=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Wc.canvas.width=c,Wc.canvas.height=l,Wc.drawImage(t,0,0,c,l),u=Wc.getImageData(0,0,c,l).data}if(4===e)h=new Int32Array(u);else{const t=c*l;h=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)h[n*e+t]=u[4*n+t]}return Bc(h,[l,c,e],"int32")}function Gc(t){return"undefined"!==typeof window&&"undefined"!==typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(t instanceof ImageBitmap)&&function(t){return null!=t&&0!==t.width&&0!==t.height}(t)&&!function(t){return null!=t&&t.data instanceof Uint8Array}(t)}async function Hc(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,n=null;if(Yt().getBool("WRAP_TO_IMAGEBITMAP")&&Gc(t)){let e;try{e=await createImageBitmap(t,{premultiplyAlpha:"none"})}catch(a){e=null}n=null!=e&&e.width===t.width&&e.height===t.height?e:t}else n=t;return Uc(n,e)}function jc(t){if(2!==t.rank&&3!==t.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank ".concat(t.rank,"."));const e=2===t.rank?1:t.shape[2];if(e>4||2===e)throw new Error("toPixels only supports depth of size "+"1, 3 or 4 but got ".concat(e));if("float32"!==t.dtype&&"int32"!==t.dtype)throw new Error("Unsupported type for toPixels: ".concat(t.dtype,".")+" Please use float32 or int32 tensors.")}async function qc(t,e){let n=jr(t,"img","toPixels");if(!(t instanceof pr)){const t=n;n=Si(t,"int32"),t.dispose()}jc(n);const[a,s]=n.shape.slice(0,2),r=2===n.rank?1:n.shape[2],o=await n.data(),i="float32"===n.dtype?255:1,c=new Uint8ClampedArray(s*a*4);for(let l=0;l<a*s;++l){const t=[0,0,0,255];for(let a=0;a<r;a++){const e=o[l*r+a];if("float32"===n.dtype){if(e<0||e>1)throw new Error("Tensor values for a float32 Tensor must be in the "+"range [0 - 1] but encountered ".concat(e,"."))}else if("int32"===n.dtype&&(e<0||e>255))throw new Error("Tensor values for a int32 Tensor must be in the "+"range [0 - 255] but encountered ".concat(e,"."));1===r?(t[0]=e*i,t[1]=e*i,t[2]=e*i):t[a]=e*i}const e=4*l;c[e+0]=Math.round(t[0]),c[e+1]=Math.round(t[1]),c[e+2]=Math.round(t[2]),c[e+3]=Math.round(t[3])}if(null!=e){if(!Vc){null!=Is(Ze,Mr.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),Vc=!0)}e.width=s,e.height=a;const t=e.getContext("2d"),n=new ImageData(c,s,a);t.putImageData(n,0,0)}return n!==t&&n.dispose(),c}function Kc(t,e,n){let a=jr(t,"img","draw");if(!(t instanceof pr)){const t=a;a=Si(t,"int32"),t.dispose()}jc(a),function(t){const e=(null===t||void 0===t?void 0:t.alpha)||1;if(e>1||e<0)throw new Error("Alpha value ".concat(e," is suppoed to be in range [0 - 1]."))}(null===n||void 0===n?void 0:n.imageOptions);const s={image:a},r={canvas:e,options:n};Mr.runKernel(Ze,s,r)}const Xc=Xr({fromPixels_:Uc});function Yc(t,e){const n=t.shape.length,a=e.shape.length;if(n<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher,"+" but the rank was ".concat(n,"."));if(a<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher,"+" but the rank was ".concat(a,"."));if("int32"!==e.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type,"+" but the dtype was ".concat(e.dtype,"."));if(e.shape[a-1]>n)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+"".concat(e.shape[a-1]," vs. ").concat(n));if(0===lt(t.shape))throw new Error("Requested more than 0 entries, but input is empty."+" Input shape: ".concat(t.shape,"."));const s=e.shape,r=s[s.length-1];let o=1;for(let h=0;h<s.length-1;++h)o*=s[h];const i=t.shape,c=s.slice();c.pop();let l=1;for(let h=r;h<n;++h)l*=i[h],c.push(i[h]);const u=[...Mt(t.shape).map(t=>t/l),1].slice(0,r);return[c,o,l,u]}function Zc(t,e,n){const a=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,r="Must have updates.shape = indices.shape[:batchDim] + "+"shape[sliceDim:], got updates.shape: ".concat(n.shape)+", indices.shape: ".concat(e.shape,", shape: ").concat(t)+", sliceDim: ".concat(a,", and batchDim: ").concat(s,".");if(n.rank<s)throw new Error(r+" update.rank < ".concat(s,". "));if(t.length<a+(n.rank-s))throw new Error(r+" Output shape length < ".concat(a+(n.rank-s)));if(n.rank!==s+t.length-a)throw new Error(r+" update.rank != ".concat(s+t.length-a));for(let o=0;o<s;++o)if(n.shape[o]!==e.shape[o])throw new Error(r+" updates.shape[".concat(o,"] (").concat(n.shape[o],") != indices.shape[").concat(o,"] (").concat(e.shape[o],")."));for(let o=0;o<n.rank-s;++o)if(n.shape[o+s]!==t[o+a])throw new Error(r+" updates.shape[".concat(o+s,"] (").concat(n.shape[o+s],") != shape[").concat(o+s,"] (").concat(t[o+s],")"))}function Jc(t,e,n){if(e.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher,"+" but the rank was ".concat(e.rank,"."));if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher,"+" but the rank was ".concat(t.rank,"."));if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: ".concat(e.dtype));if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: ".concat(n));if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: ".concat(e.shape));if(0===t.size)throw new Error("Updates specified for empty output. updates shape: ".concat(t.shape))}Zc(n,e,t)}function Qc(t,e,n){const a=e.shape.length,s=a>1?e.shape[a-1]:1,r=n.length;let o=1;for(let c=s;c<r;++c)o*=n[c];const i=s<1?1:s;return{sliceRank:s,numUpdates:lt(e.shape)/i,sliceSize:o,strides:[...Mt(n.slice(0,s)),1],outputSize:lt(n)}}const $c=-2,tl=-1;function el(t,e,n){const a=t.shape.length;ot(a===e.length,()=>"Error in slice".concat(a,"D: Length of begin ").concat(e," must ")+"match the rank of the array (".concat(a,").")),ot(a===n.length,()=>"Error in slice".concat(a,"D: Length of size ").concat(n," must ")+"match the rank of the array (".concat(a,")."));for(let s=0;s<a;++s)ot(e[s]+n[s]<=t.shape[s],()=>"Error in slice".concat(a,"D: begin[").concat(s,"] + size[").concat(s,"] ")+"(".concat(e[s]+n[s],") would overflow input.shape[").concat(s,"] (").concat(t.shape[s],")"))}function nl(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function al(t,e,n){const a=[];for(let s=0;s<t.length;s++)a[s]=Math.ceil((e[s]-t[s])/n[s]);return a}function sl(t,e,n,a){const s=[...t];for(let r=s.length;r<a.length;r++)s.push(1);for(let r=0;r<n;r++)0===r?s[e]=1:(s.splice(e,0,1),s.pop());return s}function rl(t,e,n){return n<=t?n:n-(e-1)}function ol(t,e){const n=[];for(let a=0;a<t;a++)n.push(e+a);return n}function il(t,e,n,a,s,r,o,i,c){const l=t.length;let u=new Array(l),h=new Array(l),d=new Array(l);if(e.length&&n>0){const c=e[0],l=n+1;u=cl(o,c,l,a,t),h=ll(i,c,l,s,t),d=sl(r,c,l,t)}else for(let p=0;p<l;p++)u[p]=hl(o,a,r,t,p,c),h[p]=dl(i,s,r,t,p,c),d[p]=ul(r,p,c);return{begin:u,end:h,strides:d}}function cl(t,e,n,a,s){const r=[...s],o=ol(n,e);for(let i=0;i<r.length;i++)if(o.indexOf(i)>-1)r[i]=0;else{const s=rl(e,n,i);let o=a[s];t&1<<s&&(o=0),r[i]=o}return r}function ll(t,e,n,a,s){const r=[...s],o=ol(n,e);for(let i=0;i<r.length;i++)if(o.indexOf(i)>-1)r[i]=Number.MAX_SAFE_INTEGER;else{const s=rl(e,n,i);let o=a[s];t&1<<s&&(o=Number.MAX_SAFE_INTEGER),r[i]=o}for(let i=0;i<r.length;i++){const t=s[i];r[i]<0&&(r[i]+=t),r[i]=tt(0,r[i],s[i])}return r}function ul(t,e,n){let a=t[e];return(n&1<<e||null==a)&&(a=1),a}function hl(t,e,n,a,s,r){let o=e[s];const i=n[s]||1;(t&1<<s||r&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const c=a[s];return o<0&&(o+=c),o=tt(0,o,c-1),o}function dl(t,e,n,a,s,r){let o=e[s];const i=n[s]||1;(t&1<<s||r&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const c=a[s];return o<0&&(o+=c),o=i>0?tt(0,o,c):tt(-1,o,c-1),o}function pl(t,e,n){let a=n.length;for(let s=0;s<n.length;s++)if(n[s]>1){a=s;break}for(let s=a+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function fl(t,e){let n=t.length>0?t[t.length-1]:1;for(let a=0;a<t.length-1;a++)n+=t[a]*e[a];return n}function ml(t,e,n){let a;const s=t.shape.length;let r;return a="number"===typeof e?[e,...new Array(s-1).fill(0)]:e.length<s?e.concat(new Array(s-e.length).fill(0)):e.slice(),a.forEach(t=>{ot(-1!==t,()=>"slice() does not support negative begin indexing.")}),r=null==n?new Array(s).fill(-1):"number"===typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,r=r.map((e,n)=>e>=0?e:(ot(-1===e,()=>"Negative size values should be exactly -1 but got "+"".concat(e," for the slice() size at index ").concat(n,".")),t.shape[n]-a[n])),[a,r]}function gl(t,e,n,a,s,r,o,i,c){let l;if(null==a?(l=new Array(e.length),l.fill(1)):l=a,null!=o&&0!==(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let u=!1;const h={dims:l.length,numAddAxisAfterEllipsis:0,begin:e.slice(),end:n.slice(),strides:l.slice(),beginMask:s,endMask:r,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:c};for(let b=0;b<h.dims;b++)u&&0!==(1<<b&i)&&h.numAddAxisAfterEllipsis++,1<<b&o&&(u=!0);u||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:t.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(t,e){e.beginMask=0,e.endMask=0,e.shrinkAxisMask=0;let n=0;e.beginValid=null!=t.begin,e.endValid=null!=t.end,e.begin=new Array(e.dims),e.end=new Array(e.dims),e.strides=new Array(e.dims),e.finalShapeGatherIndices=[],e.finalShapeGatherIndicesSparse=[],e.inputShapeGatherIndicesSparse=new Array(e.dims);for(let a=0;a<t.dims;a++)if(1<<a&t.ellipsisMask){const s=Math.min(e.dims-(t.dims-a)+1+t.numAddAxisAfterEllipsis,e.dims);for(;n<s;n++)e.begin[n]=0,e.end[n]=0,e.strides[n]=1,e.beginMask|=1<<n,e.endMask|=1<<n,e.finalShapeGatherIndices.push(n),e.finalShapeGatherIndicesSparse.push(-1),e.inputShapeGatherIndicesSparse[n]=a}else if(1<<a&t.newAxisMask)e.finalShapeGatherIndices.push($c),e.finalShapeGatherIndicesSparse.push(-1);else{if(n===e.begin.length)throw Error("Index out of range using input dim ".concat(n,"; input ")+"has only ".concat(e.dims," dims, ").concat(e.begin.length,"."));null!=t.begin&&(e.begin[n]=t.begin[a]),null!=t.end&&(e.end[n]=t.end[a]),e.strides[n]=t.strides[a],t.beginMask&1<<a&&(e.beginMask|=1<<n),t.endMask&1<<a&&(e.endMask|=1<<n),t.shrinkAxisMask&1<<a?(e.finalShapeGatherIndices.push(tl),e.finalShapeGatherIndicesSparse.push(-1),e.shrinkAxisMask|=1<<n):(e.finalShapeGatherIndices.push(n),e.finalShapeGatherIndicesSparse.push(a)),e.inputShapeGatherIndicesSparse[n]=a,n++}}(h,d);let p=!0,f=!0,m=!0;const g=[],y=[];for(let b=0;b<t.length;++b){if(0===d.strides[b])throw Error("strides[".concat(b,"] must be non-zero"));const e=!!(d.shrinkAxisMask&1<<b),n=t[b];if(-1===n){g.push(e?1:-1);continue}const a=[d.beginMask&1<<b,d.endMask&1<<b],s=[d.strides[b]>0?0:-1,d.strides[b]>0?n:n-1];if(e&&d.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[b];const r=!!(d.beginMask&1<<b&&d.endMask&1<<b);if(d.beginValid&&d.endValid){if(e){const t=d.begin[b]<0?n+d.begin[b]:d.begin[b];if(d.begin[b]=t,d.end[b]=d.begin[b]+1,t<0||t>=n)throw Error("slice index ".concat(d.begin[b]," of dimension ").concat(b," out of bounds."))}else d.begin[b]=yl(d.begin[b],0,d.strides[b],n,a,s),d.end[b]=yl(d.end[b],1,d.strides[b],n,a,s);const t=1===d.strides[b]&&0===d.begin[b]&&d.end[b]===n;p=p&&t,f=f&&(0===b&&1===d.strides[b]||t)}else p=p&&1===d.strides[b]&&r,f=f&&(0===b&&1===d.strides[b]||r);let o,i=!1;if(d.beginValid&&d.endValid?(o=d.end[b]-d.begin[b],i=!0):e?(o=1,i=!0):r&&n>=0&&(o=d.strides[b]<0?-n:n,i=!0),i){let t;t=0===o||o<0!==d.strides[b]<0?0:Math.trunc(o/d.strides[b])+(o%d.strides[b]!==0?1:0),g.push(t)}else g.push(-1)}for(let b=0;b<d.finalShapeGatherIndices.length;++b){const t=d.finalShapeGatherIndices[b];t>=0?y.push(g[t]):t===$c&&y.push(1)}return{finalShapeSparse:y.filter((t,e)=>d.finalShapeGatherIndices[e]!==$c),finalShape:y,isIdentity:p,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}function yl(t,e,n,a,s,r){if(s[e])return n>0?r[e]:r[e+1&1];{const e=t<0?a+t:t;return e<r[0]?r[0]:e>r[1]?r[1]:e}}const bl=.001,xl=.1;function wl(t,e,n){return null==n&&(n=vl()),kl(t,e,(t,e)=>Tl(t,e,n))}function vl(){return 32===Mr.backend.floatPrecision()?bl:xl}function kl(t,e,n){let a=!0;if(($s(t)||$s(e))&&(a=!1),$s(t)&&$s(e)&&(a=!0),a){const n=t.constructor.name,a=e.constructor.name;if(n!==a)throw new Error("Arrays are of different type. Actual: ".concat(n,". ")+"Expected: ".concat(a))}if(Array.isArray(t)&&Array.isArray(e)){const n=Ur(t),a=Ur(e);if(!dt(n,a))throw new Error("Arrays have different shapes. "+"Actual: [".concat(n,"]. Expected: [").concat(a,"]"))}const s=$s(t)?t:tr(t),r=$s(e)?e:tr(e);if(s.length!==r.length)throw new Error("Arrays have different lengths actual: ".concat(s.length," vs ")+"expected: ".concat(r.length,".\n")+"Actual:   ".concat(s,".\n")+"Expected: ".concat(r,"."));for(let o=0;o<r.length;++o){const t=s[o],e=r[o];if(!n(t,e))throw new Error("Arrays differ: actual[".concat(o,"] = ").concat(t,", expected[").concat(o,"] = ").concat(e,".\n")+"Actual:   ".concat(s,".\n")+"Expected: ".concat(r,"."))}"undefined"!==typeof expect&&expect().nothing()}function Il(t,e){t().then(()=>e.fail(),()=>e()),"undefined"!==typeof expect&&expect().nothing()}function Nl(t,e){const n="string"===typeof e||"number"===typeof e||"boolean"===typeof e?[e]:e;return At(t)||At(t[0])||At(e)||At(e[0])?kl(t,n,(t,e)=>t==e):kl(t,e,(t,e)=>Tl(t,e,0))}function Sl(t,e,n){if(null==n&&(n=vl()),!Tl(t,e,n))throw new Error("Numbers differ: actual === ".concat(t,", expected === ").concat(e));"undefined"!==typeof expect&&expect().nothing()}function Tl(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}function Cl(t,e,n){for(let a=0;a<t.length;a++)if(t[a]<e||t[a]>n)throw new Error("Value out of range:".concat(t[a]," low: ").concat(e,", high: ").concat(n))}function El(t,e){const n=new Float32Array(t),a=new Float32Array(e);if(n.length!==a.length)throw new Error("Expected ArrayBuffer to be of length "+"".concat(a.length,", but it was ").concat(n.length));for(let s=0;s<a.length;s++)if(n[s]!==a[s])throw new Error("Expected ArrayBuffer value at ".concat(s," to be ")+"".concat(a[s]," but got ").concat(n[s]," instead"))}function Al(t){for(let e=0;e<t.length;e++){const n=t[e];Array.isArray(n)?Al(n):t[e]=Js(n)}return t}function Rl(t){const e=document.createElement("video");return"playsInline"in e&&(e.playsInline=!0),e.muted=!0,e.loop=!0,e.style.position="fixed",e.style.left="0px",e.style.top="0px",e.preload="auto",e.appendChild(t),new Promise(t=>{e.addEventListener("loadeddata",n=>t(e)),e.load()})}async function Fl(t){await t.play(),"requestVideoFrameCallback"in t&&await new Promise(e=>{t.requestVideoFrameCallback(e)})}const Dl="4.22.0";class _l{static sgd(t){return new cc(t)}static momentum(t,e){return new lc(t,e,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}static rmsprop(t){return new uc(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,arguments.length>4&&void 0!==arguments[4]&&arguments[4])}static adam(){return new ec(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null)}static adadelta(){return new Zi(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.95,arguments.length>2&&void 0!==arguments[2]?arguments[2]:null)}static adamax(){return new ic(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.002,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,arguments.length>4&&void 0!==arguments[4]?arguments[4]:0)}static adagrad(t){return new Qi(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1)}}const Ol=Xr({acos_:function(t){const e={x:jr(t,"x","acos")};return Mr.runKernel(ee,e)}});const Ml=Xr({acosh_:function(t){const e={x:jr(t,"x","acosh")};return Mr.runKernel(ne,e)}});const Ll=Xr({addN_:function(t){ot(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),ot(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+"".concat(t.length));const e=t.map((t,e)=>jr(t,"tensors".concat(e),"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!dt(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const a=e;return Mr.runKernel(se,a)}});const zl=Xr({all_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const a={x:jr(t,"x","all","bool")},s={axis:e,keepDims:n};return Mr.runKernel(re,a,s)}});const Pl=Xr({any_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const a={x:jr(t,"x","any","bool")},s={axis:e,keepDims:n};return Mr.runKernel(oe,a,s)}});const Bl=Xr({argMax_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:jr(t,"x","argMax")},a={axis:e};return Mr.runKernel(ie,n,a)}});const Wl=Xr({argMin_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:jr(t,"x","argMin")},a={axis:e};return Mr.runKernel(ce,n,a)}});const Vl=Xr({asin_:function(t){const e={x:jr(t,"x","asin")};return Mr.runKernel(le,e)}});const Ul=Xr({asinh_:function(t){const e={x:jr(t,"x","asinh")};return Mr.runKernel(ue,e)}});const Gl=Xr({atan_:function(t){const e={x:jr(t,"x","atan")};return Mr.runKernel(he,e)}});const Hl=Xr({atan2_:function(t,e){let n=jr(t,"a","atan2"),a=jr(e,"b","atan2");[n,a]=Tr(n,a);const s={a:n,b:a};return Mr.runKernel(pe,s)}});const jl=Xr({atanh_:function(t){const e={x:jr(t,"x","atanh")};return Mr.runKernel(de,e)}});function ql(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",r=arguments.length>5?arguments[5]:void 0;return Yl(t,[...e,t[3]],n,r,a,null,null,ru(s))}function Kl(t,e,n,a,s,r){let o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast";const[i,c]=Ql(e);let l;if("channelsLast"===o)l=[i,c,t[3],t[3]];else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat ".concat(o));l=[i,c,t[1],t[1]]}return Yl(t,l,n,a,s,r,!1,o)}function Xl(t,e,n,a,s,r){let o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NDHWC";const[i,c,l]=$l(e);let u,h;if("NDHWC"===o)h="channelsLast",u=[i,c,l,t[4],t[4]];else{if("NCDHW"!==o)throw new Error("Unknown dataFormat ".concat(o));h="channelsFirst",u=[i,c,l,t[1],t[1]]}return Zl(t,u,n,a,s,!1,h,r)}function Yl(t,e,n,a,s,r){let o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],i=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"channelsLast",[c,l,u,h]=[-1,-1,-1,-1];if("channelsLast"===i)[c,l,u,h]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat ".concat(i));[c,h,l,u]=t}const[d,p,,f]=e,[m,g]=Ql(n),[y,b]=Ql(a),x=tu(d,y),w=tu(p,b),{padInfo:v,outHeight:k,outWidth:I}=function(t,e,n,a,s,r,o,i,c){let l,u,h;if("number"===typeof t){l={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,a,s){null==a&&(a=Jl(t,e,n));const r=t[0],o=t[1],i=eu((r-e+2*a)/n+1,s),c=eu((o-e+2*a)/n+1,s);return[i,c]}([e,n],r,a,t,i);u=s[0],h=s[1]}else if("same"===t){u=Math.ceil(e/a),h=Math.ceil(n/s);const t=Math.max(0,(u-1)*a+r-e),i=Math.max(0,(h-1)*s+o-n),c=Math.floor(t/2),d=t-c,p=Math.floor(i/2);l={top:c,bottom:d,left:p,right:i-p,type:"SAME"}}else if("valid"===t)l={top:0,bottom:0,left:0,right:0,type:"VALID"},u=Math.ceil((e-r+1)/a),h=Math.ceil((n-o+1)/s);else{if("object"!==typeof t)throw Error("Unknown padding parameter: ".concat(t));{const d="channelsLast"===c?t[1][0]:t[2][0],p="channelsLast"===c?t[1][1]:t[2][1],f="channelsLast"===c?t[2][0]:t[3][0],m="channelsLast"===c?t[2][1]:t[3][1];l={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},u=eu((e-r+d+p)/a+1,i),h=eu((n-o+f+m)/s+1,i)}}return{padInfo:l,outHeight:u,outWidth:h}}(s,l,u,m,g,x,w,r,i),N=o?f*h:f;let S;return"channelsFirst"===i?S=[c,N,k,I]:"channelsLast"===i&&(S=[c,k,I,N]),{batchSize:c,dataFormat:i,inHeight:l,inWidth:u,inChannels:h,outHeight:k,outWidth:I,outChannels:N,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:t,outShape:S,filterShape:e}}function Zl(t,e,n,a,s){let r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast",i=arguments.length>7?arguments[7]:void 0,[c,l,u,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[c,l,u,h,d]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat ".concat(o));[c,d,l,u,h]=t}const[p,f,m,,g]=e,[y,b,x]=$l(n),[w,v,k]=$l(a),I=tu(p,w),N=tu(f,v),S=tu(m,k),{padInfo:T,outDepth:C,outHeight:E,outWidth:A}=function(t,e,n,a,s,r,o,i,c,l,u){let h,d,p,f;"valid"===t&&(t=0);if("number"===typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const m=function(t,e,n,a,s,r){null==s&&(s=Jl(t,e[0],a[0]));const o=[0,0,0,n];for(let i=0;i<3;i++)t[i]+2*s>=e[i]&&(o[i]=eu((t[i]-e[i]+2*s)/a[i]+1,r));return o}([e,n,a,1],[i,c,l],1,[s,r,o],t,u);d=m[0],p=m[1],f=m[2]}else{if("same"!==t)throw Error("Unknown padding parameter: ".concat(t));{d=Math.ceil(e/s),p=Math.ceil(n/r),f=Math.ceil(a/o);const t=(d-1)*s+i-e,u=(p-1)*r+c-n,m=(f-1)*o+l-a,g=Math.floor(t/2),y=t-g,b=Math.floor(u/2),x=u-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(s,l,u,h,y,b,x,I,N,S,i),R=r?g*d:g;let F;return"channelsFirst"===o?F=[c,R,C,E,A]:"channelsLast"===o&&(F=[c,C,E,A,R]),{batchSize:c,dataFormat:o,inDepth:l,inHeight:u,inWidth:h,inChannels:d,outDepth:C,outHeight:E,outWidth:A,outChannels:R,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:t,outShape:F,filterShape:e}}function Jl(t,e,n){const a=tu(e,arguments.length>3&&void 0!==arguments[3]?arguments[3]:1);return Math.floor((t[0]*(n-1)-n+a)/2)}function Ql(t){return"number"===typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function $l(t){return"number"===typeof t?[t,t,t]:t}function tu(t,e){return e<=1?t:t+(t-1)*(e-1)}function eu(t,e){if(!e)return Math.trunc(t);switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode ".concat(e))}}function nu(t){const[e,n,a]=Ql(t);return 1===e&&1===n&&1===a}function au(t,e){return nu(t)||nu(e)}function su(t){return Ql(t).every(t=>t>0)}function ru(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat ".concat(t))}function ou(t,e,n){if(null!=n){if("string"===typeof e)throw Error("Error in ".concat(t,": pad must be an integer when using ")+"dimRoundingMode ".concat(n," but got pad ").concat(e,"."));if("number"===typeof e)ot(pt(e),()=>"Error in ".concat(t,": pad must be an integer when using ")+"dimRoundingMode ".concat(n," but got pad ").concat(e,"."));else{if("object"!==typeof e)throw Error("Error in ".concat(t,": Unknown padding parameter: ").concat(e));e.forEach(e=>{e.forEach(e=>{ot(pt(e),()=>"Error in ".concat(t,": pad must be an integer when using ")+"dimRoundingMode ".concat(n," but got pad ").concat(e,"."))})})}}}const iu=Xr({reshape_:function(t,e){const n={x:jr(t,"x","reshape","string_or_numeric")},a={shape:e};return Mr.runKernel(ba,n,a)}});const cu=Xr({avgPool_:function(t,e,n,a,s){const r=jr(t,"x","avgPool","float32");ot(au(n,1),()=>"Error in avgPool: Either strides or dilations must be 1. "+"Got strides ".concat(n," and dilations '").concat(1,"'"));let o=r,i=!1;3===r.rank&&(i=!0,o=iu(r,[1,r.shape[0],r.shape[1],r.shape[2]])),ot(4===o.rank,()=>"Error in avgPool: x must be rank 4 but got rank ".concat(o.rank,".")),ou("avgPool",a,s);const c={x:o},l={filterSize:e,strides:n,pad:a,dimRoundingMode:s};let u=Mr.runKernel(fe,c,l);return u=Si(u,r.dtype),i?iu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const lu=Xr({avgPool3d_:function(t,e,n,a,s){let r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const o=jr(t,"x","avgPool3d","float32");let i=o,c=!1;4===o.rank&&(c=!0,i=iu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ot(5===i.rank,()=>"Error in avgPool3d: x must be rank 5 but got rank ".concat(i.rank,".")),ot("NDHWC"===r,()=>"Error in avgPool3d: Only NDHWC is currently supported, "+"but got dataFormat of ".concat(r)),ot("number"===typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,()=>"Error in avgPool3d: Stride must be > 0, but got '".concat(n,"'")),ou("avgPool3d",a,s);const l={x:i},u={filterSize:e,strides:n,pad:a,dimRoundingMode:s,dataFormat:r};let h=Mr.runKernel(ge,l,u);return h=Si(h,i.dtype),c?iu(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const uu=Xr({concat_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;ot(t.length>=1,()=>"Pass at least one tensor to concat");const n=qr(t,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype ".concat(t.dtype,". "))}),1===n.length)return Ti(n[0]);const a=n,s={axis:e};return Mr.runKernel(Ae,a,s)}});const hu=Xr({sigmoid_:function(t){const e={x:jr(t,"x","sigmoid","float32")};return Mr.runKernel(La,e)}});const du=Xr({slice_:function(t,e,n){const a=jr(t,"x","slice","string_or_numeric");if(0===a.rank)throw new Error("Slicing scalar is not possible");const s={x:a},r={begin:e,size:n};return Mr.runKernel(Da,s,r)}});const pu=Xr({tanh_:function(t){const e={x:jr(t,"x","tanh","float32")};return Mr.runKernel(as,e)}});const fu=Xr({basicLSTMCell_:function(t,e,n,a,s,r){const o=jr(t,"forgetBias","basicLSTMCell"),i=jr(e,"lstmKernel","basicLSTMCell"),c=jr(n,"lstmBias","basicLSTMCell"),l=jr(a,"data","basicLSTMCell"),u=jr(s,"c","basicLSTMCell"),h=jr(r,"h","basicLSTMCell"),d=uu([l,h],1),p=Dc(d,i),f=Ei(p,c),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=du(f,[0,0],y),x=du(f,[0,g],y),w=du(f,[0,2*g],y),v=du(f,[0,3*g],y),k=Ei(Fi(hu(b),pu(x)),Fi(u,hu(Ei(o,w))));return[k,Fi(pu(k),hu(v))]}});const mu=Xr({batchToSpaceND_:function(t,e,n){const a=jr(t,"x","batchToSpaceND"),s=e.reduce((t,e)=>t*e);ot(a.rank>=1+e.length,()=>"input rank is ".concat(a.rank," but should be > than blockShape.length ").concat(e.length)),ot(n.length===e.length,()=>"crops.length is ".concat(n.length," but should be equal to blockShape.length  ").concat(e.length)),ot(a.shape[0]%s===0,()=>"input tensor batch is ".concat(a.shape[0]," but is not divisible by the product of ")+"the elements of blockShape ".concat(e.join(" * ")," === ").concat(s));const r={x:a},o={blockShape:e,crops:n};return Mr.runKernel(xe,r,o)}});const gu=Xr({batchNorm_:function(t,e,n,a,s,r){null==r&&(r=.001);const o=jr(t,"x","batchNorm"),i=jr(e,"mean","batchNorm"),c=jr(n,"variance","batchNorm");let l,u;null!=s&&(l=jr(s,"scale","batchNorm")),null!=a&&(u=jr(a,"offset","batchNorm")),ot(i.rank===c.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),ot(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),ot(null==l||i.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h={x:function(t){let e;return e=0===t.rank||1===t.rank?iu(t,[1,1,1,t.size]):2===t.rank?iu(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?iu(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(o),scale:l,offset:u,mean:i,variance:c},d={varianceEpsilon:r},p=Mr.runKernel(dn,h,d);return iu(p,o.shape)}});const yu=Xr({batchNorm2d_:function(t,e,n,a,s,r){const o=jr(t,"x","batchNorm"),i=jr(e,"mean","batchNorm"),c=jr(n,"variance","batchNorm");let l,u;return null!=s&&(l=jr(s,"scale","batchNorm")),null!=a&&(u=jr(a,"offset","batchNorm")),ot(2===o.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+"".concat(o.rank,".")),ot(2===i.rank||1===i.rank,()=>"Error in batchNorm2D: mean must be rank 2 or rank 1 but "+"got rank ".concat(i.rank,".")),ot(2===c.rank||1===c.rank,()=>"Error in batchNorm2D: variance must be rank 2 or rank 1 "+"but got rank ".concat(c.rank,".")),null!=l&&ot(2===l.rank||1===l.rank,()=>"Error in batchNorm2D: scale must be rank 2 or rank 1 "+"but got rank ".concat(l.rank,".")),null!=u&&ot(2===u.rank||1===u.rank,()=>"Error in batchNorm2D: offset must be rank 2 or rank 1 "+"but got rank ".concat(u.rank,".")),gu(o,i,c,u,l,r)}});const bu=Xr({batchNorm3d_:function(t,e,n,a,s,r){const o=jr(t,"x","batchNorm"),i=jr(e,"mean","batchNorm"),c=jr(n,"variance","batchNorm");let l,u;return null!=s&&(l=jr(s,"scale","batchNorm")),null!=a&&(u=jr(a,"offset","batchNorm")),ot(3===o.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+"".concat(o.rank,".")),ot(3===i.rank||1===i.rank,()=>"Error in batchNorm3D: mean must be rank 3 or rank 1 but "+"got rank ".concat(i.rank,".")),ot(3===c.rank||1===c.rank,()=>"Error in batchNorm3D: variance must be rank 3 or rank 1 "+"but got rank ".concat(c.rank,".")),null!=l&&ot(3===l.rank||1===l.rank,()=>"Error in batchNorm3D: scale must be rank 3 or rank 1 "+"but got rank ".concat(l.rank,".")),null!=u&&ot(3===u.rank||1===u.rank,()=>"Error in batchNorm3D: offset must be rank 3 or rank 1 "+"but got rank ".concat(u.rank,".")),gu(o,i,c,u,l,r)}});const xu=Xr({batchNorm4d_:function(t,e,n,a,s,r){const o=jr(t,"x","batchNorm"),i=jr(e,"mean","batchNorm"),c=jr(n,"variance","batchNorm");let l,u;return null!=s&&(l=jr(s,"scale","batchNorm")),null!=a&&(u=jr(a,"offset","batchNorm")),ot(4===o.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+"".concat(o.rank,".")),ot(4===i.rank||1===i.rank,()=>"Error in batchNorm4D: mean must be rank 4 or rank 1 but "+"got rank ".concat(i.rank,".")),ot(4===c.rank||1===c.rank,()=>"Error in batchNorm4D: variance must be rank 4 or rank 1 "+"but got rank ".concat(c.rank,".")),null!=l&&ot(4===l.rank||1===l.rank,()=>"Error in batchNorm4D: scale must be rank 4 or rank 1 "+"but got rank ".concat(l.rank,".")),null!=u&&ot(4===u.rank||1===u.rank,()=>"Error in batchNorm4D: offset must be rank 4 or rank 1 "+"but got rank ".concat(u.rank,".")),gu(o,i,c,u,l,r)}});const wu=Xr({bincount_:function(t,e,n){const a=jr(t,"x","bincount"),s=jr(e,"weights","bincount");ot("int32"===a.dtype,()=>"Error in bincount: input "+"dtype must be int32, but got ".concat(a.dtype)),ot(n>=0,()=>"size must be non-negative, but got ".concat(n,".")),ot(s.size===a.size||0===s.size,()=>"Error in bincount: weights must have the same size as input or"+"0-length, but got input shape: ".concat(a.shape,", weights shape: ")+"".concat(s.shape,"."));const r={x:a,weights:s},o={size:n};return Mr.runKernel(we,r,o)}});const vu=Xr({bitwiseAnd_:function(t,e){const n=jr(t,"x","bitwiseAnd"),a=jr(e,"y","bitwiseAnd");if(!dt(n.shape,a.shape))throw new Error("BitwiseAnd: Tensors must have the same shape. x: ".concat(n.shape,", y: ").concat(a.shape));if("int32"!==n.dtype||"int32"!==a.dtype)throw new Error("BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ".concat(n.dtype," and type of y: ").concat(a.dtype));const s={a:n,b:a};return Mr.runKernel(ve,s)}});const ku=Xr({broadcastArgs_:function(t,e){const n=jr(t,"s0","broadcastArgs","int32"),a=jr(e,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error("broadcastArgs(): first input must be a vector (rank=1). "+"Has rank ".concat(n.rank));if(1!==a.rank)throw new Error("broadcastArgs(): second input must be a vector (rank=1). "+"Has rank ".concat(a.rank));const s={s0:n,s1:a};return Mr.runKernel(Ie,s)}});const Iu=Xr({broadcastTo_:function(t,e){let n=jr(t,"broadcastTo","x");const a=n.shape;if(Ut(e),e.length<n.rank)throw new Error("broadcastTo(): shape.length=".concat(e.length," < input.rank=").concat(n.rank,"."));if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=iu(n,t)}const s=n.shape,r=Array.from(e);for(let c=e.length-1;c>=0;c--)if(s[c]===e[c])r[c]=1;else if(1!==n.shape[c])throw new Error("broadcastTo(): [".concat(a,"] cannot be broadcast to [").concat(e,"]."));if(0===r.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length)return Ti(n);const o={x:n},i={reps:r};return Mr.runKernel(ss,o,i)}});const Nu=Xr({ceil_:function(t){const e={x:jr(t,"x","ceil","float32")};return Mr.runKernel(Se,e)}});const Su=Xr({clipByValue_:function(t,e,n){const a=jr(t,"x","clipByValue");if(ot(e<=n,()=>"Error in clip: min (".concat(e,") must be ")+"less than or equal to max (".concat(n,").")),e===n)return Ji(a.shape,e,a.dtype);const s={x:a},r={clipValueMin:e,clipValueMax:n};return Mr.runKernel(Te,s,r)}});const Tu=Xr({concat1d_:function(t){return uu(t,0)}});const Cu=Xr({concat2d_:function(t,e){return uu(t,e)}});const Eu=Xr({concat3d_:function(t,e){return uu(t,e)}});const Au=Xr({concat4d_:function(t,e){return uu(t,e)}});const Ru=Xr({conv2d_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0;const i=jr(t,"x","conv2d","float32"),c=jr(e,"filter","conv2d","float32");let l=i,u=!1;3===i.rank&&(u=!0,l=iu(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ot(4===l.rank,()=>"Error in conv2d: input must be rank 4, but got rank ".concat(l.rank,".")),ot(4===c.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+"".concat(c.rank,".")),ou("conv2d",a,o);const h="NHWC"===s?l.shape[3]:l.shape[1];ot(h===c.shape[2],()=>"Error in conv2d: depth of input (".concat(h,") must match ")+"input depth for filter ".concat(c.shape[2],".")),ot(au(n,r),()=>"Error in conv2D: Either strides or dilations must be 1. "+"Got strides ".concat(n," and dilations '").concat(r,"'")),ot(su(r),()=>"Error in conv2D: Dilated rates should be larger than 0."),ot(su(n),()=>"Error in conv2D: Strides should be larger than 0.");const d={x:l,filter:c},p={strides:n,pad:a,dataFormat:s,dilations:r,dimRoundingMode:o},f=Mr.runKernel(Re,d,p);return u?iu(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Fu=Xr({conv1d_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NWC",r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,o=arguments.length>6?arguments[6]:void 0;const i=jr(t,"x","conv1d"),c=jr(e,"filter","conv1d");let l=i,u=!1;2===i.rank&&(u=!0,l=iu(i,[1,i.shape[0],i.shape[1]])),ot(3===l.rank,()=>"Error in conv1d: input must be rank 3, but got rank ".concat(l.rank,".")),ot(3===c.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+"".concat(c.rank,".")),ou("conv1d",a,o),ot(l.shape[2]===c.shape[1],()=>"Error in conv1d: depth of input (".concat(l.shape[2],") must match ")+"input depth for filter ".concat(c.shape[1],".")),ot(au(n,r),()=>"Error in conv1D: Either stride or dilation must be 1. "+"Got stride ".concat(n," and dilation '").concat(r,"'")),ot(su(r),()=>"Error in conv1D: Dilated rates should be larger than 0."),ot(su(n),()=>"Error in conv1D: Stride should be larger than 0."),ot("NWC"===s,()=>"Error in conv1d: got dataFormat of ".concat(s," but only NWC is currently supported."));const h=iu(c,[1,c.shape[0],c.shape[1],c.shape[2]]),d=iu(l,[l.shape[0],1,l.shape[1],l.shape[2]]),p=Ru(d,h,[1,n],a,"NHWC",[1,r],o);return iu(p,u?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}});const Du=Xr({conv2DBackpropInput_:function(t,e,n,a,s){let r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",o=arguments.length>6?arguments[6]:void 0;ot(t.length===e.rank,()=>"Length of inShape "+"(".concat(t.length,") and rank of dy (").concat(e.rank,") must match"));let i=t,c=e,l=!1;3===e.rank&&(l=!0,c=iu(e,[1,e.shape[0],e.shape[1],e.shape[2]]),i=[1,t[0],t[1],t[2]]),ot(4===i.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+"".concat(i.length,".")),ot(4===c.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got "+"rank ".concat(c.rank)),ot(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got "+"rank ".concat(n.rank));const u="NHWC"===r?i[3]:i[1],h="NHWC"===r?c.shape[3]:c.shape[1];ot(u===n.shape[2],()=>"Error in conv2dDerInput: depth of input (".concat(u,") must ")+"match input depth for filter ".concat(n.shape[2],".")),ot(h===n.shape[3],()=>"Error in conv2dDerInput: depth of output (".concat(h,") must ")+"match output depth for filter ".concat(n.shape[3],".")),ou("conv2dDerInput",s,o);const d={dy:c,filter:n},p={strides:a,pad:s,dataFormat:r,dimRoundingMode:o,inputShape:i},f=Mr.runKernel(De,d,p);return l?iu(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const _u=Xr({conv2dTranspose_:function(t,e,n,a,s,r){const o=jr(t,"x","conv2dTranspose"),i=jr(e,"filter","conv2dTranspose");return Du(n,o,i,a,s,"NHWC",r)}});const Ou=Xr({conv3d_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NDHWC",r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1,1];const o=jr(t,"x","conv3d"),i=jr(e,"filter","conv3d");let c=o,l=!1;4===o.rank&&(l=!0,c=iu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ot(5===c.rank,()=>"Error in conv3d: input must be rank 5, but got rank ".concat(c.rank,".")),ot(5===i.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+"".concat(i.rank,".")),ot(c.shape[4]===i.shape[3],()=>"Error in conv3d: depth of input (".concat(c.shape[4],") must match ")+"input depth for filter ".concat(i.shape[3],".")),ot(au(n,r),()=>"Error in conv3D: Either strides or dilations must be 1. "+"Got strides ".concat(n," and dilations '").concat(r,"'")),ot("NDHWC"===s,()=>"Error in conv3d: got dataFormat of ".concat(s," but only NDHWC is currently supported.")),ot(su(r),()=>"Error in conv3D: Dilated rates should be larger than 0."),ot(su(n),()=>"Error in conv3D: Strides should be larger than 0.");const u={x:c,filter:i},h={strides:n,pad:a,dataFormat:s,dilations:r},d=Mr.runKernel(_e,u,h);return l?iu(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Mu=Xr({conv3DBackpropInput_:function(t,e,n,a,s){ot(t.length===e.rank,()=>"Length of inShape "+"(".concat(t.length,") and rank of dy (").concat(e.rank,") must match"));let r=t,o=e,i=!1;4===e.rank&&(i=!0,o=iu(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),r=[1,t[0],t[1],t[2],t[3]]);const c=r[4],l=o.shape[4];ot(5===r.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+"".concat(r.length,".")),ot(5===o.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got "+"rank ".concat(o.rank)),ot(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got "+"rank ".concat(n.rank)),ot(c===n.shape[3],()=>"Error in conv3dDerInput: depth of input (".concat(c,") must ")+"match input depth for filter ".concat(n.shape[3],".")),ot(l===n.shape[4],()=>"Error in conv3dDerInput: depth of output (".concat(l,") must ")+"match output depth for filter ".concat(n.shape[4],"."));const u={dy:o,filter:n},h={pad:s,strides:a,inputShape:r},d=Mr.runKernel(Me,u,h);return i?iu(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Lu=Xr({conv3dTranspose_:function(t,e,n,a,s){const r=jr(t,"x","conv3dTranspose"),o=jr(e,"filter","conv3dTranspose");return Mu(n,r,o,a,s)}});const zu=Xr({cos_:function(t){const e={x:jr(t,"x","cos","float32")};return Mr.runKernel(Le,e)}});const Pu=Xr({cosh_:function(t){const e={x:jr(t,"x","cosh","float32")};return Mr.runKernel(ze,e)}});const Bu=Xr({cumprod_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s={x:jr(t,"x","cumprod")},r={axis:e,exclusive:n,reverse:a};return Mr.runKernel(Pe,s,r)}});const Wu=Xr({cumsum_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s={x:jr(t,"x","cumsum")},r={axis:e,exclusive:n,reverse:a};return Mr.runKernel(Be,s,r)}});const Vu=Xr({denseBincount_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=jr(t,"x","denseBincount"),r=jr(e,"weights","denseBincount");ot("int32"===s.dtype,()=>"Error in denseBincount: input "+"dtype must be int32, but got ".concat(s.dtype)),ot(s.rank<=2,()=>"Error in denseBincount: input must be at most rank 2, but got "+"rank ".concat(s.rank,".")),ot(n>=0,()=>"size must be non-negative, but got ".concat(n,".")),ot(r.size===s.size||0===r.size,()=>"Error in denseBincount: weights must have the same shape as x or "+"0-length, but got x shape: ".concat(s.shape,", weights shape: ")+"".concat(r.shape,"."));const o={x:s,weights:r},i={size:n,binaryOutput:a};return Mr.runKernel(Ve,o,i)}});const Uu=Xr({depthToSpace_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"NHWC";const a=jr(t,"x","depthToSpace","float32"),s="NHWC"===n?a.shape[1]:a.shape[2],r="NHWC"===n?a.shape[2]:a.shape[3],o="NHWC"===n?a.shape[3]:a.shape[1];ot(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: ".concat(e)),ot(s*e>=0,()=>"Negative dimension size caused by overflow when multiplying\n    ".concat(s," and ").concat(e,"  for depthToSpace with input shape\n    ").concat(a.shape)),ot(r*e>=0,()=>"Negative dimension size caused by overflow when multiplying\n    ".concat(r," and ").concat(e," for depthToSpace with input shape\n        ").concat(a.shape)),ot(o%(e*e)===0,()=>"Dimension size must be evenly divisible by ".concat(e*e," but is ").concat(o," for depthToSpace with input shape ").concat(a.shape));const i={x:a},c={blockSize:e,dataFormat:n};return Mr.runKernel(Ue,i,c)}});const Gu=Xr({depthwiseConv2d_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0;const i=jr(t,"x","depthwiseConv2d","float32"),c=jr(e,"filter","depthwiseConv2d","float32");let l=i,u=!1;3===i.rank&&(u=!0,l=iu(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ot(4===l.rank,()=>"Error in depthwiseConv2d: input must be rank 4, but got "+"rank ".concat(l.rank,".")),ot(4===c.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+"".concat(c.rank,"."));const h="NHWC"===s?l.shape[3]:l.shape[1];ot(h===c.shape[2],()=>"Error in depthwiseConv2d: number of input channels "+"(".concat(h,") must match the inChannels dimension in ")+"filter ".concat(c.shape[2],".")),ou("depthwiseConv2d",a,o);const d={x:l,filter:c},p={strides:n,pad:a,dataFormat:s,dilations:r,dimRoundingMode:o},f=Mr.runKernel(Ge,d,p);return u?iu(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Hu=Xr({diag_:function(t){const e={x:jr(t,"x","diag")};return Mr.runKernel(qe,e)}});const ju=Xr({dilation2d_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[1,1],r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC";const o=jr(t,"x","dilation2d"),i=jr(e,"filter","dilation2d");ot(3===o.rank||4===o.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+"".concat(o.rank,".")),ot(3===i.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+"".concat(i.rank,".")),ot("NHWC"===r,()=>"Error in dilation2d: Only NHWC is currently supported, "+"but got dataFormat of ".concat(r));let c=o,l=!1;3===o.rank&&(c=iu(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0),ot(c.shape[3]===i.shape[2],()=>"Error in dilation2d:  input and filter must have the same depth: ".concat(c.shape[3]," vs ").concat(i.shape[2]));const u={x:c,filter:i},h={strides:n,pad:a,dilations:s},d=Mr.runKernel(Ke,u,h);return l?iu(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const qu=Xr({equal_:function(t,e){let n=jr(t,"a","equal","string_or_numeric"),a=jr(e,"b","equal","string_or_numeric");[n,a]=Tr(n,a),rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(nn,s)}});const Ku=Xr({where_:function(t,e,n){const a=jr(e,"a","where"),s=jr(n,"b","where"),r=jr(t,"condition","where","bool"),o=rc(rc(r.shape,a.shape),s.shape),i={condition:Iu(r,o),t:Iu(a,o),e:Iu(s,o)};return Mr.runKernel(Ra,i)}});const Xu=Xr({divNoNan_:function(t,e){let n=jr(t,"a","div"),a=jr(e,"b","div");[n,a]=Tr(n,a);const s=Ri(n,a),r=Oi(s),o=qu(a,r);return Ku(o,r,s)}});const Yu=Xr({dot_:function(t,e){const n=jr(t,"t1","dot"),a=jr(e,"t2","dot");ot((1===n.rank||2===n.rank)&&(1===a.rank||2===a.rank),()=>"Error in dot: inputs must all be rank 1 or 2, but got ranks "+"".concat(n.rank," and ").concat(a.rank,"."));const s=1===n.rank?n.size:n.shape[1],r=1===a.rank?a.size:a.shape[0];if(ot(s===r,()=>"Error in dot: inner dimensions of inputs must match, but got "+"".concat(s," and ").concat(r,".")),1===n.rank&&1===a.rank){const t=iu(n,[1,-1]),e=iu(a,[-1,1]),s=Dc(t,e);return iu(s,[])}if(1===n.rank&&2===a.rank){const t=iu(n,[1,-1]),e=iu(a,[a.shape[0],a.shape[1]]),s=Dc(t,e);return iu(s,[s.size])}if(2===n.rank&&1===a.rank){const t=iu(a,[-1,1]),e=Dc(n,t);return iu(e,[e.size])}{const t=iu(a,[a.shape[0],a.shape[1]]);return Dc(n,t)}}});const Zu=Xr({einsum_:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),a=1;a<e;a++)n[a-1]=arguments[a];const s=n.map((t,e)=>jr(t,"tensors".concat(e),"einsum")),r={equation:t};return Mr.runKernel(Qe,s,r)}});const Ju=Xr({elu_:function(t){const e={x:jr(t,"x","elu","float32")};return Mr.runKernel($e,e)}});const Qu=Xr({ensureShape_:function(t,e){const n=jr(t,"x","ensureShape","string_or_numeric");if(!ht(n.shape,e))throw new Error("EnsureShape: Shape of tensor ".concat(n.shape," is not compatible with expected shape ").concat(e));return t}});const $u=Xr({erf_:function(t){let e=jr(t,"x","erf");ot("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=Si(e,"float32"));const n={x:e};return Mr.runKernel(en,n)}});function th(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function eh(t,e,n){const a=t.length+e.length,s=[];let r=0,o=0;for(let i=0;i<a;i++)-1===n.indexOf(i)?s.push(t[r++]):s.push(e[o++]);return s}function nh(t,e){const n=[],a=t.length;for(let s=0;s<a;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map(e=>t[e])]}function ah(t,e){return eh(t,e.map(t=>1),e)}function sh(t,e,n){ot(th(e,n),()=>"".concat(t," supports only inner-most axes for now. ")+"Got axes ".concat(e," and rank-").concat(n," input."))}function rh(t,e){if(th(t,e))return null;const n=[];for(let a=0;a<e;++a)-1===t.indexOf(a)&&n.push(a);return t.forEach(t=>n.push(t)),n}function oh(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function ih(t,e){const n=[];for(let a=e-t;a<e;++a)n.push(a);return n}const ch=Xr({max_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const a={x:jr(t,"x","max")},s={reductionIndices:e,keepDims:n};return Mr.runKernel(Pn,a,s)}});const lh=Xr({min_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const a={x:jr(t,"x","min")},s={axis:e,keepDims:n};return Mr.runKernel(qn,a,s)}});const uh=Xr({sum_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=jr(t,"x","sum");"bool"===a.dtype&&(a=Si(a,"int32"));const s={x:a},r={axis:e,keepDims:n};return Mr.runKernel(Ba,s,r)}});function hh(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(0===t.rank)return nc(t);if(1!==t.rank&&null===n)return hh(iu(t,[-1]),e,n);if(1===t.rank||"number"===typeof n||Array.isArray(n)&&1===n.length){if(1===e)return uh(nc(t),n);if(e===1/0)return ch(nc(t),n);if(e===-1/0)return lh(nc(t),n);if("euclidean"===e||2===e)return Di(uh($i(nc(t),Ui(2,"int32")),n));throw new Error("Error in norm: invalid ord value: ".concat(e))}if(Array.isArray(n)&&2===n.length){if(1===e)return ch(uh(nc(t),n[0]),n[1]-1);if(e===1/0)return ch(uh(nc(t),n[1]),n[0]);if(e===-1/0)return lh(uh(nc(t),n[1]),n[0]);if("fro"===e||"euclidean"===e)return Di(uh(_i(t),n));throw new Error("Error in norm: invalid ord value: ".concat(e))}throw new Error("Error in norm: invalid axis: ".concat(n))}const dh=Xr({norm_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"euclidean",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=hh(t=jr(t,"x","norm"),e,n);let r=s.shape;if(a){const e=wt(n,t.shape);r=ah(s.shape,e)}return iu(s,r)}});const ph=Xr({euclideanNorm_:function(t){return dh(t,"euclidean",arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}});const fh=Xr({exp_:function(t){const e={x:jr(t,"x","exp")};return Mr.runKernel(an,e)}});const mh=Xr({expandDims_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=jr(t,"x","expandDims","string_or_numeric");ot(e<=n.rank,()=>"Axis must be <= rank of the tensor");const a={input:n},s={dim:e};return Mr.runKernel(sn,a,s)}});const gh=Xr({expm1_:function(t){const e={x:jr(t,"x","expm1")};return Mr.runKernel(rn,e)}});const yh=Xr({tile_:function(t,e){const n=jr(t,"x","tile","string_or_numeric");ot(n.rank===e.length,()=>"Error in transpose: rank of input ".concat(n.rank," ")+"must match length of reps ".concat(e,"."));const a={x:n},s={reps:e};return Mr.runKernel(ss,a,s)}});const bh=Xr({eye_:function(t,e,n){null==e&&(e=t);const a=Ni([t,e],arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32"),s=t<=e?t:e;for(let o=0;o<s;++o)a.set(1,o,o);const r=iu(a.toTensor(),[t,e]);if(null==n)return r;if(1===n.length)return yh(mh(r,0),[n[0],1,1]);if(2===n.length)return yh(mh(mh(r,0),0),[n[0],n[1],1,1]);if(3===n.length)return yh(mh(mh(mh(r,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D "+"batchShapes, but received ".concat(n.length,"D."))}});const xh=Xr({floor_:function(t){const e={x:jr(t,"x","floor","float32")};return Mr.runKernel(un,e)}});const wh=Xr({gather_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const s={x:jr(t,"x","gather"),indices:jr(e,"indices","gather","int32")},r={axis:n,batchDims:a};return Mr.runKernel(pn,s,r)}});const vh=Xr({greater_:function(t,e){let n=jr(t,"a","greater","string_or_numeric"),a=jr(e,"b","greater","string_or_numeric");[n,a]=Tr(n,a),rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(mn,s)}});const kh=Xr({greaterEqual_:function(t,e){let n=jr(t,"a","greaterEqual","string_or_numeric"),a=jr(e,"b","greaterEqual","string_or_numeric");[n,a]=Tr(n,a),rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(gn,s)}});const Ih=Xr({isFinite_:function(t){const e={x:jr(t,"x","isFinite")};return Mr.runKernel(wn,e)}});const Nh=Xr({isInf_:function(t){const e={x:jr(t,"x","isInf")};return Mr.runKernel(vn,e)}});const Sh=Xr({isNaN_:function(t){const e={x:jr(t,"x","isNaN")};return Mr.runKernel(kn,e)}});const Th=Xr({leakyRelu_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.2;const n={x:jr(t,"x","leakyRelu")},a={alpha:e};return Mr.runKernel(In,n,a)}});const Ch=Xr({less_:function(t,e){let n=jr(t,"a","less","string_or_numeric"),a=jr(e,"b","less","string_or_numeric");[n,a]=Tr(n,a),rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(Nn,s)}});const Eh=Xr({lessEqual_:function(t,e){let n=jr(t,"a","lessEqual","string_or_numeric"),a=jr(e,"b","lessEqual","string_or_numeric");[n,a]=Tr(n,a),rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(Sn,s)}});function Ah(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const a={start:t,stop:e,num:n};return Mr.runKernel(Tn,{},a)}const Rh=Xr({localResponseNormalization_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.5;const r=jr(t,"x","localResponseNormalization");ot(4===r.rank||3===r.rank,()=>"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ".concat(r.rank,".")),ot(pt(e),()=>"Error in localResponseNormalization: depthRadius must be an "+"integer but got depthRadius ".concat(e,"."));let o=r,i=!1;3===r.rank&&(i=!0,o=iu(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const c={x:o},l={depthRadius:e,bias:n,alpha:a,beta:s},u=Mr.runKernel(Mn,c,l);return i?iu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Fh=Xr({log_:function(t){const e={x:jr(t,"x","log","float32")};return Mr.runKernel(Cn,e)}});const Dh=Xr({log1p_:function(t){const e={x:jr(t,"x","log1p")};return Mr.runKernel(En,e)}});const _h=Xr({softplus_:function(t){const e={x:jr(t,"x","softplus")};return Mr.runKernel(za,e)}});const Oh=Xr({logSigmoid_:function(t){const e=jr(t,"x","logSigmoid");return Wi(t=>({value:Mc(_h(Mc(t))),gradFunc:e=>Fi(e,hu(Mc(t)))}))(e)}});const Mh=Xr({logSoftmax_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=jr(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. "+"Logits was rank ".concat(n.rank," and axis was ").concat(e));const a=Wi((t,n)=>{const a=ch(t,e,!0),s=tc(t,a),r=tc(Si(s,"float32"),Fh(uh(fh(s),e,!0)));n([r]);return{value:r,gradFunc:(t,n)=>{const[a]=n,s=fh(a);return tc(t,Fi(uh(t,e,!0),s))}}});return a(n)}});const Lh=Xr({logSumExp_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const a=jr(t,"x","logSumExp"),s=wt(e,a.shape),r=ch(a,s,!0),o=tc(a,r),i=fh(o),c=uh(i,s),l=Fh(c),u=Ei(iu(r,l.shape),l);if(n){const t=ah(u.shape,s);return iu(u,t)}return u}});const zh=Xr({logicalAnd_:function(t,e){const n=jr(t,"a","logicalAnd","bool"),a=jr(e,"b","logicalAnd","bool");rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(An,s)}});const Ph=Xr({logicalNot_:function(t){const e={x:jr(t,"x","logicalNot","bool")};return Mr.runKernel(Rn,e)}});const Bh=Xr({logicalOr_:function(t,e){const n=jr(t,"a","logicalOr","bool"),a=jr(e,"b","logicalOr","bool");rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(Fn,s)}});const Wh=Xr({logicalXor_:function(t,e){const n=jr(t,"a","logicalXor","bool"),a=jr(e,"b","logicalXor","bool");return rc(n.shape,a.shape),zh(Bh(t,e),Ph(zh(t,e)))}}),Vh=2147483648;const Uh=Xr({searchSorted_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"left";const a=jr(t,"sortedSequence","searchSorted"),s=jr(e,"values","searchSorted"),r=a.shape[a.shape.length-1],o=s.shape[s.shape.length-1],i=iu(a,[-1,r]),c=iu(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==c.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(lt(c.shape)>=Vh)throw new Error("values tensor size must less than ".concat(Vh));if(i.shape[1]>=Vh)throw new Error("trailing dim_size must less than ".concat(Vh," for int32 output type, was ").concat(i.shape[1]));const l={sortedSequence:i,values:c},u={side:n};return Mr.runKernel(Aa,l,u)}});function Gh(t,e){return Uh(t,e,"left")}const Hh=Xr({maxPool_:function(t,e,n,a,s){const r=jr(t,"x","maxPool");let o=r,i=!1;3===r.rank&&(i=!0,o=iu(r,[1,r.shape[0],r.shape[1],r.shape[2]])),ot(4===o.rank,()=>"Error in maxPool: input must be rank 4 but got rank ".concat(o.rank,".")),ot(au(n,1),()=>"Error in maxPool: Either strides or dilations must be 1. "+"Got strides ".concat(n," and dilations '").concat(1,"'")),ou("maxPool",a,s);const c={x:o},l={filterSize:e,strides:n,pad:a,dimRoundingMode:s},u=Mr.runKernel(Wn,c,l);return i?iu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const jh=Xr({maxPool3d_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,1,1],n=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const o=jr(t,"x","maxPool3d");let i=o,c=!1;4===o.rank&&(c=!0,i=iu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ot(5===i.rank,()=>"Error in maxPool3d: x must be rank 5 but got rank ".concat(i.rank,".")),ot("NDHWC"===r,()=>"Error in maxPool3d: Only NDHWC is currently supported, "+"but got dataFormat of ".concat(r)),ou("maxPool3d",a,s);const l={x:i},u={filterSize:e,strides:n,pad:a,dimRoundingMode:s,dataFormat:r},h=Mr.runKernel(Un,l,u);return c?iu(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const qh=Xr({maxPoolWithArgmax_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];const r={x:jr(t,"x","maxPoolWithArgmax")},o={filterSize:e,strides:n,pad:a,includeBatchInIndex:s},i=Mr.runKernel(Hn,r,o);return{result:i[0],indexes:i[1]}}});const Kh=Xr({mean_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const a={x:jr(t,"x","mean")},s={axis:e,keepDims:n};return Mr.runKernel(jn,a,s)}});function Xh(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if(Ut(t),"complex64"===e){const e=Xh(t,"float32"),n=Xh(t,"float32");return Yr(e,n)}const n=Wt(lt(t),e);return Mr.makeTensor(n,t,e)}function Yh(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if(Ut(t),"complex64"===e){const e=Yh(t,"float32"),n=Xh(t,"float32");return Yr(e,n)}const n=Bt(lt(t),e);return Mr.makeTensor(n,t,e)}function Zh(t,e){let{indexing:n="xy"}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("xy"!==n&&"ij"!==n)throw new TypeError("".concat(n," is not a valid third argument to meshgrid"));if(void 0===t)return[];let a=jr(t,"x","meshgrid",t instanceof pr?t.dtype:"float32");if(void 0===e)return[a];let s=jr(e,"y","meshgrid",e instanceof pr?e.dtype:"float32");const r=lt(a.shape),o=lt(s.shape);return"xy"===n?(a=iu(a,[1,-1]),s=iu(s,[-1,1]),[Dc(Yh([o,1],a.dtype),a),Dc(s,Yh([1,r],s.dtype))]):(a=iu(a,[-1,1]),s=iu(s,[1,-1]),[Dc(a,Yh([1,o],a.dtype)),Dc(Yh([r,1],s.dtype),s)])}const Jh=Xr({minimum_:function(t,e){let n=jr(t,"a","minimum"),a=jr(e,"b","minimum");[n,a]=Tr(n,a),"bool"===n.dtype&&(n=Si(n,"int32"),a=Si(a,"int32")),rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(Kn,s)}});const Qh=Xr({mirrorPad_:function(t,e,n){ot("reflect"===n||"symmetric"===n,()=>"Invalid mode. Mode must be either reflect or symmetric. "+"Got ".concat(n,"."));const a=jr(t,"x","mirrorPad");if(0===a.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");ot(e.length===a.rank,()=>"Padding doesn't match input. Must be ".concat(a.rank,". ")+"Got ".concat(e.length,"."));const s="reflect"===n?1:0;for(let i=0;i<a.rank;i++)ot(2===e[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),ot(e[i][0]>=0&&e[i][0]<=a.shape[i]-s&&e[i][1]>=0&&e[i][1]<=a.shape[i]-s,()=>"Padding in dimension ".concat(i," cannot be greater than or equal ")+"to ".concat(a.shape[i]-s," or less than 0 for input of ")+"shape ".concat(a.shape));const r={paddings:e,mode:n},o={x:a};return Mr.runKernel(Xn,o,r)}});const $h=Xr({mod_:function(t,e){let n=jr(t,"a","mod"),a=jr(e,"b","mod");[n,a]=Tr(n,a);const s={a:n,b:a};return Mr.runKernel(Yn,s)}});const td=Xr({moments_:function(t){let e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const n=wt(arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,(t=jr(t,"x","moments")).shape),a=Kh(t,n,e);let s=a.shape;e||(s=ah(a.shape,n));const r=_i(tc(Si(t,"float32"),iu(a,s)));return{mean:a,variance:Kh(r,n,e)}}});const ed=Xr({multiRNNCell_:function(t,e,n,a){const s=jr(e,"data","multiRNNCell"),r=qr(n,"c","multiRNNCell"),o=qr(a,"h","multiRNNCell");let i=s;const c=[];for(let h=0;h<t.length;h++){const e=t[h](i,r[h],o[h]);c.push(e[0]),c.push(e[1]),i=e[1]}const l=[],u=[];for(let h=0;h<c.length;h+=2)l.push(c[h]),u.push(c[h+1]);return[l,u]}});const nd=Xr({multinomial_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=jr(t,"logits","multinomial"),r=s.size,o=s.rank;if(r<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+"".concat(r,"."));if(o>2)throw new Error("Rank of probabilities must be 1 or 2, but is ".concat(o));n=n||Math.random();const i={logits:1===o?iu(s,[1,-1]):s},c={numSamples:e,seed:n,normalized:a},l=Mr.runKernel(Zn,i,c);return 1===o?iu(l,[l.size]):l}});const ad=Xr({notEqual_:function(t,e){let n=jr(t,"a","notEqual","string_or_numeric"),a=jr(e,"b","notEqual","string_or_numeric");[n,a]=Tr(n,a),rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel($n,s)}});const sd=Xr({onesLike_:function(t){const e={x:jr(t,"x","onesLike")};return Mr.runKernel(aa,e)}});const rd=Xr({outerProduct_:function(t,e){const n=jr(t,"v1","outerProduct"),a=jr(e,"v2","outerProduct");ot(1===n.rank&&1===a.rank,()=>"Error in outerProduct: inputs must be rank 1, but got ranks "+"".concat(n.rank," and ").concat(a.rank,"."));const s=iu(n,[-1,1]),r=iu(a,[1,-1]);return Dc(s,r)}});const od=Xr({pad_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const a=jr(t,"x","pad");if(0===a.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},r={x:a};return Mr.runKernel(oa,r,s)}});const id=Xr({pad1d_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return ot(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),od(t,[e],n)}});const cd=Xr({pad2d_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return ot(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),od(t,e,n)}});const ld=Xr({pad3d_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return ot(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),od(t,e,n)}});const ud=Xr({pad4d_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return ot(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),od(t,e,n)}});const hd=Xr({spaceToBatchND_:function(t,e,n){const a=jr(t,"x","spaceToBatchND");ot(a.rank>=1+e.length,()=>"input rank ".concat(a.rank," should be > than [blockShape] ").concat(e.length)),ot(n.length===e.length,()=>"paddings.shape[0] ".concat(n.length," must be equal to [blockShape] ").concat(e.length)),ot(a.shape.reduce((t,a,s)=>s>0&&s<=e.length?t&&(a+n[s-1][0]+n[s-1][1])%e[s-1]===0:t,!0),()=>"input spatial dimensions ".concat(a.shape.slice(1)," with paddings ").concat(n.toString()," must be divisible by blockShapes ").concat(e.toString()));const s={x:a},r={blockShape:e,paddings:n};return Mr.runKernel(Wa,s,r)}});const dd=Xr({pool_:function(t,e,n,a,s,r,o){null==s&&(s=[1,1]),null==r&&(r=1),0===a&&(a="valid");const i=jr(t,"x","maxPool");let c=i,l=!1;3===i.rank&&(l=!0,c=iu(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ot(au(r,s),()=>"Error in pool: Either strides or dilations must be 1. "+"Got strides ".concat(r," and dilations '").concat(s,"'"));const u=Kl(c.shape,e,r,s,a),h=[u.dilationHeight,u.dilationWidth];let d;d="same"===a?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)),a=n.map(t=>t-1),s=a.map(t=>Math.floor(t/2)),r=a.map((t,e)=>t-s[e]);return a.map((t,e)=>[s[e],r[e]])}([u.filterHeight,u.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,m]=function(t,e,n){const a=n.map(t=>t[0]),s=n.map(t=>t[1]),r=t.concat(a,s),o=e.map((t,e)=>(t-r[e]%t)%t),i=s.map((t,e)=>t+o[e]),c=e.map((t,e)=>[a[e],i[e]]),l=e.map((t,e)=>[0,o[e]]);return[c,l]}([u.inHeight,u.inWidth],h,d),g=p?a:"valid",y=p?c:hd(c,h,f),b=("avg"===n?()=>cu(y,e,r,g,o):()=>Hh(y,e,r,g,o))(),x=p?b:mu(b,h,m);return l?iu(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const pd=Xr({prelu_:function(t,e){const n={x:jr(t,"x","prelu"),alpha:jr(e,"alpha","prelu")};return Mr.runKernel(la,n)}});const fd=Xr({prod_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=jr(t,"x","prod");"bool"===a.dtype&&(a=Si(a,"int32"));const s={x:a},r={axis:e,keepDims:n};return Mr.runKernel(ua,s,r)}});const md=Xr({raggedGather_:function(t,e,n,a){const s={paramsNestedSplits:t.map((t,e)=>jr(t,"tensors".concat(e),"raggedGather","int32")),paramsDenseValues:jr(e,"paramsDenseValues","raggedGather"),indices:jr(n,"indices","raggedGather","int32")},r={outputRaggedRank:a},o=Mr.runKernel(ha,s,r);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const gd=Xr({raggedRange_:function(t,e,n){const a=jr(t,"starts","raggedRange"),s={starts:a,limits:jr(e,"limits","raggedRange",a.dtype),deltas:jr(n,"deltas","raggedRange",a.dtype)},r=Mr.runKernel(da,s);return{rtNestedSplits:r[0],rtDenseValues:r[1]}}});const yd=Xr({raggedTensorToTensor_:function(t,e,n,a,s){const r=jr(t,"shape","raggedTensorToTensor","int32"),o=jr(e,"values","raggedTensorToTensor"),i={shape:r,values:o,defaultValue:jr(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:a.map((t,e)=>jr(t,"tensors".concat(e),"raggedTensorToTensor","int32"))},c={rowPartitionTypes:s};return Mr.runKernel(pa,i,c)}});const bd=Xr({rand_:function(t,e,n){Ut(t);const a=lt(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(a);else if("int32"===n)s=new Int32Array(a);else{if("bool"!==n)throw new Error("Unknown data type ".concat(n));s=new Uint8Array(a)}for(let r=0;r<a;r++)s[r]=e();return Mr.makeTensor(s,t,n)}});var xd=n(4334);class wd{constructor(t,e,n,a,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const r=s||Math.random();this.random=xd.alea(r.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let a,s,r;do{a=2*this.random()-1,s=2*this.random()-1,r=a*a+s*s}while(r>=1||0===r);const o=Math.sqrt(-2*Math.log(r)/r);t=this.mean+this.stdDev*a*o,e=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class vd{constructor(t,e,n,a){this.alpha=t,this.beta=1/e,this.dtype=n;const s=a||Math.random();this.randu=xd.alea(s.toString()),this.randn=new wd(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,a,s,r;for(;;){do{a=this.randn.nextValue(),r=1+this.c*a}while(r<=0);if(r*=r*r,t=a*a,e=1-.331*t*t,n=.5*t+this.d*(1-r+Math.log(r)),s=this.randu(),s<e||Math.log(s)<n)break}return r=1/this.beta*this.d*r,this.alpha<1&&(r*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(r)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class kd{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0;if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==a&&(a=Math.random()),"number"===typeof a&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between ".concat(t," - ").concat(e," <= 1 and dtype is not float"));this.random=xd.alea(a)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Id=Xr({randomGamma_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",s=arguments.length>4?arguments[4]:void 0;if(Ut(t),null==n&&(n=1),null==a&&(a="float32"),"float32"!==a&&"int32"!==a)throw new Error("Unsupported data type ".concat(a));const r=new vd(e,n,a,s),o=Ni(t,a);for(let i=0;i<o.values.length;i++)o.values[i]=r.nextValue();return o.toTensor()}});const Nd=Xr({randomNormal_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0;if(Ut(t),null!=a&&"bool"===a)throw new Error("Unsupported data type ".concat(a));const r=new wd(e,n,a,!1,s),o=Ni(t,a);for(let i=0;i<o.values.length;i++)o.values[i]=r.nextValue();return o.toTensor()}});const Sd=Xr({randomStandardNormal_:function(t,e,n){if(null!=e&&"bool"===e)throw new Error("Unsupported data type ".concat(e));return Nd(t,0,1,e,n)}});const Td=Xr({randomUniform_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",s=arguments.length>4?arguments[4]:void 0;Ut(t);const r=Ni(t,a),o=new kd(e,n,null,s);for(let i=0;i<r.values.length;i++)r.values[i]=o.nextValue();return r.toTensor()}});const Cd=Xr({randomUniformInt_:function(t,e,n,a){return Td(t,e,n,"int32",a)}});function Ed(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32";if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:a};return Mr.runKernel(fa,{},s)}const Ad=Xr({reciprocal_:function(t){const e={x:jr(t,"x","reciprocal")};return Mr.runKernel(ga,e)}});const Rd=Xr({relu_:function(t){const e={x:jr(t,"x","relu")};return Mr.runKernel(ya,e)}});const Fd=Xr({relu6_:function(t){const e={x:jr(t,"x","relu6")};return Mr.runKernel(Ia,e)}});const Dd=Xr({reverse_:function(t,e){const n={x:jr(t,"x","reverse")},a={dims:e};return Mr.runKernel(Na,n,a)}});const _d=Xr({reverse1d_:function(t){const e=jr(t,"x","reverse");return ot(1===e.rank,()=>"Error in reverse1D: x must be rank 1 but got rank ".concat(e.rank,".")),Dd(e,0)}});const Od=Xr({reverse2d_:function(t,e){const n=jr(t,"x","reverse");return ot(2===n.rank,()=>"Error in reverse2D: x must be rank 2 but got rank ".concat(n.rank,".")),Dd(n,e)}});const Md=Xr({reverse3d_:function(t,e){const n=jr(t,"x","reverse");return ot(3===n.rank,()=>"Error in reverse3D: x must be rank 3 but got rank ".concat(n.rank,".")),Dd(n,e)}});const Ld=Xr({reverse4d_:function(t,e){const n=jr(t,"x","reverse");return ot(4===n.rank,()=>"Error in reverse4D: x must be rank 4 but got rank ".concat(n.rank,".")),Dd(n,e)}});const zd=Xr({round_:function(t){const e={x:jr(t,"x","round")};return Mr.runKernel(Sa,e)}});const Pd=Xr({rsqrt_:function(t){const e={x:jr(t,"x","rsqrt","float32")};return Mr.runKernel(Ta,e)}});const Bd=Xr({selu_:function(t){const e={x:jr(t,"x","selu")};return Mr.runKernel(Fa,e)}});const Wd=Xr({separableConv2d_:function(t,e,n,a,s){let r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NHWC";const i=jr(t,"x","separableConv2d"),c=jr(e,"depthwiseFilter","separableConv2d"),l=jr(n,"pointwiseFilter","separableConv2d");let u=i,h=!1;if(3===i.rank&&(h=!0,u=iu(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ot(4===u.rank,()=>"Error in separableConv2d: input must be rank 4, but got "+"rank ".concat(u.rank,".")),ot(4===c.rank,()=>"Error in separableConv2d: depthwise filter must be rank 4, but "+"got rank ".concat(c.rank,".")),ot(4===l.rank,()=>"Error in separableConv2d: pointwise filter must be rank 4, but "+"got rank ".concat(c.rank,".")),ot(1===l.shape[0],()=>"Error in separableConv2d: the first dimension of pointwise filter "+" must be 1, but got ".concat(l.shape[0],".")),ot(1===l.shape[1],()=>"Error in separableConv2d: the second dimension of pointwise "+"filter must be 1, but got ".concat(l.shape[1],"."));const d=c.shape[2],p=c.shape[3];ot(l.shape[2]===d*p,()=>"Error in separableConv2d: the third dimension of pointwise filter "+"must be ".concat(d*p,", ")+"but got ".concat(l.shape[2],"."));const f=Gu(u,c,a,s,o,r),m=Ru(f,l,1,"valid",o);return h?iu(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Vd=async function(t,e){const n=jr(t,"x","setdiff1d"),a=jr(e,"y","setdiff1d");ot(n.dtype===a.dtype,()=>"x and y should have the same dtype, but got x (".concat(n.dtype,") and y (").concat(a.dtype,").")),ot(1===n.rank,()=>"x should be 1D tensor, but got x (".concat(n.shape,").")),ot(1===a.rank,()=>"y should be 1D tensor, but got y (".concat(a.shape,")."));const s=await n.data(),r=await a.data(),o=new Set(r);let i=0;for(let u=0;u<s.length;u++)o.has(s[u])||i++;const c=new lr([i],n.dtype),l=new lr([i],"int32");for(let u=0,h=0;u<s.length;u++)o.has(s[u])||(c.values[h]=s[u],l.values[h]=u,h++);return[c.toTensor(),l.toTensor()]};const Ud=Xr({sign_:function(t){const e={x:jr(t,"x","sign")};return Mr.runKernel(Ma,e)}});const Gd=Xr({sin_:function(t){const e={x:jr(t,"x","sin","float32")};return Mr.runKernel(_a,e)}});const Hd=Xr({sinh_:function(t){const e={x:jr(t,"x","sinh")};return Mr.runKernel(Oa,e)}});const jd=Xr({slice1d_:function(t,e,n){const a=jr(t,"x","slice1d");return ot(1===a.rank,()=>"slice1d expects a rank-1 tensor, but got a rank-".concat(a.rank," tensor")),du(a,[e],[n])}});const qd=Xr({slice2d_:function(t,e,n){const a=jr(t,"x","slice2d");return ot(2===a.rank,()=>"slice2d expects a rank-2 tensor, but got a rank-".concat(a.rank," tensor")),du(a,e,n)}});const Kd=Xr({slice3d_:function(t,e,n){const a=jr(t,"x","slice3d");return ot(3===a.rank,()=>"slice3d expects a rank-3 tensor, but got a rank-".concat(a.rank," tensor")),du(a,e,n)}});const Xd=Xr({slice4d_:function(t,e,n){const a=jr(t,"x","slice4d");return ot(4===a.rank,()=>"slice4d expects a rank-4 tensor, but got a rank-".concat(a.rank," tensor")),du(a,e,n)}});const Yd=Xr({softmax_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=jr(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. "+"Logits was rank ".concat(n.rank," and dim was ").concat(e));const a={logits:n},s={dim:e};return Mr.runKernel(Ua,a,s)}});const Zd=Xr({fft_:function(t){ot("complex64"===t.dtype,()=>"The dtype for tf.spectral.fft() must be complex64 "+"but got ".concat(t.dtype,"."));const e={input:t};return Mr.runKernel(on,e)}});const Jd=Xr({ifft_:function(t){ot("complex64"===t.dtype,()=>"The dtype for tf.spectral.ifft() must be complex64 "+"but got ".concat(t.dtype,"."));const e={input:t};return Mr.runKernel(bn,e)}});const Qd=Xr({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let a;if(e<=2){const s=iu(t,[n,e]);a=Jd(s)}else{const s=[n,2*(e-1)],r=iu(Lc(t),[n,e]),o=iu(Oc(t),[n,e]),i=Dd(du(r,[0,1],[n,e-2]),1),c=Fi(Dd(du(o,[0,1],[n,e-2]),1),Ui(-1)),l=uu([r,i],1),u=uu([o,c],1),h=iu(Yr(l,u),[s[0],s[1]]);a=Jd(h)}if(a=Lc(a),3===t.rank&&0!==t.shape[0]){const e=a,n=t.shape[0];a=iu(a,[n,a.shape[0]/n,a.shape[1]]),e.dispose()}return a}});const $d=Xr({split_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const a={x:jr(t,"x","split")},s={numOrSizeSplits:e,axis:n};return Mr.runKernel(Va,a,s)}});const tp=Xr({rfft_:function(t,e){ot("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got ".concat(t.dtype));let n=t.shape[t.shape.length-1];const a=t.size/n;let s;if(null!=e&&e<n){const a=t.shape.map(t=>0),r=t.shape.map(t=>t);r[t.shape.length-1]=e,s=du(t,a,r),n=e}else if(null!=e&&e>n){const a=t.shape.map(t=>t);a[t.shape.length-1]=e-n,s=uu([t,Xh(a)],t.shape.length-1),n=e}else s=t;const r=Oi(s),o=iu(Yr(s,r),[a,n]),i=Zd(o),c=Math.floor(n/2)+1,l=Lc(i),u=Oc(i),h=$d(l,[c,n-c],l.shape.length-1),d=$d(u,[c,n-c],u.shape.length-1),p=s.shape.slice();return p[s.shape.length-1]=c,iu(Yr(h[0],d[0]),p)}});const ep=Xr({squaredDifference_:function(t,e){let n=jr(t,"a","squaredDifference"),a=jr(e,"b","squaredDifference");[n,a]=Tr(n,a),rc(n.shape,a.shape);const s={a:n,b:a};return Mr.runKernel(Xa,s,{})}});const np=Xr({squeeze_:function(t,e){const n=jr(t,"x","squeeze","string_or_numeric");return iu(n,vt(n.shape,e).newShape)}});const ap=Xr({stack_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=qr(t,"tensors","stack","string_or_numeric");ot(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&ot(e<=n[0].rank,()=>"Axis must be <= rank of the tensor");const a=n,s={axis:e};return Mr.runKernel(ra,a,s)}});const sp=Xr({step_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:jr(t,"x","step")},a={alpha:e};return Mr.runKernel(ps,n,a)}});const rp=Xr({stridedSlice_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,i=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,c=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0;const l={x:jr(t,"x","stridedSlice","string_or_numeric")},u={begin:e,end:n,strides:a,beginMask:s,endMask:r,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:c};return Mr.runKernel(Ja,l,u)}});const op=Xr({tan_:function(t){const e={x:jr(t,"x","tan","float32")};return Mr.runKernel(ns,e)}});function ip(t,e){ct(t);const n=Ur(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Zr(t,null,n,e)}function cp(t,e,n){if(ct(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const a=Ur(t,n);if(2!==a.length&&1!==a.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===a.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Zr(t,e,a,n)}function lp(t,e,n){if(ct(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const a=Ur(t,n);if(4!==a.length&&1!==a.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===a.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Zr(t,e,a,n)}function up(t,e,n){if(ct(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const a=Ur(t,n);if(5!==a.length&&1!==a.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===a.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Zr(t,e,a,n)}function hp(t,e,n){if(ct(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const a=Ur(t,n);if(6!==a.length&&1!==a.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===a.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Zr(t,e=e||a,a,n)}const dp=Xr({tensorScatterUpdate_:function(t,e,n){const a=jr(t,"tensor","tensorScatterupdate"),s=jr(e,"indices","tensorScatterupdate","int32"),r=jr(n,"updates","tensorScatterupdate");if(Jc(r,s,a.shape),a.dtype!==r.dtype)throw new Error("tensor and updates must have the same dtype, instead they are ".concat(a.dtype," and ").concat(r.dtype,"."));const o={tensor:a,indices:s,updates:r};return Mr.runKernel(Ea,o,{})}});const pp=Xr({topk_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const a=jr(t,"x","topk");if(0===a.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=a.shape[a.shape.length-1];if(e<0)throw new Error("'k' passed to topk() must be >= 0 but got ".concat(e));if(e>s)throw new Error("'k' passed to topk() must be <= the last dimension (".concat(s,") ")+"but got ".concat(e));const r={x:a},o={k:e,sorted:n},[i,c]=Mr.runKernel(rs,r,o);return{values:i,indices:c}}});const fp=Xr({truncatedNormal_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0;if(Ut(t),null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");const r=new wd(e,n,a,!0,s),o=Ni(t,a);for(let i=0;i<o.values.length;i++)o.values[i]=r.nextValue();return o.toTensor()}});const mp=Xr({unique_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=jr(t,"x","unique","string_or_numeric");ot(n.rank>0,()=>"The input tensor must be at least 1D");const a={x:n},s={axis:e},[r,o]=Mr.runKernel(cs,a,s);return{values:r,indices:o}}});const gp=Xr({unsortedSegmentSum_:function(t,e,n){const a=jr(t,"x","unsortedSegmentSum"),s=jr(e,"segmentIds","unsortedSegmentSum","int32");ot(pt(n),()=>"numSegments must be of dtype int");const r={x:a,segmentIds:s},o={numSegments:n};return Mr.runKernel(us,r,o)}});const yp=Xr({unstack_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=jr(t,"x","unstack","string_or_numeric");ot(e>=-n.shape.length&&e<n.shape.length,()=>"Axis = ".concat(e," is not in [-").concat(n.shape.length,", ").concat(n.shape.length,")"));const a={value:n},s={axis:e};return Mr.runKernel(ls,a,s)}});function bp(t,e){return Uh(t,e,"right")}function xp(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0;return Mr.makeVariable(t,e,n,a)}function wp(t,e){const n=[];for(let r=0;r<e.length;r++)e[r]&&n.push(r);const a=Ni(t,"int32"),s=Ni([n.length,t.length],"int32");for(let r=0;r<n.length;r++){const e=a.indexToLoc(n[r]),o=r*t.length;s.values.set(e,o)}return s.toTensor()}const vp=async function(t){const e=jr(t,"condition","whereAsync","bool"),n=await e.data(),a=wp(e.shape,n);return t!==e&&e.dispose(),a};const kp=async function(t,e,n){const a=jr(t,"tensor","boolMask"),s=jr(e,"mask","boolMask","bool"),r=null==n?0:n,o=s.rank,i=a.shape;ot(o>0,()=>"mask cannot be scalar"),it(i.slice(r,r+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let c=1;for(let m=r;m<r+o;m++)c*=i[m];const l=i.slice(0,r).concat([c],i.slice(r+o)),u=iu(a,l),h=iu(s,[-1]),d=await vp(h),p=np(d,[1]),f=wh(u,p,r);return t!==a&&a.dispose(),e!==s&&s.dispose(),p.dispose(),u.dispose(),h.dispose(),d.dispose(),f};const Ip=Xr({movingAverage_:function(t,e,n,a){let s=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];const r=jr(t,"v","movingAverage"),o=jr(e,"x","movingAverage"),i=jr(n,"decay","movingAverage");Cr(r,o),ot(dt(r.shape,o.shape),()=>"Shape mismatch in v and x");const c=Ui(1),l=tc(c,i);let u=Fi(tc(o,r),l);if(s){ot(null!=a,()=>"When using zeroDebias: true, step is required.");const t=jr(a,"step","movingAverage");u=Ri(u,tc(c,$i(i,t)))}return Ei(r,u)}});const Np=Xr({scatterND_:function(t,e,n){Ut(n);const a=jr(t,"indices","scatterND","int32"),s=jr(e,"updates","scatterND");Jc(s,a,n);const r={indices:a,updates:s},o={shape:n};return Mr.runKernel(Ca,r,o)}});const Sp=Xr({sparseToDense_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;Ut(n);const s=jr(t,"sparseIndices","sparseToDense","int32"),r=jr(e,"sparseValues","sparseToDense","string_or_numeric"),o=jr(a,"defaultValue","sparseToDense",r.dtype);!function(t,e,n,a){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type,"+" but the dtype was ".concat(t.dtype,"."));if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix,"+" but got shape ".concat(t.shape,"."));const s=t.rank>0?t.shape[0]:1,r=t.rank>1?t.shape[1]:1;if(n.length!==r)throw new Error("outputShape has incorrect number of elements:,"+" ".concat(n.length,", should be: ").concat(r,"."));const o=e.size;if(0!==e.rank&&(1!==e.rank||o!==s))throw new Error("sparseValues has incorrect shape "+"".concat(e.shape,", should be [] or [").concat(s,"]"));if(e.dtype!==a.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,r,n,o);const i={sparseIndices:s,sparseValues:r,defaultValue:o},c={outputShape:n};return Mr.runKernel(Ka,i,c)}});const Tp=Xr({gatherND_:function(t,e){const n=jr(e,"indices","gatherND","int32"),a={params:jr(t,"x","gatherND","string_or_numeric"),indices:n};return Mr.runKernel(fn,a)}});const Cp=Xr({dropout_:function(t,e,n,a){const s=jr(t,"x","dropout");if(ot("float32"===s.dtype,()=>"x has to be a floating point tensor since it's going to be "+"scaled, but got a ".concat(s.dtype," tensor instead.")),ot(e>=0&&e<1,()=>"rate must be a float in the range [0, 1), but got ".concat(e,".")),0===e)return t instanceof pr?s.clone():s;const r=function(t,e){if(null==e)return t.shape.slice();if(dt(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let a=0;a<t.shape.length;a++)null==e[a]&&null!=t.shape[a]?n.push(t.shape[a]):n.push(e[a]);return n}return e}(s,n),o=1-e,i=Ri(xh(Ei(Td(r,0,1,"float32",a),o)),o);return Fi(s,i)}});function Ep(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function Ap(t,e,n){const a=1-t%2,s=new Float32Array(t);for(let r=0;r<t;++r){const o=2*Math.PI*r/(t+a-1);s[r]=e-n*Math.cos(o)}return ip(s,"float32")}const Rp=async function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;const a=jr(t,"predictions","inTopK"),s=jr(e,"targets","inTopK");ot(a.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, "+"but got ".concat(a.rank)),ot(a.rank-1===s.rank,()=>"predictions rank should be 1 larger than targets rank, but got predictions rank "+"".concat(a.rank," and targets rank ").concat(s.rank)),it(a.shape.slice(0,a.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const r=a.shape[a.shape.length-1];ot(n>0&&n<=r,()=>"'k' passed to inTopK() must be > 0 && <= the predictions last "+"dimension (".concat(r,"), but got ").concat(n));const o=await a.data(),i=await s.data(),[c,l]=[o.length/r,r],u=kt("bool",c);for(let h=0;h<c;h++){const t=h*l,e=o.subarray(t,t+l),a=[];for(let n=0;n<e.length;n++)a.push({value:e[n],index:n});a.sort((t,e)=>e.value-t.value),u[h]=0;for(let s=0;s<n;s++)if(a[s].index===i[h]){u[h]=1;break}}return t!==a&&a.dispose(),e!==s&&s.dispose(),Jr(u,s.shape,"bool")};const Fp=Xr({conv2DBackpropFilter_:function(t,e,n,a,s){let r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",o=arguments.length>6?arguments[6]:void 0,i=t;3===t.rank&&(i=iu(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let c=e;3===c.rank&&(c=iu(e,[1,e.shape[0],e.shape[1],e.shape[2]])),ot(4===i.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+"".concat(i.shape,".")),ot(4===c.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+"".concat(c.shape,".")),ot(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+"".concat(n,"."));const l="NHWC"===r?i.shape[3]:i.shape[1],u="NHWC"===r?c.shape[3]:c.shape[1];ot(l===n[2],()=>"Error in conv2dDerFilter: depth of input ".concat(l,") must ")+"match input depth in filter (".concat(n[2],".")),ot(u===n[3],()=>"Error in conv2dDerFilter: depth of dy (".concat(u,") must ")+"match output depth for filter (".concat(n[3],").")),ou("conv2dDerFilter",s,o);const h={x:i,dy:c},d={strides:a,pad:s,dataFormat:r,dimRoundingMode:o,filterShape:n};return Mr.runKernel(Fe,h,d)}});function Dp(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return Fi(t,sp(e));throw new Error("Cannot compute gradient for fused activation ".concat(n,"."))}function _p(t,e){let n=e;const a=sc(t.shape,e.shape);return a.length>0&&(n=uh(n,a)),iu(n,t.shape)}function Op(t,e,n,a){if("linear"===e)return t;if("relu"===e)return Rd(t);if("elu"===e)return Ju(t);if("relu6"===e)return Fd(t);if("prelu"===e)return pd(t,n);if("leakyrelu"===e)return Th(t,a);if("sigmoid"===e)return hu(t);throw new Error("Unknown fused activation ".concat(e,"."))}const Mp=(t,e)=>!(t>0)||"linear"===e;const Lp=Xr({fusedConv2d_:function(t){let{x:e,filter:n,strides:a,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:c,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:h}=t;if(l=l||"linear",!1===Mp(Mr.state.gradientDepth,l)){ot("NHWC"===r,()=>"Error in fused conv2d: got dataFormat of ".concat(r," but ")+"only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.");let t=Ru(e,n,a,s,r,o,i);return null!=c&&(t=Ei(t,c)),Op(t,l,u,h)}const d=jr(e,"x","conv2d","float32"),p=jr(n,"filter","conv2d","float32");let f=d,m=!1;3===d.rank&&(m=!0,f=iu(d,[1,d.shape[0],d.shape[1],d.shape[2]])),ot(4===f.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+"".concat(f.rank,".")),ot(4===p.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+"".concat(p.rank,".")),ou("fused conv2d",s,i);const g="NHWC"===r?f.shape[3]:f.shape[1];ot(p.shape[2]===g,()=>"Error in conv2d: depth of input (".concat(g,") must match ")+"input depth for filter ".concat(p.shape[2],".")),ot(au(a,o),()=>"Error in conv2D: Either strides or dilations must be 1. "+"Got strides ".concat(a," and dilations '").concat(o,"'"));const y=Yl(f.shape,p.shape,a,o,s,i);let b,x;if(null!=c&&(b=jr(c,"bias","fused conv2d"),[b]=Tr(b,d),"NHWC"===r?rc(y.outShape,b.shape):(ot(b.shape.length<=1,()=>"Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of "+"rank-".concat(b.shape.length,".")),ot(0===b.shape.length||b.shape[0]===y.outChannels||1===b.shape[0],()=>"Error in fused conv2d: bias shape (".concat(b.shape,") is not ")+"compatible with the number of output channels "+"(".concat(y.outChannels,")")))),null!=u){const t=u.shape;if(ot(t.length<=1||3===t.length,()=>"Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of "+"rank-".concat(t.length,".")),1===t.length)ot(1===t[0]||t[0]===y.outChannels,()=>"Error in fused conv2d: PReLU activation weights "+"(".concat(t,") is not compatible with the number of output ")+"channels (".concat(y.outChannels,")."));else if(3===t.length)try{rc(t,y.outShape)}catch(I){const e="Error in fused conv2d: PReLU activation weights (".concat(t,") ")+"is not compatible with the output shape of the conv2d "+"(".concat(y.outShape,").");throw Error(e)}x=jr(u,"prelu weights","fused conv2d")}const w=(t,e)=>{ot("NHWC"===r,()=>"Error in gradient of fused conv2D: got dataFormat of ".concat(r," but only NHWC is currently supported."));const[n,i,c,u]=e,h=Dp(t,c,l);ot(nu(o),()=>"Error in gradient of fused conv2D: dilation rates greater than 1 "+"are not yet supported in gradients. Got dilations '".concat(o,"'"));const d=[Du(i.shape,h,n,a,s),Fp(i,h,n.shape,a,s)];if(null!=u){const t=_p(u,h);d.push(t)}return d},v={x:f,filter:p,bias:b,preluActivationWeights:x},k={strides:a,pad:s,dataFormat:r,dilations:o,dimRoundingMode:i,activation:l,leakyreluAlpha:h};if(null==c){const t=Wi((t,e,n)=>{let a=Mr.runKernel(ys,v,k);return n([e,t,a]),m&&(a=iu(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:w}});return t(f,p)}{const t=Wi((t,e,n,a)=>{let s=Mr.runKernel(ys,v,k);return a([e,t,s,n]),m&&(s=iu(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}});return t(f,p,b)}}});const zp=Xr({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,a,s){let r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,i=t;3===t.rank&&(i=iu(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let c=e;3===c.rank&&(c=iu(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const l={x:i,dy:c},u={strides:a,pad:s,dimRoundingMode:o,dilations:r,filterShape:n};return Mr.runKernel(He,l,u)}});const Pp=Xr({depthwiseConv2dNativeBackpropInput_:function(t,e,n,a,s){let r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,i=e,c=!1;3===e.rank&&(c=!0,i=iu(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const l={dy:i,filter:n},u={strides:a,pad:s,dimRoundingMode:o,dilations:r,inputShape:t},h=Mr.runKernel(je,l,u);return c?iu(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Bp=Xr({fusedDepthwiseConv2d_:function(t){let{x:e,filter:n,strides:a,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:c,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:h}=t;if(!1===Mp(Mr.state.gradientDepth,l)){let t=Gu(e,n,a,s,r,o,i);return null!=c&&(t=Ei(t,c)),Op(t,l,u,h)}const d=jr(e,"x","depthwiseConv2d","float32"),p=jr(n,"filter","depthwiseConv2d","float32");let f=d,m=!1;3===d.rank&&(m=!0,f=iu(d,[1,d.shape[0],d.shape[1],d.shape[2]])),ot(4===f.rank,()=>"Error in fused depthwiseConv2d: input must be rank 4, but got "+"rank ".concat(f.rank,".")),ot(4===p.rank,()=>"Error in fused depthwiseConv2d: filter must be rank 4, "+"but got rank ".concat(p.rank,".")),ot(f.shape[3]===p.shape[2],()=>"Error in fused depthwiseConv2d: number of input channels "+"(".concat(f.shape[3],") must match the inChannels dimension in ")+"filter ".concat(p.shape[2],".")),null==o&&(o=[1,1]),ot(au(a,o),()=>"Error in fused depthwiseConv2d: Either strides or dilations must "+"be 1. Got strides ".concat(a," and dilations '").concat(o,"'")),ou("fused depthwiseConv2d",s,i);const g=Yl(f.shape,p.shape,a,o,s,i,!0);let y,b;null!=c&&(y=jr(c,"bias","fused conv2d"),[y]=Tr(y,d),rc(g.outShape,y.shape)),null!=u&&(b=jr(u,"prelu weights","fused depthwiseConv2d"));const x=(t,e)=>{ot(nu(o),()=>"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations "+"'".concat(o,"'"));const[n,r,c,u]=e,h=Dp(t,c,l),d=Pp(r.shape,h,n,a,s,o,i),p=zp(r,h,n.shape,a,s,o,i);if(null!=u){return[d,p,_p(y,h)]}return[d,p]},w={x:f,filter:p,bias:y,preluActivationWeights:b},v={strides:a,pad:s,dataFormat:r,dilations:o,dimRoundingMode:i,activation:l,leakyreluAlpha:h};if(null==c){const t=Wi((t,e,n)=>{let a=Mr.runKernel(bs,w,v);return n([e,t,a]),m&&(a=iu(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}});return t(f,p)}{const t=Wi((t,e,n,a)=>{let s=Mr.runKernel(bs,w,v);return a([e,t,s,n]),m&&(s=iu(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}});return t(f,p,y)}}});const Wp=Xr({fusedMatMul_:function(t){let{a:e,b:n,transposeA:a=!1,transposeB:s=!1,bias:r,activation:o="linear",preluActivationWeights:i,leakyreluAlpha:c=.2}=t;if(!1===Mp(Mr.state.gradientDepth,o)){let t=Dc(e,n,a,s);return null!=r&&(t=Ei(t,r)),Op(t,o,i,c)}let l=jr(e,"a","fused matMul"),u=jr(n,"b","fused matMul");[l,u]=Tr(l,u);const h=a?l.shape[l.rank-2]:l.shape[l.rank-1],d=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=a?l.shape[l.rank-1]:l.shape[l.rank-2],f=s?u.shape[u.rank-2]:u.shape[u.rank-1],m=l.shape.slice(0,-2),g=u.shape.slice(0,-2),y=lt(m),b=lt(g);ot(h===d,()=>"Error in fused matMul: inner shapes (".concat(h,") and (")+"".concat(d,") of Tensors with shapes ").concat(l.shape," and ")+"".concat(u.shape," and transposeA=").concat(a)+" and transposeB=".concat(s," must match."));const x=rc(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([p,f]),w=iu(l,a?[y,h,p]:[y,p,h]),v=iu(u,s?[b,f,d]:[b,d,f]);let k,I;null!=r&&(k=jr(r,"bias","fused matMul"),[k]=Tr(k,l),rc(x,k.shape)),null!=i&&(I=jr(i,"prelu weights","fused matMul"));const N=(t,e)=>{const[n,i,c,l]=e,u=Dp(iu(t,c.shape),c,o);let h,d;if(a||s?!a&&s?(h=Dc(u,i,!1,!1),d=Dc(u,n,!0,!1)):a&&!s?(h=Dc(i,u,!1,!0),d=Dc(n,u,!1,!1)):(h=Dc(i,u,!0,!0),d=Dc(u,n,!0,!0)):(h=Dc(u,i,!1,!0),d=Dc(n,u,!0,!1)),null!=r){return[h,d,_p(l,u)]}return[h,d]},S={a:w,b:v,bias:k,preluActivationWeights:I},T={transposeA:a,transposeB:s,activation:o,leakyreluAlpha:c};if(null==r){const t=Wi((t,e,n)=>{const a=Mr.runKernel(gs,S,T);return n([t,e,a]),{value:iu(a,x),gradFunc:N}});return t(w,v)}{const t=Wi((t,e,n,a)=>{const s=Mr.runKernel(gs,S,T);return a([t,e,s,n]),{value:iu(s,x),gradFunc:N}});return t(w,v,k)}}});const Vp=Xr({hammingWindow_:function(t){return Ap(t,.54,.46)}});const Up=Xr({hannWindow_:function(t){return Ap(t,.5,.5)}});const Gp=Xr({frame_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,r=0;const o=[];for(;r+e<=t.size;)o.push(du(t,r,e)),r+=n;if(a)for(;r<t.size;){const a=r+e-t.size,i=uu([du(t,r,e-a),Ji([a],s)]);o.push(i),r+=n}return 0===o.length?cp([],[0,e]):iu(uu(o),[o.length,e])}});const Hp=Xr({stft_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Up;null==a&&(a=Ep(e));const r=Gp(t,e,n),o=Fi(r,s(e));return tp(o,a)}});const jp=Xr({cropAndResize_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"bilinear",r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=jr(t,"image","cropAndResize"),i=jr(e,"boxes","cropAndResize","float32"),c=jr(n,"boxInd","cropAndResize","int32"),l=i.shape[0];ot(4===o.rank,()=>"Error in cropAndResize: image must be rank 4,"+"but got rank ".concat(o.rank,".")),ot(2===i.rank&&4===i.shape[1],()=>"Error in cropAndResize: boxes must be have size [".concat(l,",4] ")+"but had shape ".concat(i.shape,".")),ot(1===c.rank&&c.shape[0]===l,()=>"Error in cropAndResize: boxInd must be have size [".concat(l,"] ")+"but had shape ".concat(i.shape,".")),ot(2===a.length,()=>"Error in cropAndResize: cropSize must be of length 2, but got "+"length ".concat(a.length,".")),ot(a[0]>=1&&a[1]>=1,()=>"cropSize must be atleast [1,1], but was ".concat(a)),ot("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was ".concat(s));const u={image:o,boxes:i,boxInd:c},h={method:s,extrapolationValue:r,cropSize:a};return Mr.runKernel(We,u,h)}});const qp=Xr({flipLeftRight_:function(t){const e=jr(t,"image","flipLeftRight","float32");ot(4===e.rank,()=>"Error in flipLeftRight: image must be rank 4,"+"but got rank ".concat(e.rank,"."));const n={image:e};return Mr.runKernel(ln,n,{})}});const Kp=Xr({grayscaleToRGB_:function(t){const e=jr(t,"image","grayscaleToRGB"),n=e.rank-1,a=e.shape[n];ot(e.rank>=2,()=>"Error in grayscaleToRGB: images must be at least rank 2, "+"but got rank ".concat(e.rank,".")),ot(1===a,()=>"Error in grayscaleToRGB: last dimension of a grayscale image "+"should be size 1, but got size ".concat(a,"."));const s=new Array(e.rank);return s.fill(1,0,n),s[n]=3,yh(e,s)}});const Xp=Xr({rgbToGrayscale_:function(t){const e=jr(t,"image","RGBToGrayscale"),n=e.rank-1,a=e.shape[n];ot(e.rank>=2,()=>"Error in RGBToGrayscale: images must be at least rank 2, "+"but got rank ".concat(e.rank,".")),ot(3===a,()=>"Error in RGBToGrayscale: last dimension of an RGB image "+"should be size 3, but got size ".concat(a,"."));const s=e.dtype,r=Si(e,"float32"),o=ip([.2989,.587,.114]);let i;switch(e.rank){case 2:i=Zu("ij,j->i",r,o);break;case 3:i=Zu("ijk,k->ij",r,o);break;case 4:i=Zu("ijkl,l->ijk",r,o);break;case 5:i=Zu("ijklm,m->ijkl",r,o);break;case 6:i=Zu("ijklmn,n->ijklm",r,o);break;default:throw new Error("Not a valid tensor rank.")}return i=mh(i,-1),Si(i,s)}});const Yp=Xr({rotateWithOffset_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const s=jr(t,"image","rotateWithOffset","float32");ot(4===s.rank,()=>"Error in rotateWithOffset: image must be rank 4,"+"but got rank ".concat(s.rank,"."));const r={image:s},o={radians:e,fillValue:n,center:a};return Mr.runKernel(ms,r,o)}});function Zp(t,e,n,a,s,r){null==a&&(a=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==r&&(r=0);const o=t.shape[0];return n=Math.min(n,o),ot(0<=a&&a<=1,()=>"iouThreshold must be in [0, 1], but was '".concat(a,"'")),ot(2===t.rank,()=>"boxes must be a 2D tensor, but was of rank '".concat(t.rank,"'")),ot(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was ".concat(t.shape[1])),ot(1===e.rank,()=>"scores must be a 1D tensor"),ot(e.shape[0]===o,()=>"scores has incompatible shape with boxes. Expected ".concat(o,", ")+"but was ".concat(e.shape[0])),ot(0<=r&&r<=1,()=>"softNmsSigma must be in [0, 1], but was '".concat(r,"'")),{maxOutputSize:n,iouThreshold:a,scoreThreshold:s,softNmsSigma:r}}const Jp=Xr({nonMaxSuppression_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const r=jr(t,"boxes","nonMaxSuppression","float32"),o=jr(e,"scores","nonMaxSuppression","float32"),i=Zp(r,o,n,a,s);n=i.maxOutputSize,a=i.iouThreshold,s=i.scoreThreshold;const c={maxOutputSize:n,iouThreshold:a,scoreThreshold:s};return Mr.runKernel(ta,{boxes:r,scores:o},c)}});function Qp(t,e,n){const a=function(t,e,n){return function(t,e,n){let a=0,s=t.length,r=0,o=!1;for(;a<s;){r=a+(s-a>>>1);const i=n(e,t[r]);i>0?a=r+1:(s=r,o=!i)}return o?a:-a-1}(t,e,n||$p)}(t,e,n),s=a<0?-(a+1):a;t.splice(s,0,e)}function $p(t,e){return t>e?1:t<e?-1:0}function tf(t,e,n,a,s){return af(t,e,n,a,s,0)}function ef(t,e,n,a,s,r){return af(t,e,n,a,s,0,!1,r,!0)}function nf(t,e,n,a,s,r){return af(t,e,n,a,s,r,!0)}function af(t,e,n,a,s,r){let o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],i=arguments.length>7&&void 0!==arguments[7]&&arguments[7],c=arguments.length>8&&void 0!==arguments[8]&&arguments[8];const l=[];for(let g=0;g<e.length;g++)e[g]>s&&l.push({score:e[g],boxIndex:g,suppressBeginIndex:0});l.sort(of);const u=r>0?-.5/r:0,h=[],d=[];for(;h.length<n&&l.length>0;){const e=l.pop(),{score:n,boxIndex:r,suppressBeginIndex:o}=e;if(n<s)break;let i=!1;for(let c=h.length-1;c>=o;--c){const n=sf(t,r,h[c]);if(n>=a){i=!0;break}if(e.score=e.score*rf(a,u,n),e.score<=s)break}e.suppressBeginIndex=h.length,i||(e.score===n?(h.push(r),d.push(e.score)):e.score>s&&Qp(l,e,of))}const p=h.length,f=n-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return o&&(m.selectedScores=d),c&&(m.validOutputs=p),m}function sf(t,e,n){const a=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),r=Math.min(a[0],a[2]),o=Math.min(a[1],a[3]),i=Math.max(a[0],a[2]),c=Math.max(a[1],a[3]),l=Math.min(s[0],s[2]),u=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),p=(i-r)*(c-o),f=(h-l)*(d-u);if(p<=0||f<=0)return 0;const m=Math.max(r,l),g=Math.max(o,u),y=Math.min(i,h),b=Math.min(c,d),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(p+f-x)}function rf(t,e,n){const a=Math.exp(e*n*n);return n<=t?a:0}function of(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const cf=async function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const r=jr(t,"boxes","nonMaxSuppressionAsync"),o=jr(e,"scores","nonMaxSuppressionAsync"),i=Zp(r,o,n,a,s);n=i.maxOutputSize,a=i.iouThreshold,s=i.scoreThreshold;const c=await Promise.all([r.data(),o.data()]),l=c[0],u=c[1],{selectedIndices:h}=tf(l,u,n,a,s);return r!==t&&r.dispose(),o!==e&&o.dispose(),ip(h,"int32")};const lf=Xr({nonMaxSuppressionWithScore_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=jr(t,"boxes","nonMaxSuppression"),i=jr(e,"scores","nonMaxSuppression"),c=Zp(o,i,n,a,s,r);n=c.maxOutputSize,a=c.iouThreshold,s=c.scoreThreshold,r=c.softNmsSigma;const l={boxes:o,scores:i},u={maxOutputSize:n,iouThreshold:a,scoreThreshold:s,softNmsSigma:r},h=Mr.runKernel(na,l,u);return{selectedIndices:h[0],selectedScores:h[1]}}});const uf=async function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=jr(t,"boxes","nonMaxSuppressionAsync"),i=jr(e,"scores","nonMaxSuppressionAsync"),c=Zp(o,i,n,a,s,r);n=c.maxOutputSize,a=c.iouThreshold,s=c.scoreThreshold,r=c.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),u=l[0],h=l[1],{selectedIndices:d,selectedScores:p}=nf(u,h,n,a,s,r);return o!==t&&o.dispose(),i!==e&&i.dispose(),{selectedIndices:ip(d,"int32"),selectedScores:ip(p)}};const hf=Xr({nonMaxSuppressionPadded_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const o=jr(t,"boxes","nonMaxSuppression"),i=jr(e,"scores","nonMaxSuppression"),c=Zp(o,i,n,a,s,null),l={boxes:o,scores:i},u={maxOutputSize:c.maxOutputSize,iouThreshold:c.iouThreshold,scoreThreshold:c.scoreThreshold,padToMaxOutputSize:r},h=Mr.runKernel(ea,l,u);return{selectedIndices:h[0],validOutputs:h[1]}}});const df=async function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const o=jr(t,"boxes","nonMaxSuppressionAsync"),i=jr(e,"scores","nonMaxSuppressionAsync"),c=Zp(o,i,n,a,s,null),l=c.maxOutputSize,u=c.iouThreshold,h=c.scoreThreshold,[d,p]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=ef(d,p,l,u,h,r);return o!==t&&o.dispose(),i!==e&&i.dispose(),{selectedIndices:ip(f,"int32"),validOutputs:Ui(m,"int32")}};const pf=Xr({resizeBilinear_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=jr(t,"images","resizeBilinear");ot(3===s.rank||4===s.rank,()=>"Error in resizeBilinear: x must be rank 3 or 4, but got "+"rank ".concat(s.rank,".")),ot(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+"".concat(e,".")),ot(!1===a||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let r=s,o=!1;3===s.rank&&(o=!0,r=iu(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=e,i={images:r},c={alignCorners:n,halfPixelCenters:a,size:e},l=Mr.runKernel(va,i,c);return o?iu(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const ff=Xr({resizeNearestNeighbor_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=jr(t,"images","resizeNearestNeighbor");ot(3===s.rank||4===s.rank,()=>"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got "+"rank ".concat(s.rank,".")),ot(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+"".concat(e,".")),ot("float32"===s.dtype||"int32"===s.dtype,()=>"`images` must have `int32` or `float32` as dtype"),ot(!1===a||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let r=s,o=!1;3===s.rank&&(o=!0,r=iu(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=e,i={images:r},c={alignCorners:n,halfPixelCenters:a,size:e},l=Mr.runKernel(xa,i,c);return o?iu(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const mf=Xr({threshold_:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"binary",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const s=jr(t,"image","threshold"),r=s.shape[0]*s.shape[1];let o,i,c,l,u=Fi(ip([a]),255);if(ot(3===s.rank,()=>"Error in threshold: image must be rank 3,"+"but got rank ".concat(s.rank,".")),ot(3===s.shape[2]||1===s.shape[2],()=>"Error in threshold: image color channel must be equal to 3 or 1"+"but got ".concat(s.shape[2],".")),ot("int32"===s.dtype||"float32"===s.dtype,()=>"Error in dtype: image dtype must be int32 or float32,"+"but got dtype ".concat(s.dtype,".")),ot("otsu"===e||"binary"===e,()=>"Method must be binary or otsu, but was ".concat(e)),3===s.shape[2]){[o,i,c]=$d(s,[1,1,1],-1);const t=Fi(o,.2989),e=Fi(i,.587),n=Fi(c,.114);l=Ei(Ei(t,e),n)}else l=t;if("otsu"===e){u=function(t,e){let n,a,s,r,o,i,c=ip([-1]),l=ip([0]),u=ip([0]);for(let h=0;h<t.size-1;h++){n=du(t,0,h+1),a=du(t,h+1),o=Ri(uh(n),e),i=Ri(uh(a),e);const d=uh(Fi(n,Ed(0,n.size)));s=Ri(d,uh(n));const p=Ji(a.shape,n.size),f=Ei(Ed(0,a.size),p),m=Fi(a,f);r=Ri(uh(m),uh(a));const g=tc(s,r),y=tc(s,r),b=Fi(o,i);u=Fi(Fi(b,g),y);const x=vh(u,l);l=Ku(x,u,l),c=Ku(x,ip([h]),c)}return c}(wu(Si(zd(l),"int32"),Jr([]),256),r)}const h=n?Eh(l,u):vh(l,u);return Si(Fi(h,255),"int32")}});const gf=Xr({transform_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"nearest",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"constant",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,r=arguments.length>5?arguments[5]:void 0;const o=jr(t,"image","transform","float32"),i=jr(e,"transforms","transform","float32");ot(4===o.rank,()=>"Error in transform: image must be rank 4,"+"but got rank ".concat(o.rank,".")),ot(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),ot(null==r||2===r.length,()=>"Error in transform: outputShape must be [height, width] or null, "+"but got ".concat(r,"."));const c={image:o,transforms:i},l={interpolation:n,fillMode:a,fillValue:s,outputShape:r};return Mr.runKernel(os,c,l)}});const yf=Xr({bandPart_:function(t,e,n){const a=jr(t,"a","bandPart");ot(a.rank>=2,()=>"bandPart(): Rank must be at least 2, got ".concat(a.rank,"."));const s=a.shape,[r,o]=a.shape.slice(-2);let i,c;"number"===typeof e?(ot(e%1===0,()=>"bandPart(): numLower must be an integer, got ".concat(e,".")),ot(e<=r,()=>"bandPart(): numLower (".concat(e,")")+" must not be greater than the number of rows (".concat(r,").")),i=jr(e<0?r:e,"numLower","bandPart")):(ot("int32"===e.dtype,()=>"bandPart(): numLower's dtype must be an int32."),i=Ku(Ch(e,0),r,Jh(e,r))),"number"===typeof n?(ot(n%1===0,()=>"bandPart(): numUpper must be an integer, got ".concat(n,".")),ot(n<=o,()=>"bandPart(): numUpper (".concat(n,")")+" must not be greater than the number of columns (".concat(o,").")),c=jr(n<0?o:n,"numUpper","bandPart")):(ot("int32"===n.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),c=Ku(Ch(n,0),o,Jh(n,o)));const l=iu(Ed(0,r,1,"int32"),[-1,1]),u=Ed(0,o,1,"int32"),h=tc(l,u),d=zh(Eh(h,i),kh(h,Mc(c))),p=Xh([r,o],a.dtype);return iu(ap(yp(iu(a,[-1,r,o])).map(t=>Ku(d,t,p))),s)}});const bf=Xr({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,ot(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)ot(t[e].shape[0]===n,()=>"Gram-Schmidt: Non-unique lengths found in the input vectors: "+"(".concat(t[e].shape[0]," vs. ").concat(n,")"))}else e=!0,t=$d(t,t.shape[0],0).map(t=>np(t,[0]));ot(t.length<=t[0].shape[0],()=>"Gram-Schmidt: Number of vectors (".concat(t.length,") exceeds ")+"number of dimensions (".concat(t[0].shape[0],")."));const n=[],a=t;for(let s=0;s<t.length;++s)n.push(Mr.tidy(()=>{let t=a[s];if(s>0)for(let e=0;e<s;++e){const a=Fi(uh(Fi(n[e],t)),n[e]);t=tc(t,a)}return Ri(t,dh(t,"euclidean"))}));return e?ap(n,0):n}});function xf(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return Mr.tidy(()=>{ot(2===t.shape.length,()=>"qr2d() requires a 2D Tensor, but got a ".concat(t.shape.length,"D Tensor."));const n=t.shape[0],a=t.shape[1];let s=bh(n),r=Ti(t);const o=cp([[1]],[1,1]);let i=Ti(o);const c=n>=a?a:n;for(let t=0;t<c;++t){const e=r,c=i,l=s;[i,r,s]=Mr.tidy(()=>{const e=du(r,[t,t],[n-t,1]),c=dh(e),l=du(r,[t,t],[1,1]),u=Ku(vh(l,0),cp([[-1]]),cp([[1]])),h=tc(l,Fi(u,c)),d=Ri(e,h);i=1===d.shape[0]?Ti(o):uu([o,du(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=Mc(Ri(Dc(u,h),c)),f=du(r,[t,0],[n-t,a]),m=Fi(p,i),g=zc(i);if(0===t)r=tc(f,Dc(m,Dc(g,f)));else{const e=tc(f,Dc(m,Dc(g,f)));r=uu([du(r,[0,0],[t,a]),e],0)}const y=zc(m),b=du(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=tc(b,Dc(Dc(b,i),y));else{const e=tc(b,Dc(Dc(b,i),y));s=uu([du(s,[0,0],[n,t]),e],1)}return[i,r,s]}),lo([e,c,l])}return!e&&n>a&&(s=du(s,[0,0],[n,a]),r=du(r,[0,0],[a,a])),[s,r]})}const wf=Xr({qr_:function(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(ot(t.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank ".concat(t.rank)),2===t.rank)return xf(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),a=yp(iu(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],r=[];a.forEach(t=>{const[n,a]=xf(t,e);s.push(n),r.push(a)});return[iu(ap(s,0),t.shape),iu(ap(r,0),t.shape)]}}});var vf;!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(vf||(vf={}));const kf=Xr({computeWeightedLoss_:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:vf.SUM_BY_NONZERO_WEIGHTS;const a=jr(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=jr(e,"weights","computeWeightedLoss"));const r=null==s?a:Fi(a,s);if(n===vf.NONE)return r;if(n===vf.SUM)return uh(r);if(n===vf.MEAN){if(null==s)return Kh(r);{const t=a.size/s.size,e=Ri(uh(r),uh(s));return t>1?Ri(e,Ui(t)):e}}if(n===vf.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Ri(uh(r),Ui(a.size));{const t=Fi(s,Yh(a.shape)),e=Si(uh(ad(t,Ui(0))),"float32");return Ri(uh(r),e)}}throw Error("Unknown reduction: ".concat(n))}});const If=Xr({absoluteDifference_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:vf.SUM_BY_NONZERO_WEIGHTS;const s=jr(t,"labels","absoluteDifference"),r=jr(e,"predictions","absoluteDifference");let o=null;null!=n&&(o=jr(n,"weights","absoluteDifference")),it(s.shape,r.shape,"Error in absoluteDifference: ");const i=nc(tc(s,r));return kf(i,o,a)}});const Nf=Xr({cosineDistance_:function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:vf.SUM_BY_NONZERO_WEIGHTS;const r=jr(t,"labels","cosineDistance"),o=jr(e,"predictions","cosineDistance");let i=null;null!=a&&(i=jr(a,"weights","cosineDistance")),it(r.shape,o.shape,"Error in cosineDistance: ");const c=Ui(1),l=tc(c,uh(Fi(r,o),n,!0));return kf(l,i,s)}});const Sf=Xr({hingeLoss_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:vf.SUM_BY_NONZERO_WEIGHTS,s=jr(t,"labels","hingeLoss");const r=jr(e,"predictions","hingeLoss");let o=null;null!=n&&(o=jr(n,"weights","hingeLoss")),it(s.shape,r.shape,"Error in hingeLoss: ");const i=Ui(1);s=tc(Fi(Ui(2),s),i);const c=Rd(tc(i,Fi(s,r)));return kf(c,o,a)}});const Tf=Xr({huberLoss_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:vf.SUM_BY_NONZERO_WEIGHTS;const r=jr(t,"labels","huberLoss"),o=jr(e,"predictions","huberLoss");let i=null;null!=n&&(i=jr(n,"weights","huberLoss")),it(r.shape,o.shape,"Error in huberLoss: ");const c=Ui(a),l=nc(tc(o,r)),u=Jh(l,c),h=tc(l,u),d=Ei(Fi(Ui(.5),_i(u)),Fi(c,h));return kf(d,i,s)}});const Cf=Xr({logLoss_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e-7,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:vf.SUM_BY_NONZERO_WEIGHTS;const r=jr(t,"labels","logLoss"),o=jr(e,"predictions","logLoss");let i=null;null!=n&&(i=jr(n,"weights","logLoss")),it(r.shape,o.shape,"Error in logLoss: ");const c=Ui(1),l=Ui(a),u=Mc(Fi(r,Fh(Ei(o,l)))),h=Fi(tc(c,r),Fh(Ei(tc(c,o),l))),d=tc(u,h);return kf(d,i,s)}});const Ef=Xr({meanSquaredError_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:vf.SUM_BY_NONZERO_WEIGHTS;const s=jr(t,"labels","meanSquaredError"),r=jr(e,"predictions","meanSquaredError");let o=null;null!=n&&(o=jr(n,"weights","meanSquaredError")),it(s.shape,r.shape,"Error in meanSquaredError: ");const i=ep(s,r);return kf(i,o,a)}});const Af=Xr({sigmoidCrossEntropy_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:vf.SUM_BY_NONZERO_WEIGHTS,r=jr(t,"multiClassLabels","sigmoidCrossEntropy");const o=jr(e,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=jr(n,"weights","sigmoidCrossEntropy")),it(r.shape,o.shape,"Error in sigmoidCrossEntropy: "),a>0){const t=Ui(a),e=Ui(1),n=Ui(.5);r=Ei(Fi(r,tc(e,t)),Fi(n,t))}const c=function(t,e){const n=jr(t,"labels","sigmoidCrossEntropyWithLogits"),a=jr(e,"logits","sigmoidCrossEntropyWithLogits");it(n.shape,a.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Rd(a),r=Fi(a,n),o=Dh(fh(Mc(nc(a))));return Ei(tc(s,r),o)}(r,o);return kf(c,i,s)}});const Rf=Xr({softmaxCrossEntropy_:function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:vf.SUM_BY_NONZERO_WEIGHTS,r=jr(t,"onehotLabels","softmaxCrossEntropy");const o=jr(e,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=jr(n,"weights","softmaxCrossEntropy")),it(r.shape,o.shape,"Error in softmaxCrossEntropy: "),a>0){const t=Ui(a),e=Ui(1),n=Ui(r.shape[1]);r=Ei(Fi(r,tc(e,t)),Ri(t,n))}const c=function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet "+"supported. Labels / logits was rank ".concat(e.rank," ")+"and dim was ".concat(n));const a=Wi((t,e,a)=>{const s=Lh(e,[n],!0),r=tc(Si(e,"float32"),s);a([t,r]);const o=Mc(Fi(r,t));return{value:uh(o,[n]),gradFunc:(t,e)=>{const[a,s]=e,r=ah(t.shape,[n]);return[Fi(iu(t,r),tc(Si(a,"float32"),fh(s))),Fi(iu(t,r),tc(fh(s),Si(a,"float32")))]}}});return a(t,e)}(r,o);return kf(c,i,s)}});const Ff=Xr({sparseFillEmptyRows_:function(t,e,n,a){const s=jr(t,"indices","sparseFillEmptyRows","int32"),r=jr(e,"values","sparseFillEmptyRows"),o=jr(n,"denseShape","sparseFillEmptyRows","int32"),i=jr(a,"defaultValue","sparseFillEmptyRows",r.dtype);if(2!==s.rank)throw new Error("Indices should be Tensor2D but received shape\n        ".concat(s.shape));if(1!==r.rank)throw new Error("Values should be Tensor1D but received shape ".concat(r.shape));if(1!==o.rank)throw new Error("Dense shape should be Tensor1D but received shape ".concat(o.shape));if(0!==i.rank)throw new Error("Default value should be a scalar but received shape ".concat(i.shape));const c={indices:s,values:r,denseShape:o,defaultValue:i},l=Mr.runKernel(Ga,c);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const Df=Xr({sparseReshape_:function(t,e,n){const a=jr(t,"inputIndices","sparseReshape","int32"),s=jr(e,"inputShape","sparseReshape","int32"),r=jr(n,"newShape","sparseReshape","int32");if(2!==a.rank)throw new Error("Input indices should be Tensor2D but received shape\n        ".concat(a.shape));if(1!==s.rank)throw new Error("Input shape should be Tensor1D but received shape ".concat(s.shape));if(1!==r.rank)throw new Error("New shape should be Tensor1D but received shape ".concat(r.shape));const o={inputIndices:a,inputShape:s,newShape:r},i=Mr.runKernel(Ha,o);return{outputIndices:i[0],outputShape:i[1]}}});const _f=Xr({sparseSegmentMean_:function(t,e,n){const a=jr(t,"data","sparseSegmentMean"),s=jr(e,"indices","sparseSegmentMean","int32"),r=jr(n,"segmentIds","sparseSegmentMean","int32");if(a.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error("Indices should be Tensor1D but received shape\n          ".concat(s.shape));if(1!==r.rank)throw new Error("Segment ids should be Tensor1D but received shape\n          ".concat(r.shape));const o={data:a,indices:s,segmentIds:r};return Mr.runKernel(ja,o)}});const Of=Xr({sparseSegmentSum_:function(t,e,n){const a=jr(t,"data","sparseSegmentSum"),s=jr(e,"indices","sparseSegmentSum","int32"),r=jr(n,"segmentIds","sparseSegmentSum","int32");if(a.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error("Indices should be Tensor1D but received shape\n         ".concat(s.shape));if(1!==r.rank)throw new Error("Segment ids should be Tensor1D but received shape\n         ".concat(r.shape));const o={data:a,indices:s,segmentIds:r};return Mr.runKernel(qa,o)}});const Mf=Xr({stringNGrams_:function(t,e,n,a,s,r,o,i){const c=jr(t,"data","stringNGrams","string");if("string"!==c.dtype)throw new Error("Data must be of datatype string");if(1!==c.shape.length)throw new Error("Data must be a vector, saw: ".concat(c.shape));const l=jr(e,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const u={separator:n,nGramWidths:a,leftPad:s,rightPad:r,padWidth:o,preserveShortSequences:i},h={data:c,dataSplits:l},d=Mr.runKernel(Qa,h,u);return{nGrams:d[0],nGramsSplits:d[1]}}});const Lf=Xr({stringSplit_:function(t,e){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const a=jr(t,"input","stringSplit","string"),s=jr(e,"delimiter","stringSplit","string");if(1!==a.rank)throw new Error("Input should be Tensor1D but received shape ".concat(a.shape));if(0!==s.rank)throw new Error("Delimiter should be a scalar but received shape ".concat(s.shape));const r={skipEmpty:n},o={input:a,delimiter:s},i=Mr.runKernel($a,o,r);return{indices:i[0],values:i[1],shape:i[2]}}});const zf=Xr({stringToHashBucketFast_:function(t,e){const n=jr(t,"input","stringToHashBucketFast","string"),a={numBuckets:e};if(e<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return Mr.runKernel(ts,s,a)}});const Pf=Xr({staticRegexReplace_:function(t,e,n){let a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];const s=jr(t,"input","staticRegexReplace","string"),r={pattern:e,rewrite:n,replaceGlobal:a};return Mr.runKernel(Za,{x:s},r)}}),Bf={fft:Zd,ifft:Jd,rfft:tp,irfft:Qd},Wf={hammingWindow:Vp,hannWindow:Up,frame:Gp,stft:Hp},Vf={flipLeftRight:qp,grayscaleToRGB:Kp,resizeNearestNeighbor:ff,resizeBilinear:pf,rgbToGrayscale:Xp,rotateWithOffset:Yp,cropAndResize:jp,nonMaxSuppression:Jp,nonMaxSuppressionAsync:cf,nonMaxSuppressionWithScore:lf,nonMaxSuppressionWithScoreAsync:uf,nonMaxSuppressionPadded:hf,nonMaxSuppressionPaddedAsync:df,threshold:mf,transform:gf},Uf={bandPart:yf,gramSchmidt:bf,qr:wf},Gf={absoluteDifference:If,computeWeightedLoss:kf,cosineDistance:Nf,hingeLoss:Sf,huberLoss:Tf,logLoss:Cf,meanSquaredError:Ef,sigmoidCrossEntropy:Af,softmaxCrossEntropy:Rf},Hf={sparseFillEmptyRows:Ff,sparseReshape:Df,sparseSegmentMean:_f,sparseSegmentSum:Of},jf={stringNGrams:Mf,stringSplit:Lf,stringToHashBucketFast:zf,staticRegexReplace:Pf},qf=_l,Kf="undefined"!==typeof requestAnimationFrame?requestAnimationFrame:"undefined"!==typeof setImmediate?setImmediate:t=>t();function Xf(){return new Promise(t=>Kf(()=>t()))}function Yf(t,e){const n=t[0].length;t.forEach((t,e)=>{ot(t.length===n,()=>"Error in concat".concat(n,"D: rank of tensors[").concat(e,"] must be the same ")+"as the rank of the rest (".concat(n,")"))}),ot(e>=0&&e<n,()=>"Error in concat".concat(n,"D: axis must be between 0 and ").concat(n-1,"."));const a=t[0];t.forEach((t,s)=>{for(let r=0;r<n;r++)ot(r===e||t[r]===a[r],()=>"Error in concat".concat(n,"D: Shape of tensors[").concat(s,"] (").concat(t,") ")+"does not match the shape of the rest (".concat(a,") ")+"along the non-concatenated axis ".concat(s,"."))})}function Zf(t,e){const n=t[0].slice();for(let a=1;a<t.length;a++)n[e]+=t[a][e];return n}var Jf;function Qf(t,e,n){let a=new Array;if(null==n&&null==e)return a;if(null==e)for(;a.length<t+n.length;)a.push(-1);else a=e.slice();if(null==n)return a;if(t+n.length!==a.length)throw new Error("rt input.shape and shape=".concat(e," are incompatible: rt input.rank = ").concat(t+n.length,", but shape.rank = ").concat(a.length));for(let s=1;s<n.length;++s){const r=n[s],o=a[a.length-n.length+s],i=a[o];if(r>=0)if(i>=0){if(i!==r)throw new Error("rt input.shape and shape=".concat(e," are incompatible: rt input.shape[").concat(s+t,"] = ").concat(r," but shape[").concat(s+t,"] = ").concat(i))}else a[o]=r}return a}function $f(t){const e={FIRST_DIM_SIZE:Jf.FIRST_DIM_SIZE,VALUE_ROWIDS:Jf.VALUE_ROWIDS,ROW_LENGTHS:Jf.ROW_LENGTHS,ROW_SPLITS:Jf.ROW_SPLITS,ROW_LIMITS:Jf.ROW_LIMITS,ROW_STARTS:Jf.ROW_STARTS},n=[];for(const a of t){if(!(a in e))break;n.push(e[a])}return n}function tm(t){return 0===t.length?0:t[0]===Jf.FIRST_DIM_SIZE?t.length-1:t.length}function em(t,e){if(null==t||null==e)return;const n=t.length,a=e.length;if(n>=a)throw new Error("defaultValue.shape=".concat(t," and ragged tensor flatValues.shape=").concat(e,", are incompatible: defaultValue.rank = ").concat(n," must be less than ragged tensor input flatValues.rank = ").concat(a,")"));for(let s=0;s<Math.min(n,a-1);++s){const n=t[s],a=e[s+1];if(n>=0&&a>=0&&1!==n&&n!==a)throw new Error("defaultValue.shape=".concat(t,", and ragged tensor input flatValues.shape=").concat(e," are incompatible: defaultValue.shape[").concat(s-t.length,"] = ").concat(n," but ragged tensor input.flatValues.shape[").concat(s-t.length,"] = ").concat(a))}}!function(t){t[t.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",t[t.VALUE_ROWIDS=1]="VALUE_ROWIDS",t[t.ROW_LENGTHS=2]="ROW_LENGTHS",t[t.ROW_SPLITS=3]="ROW_SPLITS",t[t.ROW_LIMITS=4]="ROW_LIMITS",t[t.ROW_STARTS=5]="ROW_STARTS"}(Jf||(Jf={}));const nm=30;function am(t){return t<=nm?t:Ot(t,Math.floor(Math.sqrt(t)))}function sm(t,e,n){return[n*("number"===typeof t?t:t[0]),e*("number"===typeof t?t:t[1])]}function rm(t,e,n){let a=[];if(!(arguments.length>3&&void 0!==arguments[3])||arguments[3])a=a.concat(e.slice(0)),a.push(t[0]/n),a=a.concat(t.slice(1));else{a=a.concat(t[0]);const n=e.length;for(let s=0;s<n;++s)a=a.concat([t[s+1]/e[s],e[s]]);a=a.concat(t.slice(n+1))}return a}function om(t,e){const n=[];if(!(arguments.length>2&&void 0!==arguments[2])||arguments[2]){n.push(e);for(let a=e+1;a<t;++a)a<=2*e?(n.push(a),n.push(a-(e+1))):n.push(a)}else{const a=[],s=[];for(let n=1;n<t;++n)n>=2*e+1||n%2===1?s.push(n):a.push(n);n.push(...a),n.push(0),n.push(...s)}return n}function im(t,e,n){let a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];const s=[];a?s.push(t[0]/n):s.push(t[0]*n);for(let r=1;r<t.length;++r)r<=e.length?a?s.push(e[r-1]*t[r]):s.push(t[r]/e[r-1]):s.push(t[r]);return s}function cm(t,e){const n=[0];for(let a=0;a<e;++a)n.push(t[a][0]);return n}function lm(t,e,n){const a=t.slice(0,1);for(let s=0;s<n;++s)a.push(t[s+1]-e[s][0]-e[s][1]);return a}const um=1.7580993408473768,hm=1.0507009873554805,dm=.3275911,pm=.254829592,fm=-.284496736,mm=1.421413741,gm=-1.453152027,ym=1.061405429;function bm(t,e){if(t.length!==e.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+"".concat(t.length,", imag: ").concat(e.length,"."));const n=new Float32Array(2*t.length);for(let a=0;a<n.length;a+=2)n[a]=t[a/2],n[a+1]=e[a/2];return n}function xm(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let a=0;a<t.length;a+=2)e[a/2]=t[a],n[a/2]=t[a+1];return{real:e,imag:n}}function wm(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),a=new Float32Array(e);for(let s=0;s<t.length;s+=4)n[Math.floor(s/4)]=t[s],a[Math.floor(s/4)]=t[s+1];return{real:n,imag:a}}function vm(t){const e=Math.floor(t.length/4),n=new Float32Array(e),a=new Float32Array(e);for(let s=2;s<t.length;s+=4)n[Math.floor(s/4)]=t[s],a[Math.floor(s/4)]=t[s+1];return{real:n,imag:a}}function km(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Im(t,e,n,a){t[2*a]=e,t[2*a+1]=n}function Nm(t,e){const n=new Float32Array(t/2),a=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const r=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(r),a[s]=Math.sin(r)}return{real:n,imag:a}}function Sm(t,e,n){const a=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(a),imag:Math.sin(a)}}const Tm="->",Cm=/->/g,Em=",",Am="...";function Rm(t,e){const n=((t=t.replace(/\s/g,"")).length-t.replace(Cm,"").length)/Tm.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("'.concat(Tm,'").'));const[a,s]=t.split(Tm);ot(-1===a.indexOf(Am),()=>'The ellipsis notation ("'.concat(Am,'") is not supported yet.'));const r=a.split(Em),o=r.length;if(e!==o)throw new Error("Expected ".concat(o," input tensors, received ").concat(e));if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let h=0;h<s.length;++h){const t=s[h];if(!r.some(e=>-1!==e.indexOf(t)))throw new Error("Output subscripts contain the label ".concat(t," ")+"not present in the input subscripts.");-1===i.indexOf(t)&&i.push(t)}for(let h=0;h<a.length;++h){const t=a[h];-1===i.indexOf(t)&&t!==Em&&i.push(t)}const c=new Array(r.length);for(let h=0;h<o;++h){if(new Set(r[h].split("")).size!==r[h].length)throw new Error("Found duplicate axes in input component ".concat(r[h],". ")+"Support for duplicate axes in input is not implemented yet.");c[h]=[];for(let t=0;t<r[h].length;++t)c[h].push(i.indexOf(r[h][t]))}const l=i.length,u=[];for(let h=s.length;h<l;++h)u.push(h);return{allDims:i,summedDims:u,idDims:c}}function Fm(t,e){let n=new Array(t);n.fill(-1);for(let s=0;s<e.length;++s)n[e[s]]=s;const a=[];for(let s=0;s<t;++s)-1===n[s]&&a.push(s);return n=n.filter(t=>-1!==t),{permutationIndices:n,expandDims:a}}function Dm(t,e,n){const a=new Array(t);for(let s=0;s<n.length;++s){const t=n[s].shape;for(let n=0;n<e[s].length;++n)void 0===a[e[s][n]]?a[e[s][n]]=t[n]:ot(a[e[s][n]]===t[n],()=>"Expected dimension ".concat(a[e[s][n]]," at axis ").concat(n," ")+"of input shaped ".concat(JSON.stringify(t),", ")+"but got dimension ".concat(t[n]))}}function _m(t,e){const n=t,a=[];let s=0;0===t.length&&n.push(-1),s=t.length+1;for(let o=0;o<s;++o)a.push([]);const r=[];for(let o=0;o<n.length;++o){const t=Mm(e,n[o]);for(const e of t)-1===r.indexOf(e)&&(a[o].push(e),r.push(e))}return{path:n,steps:a}}function Om(t){return t.every((t,e)=>t===e)}function Mm(t,e){const n=[];for(let a=0;a<t.length;++a)0!==t[a].length&&-1===t[a].indexOf(e)&&-1!==e||n.push(a);return n}function Lm(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=[];if("number"===typeof e)ot(t.shape[n]%e===0,()=>"Number of splits must evenly divide the axis."),a=new Array(e).fill(t.shape[n]/e);else{const s=e.reduce((t,e)=>(-1===e&&(t+=1),t),0);ot(s<=1,()=>"There should be only one negative value in split array.");const r=e.indexOf(-1);if(-1!==r){const a=e.reduce((t,e)=>e>0?t+e:t);e[r]=t.shape[n]-a}ot(t.shape[n]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),a=e}return a}function zm(t){return"Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ".concat(t)}function Pm(t,e){return"indices(".concat(t,", 0) is invalid: ").concat(e," < 0")}function Bm(t,e,n){return"indices(".concat(t,", 0) is invalid: ").concat(e," >= ").concat(n)}function Wm(t,e){return"only one output dimension may be -1, not both ".concat(t," and ").concat(e)}function Vm(t,e){return"size ".concat(t," must be non-negative, not ").concat(e)}function Um(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Gm(t,e){const n=lt(t),a=lt(e);return"Input to reshape is a SparseTensor with ".concat(n,"\n  dense values, but the requested shape requires a multiple of ").concat(a,". inputShape=").concat(t," outputShape= ").concat(e)}function Hm(t,e){const n=lt(t),a=lt(e);return"Input to reshape is a tensor with ".concat(n," dense values, but the requested shape has ").concat(a,". inputShape=").concat(t," outputShape=").concat(e)}function jm(){return"segment ids must be >= 0"}function qm(){return"segment ids are not increasing"}function Km(t,e){return"Segment id ".concat(t," out of range [0, ").concat(e,"), possibly because segmentIds input is not sorted.")}function Xm(t,e,n){return"Bad: indices[".concat(t,"] == ").concat(e," out of range [0, ").concat(n,")")}function Ym(t,e){let n,a=!1;for(t<=nm?(n=t,a=!0):n=Ot(t,Math.floor(Math.sqrt(t)));!a;)n>e||n===t?a=!0:n=Ot(t,n+1);return n}function Zm(t,e,n){const a=[],s=t.length;for(let r=0;r<s;r++)r!==e?a.push(t[r]):a.push(n);return a}function Jm(t,e,n,a){const s=e.shape.length,r=t.shape.length;if(0!==a&&(a<-s||a>s))throw new Error("Expect batchDims in the range of [-".concat(s,", ").concat(s,"], but got ").concat(a));if(a<0&&(a+=s),a>r)throw new Error("batchDims (".concat(a,") must be less than rank(x) (\n    ").concat(r,")."));if(n<a)throw new Error("batchDims (".concat(a,") must be less than or equal to axis (").concat(n,")."));for(let h=0;h<a;++h)if(t.shape[h]!==e.shape[h])throw new Error("x.shape[".concat(h,"]: ").concat(t.shape[h]," should be equal to indices.shape[").concat(h,"]: ").concat(e.shape[h],"."));const o=t.shape[n],i=[];let c=1,l=1,u=1;for(let h=0;h<a;++h)i.push(t.shape[h]),c*=t.shape[h];for(let h=a;h<n;h++)i.push(t.shape[h]),l*=t.shape[h];for(let h=a;h<s;h++)i.push(e.shape[h]);for(let h=n+1;h<r;h++)i.push(t.shape[h]),u*=t.shape[h];return{batchSize:c,sliceSize:u,outerSize:l,dimSize:o,outputShape:i}}function Qm(t){try{return t.map(t=>Qs(t))}catch(uj){throw new Error("Failed to decode encoded string bytes into utf-8, error: ".concat(uj))}}function $m(t){return t.map(t=>Js(t))}!function(){for(const t of hc)Ki(t)}();const tg={kernelName:te,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(t,sp(Si(n,"float32"),-1))}}},eg={kernelName:ee,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=_i(Si(n,"float32")),a=Di(tc(Ui(1),e));return Mc(Ri(t,a))}}}},ng={kernelName:ne,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Di(tc(_i(Si(n,"float32")),1));return Ri(t,e)}}}},ag={kernelName:ae,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e,s=rc(n.shape,a.shape);return{a:()=>{let e=t;const a=sc(n.shape,s);return a.length>0&&(e=uh(e,a)),iu(e,n.shape)},b:()=>{let e=t;const n=sc(a.shape,s);return n.length>0&&(e=uh(e,n)),iu(e,a.shape)}}}},sg={kernelName:se,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,a)=>{n[a]=()=>t.clone()}),n}},rg={kernelName:ie,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oi(n)}}},og={kernelName:ce,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oi(n)}}},ig={kernelName:le,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ri(t,Di(tc(Ui(1),_i(Si(n,"float32")))))}}},cg={kernelName:ue,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Di(Ei(Ui(1),_i(Si(n,"float32"))));return Ri(t,e)}}}},lg={kernelName:pe,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e,s=rc(n.shape,a.shape);return{a:()=>{const e=Ei(_i(n),_i(a));let r=Fi(t,Ri(a,e));const o=sc(n.shape,s);return o.length>0&&(r=uh(r,o)),iu(r,n.shape)},b:()=>{const e=Ei(_i(n),_i(a));let r=Mc(Fi(t,Ri(n,e)));const o=sc(a.shape,s);return o.length>0&&(r=uh(r,o)),iu(r,a.shape)}}}},ug={kernelName:he,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ri(t,Ei(_i(Si(n,"float32")),1))}}},hg={kernelName:de,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ri(t,tc(Ui(1),_i(Si(n,"float32"))))}}};const dg=Xr({avgPool3dGrad_:function(t,e,n,a,s,r){const o=jr(t,"dy","avgPool3dGrad"),i=jr(e,"input","avgPool3dGrad");let c=o,l=i,u=!1;4===i.rank&&(u=!0,c=iu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),l=iu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ot(5===c.rank,()=>"Error in avgPool3dGrad: dy must be rank 5 but got rank "+"".concat(c.rank,".")),ot(5===l.rank,()=>"Error in avgPool3dGrad: input must be rank 5 but got rank "+"".concat(l.rank,".")),ou("avgPool3dGrad",s,r);const h={dy:c,input:l},d={filterSize:n,strides:a,pad:s,dimRoundingMode:r},p=Mr.runKernel(ye,h,d);return u?iu(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),pg={kernelName:ge,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,{filterSize:s,strides:r,pad:o,dimRoundingMode:i}=n;return{x:()=>dg(t,a,s,r,o,i)}}};const fg=Xr({avgPoolGrad_:function(t,e,n,a,s){const r=jr(t,"dy","avgPoolGrad"),o=jr(e,"input","avgPoolGrad");ot(o.rank===r.rank,()=>"Rank of input (".concat(o.rank,") does not match rank of dy (").concat(r.rank,")"));let i=o,c=r,l=!1;3===o.rank&&(l=!0,i=iu(o,[1,o.shape[0],o.shape[1],o.shape[2]]),c=iu(r,[1,r.shape[0],r.shape[1],r.shape[2]])),ot(4===c.rank,()=>"Error in avgPoolGrad: dy must be rank 4 but got rank "+"".concat(c.rank,".")),ot(4===i.rank,()=>"Error in avgPoolGrad: input must be rank 4 but got rank "+"".concat(i.rank,"."));const u={dy:c,input:i},h={filterSize:n,strides:a,pad:s},d=Mr.runKernel(me,u,h);return l?iu(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),mg={kernelName:fe,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,{filterSize:s,strides:r,pad:o}=n;return{x:()=>fg(t,a,s,r,o)}}},gg={kernelName:be,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[a,s]=e,{transposeA:r,transposeB:o}=n;return r||o?!r&&o?{a:()=>Dc(t,s,!1,!1),b:()=>Dc(t,a,!0,!1)}:r&&!o?{a:()=>Dc(s,t,!1,!0),b:()=>Dc(a,t,!1,!1)}:{a:()=>Dc(s,t,!0,!0),b:()=>Dc(t,a,!0,!0)}:{a:()=>Dc(t,s,!1,!0),b:()=>Dc(a,t,!0,!1)}}},yg={kernelName:xe,gradFunc:(t,e,n)=>{const{blockShape:a,crops:s}=n;return{x:()=>hd(t,a,s)}}},bg={kernelName:ke,gradFunc:(t,e,n)=>{const a=n,s=a.inputShape,r=a.shape,o=Array.from(r);for(let c=s.length-1;c>=0;c--)if(s[c]===r[c])o[c]=1;else if(1!==s[c])throw new Error("broadcastTo(): [".concat(s,"] cannot be broadcast to [").concat(r,"]."));const i=[];for(let c=0;c<o.length;c++)o[c]>1&&i.push(c);return{x:()=>uh(t,i,!0)}}},xg={kernelName:Ne,gradFunc:t=>({x:()=>t.clone()})},wg={kernelName:Se,gradFunc:t=>({x:()=>Oi(t)})},vg={kernelName:Te,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,{clipValueMin:s,clipValueMax:r}=n;return{x:()=>Ku(zh(kh(a,s),Eh(a,r)),t,Oi(t))}}},kg={kernelName:Ee,inputsToSave:["x"],gradFunc:tg.gradFunc},Ig={kernelName:Ae,saveAllInputs:!0,gradFunc:(t,e,n)=>{const a=e.map(t=>t.shape),{axis:s}=n,r=wt(s,e[0].shape)[0],o=a.map(t=>t[r]);return $d(t,o,r).map(t=>()=>t)}},Ng={kernelName:Re,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[a,s]=e,{dilations:r,strides:o,pad:i,dataFormat:c}=n;return ot(nu(r),()=>"Error in gradient of conv2D: dilation rates greater than 1 "+"are not yet supported in gradients. Got dilations '".concat(r,"'")),{x:()=>Du(a.shape,t,s,o,i,c),filter:()=>Fp(a,t,s.shape,o,i,c)}}},Sg={kernelName:De,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[a,s]=e,{strides:r,pad:o,dataFormat:i,dimRoundingMode:c}=n;return{dy:()=>Ru(t,s,r,o,i,1,c),filter:()=>Fp(t,a,s.shape,r,o,i,c)}}};const Tg=Xr({conv3DBackpropFilter_:function(t,e,n,a,s){let r=t;4===t.rank&&(r=iu(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let o=e;4===o.rank&&(o=iu(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),ot(5===r.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+"".concat(r.shape,".")),ot(5===o.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+"".concat(o.shape,".")),ot(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+"".concat(n,".")),ot(r.shape[4]===n[3],()=>"Error in conv3dDerFilter: depth of input ".concat(r.shape[4],") must ")+"match input depth in filter (".concat(n[3],".")),ot(o.shape[4]===n[4],()=>"Error in conv3dDerFilter: depth of dy (".concat(o.shape[4],") must ")+"match output depth for filter (".concat(n[4],")."));const i={x:r,dy:o},c={strides:a,pad:s,filterShape:n};return Mr.runKernel(Oe,i,c)}}),Cg={kernelName:_e,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:a,strides:s,pad:r}=n;ot(nu(a),()=>"Error in gradient of conv3D: dilation rates greater than 1 are "+"not yet supported in gradients. Got dilations '".concat(a,"'"));const[o,i]=e;return{x:()=>Mu(o.shape,t,i,s,r),filter:()=>Tg(o,t,i.shape,s,r)}}},Eg={kernelName:Le,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(Mc(Gd(Si(n,"float32"))),t)}}},Ag={kernelName:ze,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(Hd(Si(n,"float32")),t)}}},Rg={kernelName:Be,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,{axis:s,exclusive:r,reverse:o}=n;return{x:()=>{const e=rh([s],a.rank);let n=Wu(t,s,r,!o);return null!=e&&(n=zc(n,e)),n}}}},Fg={kernelName:Ge,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:a,strides:s,pad:r,dimRoundingMode:o}=n,i=null==a?[1,1]:a;ot(nu(i),()=>"Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations "+"'".concat(i,"'"));const[c,l]=e;return ot(4===c.rank,()=>"Error in gradient of depthwiseConv2dNative: input must be "+"rank 4, but got rank ".concat(c.rank,".")),ot(4===l.rank,()=>"Error in gradient of depthwiseConv2dNative: filter must be "+"rank 4, but got rank ".concat(l.rank,".")),ot(c.shape[3]===l.shape[2],()=>"Error in gradient of depthwiseConv2d: number of input "+"channels (".concat(c.shape[3],") must match the inChannels dimension ")+"in filter ".concat(l.shape[2],".")),ot(au(s,i),()=>"Error in gradient of depthwiseConv2d: Either strides or "+"dilations must be  1. Got strides ".concat(s," and dilations ")+"'".concat(i,"'.")),ou("depthwiseConv2d",r,o),{x:()=>Pp(c.shape,t,l,s,r,i,o),filter:()=>zp(c,t,l.shape,s,r,i,o)}}},Dg={kernelName:Ke,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[a,s]=e,r={x:a,filter:s,dy:t},o={x:a,filter:s,dy:t};return{x:()=>Mr.runKernel(Xe,r,n),filter:()=>Mr.runKernel(Ye,o,n)}}},_g={kernelName:$e,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,a={dy:t,y:n};return{x:()=>Mr.runKernel(tn,a)}}},Og={kernelName:en,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,a=Fi(fh(Mc(_i(n))),2/Math.sqrt(Math.PI));return{x:()=>Fi(t,a)}}},Mg={kernelName:an,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(t,n)}}},Lg={kernelName:sn,inputsToSave:["input"],gradFunc:(t,e)=>{const[n]=e;return{input:()=>iu(t,n.shape)}}},zg={kernelName:rn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(t,fh(n))}}},Pg={kernelName:un,gradFunc:t=>({x:()=>Oi(t)})},Bg={kernelName:hn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e,s=rc(n.shape,a.shape);return{a:()=>{const e=Ri(t,Si(a,"float32")),r=sc(n.shape,s);return r.length>0?iu(uh(e,r),n.shape):e},b:()=>{let e=Fi(t,Si(n,"float32"));const r=sc(a.shape,s);r.length>0&&(e=iu(uh(e,r),a.shape));const o=_i(a);return Mc(Ri(e,Si(o,"float32")))}}}},Wg={kernelName:dn,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:a}=n,[s,r,o,i]=e,c=null==i?Ui(1):i,l=sc(r.shape,s.shape),u=[];if(1===r.rank){for(let t=0;t<s.shape.length-1;++t)u.push(s.shape[t]);u.push(1)}const h=tc(s,r),d=Fi(t,c),p=Pd(Ei(o,Ui(a))),f=Fi(Fi(Fi(p,p),p),Ui(-.5));return{x:()=>1===r.rank?iu(Fi(Fi(t,yh(iu(p,[1,1,1,r.shape[0]]),u)),c),s.shape):iu(Fi(Fi(t,p),c),s.shape),mean:()=>{let t=Fi(Fi(p,Ui(-1)),d);return 1===r.rank&&(t=uh(t,l)),iu(t,r.shape)},variance:()=>{let t=Fi(Fi(f,h),d);return 1===r.rank&&(t=uh(t,l)),iu(t,r.shape)},scale:()=>{const e=Fi(h,p);let n=Fi(t,e);return 1===r.rank&&(n=uh(n,l)),iu(n,r.shape)},offset:()=>{let e=t;return 1===r.rank&&(e=uh(e,l)),iu(e,r.shape)}}}},Vg={kernelName:pn,inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[a,s]=e,{axis:r,batchDims:o}=n,i=wt(r,a.shape)[0],c=(t,e,n)=>()=>{const a=t.shape,s=e.size,o=a.slice(0,i),c=o.length,l=a.slice(r,a.length).slice(1),u=l.length,h=Ug(0,c),d=Ug(c+1,c+1+u),p=Gg([o,[s],l]),f=iu(n,p),m=iu(e,[s]),g=Gg([[c],h,d]),y=zc(f,g);let b=gp(y,m,t.shape[i]);const x=oh(g);return b=zc(b,x),b};if(1===o){const e=a.shape[0],n=a.split(e,0);return{x:()=>{const e=ap(n.map((e,n)=>c(e,s.slice(n,1),t.slice(n,1))()));return e.reshape(a.shape)},indices:()=>s}}return{x:c(a,s,t),indices:()=>s}}};function Ug(t,e){const n=[];for(let a=t;a<e;++a)n.push(a);return n}function Gg(t){const e=[];for(let n=0;n<t.length;++n)for(let a=0;a<t[n].length;++a)e.push(t[n][a]);return e}const Hg={kernelName:gn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e;return{a:()=>Oi(n),b:()=>Oi(a)}}},jg={kernelName:yn,gradFunc:t=>({x:()=>Si(t,"float32")})},qg={kernelName:wn,gradFunc:t=>({x:()=>Oi(t)})},Kg={kernelName:vn,gradFunc:t=>({x:()=>Oi(t)})},Xg={kernelName:kn,gradFunc:t=>({x:()=>Oi(t)})},Yg={kernelName:In,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,{alpha:s}=n,r=vh(a,0);return{x:()=>Ku(r,t,Fi(t,s))}}},Zg={kernelName:En,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ri(t,Ei(n,1))}}},Jg={kernelName:Cn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ri(t,Si(n,"float32"))}}},Qg={kernelName:_n,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[a]=e,{axis:s}=n;return{logits:()=>{const e=fh(a);return tc(t,Fi(uh(t,s,!0),e))}}}};const $g=Xr({localResponseNormalizationBackprop_:function(t,e,n){const a={x:t,y:e,dy:n},s={depthRadius:arguments.length>3&&void 0!==arguments[3]?arguments[3]:5,bias:arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,alpha:arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,beta:arguments.length>6&&void 0!==arguments[6]?arguments[6]:.5};return Mr.runKernel(Ln,a,s)}}),ty={kernelName:Mn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[a,s]=e,{depthRadius:r,bias:o,alpha:i,beta:c}=n;return{x:()=>$g(a,s,t,r,o,i,c)}}};function ey(t,e,n,a){return e.rank<n.rank&&(e=iu(e,ah(e.shape,a))),t.rank<n.rank&&(t=iu(t,ah(t.shape,a))),{x:()=>Fi(t,Si(qu(n,e),t.dtype))}}const ny={kernelName:Pn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const a=n,{reductionIndices:s}=a,r=e[0],o=ey(t,e[1],r,wt(s,r.shape));return{x:()=>o.x()}}},ay={kernelName:Bn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e;return{a:()=>Fi(t,Si(kh(n,a),"float32")),b:()=>Fi(t,Si(Ch(n,a),"float32"))}}};const sy=Xr({maxPool3dGrad_:function(t,e,n,a,s,r,o){const i=jr(t,"dy","maxPool3dGrad"),c=jr(e,"input","maxPool3dGrad"),l=jr(n,"output","maxPool3dGrad");let u=i,h=c,d=l,p=!1;4===c.rank&&(p=!0,u=iu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=iu(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]]),d=iu(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),ot(5===u.rank,()=>"Error in maxPool3dGrad: dy must be rank 5 but got rank "+"".concat(u.rank,".")),ot(5===h.rank,()=>"Error in maxPool3dGrad: input must be rank 5 but got rank "+"".concat(h.rank,".")),ot(5===d.rank,()=>"Error in maxPool3dGrad: output must be rank 5 but got rank "+"".concat(d.rank,".")),ou("maxPool3dGrad",r,o);const f={dy:u,input:h,output:d},m={filterSize:a,strides:s,pad:r,dimRoundingMode:o},g=Mr.runKernel(Gn,f,m);return p?iu(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),ry={kernelName:Un,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[a,s]=e,{filterSize:r,strides:o,pad:i,dimRoundingMode:c}=n;return{x:()=>sy(t,a,s,r,o,i,c)}}};const oy=Xr({maxPoolGrad_:function(t,e,n,a,s,r,o){const i=jr(t,"dy","maxPoolGrad"),c=jr(e,"input","maxPoolGrad"),l=jr(n,"output","maxPoolGrad");ot(c.rank===i.rank,()=>"Rank of input (".concat(c.rank,") does not match rank of dy ")+"(".concat(i.rank,")")),ot(4===i.rank,()=>"Error in maxPoolGrad: dy must be rank 4 but got rank "+"".concat(i.rank,".")),ot(4===c.rank,()=>"Error in maxPoolGrad: input must be rank 4 but got rank "+"".concat(c.rank,".")),ou("maxPoolGrad",r,o);const u={dy:i,input:c,output:l},h={filterSize:a,strides:s,pad:r,dimRoundingMode:o};return Mr.runKernel(Vn,u,h)}}),iy={kernelName:Wn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[a,s]=e,{filterSize:r,strides:o,pad:i}=n;return{x:()=>oy(t,a,s,r,o,i)}}},cy={kernelName:Xn,inputsToSave:["x"],gradFunc:(t,e,n)=>{const a=e[0],{paddings:s}=n,r=s.map(t=>t[0]);return{x:()=>du(t,r,a.shape)}}},ly={kernelName:oa,inputsToSave:["x"],gradFunc:(t,e,n)=>{const a=e[0],{paddings:s}=n,r=s.map(t=>t[0]);return{x:()=>du(t,r,a.shape)}}},uy={kernelName:ca,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,a,s]=e,r=n,o=a,i=rc(r.shape,o.shape);return{a:()=>{const e=Si(o,"float32");let n=Fi(t,Fi(e,$i(r,tc(e,Ui(1)))));const a=sc(r.shape,i);return a.length>0&&(n=uh(n,a)),iu(n,r.shape)},b:()=>{const e=vh(r,0),n=Ku(e,Fh(r),Oi(r));let a=Fi(t,Fi(s,n));const c=sc(o.shape,i);return c.length>0&&(a=uh(a,c)),iu(a,o.shape)}}}};function hy(t,e,n){const a=t.shape.length,s=a-n.length,r=rh(n,a);let o=t;null!=r&&(o=zc(t,r));const i=o.shape.slice(),c=i.splice(a-n.length,n.length).reduce((t,e)=>t*e,1);i.push(c);let l=function(t,e,n){const a=t.shape.slice();a[n]=1;const s=iu(e,a),r=Bu(t,n,!0,!1),o=Bu(t,n,!0,!0),i=Fi(r,o);return Fi(s,i)}(o.reshape(i),e,s);if(l=l.reshape(o.shape),null!=r){const t=oh(r);l=zc(l,t)}return l}const dy={kernelName:Fa,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=vh(n,Ui(0)),a=Ui(um),s=Ui(hm),r=Fi(t,s),o=Fi(Fi(t,a),fh(Si(n,"float32")));return Ku(e,r,o)}}}},py={kernelName:Wa,gradFunc:(t,e,n)=>{const{blockShape:a,paddings:s}=n;return{x:()=>mu(t,a,s)}}},fy={kernelName:Va,gradFunc:(t,e,n)=>{const{axis:a}=n;return{x:()=>uu(t,a)}}};const my=[tg,eg,ng,ag,sg,rg,og,ig,cg,lg,ug,hg,pg,mg,gg,yg,bg,xg,wg,vg,kg,Ig,Sg,Ng,Cg,Eg,Ag,Rg,Fg,Dg,{kernelName:Je,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e,s=rc(n.shape,a.shape);return{a:()=>{const e=Ri(t,Si(a,"float32")),r=sc(n.shape,s);return r.length>0?iu(uh(e,r),n.shape):e},b:()=>{let e=Fi(t,Si(n,"float32"));const r=sc(a.shape,s);r.length>0&&(e=iu(uh(e,r),a.shape));const o=_i(a);return Mc(Ri(e,Si(o,"float32")))}}}},_g,Og,Mg,Lg,zg,Bg,Pg,Wg,Vg,Hg,jg,qg,Kg,Xg,Yg,Zg,Jg,Qg,ty,ny,ny,ay,ry,iy,{kernelName:jn,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,{axis:s}=n,r=wt(s,a.shape),o=lt(nh(a.shape,r)[1]);return{x:()=>{const e=a.shape.slice();r.forEach(t=>{e[t]=1});const n=iu(t,e);return Ri(Fi(n,Yh(a.shape,"float32")),o)}}}},{kernelName:qn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const a=n,{axis:s}=a,[r,o]=e,i=ey(t,o,r,wt(s,r.shape));return{x:()=>i.x()}}},{kernelName:Kn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e;return{a:()=>Fi(t,Si(Eh(n,a),"float32")),b:()=>Fi(t,Si(vh(n,a),"float32"))}}},cy,{kernelName:Yn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e,s=rc(n.shape,a.shape);return{a:()=>{const e=sc(n.shape,s);return e.length>0?iu(uh(t,e),n.shape):t},b:()=>{const e=Fi(t,Mc(xh(Ri(n,a)))),r=sc(a.shape,s);return r.length>0?iu(uh(e,r),a.shape):e}}}},{kernelName:Jn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e,s=rc(n.shape,a.shape);return{a:()=>{const e=Fi(t,Si(a,"float32")),r=sc(n.shape,s);return r.length>0?iu(uh(e,r),n.shape):e},b:()=>{const e=Fi(t,Si(n,"float32")),r=sc(a.shape,s);return r.length>0?iu(uh(e,r),a.shape):e}}}},{kernelName:Qn,gradFunc:t=>({x:()=>Mc(t)})},{kernelName:sa,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>Xh(n.shape,"float32")}}},{kernelName:aa,gradFunc:t=>({x:()=>Oi(t)})},{kernelName:ra,saveAllInputs:!0,gradFunc:(t,e,n)=>{const{axis:a}=n;return yp(t,a).map(t=>()=>t)}},ly,ly,uy,{kernelName:la,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,a]=e,s=vh(n,0);return{x:()=>Ku(s,t,Fi(t,a)),alpha:()=>{let e=Ku(s,Oi(t),Fi(t,n));const r=sc(a.shape,t.shape);return r.length>0&&(e=uh(e,r)),iu(e,a.shape)}}}},{kernelName:ua,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,{axis:s}=n;let r=[];return r=void 0===s||null===s?a.shape.map((t,e)=>e):"number"===typeof s?[s]:s,{x:()=>hy(a,t,r)}}},{kernelName:ga,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ri(t,Mc(_i(n)))}}},{kernelName:Ia,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,a=Fi(Eh(n,6),sp(n));return{x:()=>Fi(t,Si(a,"float32"))}}},{kernelName:ya,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(t,Si(sp(n),"float32"))}}},{kernelName:ba,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>iu(t,n.shape)}}},{kernelName:va,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[a]=e,s={dy:t,images:a};return{images:()=>Mr.runKernel(ka,s,n)}}},{kernelName:xa,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[a]=e,s={dy:t,images:a};return{images:()=>Mr.runKernel(wa,s,n)}}},{kernelName:Na,gradFunc:(t,e,n)=>{const{dims:a}=n,s=wt(a,t.shape);return{x:()=>Dd(t,s)}}},{kernelName:Sa,gradFunc:t=>({x:()=>Oi(t)})},{kernelName:Ta,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Mc(Ri(t,Fi($i(n,1.5),2)))}}},{kernelName:Ra,inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>Si(Oi(n),"float32"),t:()=>Fi(t,Si(n,t.dtype)),e:()=>Fi(t,Si(Ph(n),t.dtype))}}},dy,{kernelName:La,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(t,Fi(n,tc(Ui(1),n)))}}},{kernelName:Ma,gradFunc:t=>({x:()=>Oi(t)})},{kernelName:_a,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(zu(Si(n,"float32")),t)}}},{kernelName:Oa,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(Pu(Si(n,"float32")),t)}}},{kernelName:Da,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,{begin:s,size:r}=n,o=a.shape,[i,c]=ml(a,s,r),l=[];for(let u=0;u<t.rank;u++)l.push([i[u],o[u]-i[u]-c[u]]);return{x:()=>od(t,l)}}},{kernelName:Ua,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[a]=e,{dim:s}=n,r=Fi(t,a);return{logits:()=>tc(r,Fi(uh(r,[s],true),a))}}},{kernelName:za,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(t,hu(n))}}},py,py,fy,fy,{kernelName:Pa,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ri(t,Fi(Di(Si(n,"float32")),2))}}},{kernelName:Xa,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e,s=Ui(2);return{a:()=>Fi(t,Fi(s,tc(n,a))),b:()=>Fi(t,Fi(s,tc(a,n)))}}},{kernelName:Ya,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(t,Fi(Si(n,"float32"),2))}}},{kernelName:ps,gradFunc:t=>({x:()=>Oi(t)})},{kernelName:es,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,a]=e,s=rc(n.shape,a.shape);return{a:()=>{let e=t;const a=sc(n.shape,s);return a.length>0&&(e=uh(e,a)),iu(e,n.shape)},b:()=>{let e=t;const n=sc(a.shape,s);return n.length>0&&(e=uh(e,n)),iu(Mc(e),a.shape)}}}},{kernelName:Ba,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,s=a.shape.slice(),{axis:r}=n;wt(r,a.shape).forEach(t=>{s[t]=1});const o=iu(t,s),i=Fi(o,Yh(a.shape,"float32"));return{x:()=>i}}},{kernelName:ns,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ri(t,_i(zu(n)))}}},{kernelName:as,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Fi(tc(Ui(1),_i(n)),t)}}},{kernelName:ss,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[a]=e,{reps:s}=n;return{x:()=>{let e=Oi(a);if(1===a.rank)for(let n=0;n<s[0];++n)e=Ei(e,du(t,[n*a.shape[0]],[a.shape[0]]));else if(2===a.rank)for(let n=0;n<s[0];++n)for(let r=0;r<s[1];++r)e=Ei(e,du(t,[n*a.shape[0],r*a.shape[1]],[a.shape[0],a.shape[1]]));else if(3===a.rank)for(let n=0;n<s[0];++n)for(let r=0;r<s[1];++r)for(let o=0;o<s[2];++o)e=Ei(e,du(t,[n*a.shape[0],r*a.shape[1],o*a.shape[2]],[a.shape[0],a.shape[1],a.shape[2]]));else{if(4!==a.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+"".concat(a.rank," tensors yet."));for(let n=0;n<s[0];++n)for(let r=0;r<s[1];++r)for(let o=0;o<s[2];++o)for(let i=0;i<s[3];++i)e=Ei(e,du(t,[n*a.shape[0],r*a.shape[1],o*a.shape[2],i*a.shape[3]],[a.shape[0],a.shape[1],a.shape[2],a.shape[3]]))}return e}}}},{kernelName:is,gradFunc:(t,e,n)=>{const a=n,{perm:s}=a,r=oh(s);return{x:()=>zc(t,r)}}},{kernelName:ls,gradFunc:(t,e,n)=>{const a=n,{axis:s}=a;return{value:()=>ap(t,s)}}},{kernelName:us,inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=oc(e,Oi(e)),a=wh(t,n);let s=kh(e,Ui(0,"int32"));const r=a.rank-s.rank;for(let i=0;i<r;++i)s=mh(s,i+1);s=zh(s,Yh(a.shape,"bool"));const o=Oi(a);return Ku(s,a,o)}(t,n)}}},{kernelName:ds,gradFunc:t=>({x:()=>Oi(t)})}];for(const hj of my)Cs(hj);fr().prototype.abs=function(){return this.throwIfDisposed(),nc(this)},fr().prototype.acos=function(){return this.throwIfDisposed(),Ol(this)},fr().prototype.acosh=function(){return this.throwIfDisposed(),Ml(this)},fr().prototype.add=function(t){return this.throwIfDisposed(),Ei(this,t)},fr().prototype.all=function(t,e){return this.throwIfDisposed(),zl(this,t,e)},fr().prototype.any=function(t,e){return this.throwIfDisposed(),Pl(this,t,e)},fr().prototype.argMax=function(t){return this.throwIfDisposed(),Bl(this,t)},fr().prototype.argMin=function(t){return this.throwIfDisposed(),Wl(this,t)},fr().prototype.asScalar=function(){return this.throwIfDisposed(),ot(1===this.size,()=>"The array must have only 1 element."),iu(this,[])},fr().prototype.asType=function(t){return this.throwIfDisposed(),Si(this,t)},fr().prototype.as1D=function(){return this.throwIfDisposed(),iu(this,[this.size])},fr().prototype.as2D=function(t,e){return this.throwIfDisposed(),iu(this,[t,e])},fr().prototype.as3D=function(t,e,n){return this.throwIfDisposed(),iu(this,[t,e,n])},fr().prototype.as4D=function(t,e,n,a){return this.throwIfDisposed(),iu(this,[t,e,n,a])},fr().prototype.as5D=function(t,e,n,a,s){return this.throwIfDisposed(),iu(this,[t,e,n,a,s])},fr().prototype.asin=function(){return this.throwIfDisposed(),Vl(this)},fr().prototype.asinh=function(){return this.throwIfDisposed(),Ul(this)},fr().prototype.atan=function(){return this.throwIfDisposed(),Gl(this)},fr().prototype.atan2=function(t){return this.throwIfDisposed(),Hl(this,t)},fr().prototype.atanh=function(){return this.throwIfDisposed(),jl(this)},fr().prototype.avgPool=function(t,e,n,a){return this.throwIfDisposed(),cu(this,t,e,n,a)},fr().prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),mu(this,t,e)},fr().prototype.batchNorm=function(t,e,n,a,s){return this.throwIfDisposed(),gu(this,t,e,n,a,s)},fr().prototype.broadcastTo=function(t){return this.throwIfDisposed(),Iu(this,t)},fr().prototype.cast=function(t){return this.throwIfDisposed(),Si(this,t)},fr().prototype.ceil=function(){return this.throwIfDisposed(),Nu(this)},fr().prototype.clipByValue=function(t,e){return this.throwIfDisposed(),Su(this,t,e)},fr().prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof pr&&(t=[t]),uu([this,...t],e)},fr().prototype.conv1d=function(t,e,n,a,s,r){return this.throwIfDisposed(),Fu(this,t,e,n,a,s,r)},fr().prototype.conv2dTranspose=function(t,e,n,a,s){return this.throwIfDisposed(),_u(this,t,e,n,a,s)},fr().prototype.conv2d=function(t,e,n,a,s,r){return this.throwIfDisposed(),Ru(this,t,e,n,a,s,r)},fr().prototype.cos=function(){return this.throwIfDisposed(),zu(this)},fr().prototype.cosh=function(){return this.throwIfDisposed(),Pu(this)},fr().prototype.cumprod=function(t,e,n){return this.throwIfDisposed(),Bu(this,t,e,n)},fr().prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Wu(this,t,e,n)},fr().prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),Uu(this,t,e)},fr().prototype.depthwiseConv2d=function(t,e,n,a,s,r){return this.throwIfDisposed(),Gu(this,t,e,n,a,s,r)},fr().prototype.dilation2d=function(t,e,n,a,s){return this.throwIfDisposed(),ju(this,t,e,n,a,s)},fr().prototype.divNoNan=function(t){return this.throwIfDisposed(),Xu(this,t)},fr().prototype.div=function(t){return this.throwIfDisposed(),Ri(this,t)},fr().prototype.dot=function(t){return this.throwIfDisposed(),Yu(this,t)},fr().prototype.elu=function(){return this.throwIfDisposed(),Ju(this)},fr().prototype.equal=function(t){return this.throwIfDisposed(),qu(this,t)},fr().prototype.erf=function(){return this.throwIfDisposed(),$u(this)},fr().prototype.euclideanNorm=function(t,e){return this.throwIfDisposed(),ph(this,t,e)},fr().prototype.exp=function(){return this.throwIfDisposed(),fh(this)},fr().prototype.expandDims=function(t){return this.throwIfDisposed(),mh(this,t)},fr().prototype.expm1=function(){return this.throwIfDisposed(),gh(this)},fr().prototype.fft=function(){return this.throwIfDisposed(),Zd(this)},fr().prototype.flatten=function(){return this.throwIfDisposed(),iu(this,[this.size])},fr().prototype.floor=function(){return this.throwIfDisposed(),xh(this)},fr().prototype.floorDiv=function(t){return this.throwIfDisposed(),Ai(this,t)},fr().prototype.gather=function(t,e,n){return this.throwIfDisposed(),wh(this,t,e,n)},fr().prototype.greaterEqual=function(t){return this.throwIfDisposed(),kh(this,t)},fr().prototype.greater=function(t){return this.throwIfDisposed(),vh(this,t)},fr().prototype.ifft=function(){return this.throwIfDisposed(),Jd(this)},fr().prototype.irfft=function(){return this.throwIfDisposed(),Qd(this)},fr().prototype.isFinite=function(){return this.throwIfDisposed(),Ih(this)},fr().prototype.isInf=function(){return this.throwIfDisposed(),Nh(this)},fr().prototype.isNaN=function(){return this.throwIfDisposed(),Sh(this)},fr().prototype.leakyRelu=function(t){return this.throwIfDisposed(),Th(this,t)},fr().prototype.lessEqual=function(t){return this.throwIfDisposed(),Eh(this,t)},fr().prototype.less=function(t){return this.throwIfDisposed(),Ch(this,t)},fr().prototype.localResponseNormalization=function(t,e,n,a){return this.throwIfDisposed(),Rh(this,t,e,n,a)},fr().prototype.logSigmoid=function(){return this.throwIfDisposed(),Oh(this)},fr().prototype.logSoftmax=function(t){return this.throwIfDisposed(),Mh(this,t)},fr().prototype.logSumExp=function(t,e){return this.throwIfDisposed(),Lh(this,t,e)},fr().prototype.log=function(){return this.throwIfDisposed(),Fh(this)},fr().prototype.log1p=function(){return this.throwIfDisposed(),Dh(this)},fr().prototype.logicalAnd=function(t){return this.throwIfDisposed(),zh(this,t)},fr().prototype.logicalNot=function(){return this.throwIfDisposed(),Ph(this)},fr().prototype.logicalOr=function(t){return this.throwIfDisposed(),Bh(this,t)},fr().prototype.logicalXor=function(t){return this.throwIfDisposed(),Wh(this,t)},fr().prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Dc(this,t,e,n)},fr().prototype.maxPool=function(t,e,n,a){return this.throwIfDisposed(),Hh(this,t,e,n,a)},fr().prototype.max=function(t,e){return this.throwIfDisposed(),ch(this,t,e)},fr().prototype.maximum=function(t){return this.throwIfDisposed(),oc(this,t)},fr().prototype.mean=function(t,e){return this.throwIfDisposed(),Kh(this,t,e)},fr().prototype.min=function(t,e){return this.throwIfDisposed(),lh(this,t,e)},fr().prototype.minimum=function(t){return this.throwIfDisposed(),Jh(this,t)},fr().prototype.mirrorPad=function(t,e){return this.throwIfDisposed(),Qh(this,t,e)},fr().prototype.mod=function(t){return this.throwIfDisposed(),$h(this,t)},fr().prototype.mul=function(t){return this.throwIfDisposed(),Fi(this,t)},fr().prototype.neg=function(){return this.throwIfDisposed(),Mc(this)},fr().prototype.norm=function(t,e,n){return this.throwIfDisposed(),dh(this,t,e,n)},fr().prototype.notEqual=function(t){return this.throwIfDisposed(),ad(this,t)},fr().prototype.oneHot=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return this.throwIfDisposed(),_c(this,t,e,n)},fr().prototype.onesLike=function(){return this.throwIfDisposed(),sd(this)},fr().prototype.pad=function(t,e){return this.throwIfDisposed(),od(this,t,e)},fr().prototype.pool=function(t,e,n,a,s,r){return this.throwIfDisposed(),dd(this,t,e,n,a,s,r)},fr().prototype.pow=function(t){return this.throwIfDisposed(),$i(this,t)},fr().prototype.prelu=function(t){return this.throwIfDisposed(),pd(this,t)},fr().prototype.prod=function(t,e){return this.throwIfDisposed(),fd(this,t,e)},fr().prototype.reciprocal=function(){return this.throwIfDisposed(),Ad(this)},fr().prototype.relu=function(){return this.throwIfDisposed(),Rd(this)},fr().prototype.relu6=function(){return this.throwIfDisposed(),Fd(this)},fr().prototype.reshapeAs=function(t){return this.throwIfDisposed(),iu(this,t.shape)},fr().prototype.reshape=function(t){return this.throwIfDisposed(),iu(this,t)},fr().prototype.resizeBilinear=function(t,e,n){return this.throwIfDisposed(),pf(this,t,e,n)},fr().prototype.resizeNearestNeighbor=function(t,e,n){return this.throwIfDisposed(),ff(this,t,e,n)},fr().prototype.reverse=function(t){return this.throwIfDisposed(),Dd(this,t)},fr().prototype.rfft=function(){return this.throwIfDisposed(),tp(this)},fr().prototype.round=function(){return this.throwIfDisposed(),zd(this)},fr().prototype.rsqrt=function(){return this.throwIfDisposed(),Pd(this)},fr().prototype.selu=function(){return this.throwIfDisposed(),Bd(this)},fr().prototype.separableConv2d=function(t,e,n,a,s,r){return this.throwIfDisposed(),Wd(this,t,e,n,a,s,r)},fr().prototype.sigmoid=function(){return this.throwIfDisposed(),hu(this)},fr().prototype.sign=function(){return this.throwIfDisposed(),Ud(this)},fr().prototype.sin=function(){return this.throwIfDisposed(),Gd(this)},fr().prototype.sinh=function(){return this.throwIfDisposed(),Hd(this)},fr().prototype.slice=function(t,e){return this.throwIfDisposed(),du(this,t,e)},fr().prototype.softmax=function(t){return this.throwIfDisposed(),Yd(this,t)},fr().prototype.softplus=function(){return this.throwIfDisposed(),_h(this)},fr().prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),hd(this,t,e)},fr().prototype.split=function(t,e){return this.throwIfDisposed(),$d(this,t,e)},fr().prototype.sqrt=function(){return this.throwIfDisposed(),Di(this)},fr().prototype.square=function(){return this.throwIfDisposed(),_i(this)},fr().prototype.squaredDifference=function(t){return this.throwIfDisposed(),ep(this,t)},fr().prototype.squeeze=function(t){return this.throwIfDisposed(),np(this,t)},fr().prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof pr?[this,t]:[this,...t];return ap(n,e)},fr().prototype.step=function(t){return this.throwIfDisposed(),sp(this,t)},fr().prototype.stridedSlice=function(t,e,n,a,s,r,o,i){return this.throwIfDisposed(),rp(this,t,e,n,a,s,r,o,i)},fr().prototype.sub=function(t){return this.throwIfDisposed(),tc(this,t)},fr().prototype.sum=function(t,e){return this.throwIfDisposed(),uh(this,t,e)},fr().prototype.tan=function(){return this.throwIfDisposed(),op(this)},fr().prototype.tanh=function(){return this.throwIfDisposed(),pu(this)},fr().prototype.tile=function(t){return this.throwIfDisposed(),yh(this,t)},fr().prototype.toBool=function(){return this.throwIfDisposed(),Si(this,"bool")},fr().prototype.toFloat=function(){return this.throwIfDisposed(),Si(this,"float32")},fr().prototype.toInt=function(){return this.throwIfDisposed(),Si(this,"int32")},fr().prototype.topk=function(t,e){return this.throwIfDisposed(),pp(this,t,e)},fr().prototype.transpose=function(t){return this.throwIfDisposed(),zc(this,t)},fr().prototype.unique=function(t){return this.throwIfDisposed(),mp(this,t)},fr().prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),gp(this,t,e)},fr().prototype.unstack=function(t){return this.throwIfDisposed(),yp(this,t)},fr().prototype.where=function(t,e){return this.throwIfDisposed(),Ku(t,this,e)},fr().prototype.zerosLike=function(){return this.throwIfDisposed(),Oi(this)};class gy extends Error{constructor(t){super(t),Object.setPrototypeOf(this,gy.prototype)}}class yy extends Error{constructor(t){super(t),Object.setPrototypeOf(this,yy.prototype)}}class by extends Error{constructor(t){super(t),Object.setPrototypeOf(this,by.prototype)}}class xy extends Error{constructor(t){super(t),Object.setPrototypeOf(this,xy.prototype)}}class wy extends Error{constructor(t){super(t),Object.setPrototypeOf(this,wy.prototype)}}Error;class vy{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){const t=this.cache.keys().next().value;this.cache.delete(t)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error("The maxEntries of LRU caches must be at least 0, but got ".concat(t,"."));if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){const t=this.cache.keys().next().value;this.cache.delete(t)}this.maxEntries=t}}function ky(t,e){if(Array.isArray(t)){let n=[];for(let a=0;a<e;a++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function Iy(t,e){if(!t)throw new wy(e)}function Ny(t,e){let n=0;for(const a of t)a===e&&n++;return n}function Sy(t){return 1===t.length?t[0]:t}function Ty(t){return Array.isArray(t)?t:[t]}function Cy(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Ey(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let Ay={};function Ry(t){if(null===t||void 0===t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Fy(t){if(null!=t&&"object"===typeof t)if(Array.isArray(t))t.forEach(t=>Fy(t));else{const e=Object.keys(t);for(const n of e){const e=t[n];null!=e&&"object"===typeof e&&(Array.isArray(e)||"ndarray"!==e.type||"number"!==typeof e.value?Fy(e):t[n]=e.value)}}}function Dy(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"object",s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if("string"===typeof t){const s=t;let r;if(s in n)r=n[s];else if(s in Ay)r=Ay[s];else if(r=e[s],null==r)throw new by("Unknown ".concat(a,": ").concat(t,". ")+"This may be due to one of the following reasons:\n"+"1. The ".concat(a," is defined in Python, in which ")+"case it needs to be ported to TensorFlow.js or your JavaScript code.\n"+"2. The custom ".concat(a," is defined in JavaScript, ")+"but is not registered properly with tf.serialization.registerClass().");return r}{const r=t;if(null==r.className||null==r.config)throw new by("".concat(a,": Improper config format: ")+"".concat(JSON.stringify(r),".\n")+"'className' and 'config' must set.");const o=r.className;let i,c;if(o in n?[i,c]=n[o]:o in Ay?[i,c]=Ay.className:o in e&&([i,c]=e[o]),null==i)throw new by("Unknown ".concat(a,": ").concat(o,". ")+"This may be due to one of the following reasons:\n"+"1. The ".concat(a," is defined in Python, in which ")+"case it needs to be ported to TensorFlow.js or your JavaScript code.\n"+"2. The custom ".concat(a," is defined in JavaScript, ")+"but is not registered properly with tf.serialization.registerClass().");if(null!=c){const t={};for(const n of Object.keys(Ay))t[n]=Ay[n];for(const s of Object.keys(n))t[s]=n[s];r.config.customObjects=t;const e=Object.assign({},Ay);for(const s of Object.keys(n))Ay[s]=n[s];Fy(r.config);const a=c(i,r.config,n,s);return Ay=Object.assign({},e),a}{const t=Object.assign({},Ay);for(const a of Object.keys(n))Ay[a]=n[a];const e=new i(r.config);return Ay=Object.assign({},t),e}}}function _y(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Oy(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function My(t){if(null==t)throw new by("Invalid value in obj: ".concat(JSON.stringify(t)));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Ly(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new by("".concat(n," is not a valid ").concat(e,".  Valid values are ").concat(t," or null/undefined."))}function zy(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1/0;return Iy(n>=0),Iy(a>=n),Array.isArray(t)&&t.length>=n&&t.length<=a&&t.every(t=>typeof t===e)}function Py(t,e){Array.isArray(t)?(ot(t.length>0,()=>"".concat(e," is unexpectedly an empty array.")),t.forEach((t,n)=>Py(t,"element ".concat(n+1," of ").concat(e)))):ot(Number.isInteger(t)&&t>0,()=>"Expected ".concat(e," to be a positive integer, but got ")+"".concat(By(t),"."))}function By(t){return null===t?"null":Array.isArray(t)?"["+t.map(t=>By(t)).join(",")+"]":"string"===typeof t?'"'.concat(t,'"'):"".concat(t)}function Wy(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}let Vy=0;function Uy(){return Vy++}const Gy={};function Hy(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return t in Gy||(Gy[t]=0),Gy[t]+=1,t+Gy[t].toString()}const jy=["channelsFirst","channelsLast"],qy=["nearest","bilinear"],Ky=["valid","same","causal"],Xy=["max","avg"],Yy=["sum","mul","concat","ave"],Zy=new Map;function Jy(t){Ly(jy,"DataFormat",t)}function Qy(t){Ly(Ky,"PaddingMode",t)}function $y(t){Ly(Xy,"PoolMode",t)}const tb=[];function eb(t,e){tb.push(t);try{const t=e();return tb.pop(),t}catch(n){throw tb.pop(),n}}function nb(t){if(!rb(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===tb.length?"":tb.join("/")+"/")+t}function ab(t){if(!rb(t))throw new Error("Not a valid tensor name: '"+t+"'");Zy.has(t)||Zy.set(t,0);const e=Zy.get(t);if(Zy.set(t,Zy.get(t)+1),e>0){const n="".concat(t,"_").concat(e);return Zy.set(n,1),n}return t}const sb=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function rb(t){return!!t.match(sb)}function ob(t){return t===parseInt(t.toString(),10)}function ib(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let a=1;for(let s=e;s<n;++s)a*=t[s];return a}function cb(t){if(0===t.length)return Number.NaN;let e=Number.POSITIVE_INFINITY;for(let n=0;n<t.length;n++){const a=t[n];a<e&&(e=a)}return e}function lb(t){if(0===t.length)return Number.NaN;let e=Number.NEGATIVE_INFINITY;for(let n=0;n<t.length;n++){const a=t[n];a>e&&(e=a)}return e}function ub(t,e){if(e<t)throw new by("end (".concat(e,") < begin (").concat(t,") is forbidden."));const n=[];for(let a=t;a<e;++a)n.push(a);return n}let hb;function db(){return null==hb&&(hb=wo().epsilon()),hb}function pb(t,e){return Si(t,e)}function fb(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),iu(t,n)}function mb(t,e,n){return co(()=>{switch(t.rank){case 1:return jd(t,e,n);case 2:return qd(t,[e,0],[n,t.shape[1]]);case 3:return Kd(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return Xd(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return du(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return du(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new by("sliceAlongFirstAxis() received an unsupported tensor rank: "+"".concat(t.rank))}})}function gb(t,e,n){return co(()=>{switch(t.rank){case 1:return jd(t,e,n);case 2:return qd(t,[0,e],[t.shape[0],n]);case 3:return Kd(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return Xd(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new by("sliceAlongLastAxis() received an unsupported tensor rank: "+"".concat(t.rank))}})}function yb(t,e,n,a){return co(()=>{switch(t.rank){case 1:return jd(t,e,n);case 2:switch(a){case 1:return mb(t,e,n);case 2:return gb(t,e,n);default:throw new by("The axis is not within the rank of the tensor "+"".concat(a))}case 3:switch(a){case 1:return mb(t,e,n);case 2:return Kd(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return gb(t,e,n);default:throw new by("The axis is not within the rank of the tensor "+"".concat(a))}case 4:switch(a){case 1:return mb(t,e,n);case 2:return Xd(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return Xd(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return gb(t,e,n);default:throw new by("The axis is not within the rank of the tensor "+"".concat(a))}default:throw new by("sliceAlongLastAxis() received an unsupported tensor rank: "+"".concat(t.rank))}})}function bb(t){let e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;return n<0&&(e=t[0].rank,n=0!==e?e:0),n===t[0].rank&&(n=-1),uu(t,n)}function xb(t,e){switch(t.rank){case 1:return Tu([t,e]);case 2:return Cu([t,e],0);case 3:return Eu([t,e],0);case 4:return Au([t,e],0);default:throw new by("concatAlongFirstAxis() received an unsupported "+"tensor rank: ".concat(t.rank))}}function wb(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new by("The length of input n (".concat(e.length,") does not match ")+"the number of dimensions in input x (".concat(t.rank,")"));return yh(t,e)}function vb(t){return Nd(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,arguments.length>3?arguments[3]:void 0,arguments.length>4?arguments[4]:void 0)}function kb(t,e,n,a){if(t.rank<2||e.rank<2)throw new xy("dot requires both inputs to be rank >= 2"+" but got x shape = ".concat(t.shape," and y shape = ").concat(e.shape));if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new xy("If rank y >= 3, then the second last dim"+" of y must equal the last dim of x but got x shape = ".concat(t.shape," and ")+" y shape = ".concat(e.shape))}if(2===t.rank&&2===e.rank){return Wp({a:t,b:e,transposeA:!1,transposeB:!1,bias:a?Sb(t.rank,a,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),r=s.pop();t=iu(t,[-1,r]);const o=e.shape.slice(),i=o.pop(),c=o.pop(),l=[...o,i],u=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=iu(zc(e,u),[c,-1]);const h=[...s,...l];return iu(Wp({a:t,b:e,transposeA:!1,transposeB:!1,bias:a?Sb(t.rank,a,"channelsLast"):null,activation:n}),h)}}function Ib(t,e,n){return co(()=>(e=Array.isArray(e)?ip(e,"int32"):Si(e,"int32"),wh(t,e,n)))}function Nb(t){return Fi(t,t)}function Sb(t,e,n){const a=e.shape;if(1!==e.rank&&e.rank!==t)throw new by("Unexpected bias dimensions: ".concat(e.rank)+"; expected it to be 1 or ".concat(t));if(5===t){if("channelsFirst"===n)return 1===a.length?iu(e,[1,a[0],1,1,1]):iu(e,[1,a[3],a[0],a[1],a[2]]);if("channelsLast"===n)return 1===a.length?iu(e,[1,1,1,1,a[0]]):iu(e,[1].concat(a))}else if(4===t){if("channelsFirst"===n)return 1===a.length?iu(e,[1,a[0],1,1]):iu(e,[1,a[2],a[0],a[1]]);if("channelsLast"===n)return 1===a.length?iu(e,[1,1,1,a[0]]):iu(e,[1].concat(a))}else if(3===t){if("channelsFirst"===n)return 1===a.length?iu(e,[1,a[0],1]):iu(e,[1,a[1],a[0]]);if("channelsLast"===n)return 1===a.length?iu(e,[1,1,a[0]]):iu(e,[1].concat(a))}else if(t<3)return e;throw new by("Unsupported input rank by biasAdd: ".concat(e.rank))}function Tb(t,e,n){return co(()=>(null==n&&(n="channelsLast"),Jy(n),Ei(t,Sb(t.rank,e,n))))}function Cb(t,e,n,a){return co(()=>Cp(t,e,n,a))}function Eb(t,e){return arguments.length>2&&void 0!==arguments[2]&&arguments[2]?t():e()}const Ab=["fanIn","fanOut","fanAvg"],Rb=["normal","uniform","truncatedNormal"];class Fb extends ji{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Db extends Fb{apply(t,e){return Xh(t,e)}}Db.className="Zeros",Ki(Db);class _b extends Fb{apply(t,e){return Yh(t,e)}}_b.className="Ones",Ki(_b);class Ob extends Fb{constructor(t){if(super(),"object"!==typeof t)throw new by("Expected argument of type ConstantConfig but got ".concat(t));if(void 0===t.value)throw new by("config must have value set but got ".concat(t));this.value=t.value}apply(t,e){return co(()=>Fi(Ui(this.value),Yh(t,e)))}getConfig(){return{value:this.value}}}Ob.className="Constant",Ki(Ob);class Mb extends Fb{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return Td(t,this.minval,this.maxval,e,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Mb.className="RandomUniform",Ki(Mb);class Lb extends Fb{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new xy("randomNormal does not support dType ".concat(e,"."));return vb(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Lb.className="RandomNormal",Ki(Lb);class zb extends Fb{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new xy("truncatedNormal does not support dType ".concat(e,"."));return fp(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}zb.className="TruncatedNormal",Ki(zb);class Pb extends Fb{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return co(()=>{if(2!==t.length||t[0]!==t[1])throw new by("Identity matrix initializer can only be used for 2D square matrices.");return Fi(this.gain,bh(t[0]))})}getConfig(){return{gain:this.gain}}}Pb.className="Identity",Ki(Pb);class Bb extends Fb{constructor(t){if(super(),t.scale<0)throw new by("scale must be a positive float. Got: ".concat(t.scale));var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Ly(Ab,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Ly(Rb,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t){let e,n,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"channelsLast";if(Jy(a),2===t.length)e=t[0],n=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===a){const a=ib(t,2);e=t[1]*a,n=t[0]*a}else if("channelsLast"===a){const a=ib(t,0,t.length-2);e=t[t.length-2]*a,n=t[t.length-1]*a}}else{const a=ib(t);e=Math.sqrt(a),n=Math.sqrt(a)}return[e,n]}(t),a=n[0],s=n[1];let r=this.scale;if("fanIn"===this.mode?r/=Math.max(1,a):"fanOut"===this.mode?r/=Math.max(1,s):r/=Math.max(1,(a+s)/2),"normal"===this.distribution){const n=Math.sqrt(r);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new xy("".concat(this.getClassName()," does not support dType ").concat(e,"."));return fp(t,0,n,e,this.seed)}{const n=Math.sqrt(3*r);return Td(t,-n,n,e,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Bb.className="VarianceScaling",Ki(Bb);class Wb extends Bb{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Bb.className}}Wb.className="GlorotUniform",Ki(Wb);class Vb extends Bb{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Bb.className}}Vb.className="GlorotNormal",Ki(Vb);class Ub extends Bb{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Bb.className}}Ub.className="HeNormal",Ki(Ub);class Gb extends Bb{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Bb.className}}Gb.className="HeUniform",Ki(Gb);class Hb extends Bb{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Bb.className}}Hb.className="LeCunNormal",Ki(Hb);class jb extends Bb{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Bb.className}}jb.className="LeCunUniform",Ki(jb);class qb extends Fb{constructor(t){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed}apply(t,e){return co(()=>{if(t.length<2)throw new xy("Shape must be at least 2D.");if("int32"!==e&&"float32"!==e&&void 0!==e)throw new TypeError("Unsupported data type ".concat(e,"."));const n=lt(t.slice(0,-1)),a=t[t.length-1],s=n*a;s>this.ELEMENTS_WARN_SLOW&&console.warn("Orthogonal initializer is being called on a matrix with more "+"than ".concat(this.ELEMENTS_WARN_SLOW," (").concat(s,") elements: ")+"Slowness may result.");const r=vb([Math.max(a,n),Math.min(a,n)],0,1,e,this.seed),o=Uf.qr(r,!1);let i=o[0];const c=o[1].flatten().stridedSlice([0],[Math.min(a,n)*Math.min(a,n)],[Math.min(a,n)+1]);return i=Fi(i,c.sign()),n<a&&(i=i.transpose()),Fi(Ui(this.gain),i.reshape(t))})}getConfig(){return{gain:this.gain,seed:this.seed}}}qb.className="Orthogonal",Ki(qb);const Kb={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Xb(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Dy(t,qi.getMap().classNameMap,e,"initializer")}function Yb(t){return Ry(t)}function Zb(t){if("string"===typeof t){const e=t in Kb?Kb[t]:t;if("GlorotNormal"===e)return new Vb;if("GlorotUniform"===e)return new Wb;if("HeNormal"===e)return new Ub;if("HeUniform"===e)return new Gb;if("LeCunNormal"===e)return new Hb;if("LeCunUniform"===e)return new jb;{const t={};return t.className=e,t.config={},Xb(t)}}return t instanceof Fb?t:Xb(t)}function Jb(t){return Array.isArray(t)&&Array.isArray(t[0])}function Qb(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function $b(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new by("Expected Tensor length to be 1; got ".concat(t.length));e=t[0]}else e=t;return e}function tx(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return t[0];throw new by("Expected exactly 1 Shape; got ".concat(t.length))}return t}function ex(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce((t,e)=>t*e);return e}const nx="Variable";class ax{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:nx,a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Uy(),n=null==n?nx:n,this.originalName=nb(n),this.name=ab(this.originalName),this.trainable_=a,this.constraint=s,this.val=xp(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error("LayersVariable ".concat(this.name," is already disposed."))}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function sx(t){return t.map(t=>t.read())}function rx(t){t.forEach(t=>{t[0].write(t[1])})}class ox{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class ix{constructor(t,e,n,a,s,r,o){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=a,this.callArgs=s,this.outputTensorIndex=o,this.id=Uy(),null!=r&&(this.originalName=nb(r),this.name=ab(this.originalName)),this.rank=e.length}}let cx=0;class lx{constructor(t,e){this.callArgs=e,this.id=cx++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const n of t.inboundLayers)null!=n&&n.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let ux=0;class hx extends ji{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=ux++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=Cy(t)+"_"+Hy(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new yy("The layer has never been called "+"and thus has no defined ".concat(e,"."));if(this.inboundNodes.length<=t)throw new by("Asked to get ".concat(e," at node ").concat(t,", ")+"but the layer has only ".concat(this.inboundNodes.length," inbound nodes."));return this.inboundNodes[t]}getInputAt(t){return Sy(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Sy(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new gy("Layer ".concat(this.name)+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new gy("Layer ".concat(this.name)+" is not connected, no input to return.");return Sy(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new gy("Layer ".concat(this.name)+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new gy("Layer ".concat(this.name)+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return Sy(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){const e=Ty(t);if(null==this.inputSpec||0===this.inputSpec.length)return;const n=Ty(this.inputSpec);if(e.length!==n.length)throw new by("Layer ".concat(this.name," expects ").concat(n.length," inputs, ")+"but it received ".concat(e.length," input tensors. ")+"Input received: ".concat(t));for(let a=0;a<e.length;a++){const t=e[a],s=n[a];if(null==s)continue;const r=t.rank;if(null!=s.ndim&&r!==s.ndim)throw new by("Input ".concat(a," is incompatible with layer ").concat(this.name,": ")+"expected ndim=".concat(s.ndim,", found ndim=").concat(r));if(null!=s.maxNDim&&r>s.maxNDim)throw new by("Input ".concat(a," is incompatible with layer ").concat(this.name)+": expected max_ndim=".concat(s.maxNDim,", found ndim=").concat(r));if(null!=s.minNDim&&r<s.minNDim)throw new by("Input ".concat(a," is incompatible with layer ").concat(this.name)+": expected min_ndim=".concat(s.minNDim,", found ndim=").concat(r,"."));if(null!=s.dtype&&t.dtype!==s.dtype)throw new by("Input ".concat(a," is incompatible with layer ").concat(this.name," ")+": expected dtype=".concat(s.dtype,", found dtype=").concat(t.dtype,"."));if(s.axes){const e=t.shape;for(const t in s.axes){const n=Number(t),r=s.axes[t],o=n>=0?e[n]:e[e.length+n];if(null!=r&&-1===[r,null].indexOf(o))throw new by("Input ".concat(a," is incompatible with layer ")+"".concat(this.name,": expected axis ").concat(n," of input shape to ")+"have value ".concat(r," but got shape ").concat(e,"."))}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const n=s.shape[e],r=t.shape[e];if(null!=n&&null!=r&&n!==r)throw new by("Input ".concat(a," is incompatible with layer ")+"".concat(this.name,": expected shape=").concat(s.shape,", ")+"found shape=".concat(t.shape,"."))}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=Ty(t),a=function(t){let e=!0;for(const n of Ty(t))if(!(n instanceof ix)){e=!1;break}return e}(t),s=function(t){let e=!0;for(const n of Ty(t))if(n instanceof ix){e=!1;break}return e}(t);if(a===s)throw new by("Arguments to apply() must be all SymbolicTensors or all Tensors");return eb(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of Ty(t))e.push(n.shape);this.build(Sy(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let a=this.call(t,e);this.supportsMasking&&this.setMaskMetadata(t,a);const s=Ty(a),r=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),r.push(t);if(a=Sy(r),null!=this.activityRegularizer)throw new xy("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}{const n=function(t){t=Ty(t);const e=[];for(const n of t)e.push(n.shape);return Sy(e)}(t),a=this.computeOutputShape(n);let s;const r="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=a&&a.length>0&&Array.isArray(a[0])?a.map((n,a)=>new ix(r,n,this,Ty(t),e,this.name,a)):new ix(r,a,this,Ty(t),e,this.name),this.addInboundNode(t,s,null,null,n,a,e),this._refCount++,null!=this.activityRegularizer)throw new xy("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+"".concat(JSON.stringify(t),") does not match that of the ")+"batchInputShape (".concat(JSON.stringify(this.batchInputShape),") ")+"of the layer ".concat(this.name));else{let e=!1;this.batchInputShape.forEach((n,a)=>{null!=n&&null!=t[a]&&t[a]!==n&&(e=!0)}),e&&console.warn("The shape of the input tensor "+"(".concat(JSON.stringify(t),") does not ")+"match the expectation of layer ".concat(this.name,": ")+"".concat(JSON.stringify(this.batchInputShape)))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new gy("The layer ".concat(this.name," has never been called and thus has no ")+"defined output shape.");const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new gy("The layer ".concat(this.name," has multiple inbound nodes with different ")+'output shapes. Hence the notion of "output shape" is ill-defined for the layer.')}countParams(){if(!this.built)throw new yy("You tried to call countParams() on ".concat(this.name,", ")+"but the layer is not built yet. Build it first by calling build(batchInputShape).");return ex(this.weights)}build(t){this.built=!0}getWeights(){return sx(arguments.length>0&&void 0!==arguments[0]&&arguments[0]?this.trainableWeights:this.weights)}setWeights(t){co(()=>{const e=this.weights;if(e.length!==t.length)throw new by('You called setWeights(weights) on layer "'.concat(this.name,'" ')+"with a weight list of length ".concat(t.length,", ")+"but the layer was expecting ".concat(e.length," weights. ")+"Provided weights: ".concat(t,"..."));if(0===e.length)return;const n=[],a=sx(e);for(let s=0;s<a.length;++s){const r=a[s],o=e[s],i=t[s];if(!dt(r.shape,i.shape))throw new by("Layer weight shape ".concat(r.shape," ")+"not compatible with provided weight shape ".concat(i.shape));n.push([o,i])}rx(n)})}addWeight(t,e,n,a,s,r,o,i){if(-1!==this._addedWeightNames.indexOf(t))throw new by("Duplicate weight name ".concat(t," for layer ").concat(this.name));this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(a=null!=i?i():Zb("zeros"));const c=a.apply(e,n),l=new ax(c,n,t,r,o);return c.dispose(),null!=s&&this.addLoss(()=>s.apply(l.read())),null==r&&(r=!0),r?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=Ty(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError("Layer ".concat(this.name," does not support masking, ")+"but was passed an inputMask.");e.forEach(t=>{if(null!=t)throw new TypeError("Layer ".concat(this.name," does not support masking, ")+"but was passed an inputMask.")})}return null}return e}setMaskMetadata(t,e,n){if(!this.supportsMasking)return;const a=this.computeMask(t,n),s=Ty(e),r=Ty(a);if(s.length!==r.length)throw new Error("".concat(this.name," outputs ").concat(s.length," tensors ")+"but ".concat(s.length," masks for those tensors"));for(let o=0;o<s.length;o++)s[o].kerasMask=r[o]}addInboundNode(t,e,n,a,s,r){let o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null;const i=Ty(t);e=Ty(e),n=Ty(n),a=Ty(a),s=Qb(s),r=Qb(r);const c=[],l=[],u=[];for(const h of i)c.push(h.sourceLayer),l.push(h.nodeIndex),u.push(h.tensorIndex);new lx({outboundLayer:this,inboundLayers:c,nodeIndices:l,tensorIndices:u,inputTensors:i,outputTensors:e,inputMasks:n,outputMasks:a,inputShapes:s,outputShapes:r},o);for(let h=0;h<e.length;h++)e[h].sourceLayer=this,e[h].nodeIndex=this.inboundNodes.length-1,e[h].tensorIndex=h}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error("Layer '".concat(this.name,"' is already disposed."))}dispose(){if(!this.built)throw new Error("Cannot dispose Layer ".concat(this.name," because it has not been ")+"built yet.");if(null===this._refCount)throw new Error("Cannot dispose Layer ".concat(this.name," because it has not been used ")+"yet.");this.assertNotDisposed();let t=0;return 0===--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function dx(t,e,n){if((null==e||null!=n&&n>0)&&(e=t.sourceLayer,n=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let n=0;n<t.inboundLayers.length;n++){const a=dx(t.inputTensors[n],t.inboundLayers[n],t.nodeIndices[n]);for(const t of a)-1===e.indexOf(t)&&e.push(t)}return e}}}class px extends hx{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:Hy("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new by("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new by("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new by("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const a=new ix(this.dtype,this.batchInputShape,this,[],{},this.name);a.nodeIndex=0,a.tensorIndex=0,new lx({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[a],outputTensors:[a],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new by("Cannot pass any input to an "+"InputLayer's apply() method. InputLayer name: ".concat(this.name))}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function fx(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new by("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;null==n&&(n="float32");return new px({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}px.className="InputLayer",Ki(px);class mx{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof mx)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new by("Duplicate key: name=".concat(t.name,", id=").concat(t.id));return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Si(e,t.dtype)}catch(uj){throw new by("The dtype of the feed (".concat(e.dtype,") can not be cast to the dtype ")+"of the key '".concat(t.name,"' (").concat(t.dtype,")."))}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof ix){if(null==this.id2Value[t.id])throw new by("Nonexistent key: ".concat(t.name));return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new by("Feed dict has no SymbolicTensor name: ".concat(t));return this.id2Value[e]}}getMask(t){if(t instanceof ix){if(null==this.id2Value[t.id])throw new by("Nonexistent key: ".concat(t.name));return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new by("Feed dict has no SymbolicTensor name: ".concat(t));return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&lo(this.id2Mask)}}const gx=new vy,yx=new vy;function bx(t,e,n,a){const s=null!=n&&n.training,r=Array.isArray(t),o=r?t:[t],i=o.map(t=>t.name),c=[],l=e.names();for(const f of i)-1!==l.indexOf(f)?c.push(e.getValue(f)):c.push(null);null!=a&&(a.maxNumTensors=-1/0,a.minNumTensors=1/0);const u=i.join(",")+"|"+e.names().sort().join(",");let h,d=gx.get(u);if(null==d){const t=function(t,e){ot(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],a={};if(1===t.length){const s=wx(t[0],e);n=s.sorted,a=s.recipientMap}else{const s=new Set;for(const r of t){const{sorted:t,recipientMap:o}=wx(r,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const e in o)null==a[e]&&(a[e]=new Set),o[e].forEach(t=>a[e].add(t))}}return{sorted:n,recipientCounts:xx(a)}}(o,e);d=t.sorted,h=t.recipientCounts,gx.put(u,d),yx.put(u,h)}h={},s||Object.assign(h,yx.get(u));const p=new mx(e);for(let f=0;f<d.length;++f){if(null!=a){const t=oo().numTensors;t>a.maxNumTensors&&(a.maxNumTensors=t),t<a.minNumTensors&&(a.minNumTensors=t)}const t=d[f],r=t.sourceLayer;if(r instanceof px)continue;const o=[],l=[],u=[];let m=!1;for(const n of t.inputs){const t=p.getValue(n),a=p.getMask(n);o.push(t),l.push(a),null!=a&&(m=!0),s||(h[n.name]--,0!==h[n.name]||e.hasKey(n)||-1!==i.indexOf(n.name)||t.isDisposed||!0===n.sourceLayer.stateful||u.push(t))}m&&((n=n||{}).mask=l[0]);const g=Ty(r.apply(o,n));let y=null;r.supportsMasking&&(y=r.computeMask(o,l));const b=vx(t),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){p.hasKey(x[e])||p.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=i.indexOf(x[e].name);-1!==t&&(c[t]=g[e])}s||lo(u)}return p.disposeMasks(),r?c:c[0]}function xx(t){const e={};for(const n in t)e[n]=t[n].size;return e}function wx(t,e){const n=new Set,a=[],s={};for(const i of e.names())n.add(i);const r=[],o=[];for(r.push(t);r.length>0;){const t=r[r.length-1];if(n.has(t.name)){r.pop();continue}const e=o[o.length-1]===r.length-1;if(0===t.inputs.length||e)r.pop(),a.push(t),n.add(t.name),e&&o.pop();else{o.push(r.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||r.push(e)}}return{sorted:a,recipientMap:s}}function vx(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const a of t.sourceLayer.inboundNodes[e].outputTensors)if(a.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}function kx(t,e){return co(()=>Di(uh(Fi(t,t),e,!0)))}Yt().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function(t){null!=gx&&gx.setMaxEntries(t),null!=yx&&yx.setMaxEntries(t)});class Ix extends ji{getConfig(){return{}}}class Nx extends Ix{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return co(()=>{const e=kx(t,this.axis),n=Su(e,0,this.maxValue);return Fi(t,Ri(n,Ei(db(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Nx.className="MaxNorm",Ki(Nx);class Sx extends Ix{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return co(()=>Ri(t,Ei(db(),kx(t,this.axis))))}getConfig(){return{axis:this.axis}}}Sx.className="UnitNorm",Ki(Sx);class Tx extends Ix{apply(t){return Rd(t)}}Tx.className="NonNeg",Ki(Tx);class Cx extends Ix{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return co(()=>{const e=kx(t,this.axis),n=Ei(Fi(this.rate,Su(e,this.minValue,this.maxValue)),Fi(1-this.rate,e));return Fi(t,Ri(n,Ei(db(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Cx.className="MinMaxNorm",Ki(Cx);const Ex={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Ax(t){return Ry(t)}function Rx(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Dy(t,qi.getMap().classNameMap,e,"constraint")}function Fx(t){if(null==t)return null;if("string"===typeof t){return Rx({className:t in Ex?Ex[t]:t,config:{}})}return t instanceof Ix?t:Rx(t)}function Dx(t){return new Nx(t)}function _x(t){return new Sx(t)}function Ox(){return new Tx}function Mx(t){return new Cx(t)}function Lx(){return new Db}function zx(){return new _b}function Px(t){return new Ob(t)}function Bx(t){return new Mb(t)}function Wx(t){return new Lb(t)}function Vx(t){return new zb(t)}function Ux(t){return new Pb(t)}function Gx(t){return new Bb(t)}function Hx(t){return new Wb(t)}function jx(t){return new Vb(t)}function qx(t){return new Ub(t)}function Kx(t){return new Gb(t)}function Xx(t){return new Hb(t)}function Yx(t){return new jb(t)}function Zx(t){return new qb(t)}async function Jx(t){if(null==t)return;const e=[],n=[],a=[];for(const s in t){const r=t[s];if("number"!==typeof r){const t=r;e.push(t.data()),n.push(s),a.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];lo(a)}}function Qx(t){if(null!=t)for(const e in t){const n=t[e];"number"!==typeof n&&n.dispose()}}var $x;!function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}($x||($x={}));class tw{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class ew{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class nw extends tw{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const a in e){const t=e[a];if("number"===typeof t)this.totals.hasOwnProperty(a)||(this.totals[a]=0),this.totals[a]=this.totals[a]+t*n;else{let e;a in this.totals?e=this.totals[a]:this.totals[a]=0;const s=co(()=>Ei(this.totals[a],Fi(t,n)));this.totals[a]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const n of this.params.metrics)null!=this.totals[n]&&("number"===typeof this.totals[n]?e[n]=this.totals[n]/this.seen:co(()=>{const t=Fi(Ri(1,this.seen),this.totals[n]);e[n]=t,this.totals[n].dispose(),uo(e[n])}))}}class aw extends tw{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const n in e)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(e[n])}async syncData(){const t=[],e=[],n=[];for(const s in this.history){const a=this.history[s];for(let r=0;r<a.length;++r)if("number"!==typeof a[r]){const o=a[r];t.push(o.data()),e.push(s),n.push(r)}}const a=await Promise.all(t);for(let s=0;s<a.length;++s){this.history[e[s]][n[s]].dispose(),this.history[e[s]][n[s]]=a[s][0]}}}class sw extends tw{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||Xf,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Ft(this.yieldEvery)&&(this.maybeWait=function(t,e,n){let a,s=null!=n?n():Ys();return function(){const r=null!=n?n():Ys();return r-s<e||(s=r,a=t(...arguments)),a}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const a=[];null!=this.yield&&(await Jx(n),a.push(this.yield(t,e,n))),a.push(this.nextFrameFunc()),await Promise.all(a)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await Jx(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await Jx(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await Jx(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await Jx(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Ft(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await Jx(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await Jx(t),await this.trainEnd(t))}}function rw(t,e){if(null==t&&(t={}),t instanceof tw)return[t];if(Array.isArray(t)&&t[0]instanceof tw)return t;return Ty(t).map(t=>new sw(t,e))}class ow{constructor(){}static registerCallbackConstructor(t,e){ot(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, "+"but got ".concat(t)),ow.checkForDuplicate(e),null==ow.constructors[t]&&(ow.constructors[t]=[]),ow.constructors[t].push(e)}static checkForDuplicate(t){for(const e in ow.constructors){ow.constructors[+e].forEach(e=>{if(e===t)throw new by("Duplicate callback constructor.")})}}static clear(){ow.constructors={}}static createCallbacks(t){const e=[];for(const n in ow.constructors){const a=+n;t>=a&&e.push(...ow.constructors[a])}return e.map(t=>new t)}}function iw(t,e,n,a,s,r,o,i,c){const l=new aw,u=[new nw,...ow.createCallbacks(e)];null!=t&&u.push(...t),u.push(l);const h=new ew(u);return h.setParams({epochs:n,initialEpoch:a,samples:s,steps:r,batchSize:o,verbose:e,doValidation:i,metrics:c}),{callbackList:h,history:l}}function cw(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return Dy(t,qi.getMap().classNameMap,e,"layer",n)}function lw(t,e){return co(()=>{"float32"!==t.dtype&&(t=Si(t,"float32"));const n=uh(Nb(t),e,!0),a=Ji(n.shape,db()),s=Di(oc(n,a));return Ri(t,s)})}function uw(t,e){return co(()=>Kh(Nb(tc(e,t)),-1))}function hw(t,e){return co(()=>Kh(nc(tc(e,t)),-1))}function dw(t,e){return co(()=>{const n=tc(t,e),a=Su(nc(t),db(),Number.MAX_VALUE),s=nc(Ri(n,a));return Fi(100,Kh(s,-1))})}function pw(t,e){return co(()=>{const n=Su(e,db(),Number.MAX_VALUE),a=Fh(Ei(1,n)),s=Su(t,db(),Number.MAX_VALUE),r=Fh(Ei(1,s));return Kh(Nb(tc(a,r)),-1)})}function fw(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return co(()=>{if(n)e=Yd(e);else{const t=uh(e,e.shape.length-1,!0);e=Ri(e,t)}return e=Su(e,db(),1-db()),Mc(uh(Fi(Si(t,"float32"),Fh(e)),e.shape.length-1))})}function mw(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return co(()=>{const a=Si(xh(function(t){const e=[ib(t.shape)];return iu(t,e)}(t)),"int32"),s=(e=Su(e,db(),1-db())).shape;return fw(iu(_c(a,s[s.length-1]),s),e,n)})}function gw(t,e){return co(()=>{let n;return n=Su(e,db(),1-db()),n=Fh(Ri(n,tc(1,n))),Kh(function(t,e){if(!dt(t.shape,e.shape))throw new by("logits and labels must have the same shape, but got shapes "+"".concat(JSON.stringify(t.shape)," and ").concat(JSON.stringify(e.shape)));return co(()=>{const n=Rd(e),a=Mc(nc(e));return Ei(tc(n,Fi(e,t)),Dh(fh(a)))})}(t,n),-1)})}function yw(t,e){return co(()=>{const n=Su(t,db(),1),a=Su(e,db(),1);return uh(Fi(t,Fh(Ri(n,a))),-1)})}function bw(t,e){return co(()=>{const n=lw(t,-1),a=lw(e,-1),s=Fi(n,a);return Mc(uh(s,-1))})}ow.constructors={};const xw={meanSquaredError:uw,meanAbsoluteError:hw,meanAbsolutePercentageError:dw,meanSquaredLogarithmicError:pw,squaredHinge:function(t,e){return co(()=>{const n=oc(0,tc(1,Fi(t,e)));return Kh(Nb(n),-1)})},hinge:function(t,e){return co(()=>{const n=oc(0,tc(1,Fi(t,e)));return Kh(n,-1)})},categoricalHinge:function(t,e){return co(()=>{const n=uh(Fi(t,e),-1),a=ch(Fi(tc(1,t),e),-1);return oc(0,Ei(1,tc(a,n)))})},logcosh:function(t,e){return co(()=>{const n=Math.log(2),a=tc(e,t),s=tc(Ei(a,_h(Fi(-2,a))),n);return Kh(s,-1)})},categoricalCrossentropy:fw,sparseCategoricalCrossentropy:mw,binaryCrossentropy:gw,kullbackLeiblerDivergence:yw,poisson:function(t,e){return co(()=>{const n=Fh(Ei(db(),e));return Kh(tc(e,Fi(t,n)),-1)})},cosineProximity:bw};function ww(t){if("string"===typeof t){if(t in xw)return xw[t];let e="Unknown loss ".concat(t);throw t.toLowerCase().includes("softmaxcrossentropy")&&(e="Unknown loss ".concat(t,". ")+'Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy'),new by(e)}return t}function vw(t,e){return co(()=>{const n=Fi(.5,sd(e)),a=pb(vh(e,n),t.dtype);return Kh(qu(t,a),-1)})}function kw(t,e){return co(()=>pb(qu(Bl(t,-1),Bl(e,-1)),"float32"))}function Iw(t,e){return co(()=>Si(uh(zh(qu(t,1),qu(e,1))),"float32"))}function Nw(t,e){return co(()=>{const n=Iw(t,e),a=function(t,e){return co(()=>Si(uh(zh(qu(t,0),qu(e,1))),"float32"))}(t,e),s=Ei(n,a);return Si(Ku(vh(s,0),Ri(n,s),0),"float32")})}function Sw(t,e){return co(()=>{const n=Iw(t,e),a=function(t,e){return co(()=>Si(uh(zh(qu(t,1),qu(e,0))),"float32"))}(t,e),s=Ei(n,a);return Si(Ku(vh(s,0),Ri(n,s),0),"float32")})}function Tw(t,e){return gw(t,e)}function Cw(t,e){return t.rank===e.rank&&(t=np(t,[t.rank-1])),(e=Bl(e,-1)).dtype!==t.dtype&&(e=Si(e,t.dtype)),Si(qu(t,e),"float32")}const Ew=fw,Aw=mw,Rw={binaryAccuracy:vw,categoricalAccuracy:kw,precision:Nw,categoricalCrossentropy:Ew,sparseCategoricalCrossentropy:Aw,mse:uw,MSE:uw,mae:hw,MAE:hw,mape:dw,MAPE:dw,cosine:bw};function Fw(t){if("string"===typeof t&&t in Rw)return Rw[t];if("string"!==typeof t&&null!=t)return t;throw new by("Unknown metric ".concat(t))}function Dw(t){if(Iy(null!==t,"Unknown LossOrMetricFn ".concat(t)),"string"===typeof t)return t;{let e;for(const n of Object.keys(xw))if(xw[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Rw))if(Rw[n]===t){e=n;break}return void 0!==e?e:t.name}}const _w=1048576;function Ow(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(null==t||"object"!==typeof t||Object.getPrototypeOf(t)!==Object.prototype||!Mw(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>_w&&console.warn('User-defined metadata of model "'.concat(e,'" is too large in ')+"size (length=".concat(n.length," when serialized). It is not ")+"recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= "+"".concat(_w,"."))}}function Mw(t){if(null===t)return!0;if("object"===typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const e=Object.keys(t);for(const n of e){if("string"!==typeof n)return!1;if(!Mw(t[n]))return!1}return!0}if(Array.isArray(t)){for(const e of t)if(!Mw(e))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}function Lw(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:console.log;const s=function(t){let e=!0;const n=[],a=[];for(const s in t.nodesByDepth)n.push(t.nodesByDepth[s]);for(const s of n){if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){e=!1;break}a.push(...s)}if(e)for(const s of t.layers){let t=!1;for(const n of s.inboundNodes)if(-1!==a.indexOf(n)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),r=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(s?(e=e||90,n=n||[.32,.61,.89,1]):(e=e||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!s){r.push("Receives inputs"),o=[];for(const e in t.nodesByDepth)o.push(...t.nodesByDepth[e])}a("_".repeat(e)),zw(r,n,a),a("=".repeat(e));const i=t.layers;for(let u=0;u<i.length;++u)s?Pw(i[u],n,a):Bw(i[u],n,o,a),a((u===i.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const c=function(t){let e;e=null!=t.collectedTrainableWeights?ex(t.collectedTrainableWeights):ex(t.trainableWeights);return e}(t),l=ex(t.nonTrainableWeights);a("Total params: ".concat(c+l)),a("Trainable params: ".concat(c)),a("Non-trainable params: ".concat(l)),a("_".repeat(e))}function zw(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:console.log,a="";for(let s=0;s<t.length;++s)s>0&&(a=a.slice(0,a.length-1)+" "),a+=t[s],a=a.slice(0,e[s]),a+=" ".repeat(e[s]-a.length);n(a)}function Pw(t,e,n){let a,s;try{s=t.inboundNodes.map(t=>JSON.stringify(t.inputShapes)).join(",")}catch(uj){s="multiple"}try{a=JSON.stringify(t.outputShape)}catch(uj){a="multiple"}const r=t.name,o=t.getClassName();zw(["".concat(r," (").concat(o,")"),s,a,t.countParams().toString()],e,n)}function Bw(t,e,n,a){let s,r;try{r=t.inboundNodes.map(t=>JSON.stringify(t.inputShapes)).join(",")}catch(uj){r="multiple"}try{s=JSON.stringify(t.outputShape)}catch(uj){s="multiple"}const o=[];for(const u of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(u)))for(let t=0;t<u.inboundLayers.length;++t){const e=u.inboundLayers[t].name,n=u.nodeIndices[t],a=u.tensorIndices[t];o.push("".concat(e,"[").concat(n,"][").concat(a,"]"))}const i=t.name,c=t.getClassName(),l=0===o.length?"":o[0];zw(["".concat(i," (").concat(c,")"),r,s,t.countParams().toString(),l],e,a);for(let u=1;u<o.length;++u)zw(["","","","",o[u]],e,a)}function Ww(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"===typeof n}function Vw(t,e){if(null===t)return null;if("string"===typeof t)return Ey(t);if("number"===typeof t||"boolean"===typeof t)return t;if(t instanceof Array){const n=[],a=t.length;for(let s=0;s<a;++s){const a=t[s];Ww(e,s,a)?n.push(a):n.push(Vw(a,e))}return n}{const e={};for(const n of Object.keys(t)){const a=t[n];if("name"===n&&"string"===typeof a)e[n]=a;else{const t=Ey(n);e[t]=Vw(a,t)}}return e}}function Uw(t,e){if(null===t||void 0===t)return null;if("string"===typeof t)return Cy(t);if("number"===typeof t||"boolean"===typeof t)return t;if(t instanceof Array){const n=[],a=t.length;for(let s=0;s<a;++s){const a=t[s];Ww(e,s,a)?n.push(a):n.push(Uw(a,e))}return n}{const e={};for(const n of Object.keys(t)){const a=t[n],s=Cy(n);e[s]="name"!==n&&"className"!==n||"string"!==typeof a?Uw(a,n):a}return e}}const Gw="4.22.0";class Hw extends hx{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=Hy(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Oy(this.inputs).length!==this.inputs.length)throw new by("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+"".concat(this.inputs.map(t=>t.name)));Oy(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+"".concat(this.outputs.map(t=>t.name))),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const y of this.outputs){const t=y.sourceLayer,e=y.nodeIndex,n=y.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(e),this.outputLayersTensorIndices.push(n)}for(const y of this.inputs){const t=y.sourceLayer,e=y.nodeIndex,n=y.tensorIndex;Iy(0===e,"input layer has >1 nodes"),Iy(0===n,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(e),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let y=0;y<this.inputLayers.length;y++){const e=this.inputLayers[y];if(!(e instanceof px))throw new TypeError("Input layers to a LayersModel must be InputLayer objects. "+"Received inputs: ".concat(t.inputs,". ")+"Input ".concat(y," (0-based) originates ")+"from layer type ".concat(e.getClassName(),"."));this.inputNames.push(e.name),this.feedInputShapes.push(e.batchInputShape),this.feedInputNames.push(e.name)}for(const y of this.outputLayers)this.outputNames.push(y.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},a={},s={},r={},o=[],i=(t,e,n,a,s,c)=>{null!=a&&null!=s&&null!=c||(a=t.sourceLayer,s=t.nodeIndex,c=t.tensorIndex);const l=a.inboundNodes[s];if(-1!==n.indexOf(l))throw new yy("The tensor ".concat(t.name,' at layer "').concat(a.name,'" ')+"is part of a cycle.");if(-1!==e.indexOf(l))return;this.containerNodes.add(Hw.nodeKey(a,s)),a.id in r||(r[a.id]=Object.keys(r).length),-1===n.indexOf(l)&&n.push(l);const u=l.inboundLayers.length;for(let r=0;r<u;r++){const t=l.inputTensors[r],a=l.inboundLayers[r],s=l.nodeIndices[r],o=l.tensorIndices[r];i(t,e,n,a,s,o)}for(e.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);o.push(l)},c=[],l=[];for(const y of this.outputs)i(y,c,l);const u=o.slice().reverse();for(const y of u){n[y.id]=y,y.id in e||(e[y.id]=0);let t=e[y.id];const r=null==a[y.outboundLayer.id]?0:a[y.outboundLayer.id];t=Math.max(t,r),a[y.outboundLayer.id]=t,s[y.outboundLayer.id]=y.outboundLayer,e[y.id]=t;for(let a=0;a<y.inboundLayers.length;a++){const s=y.inboundLayers[a],r=y.nodeIndices[a],o=s.inboundNodes[r],i=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(t+1,i),n[o.id]=o}}const h={};for(const y in e){const t=e[y];t in h||(h[t]=[]),h[t].push(n[y])}const d={};for(const y in a){const t=a[y];t in d||(d[t]=[]),d[t].push(s[y])}let p=Object.keys(d).map(t=>parseInt(t,10)).sort(_y);this.layers=[];for(const y of p){const t=d[y];t.sort((t,e)=>{const n=r[t.id],a=r[e.id];return n<a?-1:n>a?1:0});for(const e of t)e instanceof Hw&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=d,p=Object.keys(h).map(t=>parseInt(t,10)).sort(_y);const f=this.inputs.slice(),m=[];for(const y of p)for(const t of h[y]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new yy("Graph disconnected: cannot obtain value for tensor ".concat(n)+' at layer "'.concat(e.name,'". ')+"The following previous layers were accessed without "+"issue: ".concat(m));for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const y of g){const t=g.filter(t=>t===y).length;if(1!==t)throw new yy('The name "'.concat(y,'" is used ').concat(t," times ")+"in the model. All layer names should be unique. Layer names: "+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new lx({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error("Container '".concat(this.name,"' is already disposed."))}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0===--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new by("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n={};let a=0;const s=(t=>{const e=Object.keys(t);if(0===e.length)return!1;const n=e[0].split("/");return!isNaN(parseInt(n[n.length-1],10))})(t);s&&this.parseWeights(t);for(const o of this.layers)for(const[t,e]of o.weights.entries()){const r=s?"".concat(e.name.split("/").slice(0,-1).join("/")+"/").concat(t):e.originalName;if(null!=n[r])throw new by("Duplicate weight name: ".concat(r));n[r]=e,a++}const r=[];for(const o in t){let a=o;if(null==n[o]){const t=o.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])r.push([n[a],t[o]]);else if(e)throw new by("Provided weight data has no target variable: ".concat(o));delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new by("".concat(t.length," of ").concat(a," weights are not set: ")+"".concat(t))}rx(r)}parseWeights(t){for(const e in Object.keys(t)){const n=e.split("/"),a=["vars","layer_checkpoint_dependencies"],s=n.map(t=>t.startsWith("_")?t.slice(1):t).filter(t=>!a.includes(t)).join("/");s!==e&&(t[s]=t[e],delete t[e])}}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers ".concat(Gw),e.backend="TensorFlow.js",e}toJSON(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=Uw(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return co(()=>{t=Ty(t);const n=new mx;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return bx(this.outputs,n,e)})}computeMask(t,e){return co(()=>{let n;return t=Ty(t),n=null==e?ky(null,t.length):Ty(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=Qb(t);if(e.length!==this.inputLayers.length)throw new by("Invalid inputShape argument ".concat(t,": ")+"model has ".concat(this.inputLayers.length," tensor inputs."));const n={};for(let o=0;o<e.length;o++){const t=this.inputLayers[o],a=e[o];n[t.name+"_0_0"]=a}const a=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(_y);if(a.length>1)for(const o of a){const t=this.nodesByDepth[o];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(t.id))continue;const a=[];for(let o=0;o<e.inboundLayers.length;o++){const t=e.inboundLayers[o],s=e.nodeIndices[o],r=e.tensorIndices[o],i=n["".concat(t.name,"_").concat(s,"_").concat(r)];a.push(i)}const s=Qb(t.computeOutputShape(Sy(a))),r=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++){n["".concat(t.name,"_").concat(r,"_").concat(e)]=s[e]}}}const s=[],r=[];for(let o=0;o<this.outputLayers.length;o++){const t=this.outputLayers[o],e=this.outputLayersNodeIndices[o],n=this.outputLayersTensorIndices[o],a="".concat(t.name,"_").concat(e,"_").concat(n);r.push(a)}for(let o=0;o<r.length;o++){const t=r[o];Iy(t in n),s.push(n[t])}return Sy(s)}runInternalGraph(t,e){null==e&&(e=ky(null,t.length));const n={};for(let i=0;i<this.inputs.length;++i){const a=this.inputs[i],s=t[i],r=e[i];n[a.id]=[s,r]}const a=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(_y);for(const i of a){const t=this.nodesByDepth[i];for(const e of t){const t=e.outboundLayer,a=e.inputTensors,s=e.outputTensors,r=new Array;for(const e of a)e.id in n&&r.push(n[e.id]);if(r.length===a.length){let a,o,i,c,l={};if(null!=e.callArgs&&(l=e.callArgs),1===r.length){const[e,n]=r[0];null==l.mask&&(l.mask=n),i=Ty(t.call(e,l)),c=Ty(t.computeMask(e,n)),a=[e],o=[n]}else a=r.map(t=>t[0]),o=r.map(t=>t[1]),null==l.mask&&(l.mask=o),i=Ty(t.call(a,l)),c=Ty(t.computeMask(a,o));if(t.activityRegularizer)throw new xy("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],a=i[t],r=c[t];n[e.id]=[a,r]}}}}const s=[],r=[],o=[];for(const i of this.outputs){Iy(i.id in n,"Could not compute output ".concat(i.name," : ").concat(i.id));const[t,e]=n[i.id];o.push(t.shape),s.push(t),r.push(e)}return[s,r,o]}buildNodeConversionMap(t){const e={};let n;for(const a of this.layers){n=a instanceof Hw?1:0;for(let t=0;t<a.inboundNodes.length;t++){const s=Hw.nodeKey(a,t);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e)return this.findLayer(e);if(null==t)throw new by("Provide either a layer name or layer index");if("number"===typeof t)return this.findLayer(t);for(const n of this.layers)if(n.name===t)return n;throw new by("No such layer: ".concat(t))}findLayer(t){if(this.layers.length<=t)throw new by("Was asked to retrieve layer at index ".concat(t,", but model only ")+"has ".concat(this.layers.length," layer(s)."));return this.layers[t]}calculateLosses(){return co(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const a=Hw.nodeKey(e,n);this.containerNodes.has(a)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const r of this.layers){const t=r.getClassName(),a=r.getConfig(),s=[];for(let n=0;n<r.inboundNodes.length;n++){const t=r.inboundNodes[n],a=Hw.nodeKey(r,n);let o={};if(this.containerNodes.has(a)){if(t.callArgs)try{JSON.stringify(t.callArgs),o=t.callArgs}catch(uj){console.warn("Layer ".concat(r.name," was passed ")+"non-serializable keyword arguments: "+"".concat(t.callArgs,". They will not be included ")+"in the serialized model (and thus will be missing at deserialization time)."),o={}}if(t.inboundLayers.length>0){const n=[];for(let a=0;a<t.inboundLayers.length;a++){const s=t.inboundLayers[a],r=t.nodeIndices[a],i=t.tensorIndices[a];let c=e[Hw.nodeKey(s,r)];null==c&&(c=0),n.push([s.name,c,i,o])}s.push(n)}}}const o={};o.name=r.name,o.className=t,o.config=a,o.inboundNodes=s,n.push(o)}t.layers=n;const a=[];for(let r=0;r<this.inputLayers.length;r++){const t=this.inputLayers[r],n=this.inputLayersNodeIndices[r],s=Hw.nodeKey(t,n);if(!this.containerNodes.has(s))continue;let o=e[s];null!==o&&void 0!==o||(o=0);const i=this.inputLayersTensorIndices[r];a.push([t.name,o,i])}t.inputLayers=a;const s=[];for(let r=0;r<this.outputLayers.length;r++){const t=this.outputLayers[r],n=this.outputLayersNodeIndices[r],a=Hw.nodeKey(t,n);if(!this.containerNodes.has(a))continue;let o=e[a];null!==o&&void 0!==o||(o=0);const i=this.outputLayersTensorIndices[r];s.push([t.name,o,i])}return t.outputLayers=s,t}static fromConfig(t,e){let n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a={},s={};function r(t,e){t.name in s?s[t.name].push(e):s[t.name]=[e]}function o(t,e){const n=[];let s;for(const o of e){const i=o[0],c=o[1],l=o[2];if(s=null==o[3]?{}:o[3],!(i in a))return void r(t,e);const u=a[i];if(u.inboundNodes.length<=c)return void r(t,e);const h=u.inboundNodes[c];n.push(h.outputTensors[l])}n.length>0&&t.apply(Sy(n),s)}function i(t){const s=t.name,o=cw(t,null!=e.customObjects?e.customObjects:{});o.setFastWeightInitDuringBuild(n),a[s]=o;t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new by("Corrupted configuration, expected array for nodeData: ".concat(t));r(o,t)})}const c=e.name,l=e.layers;for(const f of l)i(f);for(;!My(s);)for(const t of l){const e=a[t.name];if(e.name in s){const t=s[e.name];delete s[e.name];for(const n of t)o(e,n)}}const u=[],h=[],d=e.inputLayers;for(const f of d){const t=f[0],e=f[1],n=f[2];Iy(t in a);const s=a[t].inboundNodes[e].outputTensors;u.push(s[n])}const p=e.outputLayers;for(const f of p){const t=f[0],e=f[1],n=f[2];Iy(t in a);const s=a[t].inboundNodes[e].outputTensors;h.push(s[n])}return new t({inputs:u,outputs:h,name:c})}get stateful(){if(this._stateful)throw new by("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){co(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function jw(t,e,n){const a=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===a)return Array.isArray(t)&&1===t.length?t:"object"===typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==a)throw new Error("Provided ".concat(n," is an array of ").concat(t.length," ")+"element(s), but the model has ".concat(a," outputs. ")+"Make sure a set of weights is provided for each model output.");return t}if("object"===typeof t&&Object.keys(t).length>0&&"object"===typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{e in t?n.push(t[e]):n.push(null)}),n}throw new Error("The model has multiple (".concat(a,") outputs, ")+"so ".concat(n," must be either an array with ")+"".concat(a," elements or an object with ").concat(e," keys. ")+"Provided ".concat(n," not understood: ").concat(JSON.stringify(t)))}function qw(t,e){return jw(t,e,"classWeight")}async function Kw(t,e,n,a){if(null!=e||null!=a)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=co(()=>{if(1===t.shape.length)return Ti(t);if(2===t.shape.length){if(t.shape[1]>1){return Bl(t,1)}if(1===t.shape[1])return iu(t,[t.shape[0]]);throw new Error("Encountered unexpected last-dimension size (".concat(t.shape[1],") ")+"during handling of class weights. The size is expected to be >= 1.")}throw new Error("Unexpected rank of target (y) tensor (".concat(t.rank,") during ")+"handling of class weights. The rank is expected to be 1 or 2.")}),a=Array.from(await e.data());lo(e);const s=[];return a.forEach(t=>{if(null==n[t])throw new Error("classWeight must contain all classes in the training data. "+"The class ".concat(t," exists in the data but not in ")+"classWeight");s.push(n[t])}),ip(s,"float32")}return null}function Xw(t,e){return Fi(t,e)}function Yw(t,e){let n,a;const s=e;n=s.xs,a=s.ys,ot(null!=n&&null!=a,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+"".concat(e));const r=Zw("input",t.inputNames,n),o=Zw("output",t.outputNames,a),i=r[0].shape[0];ot(r.length===t.inputs.length,()=>"LayersModel has ".concat(t.inputs.length," inputs, but the dataset ")+"provides ".concat(r.length," inputs.  (Expected input keys: ")+"".concat(JSON.stringify(t.inputNames),")")),ot(o.length===t.outputs.length,()=>"LayersModel has ".concat(t.outputs.length," outputs, but the dataset ")+"provides ".concat(o.length," outputs.  (Expected output keys: ")+"".concat(JSON.stringify(t.outputNames),")"));for(let c=0;c<r.length;c++)ot(r[c].shape[0]===i,()=>"Batch size mismatch: input "+"".concat(t.inputNames[c]," has ").concat(r[c].shape[0],"; ")+"expected  ".concat(i," based on input ").concat(t.inputNames[0],"."));for(let c=0;c<o.length;c++)ot(o[c].shape[0]===i,()=>"Batch size mismatch: output "+"".concat(t.outputNames[c]," has ").concat(o[c].shape[0],"; ")+"expected  ".concat(i," based on input ").concat(t.inputNames[0],"."));return{xs:r,ys:o}}function Zw(t,e,n){if(n instanceof pr)return[n];if(Array.isArray(n))return ot(n.length===e.length,()=>"Received an array of ".concat(n.length," Tensors, but expected ").concat(e.length," to match the ").concat(t," keys ").concat(e,".")),n;{const a=[];for(const s of e){if(null==n[s])throw new by("The feature data generated by the dataset lacks the required "+"".concat(t," key '").concat(s,"'."));a.push(n[s])}return a}}async function Jw(t,e,n){const a=null!=n.batchesPerEpoch;if(ot(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),ot(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),ot(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive "+"integer, but got ".concat(n.epochs)),ot(!a||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a "+"positive integer if specified, but got ".concat(n.batchesPerEpoch)),ot(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let r,o;if(s)if(Qw(n.validationData))ot(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, "+"but got ".concat(n.validationBatches));else{const t=function(t){if(3===t.length)throw new xy("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);r=t.xs,o=t.ys}const i=t.makeTrainFunction(),c=t.getDedupedMetricsNames();let l;l=s?c.slice().concat(c.map(t=>"val_"+t)):c.slice();const u=rw(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=iw(u,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,l);d.setModel(t),t.history=p,await d.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const l={};await d.onEpochBegin(f);let u=0,h=0;for(a||(m=await e.iterator());!a||u<n.batchesPerEpoch;){const e=await m.next();if(a&&e.done){console.warn("You provided `batchesPerEpoch` as "+"".concat(n.batchesPerEpoch,", ")+"but your dataset iterator ran out of data after "+"".concat(u," batches; ")+"interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+"".concat(n.batchesPerEpoch*n.epochs," batches). ")+"You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:a,ys:s}=Yw(t,e.value),r={};r.batch=h,r.size=a[0].shape[0],await d.onBatchBegin(h,r);const o=[];if(null!=n.classWeight){const e=qw(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)o.push(await Kw(s[t],null,e[t]))}const l=a.concat(s).concat(o),p=i(l);lo(l);for(let t=0;t<c.length;++t){const e=c[t],n=p[t];r[e]=n,uo(n)}await d.onBatchEnd(h,r),Qx(r),h++,u++}if(a?u>=n.batchesPerEpoch:e.done){if(s){let e;e=Qw(n.validationData)?Ty(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):Ty(t.evaluate(r,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)l["val_".concat(t.metricsNames[n])]=e[n]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(f,l),f++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function Qw(t){return"function"===typeof t.iterator}function $w(t){ot(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got ".concat(t))}function tv(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>mb(t,e,n-e)):mb(t,e,n-e)}function ev(t,e){return co(()=>null==t?null:Array.isArray(t)?t.map(t=>ev(t,e)):Ib(t,"int32"===e.dtype?e:Si(e,"int32")))}function nv(t,e){const n=[];let a=0,s=null;for(;a<t;)s=a+e,s>=t&&(s=t),n.push([a,s]),a=s;return n}function av(t){const e=[];t instanceof pr&&(t=[t]);for(let n=0;n<t.length;++n){const a=t[n];if(1===a.rank)e.push(fb(a,1));else{if(0===a.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(a)}}return e}function sv(t,e){if(null==t)return;const n=[];if(e instanceof pr)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const s in e){const t=e[s];n.push(t.id)}const a=[];if(t instanceof pr)-1===n.indexOf(t.id)&&a.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&a.push(t)});else if(null!=t)for(const s in t){const e=t[s];-1===n.indexOf(e.id)&&a.push(e)}a.forEach(t=>{t.isDisposed||t.dispose()})}function rv(t){return Array.isArray(t)}function ov(t){return!function(t){return t instanceof pr}(t)&&!rv(t)}function iv(t,e,n){let a,s=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(null==e||0===e.length){if(null!=t){let e=!1;if(rv(t)&&t.length>0)e=!0;else if(ov(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new by("Error when checking model ".concat(r," expected no data, ")+"but got ".concat(t))}return[]}if(null==t)return e.map(t=>null);if(ov(t)){a=[];for(const n of e){if(null==t[n])throw new by('No data provided for "'.concat(n,'". Need data for each key in: ')+"".concat(e));a.push(t[n])}}else if(rv(t)){if(t.length!==e.length)throw new by("Error when checking model ".concat(r,": the Array of ")+"Tensors that you are passing to your model is not the size the "+"model expected. Expected to see ".concat(e.length," Tensor(s), but ")+"instead got the following list of Tensor(s): ".concat(t));a=t}else{if(e.length>1)throw new by("The model ".concat(r," expects ").concat(e.length," Tensor(s), ")+"but only received one Tensor. Found: Tensor with shape ".concat(t.shape));a=[t]}if(a=av(a),null!=n)for(let o=0;o<e.length;++o){if(null==n[o])continue;const t=a[o];if(t.shape.length!==n[o].length)throw new by("Error when checking ".concat(r,": expected ").concat(e[o]," ")+"to have ".concat(n[o].length," dimension(s). but got array with ")+"shape ".concat(t.shape));for(let e=0;e<n[o].length;++e){if(0===e&&!s)continue;const a=t.shape[e],i=n[o][e];if(null!=i&&i>=0&&a!==i)throw new by("".concat(r," expected a batch of elements where each ")+"example has shape [".concat(n[o].slice(1,n[o].length),"] ")+"(i.e.,tensor shape [*,".concat(n[o].slice(1,n[o].length),"])")+" but the ".concat(r," received an input with ").concat(t.shape[0])+" examples, each with shape [".concat(t.shape.slice(1,t.shape.length),"]")+" (tensor shape [".concat(t.shape,"])"))}}return a}function cv(t,e,n){let a,s=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(Array.isArray(t)){if(t.length!==e.length)throw new by("Error when checking model ".concat(r,": the Array of ")+"Tensors that you are passing to your model is not the size the "+"the model expected. Expected to see ".concat(e.length," Tensor(s),")+" but instead got ".concat(t.length," Tensors(s)."));a=t}else{if(e.length>1)throw new by("The model expects ".concat(e.length," ").concat(r," Tensors, ")+"but only received one Tensor. Found: array with shape "+"".concat(JSON.stringify(t.shape),"."));a=[t]}if(null!=n)for(let o=0;o<e.length;++o){if(null==n[o])continue;const t=a[o];if(t.shape.length!==n[o].length)throw new by("Error when checking ".concat(r,": expected ").concat(e[o]," ")+"to have ".concat(n[o].length," dimension(s), but got array with ")+"shape ".concat(JSON.stringify(t.shape)));for(let a=0;a<n[o].length;++a){if(0===a&&!s)continue;const i=t.shape[a],c=n[o][a];if(null!=c&&c!==i)throw new by("Error when checking ".concat(r,": expected ")+"".concat(e[o]," to have shape ").concat(JSON.stringify(n[o])," but ")+"got array with shape ".concat(JSON.stringify(t.shape),"."))}}}class lv extends Hw{constructor(t){super(t),this.isTraining=!1}summary(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:console.log;if(!this.built)throw new by("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Lw(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"===typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>qf.adagrad(.01),Adadelta:()=>qf.adadelta(1,.95,db()),Adam:()=>qf.adam(.001,.9,.999,db()),Adamax:()=>qf.adamax(.002,.9,.999,db(),0),RMSProp:()=>qf.rmsprop(.001,.9,0,db()),SGD:()=>qf.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new by("Unknown Optimizer ".concat(t))}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof Yi))throw new by("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"===typeof t.loss||"function"===typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new by("When passing an Array as loss, it should have one entry per "+"model output. The model has ".concat(this.outputs.length," output(s), ")+"but you passed loss=".concat(t.loss,"."));const n=t.loss;e=n.map(t=>ww(t))}else{const n=ww(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new by('Unknown entry in loss dictionary: "'.concat(e,'". ')+"Only expected the following keys: ".concat(this.outputNames));for(const n of this.outputNames)null==t.loss[n]&&console.warn('Output "'.concat(n,'" is missing from loss dictionary. We assume ')+"this was done on purpose, and we will not be expecting data "+"to be passed to ".concat(n," during training")),e.push(ww(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let r=0;r<this.outputs.length;++r){const t=this.internalOutputShapes[r],e=this.outputNames[r];this.feedOutputNames.push(e),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[r])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],eb("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const a=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"===typeof t||"function"===typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!==typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,"+"function, Array, or Object, found: ".concat(t));n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const a of e){let e=n.hasOwnProperty(a)?n[a]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};eb("metric",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,a,r;for(const o of e){if("string"===typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===gw?-1!==["accuracy","acc"].indexOf(o)?a=vw:-1!==["crossentropy","ce"].indexOf(o)&&(a=Tw):this.lossFunctions[t]===mw?-1!==["accuracy","acc"].indexOf(o)?a=Cw:-1!==["crossentropy","ce"].indexOf(o)&&(a=Aw):-1!==["accuracy","acc"].indexOf(o)?a=kw:-1!==["crossentropy","ce"].indexOf(o)&&(a=Ew),-1!==["accuracy","acc"].indexOf(o)?s="acc":-1!==["crossentropy","ce"].indexOf(o)&&(s="ce"),r=a,n=""+s}else{const t=Fw(o);r=t,n=""+Dw(o)}let e;eb(n,()=>{e=r}),s(t,n,e)}})(a[t])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const a=null==n.batchSize?32:n.batchSize;$w(a);const s=this.standardizeUserDataXY(t,e,!0,a);try{const t=s[0].concat(s[1]);this.makeTestFunction();const e=this.testFunction;return Sy(this.testLoop(e,t,a,n.verbose,n.steps))}finally{sv(s[0],t),sv(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const a=null!=(n=n||{}).batches,s=t.testFunction;let r=[];if(n.verbose>0)throw new xy("Verbose mode is not implemented yet.");ot(!a||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but "+"received ".concat(JSON.stringify(n.batches)));const o="function"===typeof e.next?e:await e.iterator();let i=0,c=0;for(;!a||c<n.batches;){const e=await o.next();if(r=co(()=>{if(e.value){const{xs:n,ys:a}=Yw(t,e.value),o=n.concat(a),l=co(()=>s(o));if(lo(o),0===c)for(let t=0;t<l.length;++t)r.push(Ui(0));const u=o[0].shape[0];for(let t=0;t<l.length;++t){const e=l[t],n=r[t];r[t]=co(()=>Ei(r[t],Fi(u,e))),c>0&&lo(n)}lo(l),i+=u,++c}return r}),e.done){a&&console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` "+"batches (in this case, ".concat(n.batches," batches). ")+"You may need to use the repeat() function when building your dataset.");break}}for(let l=0;l<r.length;++l){const t=r[l];r[l]=Ri(r[l],i),lo(t)}return Sy(r)}(this,t,e)}checkNumSamples(t,e,n){let a,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"steps";if(null!=n){if(a=null,null!=e)throw new by("If ".concat(s," is set, batchSize must be null or undefined.")+"Got batchSize = ".concat(e))}else{if(null==t)throw new by("Either the input data should have a defined shape, or "+"".concat(s," shoud be specified."));a=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return a}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new by("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),a=n?e:[e],s=this.retrieveSymbolicTensors(a),r=new mx;if(t instanceof pr&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new by("The number of inputs provided (".concat(t.length,") ")+"does not match the number of inputs of this model "+"(".concat(this.inputs.length,")."));for(let e=0;e<this.inputs.length;++e)r.add(this.inputs[e],t[e])}else for(const i of this.inputs){const e=t[i.name];if(null==e)throw new by("No value is provided for the model's input ".concat(i.name));r.add(i,e)}const o=bx(s,r);return n?o:o[0]}retrieveSymbolicTensors(t){const e=ky(null,t.length);let n=t.length;for(const a of this.layers){const s=Array.isArray(a.output)?a.output:[a.output],r=s.map(t=>t.name);for(let a=0;a<t.length;++a){const o=r.indexOf(t[a]);if(-1!==o&&(e[a]=s[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,a)=>{null==e&&n.push(t[a])}),new by("Cannot find SymbolicTensors for output name(s): "+"".concat(JSON.stringify(n)))}return e}predictLoop(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return co(()=>{const a=this.checkNumSamples(t);if(n)throw new xy("Verbose predictLoop() is not implemented yet.");const s=nv(a,e),r=this.outputs.map(t=>[]);for(let e=0;e<s.length;++e){co(()=>{const n=s[e][0],a=s[e][1],r=tv(t,n,a),o=[];if(Array.isArray(r))for(let t=0;t<r.length;++t)o.push({key:this.inputs[t],value:r[t]});else o.push({key:this.inputs[0],value:r});const i=new mx(o);return bx(this.outputs,i)}).forEach((t,e)=>r[e].push(t))}return Sy(r.map(t=>uu(t,0)))})}predict(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=av(t);cv(n,this.inputNames,this.feedInputShapes,!1);try{const t=null==e.batchSize?32:e.batchSize;return $w(t),this.predictLoop(n,t)}finally{sv(n,t)}}predictOnBatch(t){cv(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e){let n=arguments.length>3?arguments[3]:void 0;if(null==this.optimizer_)throw new yy("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let s=0;s<this.feedOutputShapes.length;++s){const t=this.feedOutputShapes[s];this.feedLossFns[s]===mw?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}if(function(t,e){const n=Oy(t.map(t=>t.shape[0]));n.sort();const a=Oy(e.map(t=>t.shape[0]));if(a.sort(),n.length>1)throw new by("All input Tensors (x) should have the same number of samples. Got array shapes: "+"".concat(JSON.stringify(t.map(t=>t.shape))));if(a.length>1)throw new by("All target Tensors (y) should have the same number of samples. Got array shapes: "+"".concat(JSON.stringify(e.map(t=>t.shape))));if(n.length>0&&a.length>0&&!dt(n,a))throw new by("Input Tensors should have the same number of samples as target "+"Tensors. Found ".concat(n[0]," input sample(s) and ").concat(a[0]," target ")+"sample(s).")}(t=iv(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=iv(e,this.feedOutputNames,a,!1,"target")),function(t,e,n){const a=[uw,gw,fw];for(let s=0;s<t.length;++s){const r=t[s],o=e[s],i=n[s];if(null!=o){if(o===fw&&1===r.shape[r.shape.length-1])throw new by("You are passing a target array of shape ".concat(r.shape," while using ")+"a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");if(-1!==a.indexOf(o)){const t=r.shape.slice(1),e=i.slice(1);for(let n=0;n<t.length;++n){const a=t[n],s=e[n];if(null!=s&&a!==s)throw new by("A target Tensor with shape ".concat(r.shape," was passed for an ")+"output of shape ".concat(i,", while using a loss function that ")+"expects targets to have the same shape as the output.")}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=n&&n>0&&t[0].shape[0]%n!==0)throw new by("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size "+"".concat(n,". Found: ").concat(t[0].shape[0]," sample(s)."));return[t,e]}async standardizeUserData(t,e,n,a){let s=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],r=arguments.length>5?arguments[5]:void 0;const[o,i]=this.standardizeUserDataXY(t,e,s,r);if(null!=n)throw new Error("sample weight is not supported yet.");let c=null;if(null!=a){const t=qw(a,this.outputNames);c=[];for(let e=0;e<t.length;++e)c.push(await Kw(i[e],null,t[e]))}return[o,i,c]}testLoop(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4?arguments[4]:void 0;return co(()=>{const r=this.checkNumSamples(e,n,s,"steps"),o=[];if(a>0)throw new xy("Verbose mode is not implemented yet.");if(null!=s)throw new xy("steps mode in testLoop() is not implemented yet");{const a=nv(r,n),s=ip(ub(0,r));for(let n=0;n<a.length;++n){const r=a[n][0],i=a[n][1],c=mb(s,r,i-r),l=ev(e,c),u=t(l);if(0===n)for(let t=0;t<u.length;++t)o.push(Ui(0));for(let t=0;t<u.length;++t){const e=u[t];o[t]=Ei(o[t],Fi(i-r,e))}}for(let t=0;t<o.length;++t)o[t]=Ri(o[t],r)}return o})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const a=t[n];let s=a;if(Ny(t,a)>1){const e=Ny(t.slice(0,n),a);s+="_".concat(e)}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),a=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),r=[],o=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const o=new mx(t),i=bx(this.outputs,o,{training:!0});let c;for(let n=0;n<this.lossFunctions.length;++n){let t=(0,this.lossFunctions[n])(a[n],i[n]);null!=s[n]&&(t=Xw(t,s[n]));const r=Kh(t);e.push(r),c=0===n?t:Ei(c,t)}for(let n=0;n<this.metricsTensors.length;++n){let t;if(this.outputs.length>1&&n<this.outputs.length)t=e[n];else{const e=this.metricsTensors[n][0],s=this.metricsTensors[n][1];t=Kh(e(a[s],i[s]))}uo(t),r.push(t)}return c=Kh(c),this.calculateLosses().forEach(t=>{c=Ei(c,t)}),c},!0,o)].concat(r)}}makeTestFunction(){this.testFunction=t=>co(()=>{const e=[];let n;const a=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=[];for(let t=0;t<this.inputs.length;++t)r.push({key:this.inputs[t],value:a[t]});const o=new mx(r),i=bx(this.outputs,o);for(let t=0;t<this.lossFunctions.length;++t){const a=this.lossFunctions[t],r=Kh(a(s[t],i[t]));n=0===t?r:Ei(n,r),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],a=this.metricsTensors[t][1],r=Kh(n(s[a],i[a]));e.push(r)}return e})}async fit(t,e){let n,a,s,r,o,i,c,l,u,h=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");this.isTraining=!0;try{const d=null==h.batchSize?32:h.batchSize;$w(d);const p=!1,f=await this.standardizeUserData(t,e,h.sampleWeight,h.classWeight,p,d);n=f[0],a=f[1],u=f[2];let m,g=!1;if(null!=h.validationData&&h.validationData.length>0){if(g=!0,2!==h.validationData.length)throw 3===h.validationData.length?new xy("validationData including sample weights is not supported yet."):new by("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+"".concat(h.validationData," is invalid."));o=h.validationData[0],i=h.validationData[1];const t=!0,e=await this.standardizeUserData(o,i,null,null,t,d);c=e[0],l=e[1],m=c.concat(l)}else if(null!=h.validationSplit&&h.validationSplit>0&&h.validationSplit<1){g=!0;const t=Math.floor(n[0].shape[0]*(1-h.validationSplit)),e=n[0].shape[0];c=tv(n,t,e),s=n,n=tv(n,0,t),l=tv(a,t,e),r=a,a=tv(a,0,t),m=c.concat(l)}else null!=h.validationSteps&&(g=!0);const y=n.concat(a).concat(u);this.checkTrainableWeightsConsistency();const b=this.makeTrainFunction(),x=this.getDedupedMetricsNames();let w,v;g?(this.makeTestFunction(),w=this.testFunction,v=x.slice().concat(x.map(t=>"val_"+t))):(w=null,m=[],v=x.slice());const k=rw(h.callbacks,h.yieldEvery);return await this.fitLoop(b,y,x,d,h.epochs,h.verbose,k,w,m,h.shuffle,v,h.initialEpoch,null,null)}finally{this.isTraining=!1,sv(n,t),sv(a,e),sv(s,t),sv(r,e),sv(c,o),sv(l,i),null!=u&&lo(u)}}async fitLoop(t,e,n,a,s,r,o,i,c,l,u,h,d,p){null==a&&(a=32),null==s&&(s=1),null==l&&(l=!0),null==h&&(h=0);let f=!1;if(null!=i&&null!=c&&(f=!0),null!=p&&(f=!0,null==d))throw new by("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const m=this.checkNumSamples(e,a,d,"steps_per_epoch");let g;null!=m&&(g=ub(0,m)),null==r&&(r=1);const{callbackList:y,history:b}=iw(o,r,s,h,m,d,a,f,u);y.setModel(this),this.history=b,await y.onTrainBegin(),this.stopTraining_=!1;for(let x=h;x<s;++x){await y.onEpochBegin(x);const s={};if(null!=d)throw new xy("stepsPerEpoch mode is not implemented yet.");{if("batch"===l)throw new xy("batch shuffling is not implemneted yet");l&&Q(g);const r=ip(g),o=nv(m,a);for(let l=0;l<o.length;++l){const u={};if(await y.onBatchBegin(l,u),co(()=>{const h=o[l][0],d=o[l][1],p=mb(r,h,d-h);u.batch=l,u.size=d-h;const m=ev(e,p),g=t(m);for(let t=0;t<n.length;++t){const e=n[t],a=g[t];u[e]=a,uo(a)}if(l===o.length-1&&f){const t=this.testLoop(i,c,a);for(let e=0;e<n.length;++e){const a=n[e],r=t[e];uo(r),s["val_"+a]=r}}}),await y.onBatchEnd(l,u),Qx(u),this.stopTraining_)break}r.dispose()}if(await y.onEpochEnd(x,s),this.stopTraining_)break}return await y.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(t,e){return Jw(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),a=n[0],s=n[1],r=this.makeTrainFunction()(a.concat(s)),o=[];for(const i of r){const t=await i.data();o.push(t[0])}return lo(r),sv(n[0],t),sv(n[1],e),Sy(o)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,a=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let r=0;r<a.length;++r)n&&!a[r].trainable||e.push({name:a[r].originalName,tensor:s[r]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=oo().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-oo().numTensors}return t}getLossIdentifiers(){let t;if("string"===typeof this.loss)t=Cy(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!==typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>Cy(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const a of e){if("string"!==typeof n[a])throw new Error("Serialization of non-string loss is not supported.");t[a]=Cy(n[a])}}return t}getMetricIdentifiers(){if("string"===typeof this.metrics||"function"===typeof this.metrics)return[Cy(Dw(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>Cy(Dw(t)));{const t={};for(const e in this.metrics)t[e]=Cy(Dw(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=cw(Vw(t.optimizer_config));let n,a;if("string"===typeof t.loss)n=Ey(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>Ey(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Ey(t.loss[e])}if(Array.isArray(t.metrics))a=t.metrics.map(t=>Ey(t));else if(null!=t.metrics){a={};for(const e in t.metrics)a[e]=Ey(t.metrics[e])}this.compile({loss:n,metrics:a,optimizer:e})}async save(t,e){if("string"===typeof t){const e=Go(t);if(0===e.length)throw new by("Cannot find any save handlers for URL '".concat(t,"'"));if(e.length>1)throw new by("Found more than one (".concat(e.length,") save handlers for ")+"URL '".concat(t,"'"));t=e[0]}if(null==t.save)throw new by("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Io(this.getNamedWeights(e)),a={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v".concat(Gw),convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){a.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await Io(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=_o([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;Ow(this.userDefinedMetadata,this.name,t),a.userDefinedMetadata=this.userDefinedMetadata}return a.weightData=n.data,a.weightSpecs=n.specs,t.save(a)}setUserDefinedMetadata(t){Ow(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}lv.className="Model",Ki(lv);class uv extends lv{}async function hv(t,e){"modelTopology"in t||(t={modelTopology:t});let n=t.modelTopology;null!=n.model_config&&(n=n.model_config);const a=cw(Vw(n),e);if(null!=t.weightsManifest){const e=await bc(t.weightsManifest,t.pathPrefix,a.weights.map(t=>t.originalName)),n={};for(const t of a.weights)n[t.originalName]=e[t.originalName];a.loadWeights(n),lo(e)}return a}async function dv(t,e){if(null==e&&(e={}),"string"===typeof t){const n=Ho(t,e);if(0===n.length)n.push(Nc(t,e));else if(n.length>1)throw new by("Found more than one (".concat(n.length,") load handlers for ")+"URL '".concat(t,"'"));t=n[0]}return async function(t,e,n){null==n&&(n={});if(null==t.load)throw new by("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const a=await t.load();let s=a.modelTopology;null!=s.model_config&&(s=s.model_config);const r=null==n.strict||n.strict,o=null!=a.weightData&&null!=a.weightSpecs&&r,i=cw(Vw(s),e,o),c=a.trainingConfig;null!=c&&i.loadTrainingConfig(c);null!=a.userDefinedMetadata&&i.setUserDefinedMetadata(a.userDefinedMetadata);if(null!=a.weightData){if(null==a.weightSpecs)throw new by("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:t,optimizerWeights:e}=function(t,e){const n=No(t,e),a={},s=[];return e.forEach(t=>{"optimizer"===t.group?s.push({name:t.name,tensor:n[t.name]}):a[t.name]=n[t.name]}),{modelWeights:a,optimizerWeights:s}}(a.weightData,a.weightSpecs);i.loadWeights(t,r),null!=i.optimizer&&e.length>0&&await i.optimizer.setWeights(e),lo(t),lo(e.map(t=>t.tensor))}return i}(t,void 0,e)}uv.className="Functional",Ki(uv);class pv extends lv{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:Hy("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new by("Negative dimension size caused by adding layer "+"".concat(t.name," with input shape [")+"".concat(t.inboundNodes[0].inputTensors[0].shape,"]"))}add(t){const e=t instanceof pv||t instanceof lv;let n;if(e){if(n=t,1!==n.outputs.length)throw new by("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new by("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new by("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=fx({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new by("A layer added to a Sequential model must not already be "+"connected somewhere else. LayersModel received layer ".concat(t.name," ")+"which has ".concat(t.inboundNodes.length," pre-existing inbound ")+"connections.");if(1!==t.inboundNodes[0].outputTensors.length)throw new by("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=dx(this.outputs[0])}this.inboundNodes=[],new lx({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:ky(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(tx(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new lv({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:console.log;this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!this.built)throw new yy("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new yy("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!this.built)throw new yy("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new yy("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e){let n,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new by("Legacy serialization format not supported yet.");n=e}else ot(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),n=e.layers,delete e.layers,s=e;const r=new t(s);if(!(r instanceof pv))throw new xy("Sequential.fromConfig called on non-Sequential input: ".concat(r));for(const o of n){const t=cw(o,void 0,a);a&&t.setFastWeightInitDuringBuild(!0),r.add(t)}return r}set stopTraining(t){if(null==this.model)throw new by("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new by("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}function fv(t){return new lv(t)}function mv(t){return new pv(t)}function gv(t){return fx(t)}function yv(t,e){ow.registerCallbackConstructor(t,e)}pv.className="Sequential",Ki(pv);class bv extends ji{getConfig(){return{}}}class xv extends bv{apply(t){return function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(1!==e)throw new xy("Support for alpha values other than 1 (".concat(e,") is not implemented ")+"yet.");return Ju(t)}(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:1)}}xv.className="elu",Ki(xv);class wv extends bv{apply(t){return Bd(t)}}wv.className="selu",Ki(wv);class vv extends bv{apply(t){return Rd(t)}}vv.className="relu",Ki(vv);class kv extends bv{apply(t){return co(()=>Jh(6,Rd(t)))}}kv.className="relu6",Ki(kv);class Iv extends bv{apply(t){return t}}Iv.className="linear",Ki(Iv);class Nv extends bv{apply(t){return hu(t)}}Nv.className="sigmoid",Ki(Nv);class Sv extends bv{apply(t){return function(t){return co(()=>{const e=Ei(.5,Fi(.2,t));return Su(e,0,1)})}(t)}}Sv.className="hardSigmoid",Ki(Sv);class Tv extends bv{apply(t){return _h(t)}}Tv.className="softplus",Ki(Tv);class Cv extends bv{apply(t){return function(t){return co(()=>Ri(t,Ei(nc(t),1)))}(t)}}Cv.className="softsign",Ki(Cv);class Ev extends bv{apply(t){return pu(t)}}Ev.className="tanh",Ki(Ev);class Av extends bv{apply(t){return Yd(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1)}}Av.className="softmax",Ki(Av);class Rv extends bv{apply(t){return Mh(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1)}}Rv.className="logSoftmax",Ki(Rv);class Fv extends bv{apply(t){return co(()=>co(()=>{const e=Math.sqrt(2),n=Fi(.5,Ei(1,$u(Ri(t,e))));return Fi(t,n)}))}}Fv.className="gelu",Ki(Fv);class Dv extends bv{apply(t){return co(()=>Fi(.5,Fi(t,Ei(1,pu(Fi(Di(Ri(2,Math.PI)),Ei(t,Fi(.044715,$i(t,3)))))))))}}Dv.className="gelu_new",Ki(Dv);class _v extends bv{apply(t){return co(()=>Fi(t,pu(_h(t))))}}_v.className="mish",Ki(_v);class Ov extends bv{apply(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return co(()=>Fi(hu(Fi(t,e)),t))}}function Mv(t){return t.getClassName()}function Lv(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Dy(t,qi.getMap().classNameMap,e,"activation")}function zv(t){if(null==t){const t={className:"linear",config:{}};return Lv(t)}if("string"===typeof t){const e={};return e.className=t,e.config={},Lv(e)}return t instanceof bv?t:Lv(t)}function Pv(t){if(null!=t&&"object"!==typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an "+"object, but received: ".concat(t))}Ov.className="swish",Ki(Ov);class Bv extends ji{}class Wv extends Bv{constructor(t){super(),Pv(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return co(()=>{let e=Xh([1]);return this.hasL1&&(e=Ei(e,uh(Fi(this.l1,nc(t))))),this.hasL2&&(e=Ei(e,uh(Fi(this.l2,Nb(t))))),iu(e,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}Wv.className="L1L2",Ki(Wv);const Vv={l1l2:"L1L2"};function Uv(t){return Ry(t)}function Gv(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Dy(t,qi.getMap().classNameMap,e,"regularizer")}function Hv(t){if(null==t)return null;if("string"===typeof t){return Gv({className:t in Vv?Vv[t]:t,config:{}})}return t instanceof Bv?t:Gv(t)}class jv extends hx{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=$b(t);let n=Rd(t);return null!=this.maxValue&&(n=Su(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}jv.className="ReLU",Ki(jv);class qv extends hx{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=$b(t);return Th(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}qv.className="LeakyReLU",Ki(qv);class Kv extends hx{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Zb(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Hv(t.alphaRegularizer),this.alphaConstraint=Fx(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!==typeof t.sharedAxes)throw new by("Expected sharedAxes to be a number or an array of numbers, "+"but got ".concat(t.sharedAxes));this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=tx(t)).slice(1);if(null!=this.sharedAxes)for(const a of this.sharedAxes)e[a-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let a=1;a<t.length;++a)n[a]=t[a];this.inputSpec=[new ox({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=$b(t),pd(t,this.alpha.read())}getConfig(){const t={alphaInitializer:Yb(this.alphaInitializer),alphaRegularizer:Uv(this.alphaRegularizer),alphaConstraint:Ax(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}Kv.className="PReLU",Ki(Kv);class Xv extends hx{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new xy("Non-default alpha value (".concat(t.alpha,") is not supported by the ")+"ELU layer yet.");this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=$b(t);return Ju(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Xv.className="ELU",Ki(Xv);class Yv extends hx{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=$b(t);return Fi(n,Si(vh(n,this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}Yv.className="ThresholdedReLU",Ki(Yv);class Zv extends hx{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Av).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){return co(()=>{let n=$b(t);const a=e.mask;if(null!=a){const t=Fi(tc(Yh(n.shape),Si(a,n.dtype)),Ui(-1e9));n=Ei(n,t)}return this.axis instanceof Array?this.axis.length>1?fh(tc(n,Lh(n,this.axis,!0))):this.softmax(n,this.axis[0]):this.softmax(n,this.axis)})}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Jv(t,e,n){if("number"===typeof t)return ky(t,e);if(t.length!==e)throw new by("The ".concat(n," argument must be an integer or tuple of ").concat(e," integers.")+" Received: ".concat(t.length," elements."));for(let a=0;a<e;++a){const s=t[a];if(!ob(s))throw new by("The ".concat(n," argument must be an integer or tuple of ").concat(e)+" integers. Received: ".concat(JSON.stringify(t)," including a")+" non-integer number ".concat(s))}return t}function Qv(t,e,n,a){if(null==t)return t;let s;return s="same"===n?t:t-(e+(e-1)*((arguments.length>4&&void 0!==arguments[4]?arguments[4]:1)-1))+1,Math.floor((s+a-1)/a)}function $v(t,e,n,a){if(null==t)return null;if("valid"===a)t=t*e+lb([n-e,0]);else{if("same"!==a)throw new by("Unsupport padding mode: ".concat(a,"."));t*=e}return t}function tk(t,e){return co(()=>(Jy(e),"channelsFirst"===e?zc(t,[0,2,3,1]):t))}function ek(t,e){return co(()=>(Jy(e),"channelsFirst"===e?zc(t,[0,2,3,4,1]):t))}function nk(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"valid",r=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:1;return co(()=>{if(null==r&&(r="channelsLast"),Jy(r),3!==t.shape.length)throw new by("The input of a conv1dWithBias operation should be 3, but is "+"".concat(t.shape.length," instead."));if(3!==e.shape.length)throw new by("The kernel for a conv1dWithBias operation should be 3, but is "+"".concat(e.shape.length," instead"));if(null!=n&&1!==n.shape.length)throw new by("The bias for a conv1dWithBias operation should be 1, but is "+"".concat(n.shape.length," instead"));if("channelsFirst"===r&&(t=zc(t,[0,2,1])),"causal"===s)throw new xy("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=Fu(t,e,a,"same"===s?"same":"valid","NWC",o);return null!=n&&(i=Tb(i,n)),i})}function ak(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[1,1],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"valid",r=arguments.length>5?arguments[5]:void 0,o=arguments.length>6?arguments[6]:void 0,i=arguments.length>7&&void 0!==arguments[7]?arguments[7]:null;return co(()=>{if(null==r&&(r="channelsLast"),Jy(r),3!==t.rank&&4!==t.rank)throw new by("conv2dWithBiasActivation expects input to be of rank 3 or 4, "+"but received ".concat(t.rank,"."));if(3!==e.rank&&4!==e.rank)throw new by("conv2dWithBiasActivation expects kernel to be of rank 3 or 4, "+"but received ".concat(t.rank,"."));let c=tk(t,r);if("causal"===s)throw new xy("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return c=Lp({x:c,filter:e,strides:a,pad:"same"===s?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===r&&(c=zc(c,[0,3,1,2])),c})}function sk(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[1,1,1],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"valid",r=arguments.length>5?arguments[5]:void 0,o=arguments.length>6?arguments[6]:void 0;return co(()=>{if(null==r&&(r="channelsLast"),Jy(r),4!==t.rank&&5!==t.rank)throw new by("conv3dWithBias expects input to be of rank 4 or 5, but received "+"".concat(t.rank,"."));if(4!==e.rank&&5!==e.rank)throw new by("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+"".concat(t.rank,"."));let i=ek(t,r);if("causal"===s)throw new xy("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=Ou(i,e,a,"same"===s?"same":"valid","NDHWC",o),null!=n&&(i=Tb(i,n)),"channelsFirst"===r&&(i=zc(i,[0,4,1,2,3])),i})}Zv.className="Softmax",Ki(Zv);class rk extends hx{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",rk.verifyArgs(e),this.rank=t,Py(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new xy("Convolution layer for rank other than 1, 2, or 3 (".concat(this.rank,") is ")+"not implemented yet.");if(this.kernelSize=Jv(e.kernelSize,t,"kernelSize"),this.strides=Jv(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Qy(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Jy(this.dataFormat),this.activation=zv(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Zb(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Fx(e.biasConstraint),this.biasRegularizer=Hv(e.biasRegularizer),this.activityRegularizer=Hv(e.activityRegularizer),this.dilationRate=Jv(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new by("dilationRate must be a number or an array of a single number for 1D convolution, but received "+"".concat(JSON.stringify(this.dilationRate)));if(2===this.rank){if("number"===typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new by("dilationRate must be a number or array of two numbers for 2D "+"convolution, but received ".concat(JSON.stringify(this.dilationRate)))}else if(3===this.rank)if("number"===typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new by("dilationRate must be a number or array of three numbers for 3D "+"convolution, but received ".concat(JSON.stringify(this.dilationRate)))}static verifyArgs(t){if(Iy("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!==typeof t.kernelSize&&!zy(t.kernelSize,"number",1,3))throw new by("BaseConv expects config.kernelSize to be number or number[] with "+"length 1, 2, or 3, but received ".concat(JSON.stringify(t.kernelSize),"."))}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Mv(this.activation),useBias:this.useBias,biasInitializer:Yb(this.biasInitializer),biasRegularizer:Uv(this.biasRegularizer),activityRegularizer:Uv(this.activityRegularizer),biasConstraint:Ax(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class ok extends rk{constructor(t,e){super(t,e),this.kernel=null,ok.verifyArgs(e),this.filters=e.filters,Py(this.filters,"filters"),this.kernelInitializer=Zb(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Fx(e.kernelConstraint),this.kernelRegularizer=Hv(e.kernelRegularizer)}build(t){t=tx(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new by("The channel dimension of the input should be defined. "+"Found ".concat(t[e]));const n=t[e],a=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return co(()=>{let e;t=$b(t);const n=null==this.bias?null:this.bias.read(),a=Wy(this.activation.getClassName());if(null!=a&&2===this.rank)e=ak(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,a);else{if(1===this.rank)e=nk(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=ak(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new xy("convolutions greater than 3D are not implemented yet.");e=sk(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=tx(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let s=0;s<n.length;++s){const t=Qv(n[s],this.kernelSize[s],this.padding,this.strides[s],"number"===typeof this.dilationRate?this.dilationRate:this.dilationRate[s]);e.push(t)}let a=[t[0]];return"channelsLast"===this.dataFormat?(a=a.concat(e),a.push(this.filters)):(a.push(this.filters),a=a.concat(e)),a}getConfig(){const t={filters:this.filters,kernelInitializer:Yb(this.kernelInitializer),kernelRegularizer:Uv(this.kernelRegularizer),kernelConstraint:Ax(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!==typeof t.filters||t.filters<1)throw new by("Convolution layer expected config.filters to be a 'number' > 0 "+"but got ".concat(JSON.stringify(t.filters)))}}class ik extends ok{constructor(t){super(2,t),ik.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!==typeof t.kernelSize&&!zy(t.kernelSize,"number",1,2))throw new by("Conv2D expects config.kernelSize to be number or number[] with "+"length 1 or 2, but received ".concat(JSON.stringify(t.kernelSize),"."))}}ik.className="Conv2D",Ki(ik);class ck extends ok{constructor(t){super(3,t),ck.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!==typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new by("Conv3D expects config.kernelSize to be number or"+" [number, number, number], but received ".concat(JSON.stringify(t.kernelSize),"."))}}ck.className="Conv3D",Ki(ck);class lk extends ik{constructor(t){if(super(t),this.inputSpec=[new ox({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new by("Conv2DTranspose currently supports only padding modes 'same' "+"and 'valid', but received padding mode ".concat(this.padding))}build(t){if(4!==(t=tx(t)).length)throw new by("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new by("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],a=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ox({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return co(()=>{let e=$b(t);if(4!==e.shape.length)throw new by("Conv2DTranspose.call() expects input tensor to be rank-4, but "+"received a tensor of rank-".concat(e.shape.length));const n=e.shape,a=n[0];let s,r;"channelsFirst"===this.dataFormat?(s=2,r=3):(s=1,r=2);const o=n[s],i=n[r],c=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],h=this.strides[1],d=[a,$v(o,u,c,this.padding),$v(i,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=zc(e,[0,2,3,1]));let p=_u(e,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=zc(p,[0,3,1,2])),null!=this.bias&&(p=Tb(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p})}computeOutputShape(t){const e=(t=tx(t)).slice();let n,a,s;"channelsFirst"===this.dataFormat?(n=1,a=2,s=3):(n=3,a=1,s=2);const r=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],c=this.strides[1];return e[n]=this.filters,e[a]=$v(e[a],i,r,this.padding),e[s]=$v(e[s],c,o,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}lk.className="Conv2DTranspose",Ki(lk);class uk extends ck{constructor(t){if(super(t),this.inputSpec=[new ox({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new by("Conv3DTranspose currently supports only padding modes 'same' "+"and 'valid', but received padding mode ".concat(this.padding))}build(t){if(5!==(t=tx(t)).length)throw new by("Input should have rank 5; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new by("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],a=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",a,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ox({ndim:5,axes:{[e]:n}})],this.built=!0}call(t,e){return co(()=>{let e=$b(t);if(5!==e.shape.length)throw new by("Conv3DTranspose.call() expects input tensor to be rank-4, but "+"received a tensor of rank-".concat(e.shape.length));const n=e.shape,a=n[0];let s,r,o;"channelsFirst"===this.dataFormat?(o=2,s=3,r=4):(o=1,s=2,r=3);const i=n[o],c=n[s],l=n[r],u=this.kernelSize[0],h=this.kernelSize[1],d=this.kernelSize[2],p=this.strides[0],f=this.strides[1],m=this.strides[2],g=[a,$v(i,p,u,this.padding),$v(c,f,h,this.padding),$v(l,m,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=zc(e,[0,2,3,4,1]));let y=Lu(e,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=zc(y,[0,4,1,2,3])),null!==this.bias&&(y=Tb(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y})}computeOutputShape(t){const e=(t=tx(t)).slice();let n,a,s,r;"channelsFirst"===this.dataFormat?(n=1,a=2,s=3,r=4):(n=4,a=1,s=2,r=3);const o=this.kernelSize[0],i=this.kernelSize[1],c=this.kernelSize[2],l=this.strides[0],u=this.strides[1],h=this.strides[2];return e[n]=this.filters,e[a]=$v(e[a],l,o,this.padding),e[s]=$v(e[s],u,i,this.padding),e[r]=$v(e[r],h,c,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}uk.className="Conv3DTranspose",Ki(uk);class hk extends ok{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new by("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new by("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new by("SeparableConv".concat(this.rank,"D supports only padding modes: ")+"'same' and 'valid', but received ".concat(JSON.stringify(e.padding)));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Zb(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Hv(e.depthwiseRegularizer),this.depthwiseConstraint=Fx(e.depthwiseConstraint),this.pointwiseInitializer=Zb(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Hv(e.pointwiseRegularizer),this.pointwiseConstraint=Fx(e.pointwiseConstraint)}build(t){if((t=tx(t)).length<this.rank+2)throw new by("Inputs to SeparableConv".concat(this.rank,"D should have rank ")+"".concat(this.rank+2,", but received input shape: ")+"".concat(JSON.stringify(t)));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new by("The channel dimension of the inputs should be defined, "+"but found ".concat(JSON.stringify(t[e])));const n=t[e],a=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let o=0;o<this.rank;++o)s.push(1);s.push(n*this.depthMultiplier,this.filters);const r=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",a,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,r,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,r,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,r,this.biasConstraint):this.bias=null,this.inputSpec=[new ox({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return co(()=>{let e;if(t=$b(t),1===this.rank)throw new xy("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=zc(t,[0,2,3,1])),e=Wd(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Tb(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=zc(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=Yb(this.depthwiseInitializer),t.pointwiseInitializer=Yb(this.pointwiseInitializer),t.depthwiseRegularizer=Uv(this.depthwiseRegularizer),t.pointwiseRegularizer=Uv(this.pointwiseRegularizer),t.depthwiseConstraint=Ax(this.depthwiseConstraint),t.pointwiseConstraint=Ax(this.pointwiseConstraint),t}}hk.className="SeparableConv";class dk extends hk{constructor(t){super(2,t)}}dk.className="SeparableConv2D",Ki(dk);class pk extends ok{constructor(t){super(1,t),pk.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!==typeof t.kernelSize&&!zy(t.kernelSize,"number",1,1))throw new by("Conv1D expects config.kernelSize to be number or number[] with "+"length 1, but received ".concat(JSON.stringify(t.kernelSize),"."))}}pk.className="Conv1D",Ki(pk);class fk extends hx{constructor(t){super(t),"number"===typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"===typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return co(()=>{if(t=$b(t),"channelsLast"===this.dataFormat){const e=yb(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return yb(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=yb(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return yb(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}fk.className="Cropping2D",Ki(fk);class mk extends hx{constructor(t){var e;super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Jy(this.dataFormat),this.interpolation=null==t.interpolation?"nearest":t.interpolation,e=this.interpolation,Ly(qy,"InterpolationFormat",e)}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return co(()=>{let e=$b(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=zc(e,[0,2,3,1]);const t=this.size[0]*n[2],a=this.size[1]*n[3],s="nearest"===this.interpolation?Vf.resizeNearestNeighbor(e,[t,a]):Vf.resizeBilinear(e,[t,a]);return zc(s,[0,3,1,2])}{const t=this.size[0]*n[1],a=this.size[1]*n[2];return"nearest"===this.interpolation?Vf.resizeNearestNeighbor(e,[t,a]):Vf.resizeBilinear(e,[t,a])}})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},e=super.getConfig();return Object.assign(t,e),t}}mk.className="UpSampling2D",Ki(mk);class gk extends rk{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Zb(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Fx(t.depthwiseConstraint),this.depthwiseRegularizer=Hv(t.depthwiseRegularizer)}build(t){if((t=tx(t)).length<4)throw new by("Inputs to DepthwiseConv2D should have rank 4. "+"Received input shape: ".concat(JSON.stringify(t),"."));const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new by("The channel dimension of the inputs to DepthwiseConv2D should "+"be defined, but is not (".concat(t[e],")."));const n=t[e],a=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",a,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return co(()=>{let e=function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[1,1],a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"valid",s=arguments.length>4?arguments[4]:void 0,r=arguments.length>5?arguments[5]:void 0;return co(()=>{null==s&&(s="channelsLast"),Jy(s);let o=tk(t,s);if(4!==t.rank)throw new by("Input for depthwiseConv2d is required to be 4-D, but is instead "+"".concat(t.rank,"-D"));if(4!==e.rank)throw new by("depthwiseKernel is required to be 4-D, but is instead "+"".concat(e.rank,"-D"));return o=Gu(o,e,n,"same"===a?"same":"valid","NHWC",r),"channelsFirst"===s&&(o=zc(o,[0,3,1,2])),o})}(t=$b(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Tb(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=tx(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],a="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=Qv(e,this.kernelSize[0],this.padding,this.strides[0]),r=Qv(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],a,s,r]:[t[0],s,r,a]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=Yb(this.depthwiseInitializer),t.depthwiseRegularizer=Uv(this.depthwiseRegularizer),t.depthwiseConstraint=Ax(this.depthwiseRegularizer),t}}function yk(t,e,n,a){if(Array.isArray(t)){if(null!=e||null!=n)throw new by("When inputs is an array, neither initialState or constants should be provided");null!=a&&(n=t.slice(t.length-a,t.length),t=t.slice(0,t.length-a)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function bk(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4?arguments[4]:void 0,r=arguments.length>5?arguments[5]:void 0,o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],i=arguments.length>7&&void 0!==arguments[7]&&arguments[7];return co(()=>{const c=e.shape.length;if(c<3)throw new by("Input should be at least 3D, but is ".concat(c,"D."));const l=[1,0].concat(ub(2,c));if(e=zc(e,l),null!=r)throw new xy("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&(s=Si(Si(s,"bool"),"float32"),s.rank===c-1&&(s=mh(s,-1)),s=zc(s,l)),a&&(e=Dd(e,0),null!=s&&(s=Dd(s,0)));const u=[];let h,d=n;const p=e.shape[0],f=yp(e);let m,g;null!=s&&(m=yp(s));for(let e=0;e<p;++e){const n=f[e],a=co(()=>t(n,d));if(null==s)h=a[0],d=a[1];else{const t=co(()=>{const t=m[e],n=tc(sd(t),t);return{output:Ei(Fi(a[0],t),Fi(d[0],n)),newStates:d.map((e,s)=>Ei(Fi(a[1][s],t),Fi(e,n)))}});h=t.output,d=t.newStates}i&&u.push(h)}if(i){g=ap(u,1)}return[h,g,d]})}gk.className="DepthwiseConv2D",Ki(gk);class xk extends hx{constructor(t){let e;if(super(t),null==t.cell)throw new by("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new Ck({cells:t.cell}):t.cell,null==e.stateSize)throw new by("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new ox({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return ub(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null)}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){Jb(t)&&(t=t[0]);let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let a;if(a=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const a of e)n.push([t[0],a]);return[a].concat(n)}return a}computeMask(t,e){return co(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new xy("Constants support is not implemented in RNN yet.");Jb(t)&&(t=t[0]);const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new ox({shape:[e,null,...n]});const a=[t[0]].concat(t.slice(2));let s;if(this.cell.build(a),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!dt(this.stateSpec.map(t=>t.shape[t.shape.length-1]),s))throw new by("An initialState was passed that is not compatible with "+"cell.stateSize. Received stateSpec=".concat(this.stateSpec,"; ")+"However cell.stateSize is ".concat(this.cell.stateSize))}else this.stateSpec=s.map(t=>new ox({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];co(()=>{if(!this.stateful)throw new gy("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new by("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>Xh([n,t])):this.states_=[Xh([n,this.cell.stateSize])];else if(null==t)lo(this.states_),null!=this.keptStates&&(lo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>Xh([n,t])):this.states_[0]=Xh([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new by("Layer ".concat(this.name," expects ").concat(this.states_.length," state(s), ")+"but it received ".concat(t.length," state value(s). Input ")+"received: ".concat(t));!0===e?this.keptStates.push(this.states_.slice()):lo(this.states_);for(let e=0;e<this.states_.length;++e){const a=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,r=[n,s];if(!dt(a.shape,r))throw new by("State ".concat(e," is incompatible with layer ").concat(this.name,": ")+"expected shape=".concat(r,", received shape=").concat(a.shape));this.states_[e]=a}}this.states_=this.states_.map(t=>uo(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,a=null==e?null:e.constants;null==e&&(e={});const s=yk(t,n,a,this.numConstants);t=s.inputs,n=s.initialState,a=s.constants;let r=[],o=[];if(null!=n){e.initialState=n,r=r.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new ox({shape:t.shape}));o=o.concat(this.stateSpec)}null!=a&&(e.constants=a,r=r.concat(a),this.numConstants=a.length);if(r[0]instanceof ix){const n=[t].concat(r),a=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=a;const i=super.apply(n,e);return this.inputSpec=s,i}return super.apply(t,e)}call(t,e){return co(()=>{const n=null==e?null:e.mask,a=null==e?null:e.training;let s=null==e?null:e.initialState;t=$b(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const r=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==r)throw new by("RNN Layer has ".concat(r," state(s) but was passed ")+"".concat(s.length," initial state(s)."));this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:a},i=bk((t,e)=>{const n=this.cell.call([t].concat(e),o);return[n[0],n.slice(1)]},t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),c=i[0],l=i[1],u=i[2];this.stateful&&this.resetStates(u,a);const h=this.returnSequences?l:c;return this.returnState?[h].concat(u):h})}getInitialState(t){return co(()=>{let e=Xh(t.shape);return e=uh(e,[1,2]),e=fb(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?wb(e,[1,t]):e):this.cell.stateSize>1?[wb(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===xk.className&&(e.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),t),e)}static fromConfig(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const a=cw(e.cell,n);return new t(Object.assign(e,{cell:a}))}}xk.className="RNN",Ki(xk);class wk extends hx{}class vk extends wk{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Py(this.units,"units"),this.activation=zv(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Zb(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zb(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zb(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Hv(t.kernelRegularizer),this.recurrentRegularizer=Hv(t.recurrentRegularizer),this.biasRegularizer=Hv(t.biasRegularizer),this.kernelConstraint=Fx(t.kernelConstraint),this.recurrentConstraint=Fx(t.recurrentConstraint),this.biasConstraint=Fx(t.biasConstraint),this.dropout=cb([1,lb([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=cb([1,lb([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=tx(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return co(()=>{if(2!==t.length)throw new by("SimpleRNNCell expects 2 input Tensors, got ".concat(t.length,"."));let n=t[1];t=t[0];const a=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ek({ones:()=>sd(t),rate:this.dropout,training:a,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ek({ones:()=>sd(n),rate:this.recurrentDropout,training:a,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,o=this.recurrentDropoutMask;s=kb(null!=r?Fi(t,r):t,this.kernel.read()),null!=this.bias&&(s=Tb(s,this.bias.read())),null!=o&&(n=Fi(n,o));let i=Ei(s,kb(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]})}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Mv(this.activation),useBias:this.useBias,kernelInitializer:Yb(this.kernelInitializer),recurrentInitializer:Yb(this.recurrentInitializer),biasInitializer:Yb(this.biasInitializer),kernelRegularizer:Uv(this.kernelRegularizer),recurrentRegularizer:Uv(this.recurrentRegularizer),biasRegularizer:Uv(this.biasRegularizer),activityRegularizer:Uv(this.activityRegularizer),kernelConstraint:Ax(this.kernelConstraint),recurrentConstraint:Ax(this.recurrentConstraint),biasConstraint:Ax(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},t),e)}}vk.className="SimpleRNNCell",Ki(vk);class kk extends xk{constructor(t){t.cell=new vk(t),super(t)}call(t,e){return co(()=>{null!=this.cell.dropoutMask&&(lo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(lo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,a=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:a,initialState:s})})}static fromConfig(t,e){return new t(e)}}kk.className="SimpleRNN",Ki(kk);class Ik extends wk{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new by("GRUCell does not support reset_after parameter set to true.");this.units=t.units,Py(this.units,"units"),this.activation=zv(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=zv(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Zb(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zb(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zb(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Hv(t.kernelRegularizer),this.recurrentRegularizer=Hv(t.recurrentRegularizer),this.biasRegularizer=Hv(t.biasRegularizer),this.kernelConstraint=Fx(t.kernelConstraint),this.recurrentConstraint=Fx(t.recurrentConstraint),this.biasConstraint=Fx(t.biasConstraint),this.dropout=cb([1,lb([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=cb([1,lb([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=tx(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return co(()=>{if(2!==t.length)throw new by("GRUCell expects 2 input Tensors (inputs, h, c), got "+"".concat(t.length,"."));const n=null!=e.training&&e.training;let a=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ek({ones:()=>sd(t),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ek({ones:()=>sd(a),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const s=this.dropoutMask,r=this.recurrentDropoutMask;let o,i,c;0<this.dropout&&this.dropout<1&&(t=Fi(t,s[0]));let l=kb(t,this.kernel.read());this.useBias&&(l=Tb(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(a=Fi(a,r[0]));const u=this.recurrentKernel.read(),[h,d]=$d(u,[2*this.units,this.units],u.rank-1),p=kb(a,h),[f,m,g]=$d(l,3,l.rank-1),[y,b]=$d(p,2,p.rank-1);o=this.recurrentActivation.apply(Ei(f,y)),i=this.recurrentActivation.apply(Ei(m,b));const x=kb(Fi(i,a),d);c=this.activation.apply(Ei(g,x));const w=Ei(Fi(o,a),Fi(Ei(1,Mc(o)),c));return[w,w]})}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Mv(this.activation),recurrentActivation:Mv(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Yb(this.kernelInitializer),recurrentInitializer:Yb(this.recurrentInitializer),biasInitializer:Yb(this.biasInitializer),kernelRegularizer:Uv(this.kernelRegularizer),recurrentRegularizer:Uv(this.recurrentRegularizer),biasRegularizer:Uv(this.biasRegularizer),activityRegularizer:Uv(this.activityRegularizer),kernelConstraint:Ax(this.kernelConstraint),recurrentConstraint:Ax(this.recurrentConstraint),biasConstraint:Ax(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},t),e)}}Ik.className="GRUCell",Ki(Ik);class Nk extends xk{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Ik(t),super(t)}call(t,e){return co(()=>{null!=this.cell.dropoutMask&&(lo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(lo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,a=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:a,initialState:s})})}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Nk.className="GRU",Ki(Nk);class Sk extends wk{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Py(this.units,"units"),this.activation=zv(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=zv(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Zb(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Zb(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Zb(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Hv(t.kernelRegularizer),this.recurrentRegularizer=Hv(t.recurrentRegularizer),this.biasRegularizer=Hv(t.biasRegularizer),this.kernelConstraint=Fx(t.kernelConstraint),this.recurrentConstraint=Fx(t.recurrentConstraint),this.biasConstraint=Fx(t.biasConstraint),this.dropout=cb([1,lb([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=cb([1,lb([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=tx(t))[t.length-1];let a;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;a=new((e=class extends Fb{apply(e,a){const s=t.apply([n]),r=(new _b).apply([n]),o=t.apply([2*n]);return xb(xb(s,r),o)}}).className="CustomInit",e)}else a=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,a,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return co(()=>{const n=null!=e.training&&e.training;if(3!==t.length)throw new by("LSTMCell expects 3 input Tensors (inputs, h, c), got "+"".concat(t.length,"."));let a=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ek({ones:()=>sd(t),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ek({ones:()=>sd(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,o=this.recurrentDropoutMask;let i,c,l,u;0<this.dropout&&this.dropout<1&&(t=Fi(t,r[0]));let h=kb(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(a=Fi(a,o[0])),h=Ei(h,kb(a,this.recurrentKernel.read())),this.useBias&&(h=Tb(h,this.bias.read()));const[d,p,f,m]=$d(h,4,h.rank-1);i=this.recurrentActivation.apply(d),c=this.recurrentActivation.apply(p),l=Ei(Fi(c,s),Fi(i,this.activation.apply(f))),u=this.recurrentActivation.apply(m);const g=Fi(u,this.activation.apply(l));return[g,g,l]})}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Mv(this.activation),recurrentActivation:Mv(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Yb(this.kernelInitializer),recurrentInitializer:Yb(this.recurrentInitializer),biasInitializer:Yb(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Uv(this.kernelRegularizer),recurrentRegularizer:Uv(this.recurrentRegularizer),biasRegularizer:Uv(this.biasRegularizer),activityRegularizer:Uv(this.activityRegularizer),kernelConstraint:Ax(this.kernelConstraint),recurrentConstraint:Ax(this.recurrentConstraint),biasConstraint:Ax(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},t),e)}}Sk.className="LSTMCell",Ki(Sk);class Tk extends xk{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Sk(t),super(t)}call(t,e){return co(()=>{null!=this.cell.dropoutMask&&(lo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(lo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,a=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:a,initialState:s})})}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Tk.className="LSTM",Ki(Tk);class Ck extends wk{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return co(()=>{let n=t.slice(1);const a=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?a.push(n.splice(0,t.stateSize.length)):a.push(n.splice(0,1));a.reverse();const s=[];let r;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=a[o],r=0===o?[t[0]].concat(n):[r[0]].concat(n),r=i.call(r,e),s.push(r.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[r[0]].concat(n)})}build(t){let e;Jb(t)&&(t=t[0]),this.cells.forEach((n,a)=>{eb("RNNCell_".concat(a),()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=super.getConfig(),e={cells:this.cells.map(t=>({className:t.getClassName(),config:t.getConfig()}))};return Object.assign(Object.assign({},t),e)}static fromConfig(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const a=[];for(const s of e.cells)a.push(cw(s,n));return new t({cells:a})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return sx(t)}setWeights(t){const e=[];for(const n of this.cells){const a=n.weights.length,s=t.splice(a);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}rx(e)}}function Ek(t){const{ones:e,rate:n,training:a=!1,count:s=1,dropoutFunc:r}=t,o=()=>null!=r?r(e(),n):Cb(e(),n),i=()=>Eb(o,e,a);if(!s||s<=1)return uo(i().clone());return Array(s).fill(void 0).map(i).map(t=>uo(t.clone()))}Ck.className="StackedRNNCells",Ki(Ck);var Ak=function(t,e){var n={};for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&e.indexOf(a)<0&&(n[a]=t[a]);if(null!=t&&"function"===typeof Object.getOwnPropertySymbols){var s=0;for(a=Object.getOwnPropertySymbols(t);s<a.length;s++)e.indexOf(a[s])<0&&Object.prototype.propertyIsEnumerable.call(t,a[s])&&(n[a[s]]=t[a[s]])}return n};class Rk extends xk{constructor(t){if(t.unroll)throw new xy("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new xy("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new ox({ndim:5})]}call(t,e){return co(()=>{if(null!=this.cell.dropoutMask&&(lo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(lo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new by("ConvRNN2D cell does not support constants");const n=null==e?null:e.mask,a=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:a,initialState:s})})}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return co(()=>{const{stateSize:e}=this.cell,n=t.shape,a=this.computeSingleOutputShape(n),s=Xh([a[0],...a.slice(2)]);return Array.isArray(e)?Array(e.length).fill(s):[s]})}resetStates(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];co(()=>{if(!this.stateful)throw new gy("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,a=this.computeSingleOutputShape(n),s=[a[0],...a.slice(2)];if(null==n[0])throw new by("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Xh(s)):this.states_=[Xh(s)];else if(null==t)lo(this.states_),null!=this.keptStates&&(lo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Xh(s)):this.states_[0]=Xh(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new by("Layer ".concat(this.name," expects ").concat(this.states_.length," state(s), ")+"but it received ".concat(t.length," state value(s). Input ")+"received: ".concat(t));e?this.keptStates.push(this.states_.slice()):lo(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],a=s;if(!dt(n.shape,a))throw new by("State ".concat(e," is incompatible with layer ").concat(this.name,": ")+"expected shape=".concat(a,", received shape=").concat(n.shape));this.states_[e]=n}}this.states_=this.states_.map(t=>uo(t.clone()))})}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:a,padding:s,strides:r,dilationRate:o}=this.cell,i="channelsFirst"===e,c=t[i?3:2],l=t[i?4:3],u=Qv(c,a[0],s,r[0],o[0]),h=Qv(l,a[1],s,r[1],o[1]);return[...t.slice(0,2),...i?[n,u,h]:[u,h,n]]}}Rk.className="ConvRNN2D";class Fk extends Sk{constructor(t){const{filters:e,kernelSize:n,strides:a,padding:s,dataFormat:r,dilationRate:o}=t;super(Object.assign(Object.assign({},t),{units:e})),this.filters=e,Py(this.filters,"filters"),this.kernelSize=Jv(n,2,"kernelSize"),this.kernelSize.forEach(t=>Py(t,"kernelSize")),this.strides=Jv(a||1,2,"strides"),this.strides.forEach(t=>Py(t,"strides")),this.padding=s||"valid",Qy(this.padding),this.dataFormat=r||"channelsLast",Jy(this.dataFormat),this.dilationRate=Jv(o||1,2,"dilationRate"),this.dilationRate.forEach(t=>Py(t,"dilationRate"))}build(t){var e;t=tx(t);const n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new by("The channel dimension of the input should be defined. "+"Found ".concat(t[n]));const a=t[n],s=this.kernelSize.concat([a,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const r=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",r,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,a=this.filters;t=new((e=class extends Fb{apply(t,e){return bb([n.apply([a]),Yh([a]),n.apply([2*a])])}}).className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return co(()=>{if(3!==t.length)throw new by("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+"".concat(t.length,"."));const n=e.training||!1,a=t[0],s=t[1],r=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Ek({ones:()=>sd(a),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(t,e,n)=>e&&e[n]?Fi(e[n],t):t;let c=i(a,o,0),l=i(a,o,1),u=i(a,o,2),h=i(a,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Ek({ones:()=>sd(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const d=this.recurrentDropoutMask;let p=i(s,d,0),f=i(s,d,1),m=i(s,d,2),g=i(s,d,3);const[y,b,x,w]=$d(this.kernel.read(),4,3),[v,k,I,N]=this.useBias?$d(this.bias.read(),4):[null,null,null,null];c=this.inputConv(c,y,v,this.padding),l=this.inputConv(l,b,k,this.padding),u=this.inputConv(u,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,T,C,E]=$d(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,S),f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,E);const A=this.recurrentActivation.apply(Ei(c,p)),R=this.recurrentActivation.apply(Ei(l,f)),F=Ei(Fi(R,r),Fi(A,this.activation.apply(Ei(u,m)))),D=Fi(this.recurrentActivation.apply(Ei(h,g)),this.activation.apply(F));return[D,D,F]})}getConfig(){const t=super.getConfig(),{units:e}=t,n=Ak(t,["units"]),a={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),a)}inputConv(t,e,n,a){const s=Ru(t,e,this.strides,a||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Tb(s,n,this.dataFormat):s}recurrentConv(t,e){return Ru(t,e,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Fk.className="ConvLSTM2DCell",Ki(Fk);class Dk extends Rk{constructor(t){const e=new Fk(t);super(Object.assign(Object.assign({},t),{cell:e}))}static fromConfig(t,e){return new t(e)}}Dk.className="ConvLSTM2D",Ki(Dk);class _k extends hx{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let a=0;a<this.noiseShape.length;++a)n.push(null==this.noiseShape[a]?e[a]:this.noiseShape[a]);return n}call(t,e){return co(()=>{this.invokeCallHook(t,e);const n=$b(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,a=this.getNoiseShape(n);return Eb(()=>Cb(n,this.rate,a,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}_k.className="Dropout",Ki(_k);class Ok extends _k{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Ok.className="SpatialDropout1D",Ki(Ok);class Mk extends hx{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,Py(this.units,"units"),this.activation=zv(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=Zb(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Zb(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Fx(t.kernelConstraint),this.biasConstraint=Fx(t.biasConstraint),this.kernelRegularizer=Hv(t.kernelRegularizer),this.biasRegularizer=Hv(t.biasRegularizer),this.activityRegularizer=Hv(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=tx(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=tx(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return co(()=>{this.invokeCallHook(t,e);const n=$b(t),a=Wy(this.activation.getClassName());let s;return null!=a?s=kb(n,this.kernel.read(),a,this.bias?this.bias.read():null):(s=kb(n,this.kernel.read()),null!=this.bias&&(s=Tb(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const t={units:this.units,activation:Mv(this.activation),useBias:this.useBias,kernelInitializer:Yb(this.kernelInitializer),biasInitializer:Yb(this.biasInitializer),kernelRegularizer:Uv(this.kernelRegularizer),biasRegularizer:Uv(this.biasRegularizer),activityRegularizer:Uv(this.activityRegularizer),kernelConstraint:Ax(this.kernelConstraint),biasConstraint:Ax(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Mk.className="Dense",Ki(Mk);class Lk extends hx{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=tx(t);for(const e of t.slice(1))if(null==e)throw new by('The shape of the input to "Flatten" is not fully defined '+"(got ".concat(t.slice(1),"). Make sure to pass a complete ")+'"input_shape" or "batch_input_shape" argument to the first layer in your model.');return[t[0],ib(t,1)]}call(t,e){return co(()=>{this.invokeCallHook(t,e);let n=$b(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=zc(n,t)}return function(t){if(t.rank<=1)throw new by("batchFlatten requires a minimum rank of 2. Got rank: ".concat(t.rank,"."));const e=[t.shape[0],ib(t.shape,1)];return iu(t,e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Lk.className="Flatten",Ki(Lk);class zk extends hx{constructor(t){super(t),this.supportsMasking=!0,this.activation=zv(t.activation)}call(t,e){return co(()=>{this.invokeCallHook(t,e);const n=$b(t);return this.activation.apply(n)})}getConfig(){const t={activation:Mv(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}zk.className="Activation",Ki(zk);class Pk extends hx{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return co(()=>{return t=$b(t),e=t,n=this.n,co(()=>{if(2!==e.shape.length)throw new by("repeat() expects a rank-2 tensor, but received a "+"rank-".concat(e.shape.length," tensor."));return wb(fb(e,1),[1,n,1])});var e,n})}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}Pk.className="RepeatVector",Ki(Pk);class Bk extends hx{constructor(t){super(t),this.targetShape=t.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",a=e.slice();let s=1,r=null;for(let i=0;i<a.length;++i){const t=a[i];if(this.isUnknown(t)){if(null!==r)throw new by("Can only specifiy one unknown dimension.");r=i}else s*=t}const o=ib(t);if(null!==r){if(0===s||o%s!==0)throw new by(n);a[r]=o/s}else if(o!==s)throw new by(n);return a}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return co(()=>{this.invokeCallHook(t,e);const n=$b(t),a=n.shape,s=a.slice(0,1).concat(this.fixUnknownDimension(a.slice(1),this.targetShape));return iu(n,s)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}Bk.className="Reshape",Ki(Bk);class Wk extends hx{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+"".concat(t.dims," instead."));const e=ub(1,t.dims.length+1);if(!dt(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ox({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=tx(t)).slice();return this.dims.forEach((n,a)=>{e[a+1]=t[n]}),e}call(t,e){return zc($b(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}Wk.className="Permute",Ki(Wk);class Vk extends hx{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=$b(t);return Pl(ad(n,this.maskValue),-1)}call(t,e){return co(()=>{this.invokeCallHook(t,e);const n=$b(t),a=Pl(ad(n,this.maskValue),-1,!0);return Fi(n,Si(a,n.dtype))})}}Vk.className="Masking",Ki(Vk);class Uk extends hx{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Ty(t.inputLength))}this.inputDim=t.inputDim,Py(this.inputDim,"inputDim"),this.outputDim=t.outputDim,Py(this.outputDim,"outputDim"),this.embeddingsInitializer=Zb(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Hv(t.embeddingsRegularizer),this.activityRegularizer=Hv(t.activityRegularizer),this.embeddingsConstraint=Fx(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return co(()=>this.maskZero?(t=$b(t),ad(t,Oi(t))):null)}computeOutputShape(t){if(t=tx(t),null==this.inputLength)return[...t,this.outputDim];const e=Ty(this.inputLength);if(e.length!==t.length-1)throw new by('"inputLength" is '.concat(this.inputLength,", but received ")+"input shape has shape ".concat(t));{let n=0;for(let a=0;a<e.length;++a){const s=e[a],r=t[a+1];if(null!=s&&null!=r&&s!==r)throw new by('"inputLength" is '.concat(this.inputLength,", but received ")+"input shape has shape ".concat(t));null==s&&(e[n]=r),n++}}return[t[0],...e,this.outputDim]}call(t,e){return co(()=>{this.invokeCallHook(t,e);let n=$b(t);"int32"!==n.dtype&&(n=pb(n,"int32"));const a=Ib(this.embeddings.read(),iu(n,[n.size]));return iu(a,tx(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Yb(this.embeddingsInitializer),embeddingsRegularizer:Uv(this.embeddingsRegularizer),activityRegularizer:Uv(this.activityRegularizer),embeddingsConstraint:Ax(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}Uk.className="Embedding",Ki(Uk);class Gk extends hx{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new xy}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let a=0;a<e.length;++a){const s=t[t.length-e.length+a],r=e[a];if(null==s||null==r||s<0||r<0)n.push(null);else if(1===s)n.push(r);else if(1===r)n.push(s);else{if(s!==r)throw new by("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[tx(t)]),t.length<2)throw new by("A merge layer should be called on an Array of at least 2 inputs."+" Got ".concat(t.length," input(s)."));let e=[];for(const s of t)null!=s&&null!==s[0]&&e.push(s[0]);if(e=Oy(e),e.length>1)throw new by("Can not merge tensors with different batch sizes. "+"Got tensors with shapes: ".concat(JSON.stringify(t),"."));let n=null==t[0]?null:t[0].slice(1);for(let s=1;s<t.length;++s){const e=null==t[s]?null:t[s].slice(1);n=this.computeElementwiseOpOutputShape(n,e)}const a=t.map(t=>t.length);-1===t.indexOf(null)&&1===Oy(a).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return co(()=>{if(this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const a=lb(n);for(let n of t){const t=n.rank;for(let e=0;e<a-t;++e)n=fb(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,a=t[0],s=t.slice(1).concat([a]);let o=iu(r,[a].concat(ib(t.slice(1))));o=zc(o,[1,0]),o=iu(o,s),e.push(o),n=!0}else if(t>1){const a=ub(1,t).concat([0]);e.push(zc(r,a)),n=!0}else e.push(r)}let a=this.mergeFunction(e);const s=a.rank;if(n)if(null==s){const t=a.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));a=iu(zc(iu(a,[-1,e]),[1,0]),n)}else if(s>1){const t=[s-1].concat(ub(0,s-1));a=zc(a,t)}return a}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let a=1;a<t.length;++a){const n=null==t[a]?null:t[a].slice(1);e=this.computeElementwiseOpOutputShape(e,n)}let n=[];for(const a of t)null!=a&&null!==a[0]&&n.push(a[0]);return n=Oy(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return co(()=>{if(null==e)return null;if(!Array.isArray(e))throw new by("`mask` should be an Array");if(!Array.isArray(t))throw new by("`inputs` should be an Array");if(e.length!==t.length)throw new by("The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths "+"(".concat(t.length," vs ").concat(e.length,")"));if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:mh(t,0)))[0];for(let t=1;t<e.length-1;++t)n=zh(n,e[t]);return n})}}class Hk extends Gk{constructor(t){super(t)}mergeFunction(t){return co(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Ei(e,t[n]);return e})}}Hk.className="Add",Ki(Hk);class jk extends Gk{constructor(t){super(t)}mergeFunction(t){return co(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Fi(e,t[n]);return e})}}jk.className="Multiply",Ki(jk);class qk extends Gk{constructor(t){super(t)}mergeFunction(t){return co(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Ei(e,t[n]);return Fi(1/t.length,e)})}}qk.className="Average",Ki(qk);class Kk extends Gk{constructor(t){super(t)}mergeFunction(t){return co(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=oc(e,t[n]);return e})}}Kk.className="Maximum",Ki(Kk);class Xk extends Gk{constructor(t){super(t)}mergeFunction(t){return co(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Jh(e,t[n]);return e})}}Xk.className="Minimum",Ki(Xk);class Yk extends Gk{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new by("A `Concatenate` layer should be called on a list of at least 2 inputs");let e=!0;for(const a of t)if(null!=a){e=!1;break}if(e)return;const n=[];for(let a=0;a<t.length;++a){const e=t[a].slice();e.splice(this.axis,1);let s=!1;for(const t of n)if(dt(t,e)){s=!0;break}s||n.push(e)}if(n.length>1)throw new by("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return co(()=>bb(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new by("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),a=this.axis<0?n.length+this.axis:this.axis;for(const s of e.slice(1)){if(null==n[a]||null==s[a]){n[a]=null;break}n[a]+=s[a]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new by("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new by("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new by("Mismatch in the length of mask (".concat(e.length,") ")+"and the legnth of inputs (".concat(t.length,")"));return co(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const a=[];for(let r=0;r<t.length;++r)null==e[r]?a.push(Si(sd(t[r]),"bool")):e[r].rank<t[r].rank?a.push(mh(e[r],-1)):a.push(e[r]);const s=uu(a,this.axis);return zl(s,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Zk(t,e){for(;t<0;)t+=e;return t}Yk.className="Concatenate",Ki(Yk);class Jk extends Gk{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){ot(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new xy("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(e,n);if(e[a[0]]!==n[a[1]])throw new by("Dimension incompatibility: "+"".concat(e[a[0]]," !== ").concat(n[a[1]]))}mergeFunction(t){if(2!==t.length)throw new by("A `Dot` layer must be called on exactly 2 inputs, "+"but received ".concat(t.length," input(s)."));let e,n=t[0],a=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>Zk(e,t[n].shape.length)):[Zk(this.axes,n.shape.length),Zk(this.axes,a.shape.length)],this.normalize&&(n=lw(n,e[0]),a=lw(a,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new xy("batchDot is not implemented for tensors of 4D or higher rank yet");if(ot(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, "+"but got ".concat(t.shape.length)),ot(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, "+"but got ".concat(e.shape.length)),"number"===typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new xy("batchDot is not implemented for complex64-type Tensors yet.");const a=t.shape.length,s=e.shape.length;null==n&&(n=[a-1,s-2]);const r=n;return co(()=>{let n,o;if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=iu(e,e.shape.concat(t))}else if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=iu(t,t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)o=r[0]===r[1]?uh(Fi(t,e),r[0]):uh(Fi(zc(t,[1,0]),e),r[1]);else{const n=r[0]!==t.shape.length-1,a=r[1]===e.shape.length-1;o=Dc(t,e,n,a)}if(n>0){let t;t=a>s?a+s-3:a-1;const e=[];for(let a=t;a<t+n;++a)e.push(a);o=np(o,e)}return 1===o.shape.length&&(o=mh(o,1)),o})}(n,a,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[Zk(this.axes,t.length),Zk(this.axes,e.length)],n}computeOutputShape(t){ot(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new xy("Dot layer does not support tensors of 4D or higher rank yet.");const a=this.interpretAxes(e,n);e.splice(a[0],1),n.splice(a[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}Jk.className="Dot",Ki(Jk);class Qk extends hx{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return co(()=>{this.invokeCallHook(t,e);const n=$b(t);return Eb(()=>Ei(vb(n.shape,0,this.stddev),n),()=>n,e.training||!1)})}}Qk.className="GaussianNoise",Ki(Qk);class $k extends hx{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return co(()=>{this.invokeCallHook(t,e);const n=$b(t);if(this.rate>0&&this.rate<1){return Eb(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return Fi(n,vb(n.shape,1,t))},()=>n,e.training||!1)}return n})}}$k.className="GaussianDropout",Ki($k);class tI extends hx{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||$b(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return co(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t),a=()=>{const e=$b(t),a=-1.7580993408473766;let s=kh(Td(n),this.rate);s=pb(s,"float32");const r=((1-this.rate)*(1+this.rate*a**2))**-.5,o=-r*a*this.rate,i=Ei(Fi(e,s),Fi(Ei(s,-1),a));return Ei(Fi(i,r),o)};return Eb(a,()=>$b(t),e.training||!1)}return t})}}function eI(t,e,n,a,s){let r,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:.001;if(2===t.rank)r=yu(t,e,n,a,s,o);else if(3===t.rank)r=bu(t,e,n,a,s,o);else{if(4!==t.rank)throw new xy("batchNormalization is not implemented for array of rank ".concat(t.rank," ")+"yet");r=xu(t,e,n,a,s,o)}return r}function nI(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.001;return dt(a.slice().sort(),ub(0,t.rank-1))?function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.001;return co(()=>{const r=td(t,a),o=r.mean,i=r.variance;return[eI(t,o,i,n,e,s),o,i]})}(t,e,n,a,s):function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.001;return co(()=>{const r=td(t,a),o=r.mean,i=r.variance,c=[];for(const e of ub(0,t.rank))-1!==a.indexOf(e)?c.push(1):c.push(t.shape[e]);const l=iu(o,c),u=iu(i,c),h=null==e?null:iu(e,c),d=null==n?null:iu(n,c);return[eI(t,l,u,d,h,s),o,i]})}(t,e,n,a,s)}tI.className="AlphaDropout",Ki(tI);class aI extends hx{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Zb(t.betaInitializer||"zeros"),this.gammaInitializer=Zb(t.gammaInitializer||"ones"),this.movingMeanInitializer=Zb(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Zb(t.movingVarianceInitializer||"ones"),this.betaConstraint=Fx(t.betaConstraint),this.gammaConstraint=Fx(t.gammaConstraint),this.betaRegularizer=Hv(t.betaRegularizer),this.gammaRegularizer=Hv(t.gammaRegularizer)}build(t){t=tx(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new by("Axis ".concat(e," of input tensor should have a defined dimension but ")+"the layer received an input with shape "+"".concat(JSON.stringify(t),"."));this.inputSpec=[new ox({ndim:t.length,axes:{[e]:n}})];const a=[n];this.scale&&(this.gamma=this.addWeight("gamma",a,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",a,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",a,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",a,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return co(()=>{const n=null!=e.training&&e.training,a=$b(t),s=a.shape,r=s.length,o=ub(0,r),i=this.axis>=0?this.axis:this.axis+r;o.splice(i,1);const c=ky(1,r);c[i]=s[i];const l=o.slice();l.sort();const u=!dt(l,ub(0,r).slice(0,r-1));if(!n)return(()=>{if(u){const t=iu(this.movingMean.read(),c),e=iu(this.movingVariance.read(),c),n=this.center?iu(this.beta.read(),c):null,s=this.scale?iu(this.gamma.read(),c):null;return eI(a,t,e,n,s,this.epsilon)}return eI(a,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=nI(a,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(t,e,n)=>{co(()=>{const a=1-n,s=t.read(),r=Fi(tc(s,e),a);t.write(tc(s,r))})};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Yb(this.betaInitializer),gammaInitializer:Yb(this.gammaInitializer),movingMeanInitializer:Yb(this.movingMeanInitializer),movingVarianceInitializer:Yb(this.movingVarianceInitializer),betaRegularizer:Uv(this.betaRegularizer),gammaRegularizer:Uv(this.gammaRegularizer),betaConstraint:Ax(this.betaConstraint),gammaConstraint:Ax(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}aI.className="BatchNormalization",Ki(aI);class sI extends hx{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"===typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received ".concat(this.axis))}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, "+"but received ".concat(JSON.stringify(this.axis)));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, "+"but received ".concat(JSON.stringify(this.axis)))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Zb(t.betaInitializer||"zeros"),this.gammaInitializer=Zb(t.gammaInitializer||"ones"),this.betaRegularizer=Hv(t.betaRegularizer),this.gammaRegularizer=Hv(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=tx(t)).length;"number"===typeof this.axis&&(this.axis=[this.axis]);for(let s=0;s<this.axis.length;++s)this.axis[s]<0&&(this.axis[s]+=e);for(const s of this.axis)if(s<0||s>=e)throw new Error("Invalid axis: ".concat(s));if(this.axis.length!==Oy(this.axis).length)throw new Error("Found duplicate axes in: ".concat(this.axis));const n=this.axis.map(e=>t[e]),a=!0;this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,a):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,a):this.beta=null,this.built=!0}call(t,e){const n=$b(t),a=n.shape,s=a.length;return co(()=>{let{mean:t,variance:e}=td(n,this.axis,!0);const r=ky(1,s);for(const n of this.axis)r[n]=a[n];const o=t=>null!=t&&t.shape.length!==s?iu(t,r):t;let i=this.scale?o(this.gamma.read()):null,c=this.center?o(this.beta.read()):null;const l=[],u=[];for(let n=0;n<s;++n)-1!==this.axis.indexOf(n)?(l.push(a[n]),u.push(1)):(l.push(1),u.push(a[n]));return t=yh(t,l),e=yh(e,l),null!=i&&(i=yh(i,u)),null!=c&&(c=yh(c,u)),eI(n,t,e,c,i,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Yb(this.betaInitializer),gammaInitializer:Yb(this.gammaInitializer),betaRegularizer:Uv(this.betaRegularizer),gammaRegularizer:Uv(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}sI.className="LayerNormalization",Ki(sI);class rI extends hx{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"===typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new by("ZeroPadding2D expects padding to be a length-2 array, but "+"received a length-".concat(t.padding.length," array."));let e,n;if("number"===typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new by("ZeroPadding2D expects height padding to be a length-2 array, "+"but received a length-".concat(t.padding[0].length," array."));if(e=t.padding[0],2!==t.padding[1].length)throw new by("ZeroPadding2D expects width padding to be a length-2 array, "+"but received a length-".concat(t.padding[1].length," array."));n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new ox({ndim:4})]}computeOutputShape(t){let e,n;return t=tx(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return co(()=>{return e=$b(t),n=this.padding,a=this.dataFormat,co(()=>{if(4!==e.rank)throw new by("temporalPadding expects input tensor to be 4-D, but received a "+"".concat(e.rank,"-D tensor."));if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new by("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==a&&(a="channelsLast"),"channelsLast"!==a&&"channelsFirst"!==a)throw new by("Unknown data format: ".concat(a,". ")+"Supported data formats are 'channelsLast' and 'channelsFirst.");let t;return t="channelsFirst"===a?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],od(e,t)});var e,n,a})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function oI(t,e,n,a,s,r){return co(()=>{let o;Jy(s),$y(r),Qy(a),null==n&&(n=[1,1]),null==a&&(a="valid"),null==s&&(s="channelsLast"),null==r&&(r="max"),t=tk(t,s);const i="same"===a?"same":"valid";return o="max"===r?Hh(t,e,n,i):cu(t,e,n,i),"channelsFirst"===s&&(o=zc(o,[0,3,1,2])),o})}function iI(t,e,n,a,s,r){return co(()=>{let o;Jy(s),$y(r),Qy(a),null==n&&(n=[1,1,1]),null==a&&(a="valid"),null==s&&(s="channelsLast"),null==r&&(r="max"),t=ek(t,s);const i="same"===a?"same":"valid";return o="max"===r?jh(t,e,n,i):lu(t,e,n,i),"channelsFirst"===s&&(o=zc(o,[0,4,1,2,3])),o})}rI.className="ZeroPadding2D",Ki(rI);class cI extends hx{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"===typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!==typeof t.poolSize[0])throw new by("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+"".concat(JSON.stringify(t.poolSize)));this.poolSize=t.poolSize}if(Py(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"===typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!==typeof t.strides[0])throw new by("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+"".concat(JSON.stringify(t.strides)));this.strides=t.strides}Py(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Qy(this.padding),this.inputSpec=[new ox({ndim:3})]}computeOutputShape(t){const e=Qv((t=tx(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return co(()=>{this.invokeCallHook(t,e),t=fb($b(t),2);const n=this.poolingFunction($b(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return np(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class lI extends cI{constructor(t){super(t)}poolingFunction(t,e,n,a,s){return Jy(s),Qy(a),oI(t,e,n,a,s,"max")}}lI.className="MaxPooling1D",Ki(lI);class uI extends cI{constructor(t){super(t)}poolingFunction(t,e,n,a,s){return Jy(s),Qy(a),oI(t,e,n,a,s,"avg")}}uI.className="AveragePooling1D",Ki(uI);class hI extends hx{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new by("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+"".concat(t.strides.length,"."));this.strides=t.strides}else this.strides=[t.strides,t.strides];Py(this.poolSize,"poolSize"),Py(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Jy(this.dataFormat),Qy(this.padding),this.inputSpec=[new ox({ndim:4})]}computeOutputShape(t){t=tx(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Qv(e,this.poolSize[0],this.padding,this.strides[0]),n=Qv(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return co(()=>(this.invokeCallHook(t,e),this.poolingFunction($b(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class dI extends hI{constructor(t){super(t)}poolingFunction(t,e,n,a,s){return Jy(s),Qy(a),oI(t,e,n,a,s,"max")}}dI.className="MaxPooling2D",Ki(dI);class pI extends hI{constructor(t){super(t)}poolingFunction(t,e,n,a,s){return Jy(s),Qy(a),oI(t,e,n,a,s,"avg")}}pI.className="AveragePooling2D",Ki(pI);class fI extends hx{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new by("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+"".concat(t.strides.length,"."));this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Py(this.poolSize,"poolSize"),Py(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Jy(this.dataFormat),Qy(this.padding),this.inputSpec=[new ox({ndim:5})]}computeOutputShape(t){t=tx(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],a="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Qv(e,this.poolSize[0],this.padding,this.strides[0]),n=Qv(n,this.poolSize[1],this.padding,this.strides[1]),a=Qv(a,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,a]:[t[0],e,n,a,t[4]]}call(t,e){return co(()=>(this.invokeCallHook(t,e),this.poolingFunction($b(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class mI extends fI{constructor(t){super(t)}poolingFunction(t,e,n,a,s){return Jy(s),Qy(a),iI(t,e,n,a,s,"max")}}mI.className="MaxPooling3D",Ki(mI);class gI extends fI{constructor(t){super(t)}poolingFunction(t,e,n,a,s){return Jy(s),Qy(a),iI(t,e,n,a,s,"avg")}}gI.className="AveragePooling3D",Ki(gI);class yI extends hx{constructor(t){super(t),this.inputSpec=[new ox({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new xy}}class bI extends yI{constructor(t){super(t||{})}call(t,e){return co(()=>{const e=$b(t);return Kh(e,1)})}}bI.className="GlobalAveragePooling1D",Ki(bI);class xI extends yI{constructor(t){super(t||{})}call(t,e){return co(()=>{const e=$b(t);return ch(e,1)})}}xI.className="GlobalMaxPooling1D",Ki(xI);class wI extends hx{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Jy(this.dataFormat),this.inputSpec=[new ox({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new xy}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class vI extends wI{call(t,e){return co(()=>{const e=$b(t);return"channelsLast"===this.dataFormat?Kh(e,[1,2]):Kh(e,[2,3])})}}vI.className="GlobalAveragePooling2D",Ki(vI);class kI extends wI{call(t,e){return co(()=>{const e=$b(t);return"channelsLast"===this.dataFormat?ch(e,[1,2]):ch(e,[2,3])})}}kI.className="GlobalMaxPooling2D",Ki(kI);class II extends hx{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const a=cw(e.layer,n);delete e.layer;const s={layer:a};return Object.assign(s,e),new t(s)}}class NI extends II{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=tx(t)).length<3)throw new by("TimeDistributed layer expects an input shape >= 3D, but received "+"input shape ".concat(JSON.stringify(t)));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=tx(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),a=t[1];return[n[0],a].concat(n.slice(1))}call(t,e){return co(()=>bk((t,n)=>[$b(this.layer.call(t,e)),[]],t=$b(t),[],!1,null,null,!1,!0)[1])}}NI.className="TimeDistributed",Ki(NI);class SI extends II{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=cw(n),e.goBackwards=!0!==e.goBackwards;const a={};var s;if(a.className=t.layer.getClassName(),a.config=e,this.backwardLayer=cw(a),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,Ly(Yy,"BidirectionalMergeMode",s),t.weights)throw new xy("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,a,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState?(a=s.slice(1),e=s[0]):e=s[0],"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(a).concat(a.slice()):[e].concat(a).concat(a.slice()):Sy(n)}apply(t,e){let n=null==e?null:e.initialState,a=null==e?null:e.constants;null==e&&(e={});const s=yk(t,n,a,this.numConstants);if(t=s.inputs,n=s.initialState,a=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==a)return super.apply(t,e);const r=[],o=[];if(null!=n){const t=n.length;if(t%2>0)throw new by("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,r.push(...n);const a=n.map(t=>new ox({shape:t.shape}));this.forwardLayer.stateSpec=a.slice(0,t/2),this.backwardLayer.stateSpec=a.slice(t/2),o.push(...a)}if(null!=a)throw new xy("Support for constants in Bidirectional layers is not implemented yet.");const i=r[0]instanceof ix;for(const c of r)if(c instanceof ix!==i)throw new by("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[t].concat(r),a=this.inputSpec.concat(o),s=this.inputSpec;this.inputSpec=a;const i=super.apply(n,e);return this.inputSpec=s,i}return super.apply(t,e)}call(t,e){return co(()=>{const n=e.initialState;let a,s,r,o;if(null==n)a=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const r=n.slice(0,n.length/2),o=n.slice(n.length/2);a=this.forwardLayer.call(t,Object.assign(e,{initialState:r})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:o}))}return this.returnState&&(Array.isArray(a)&&(r=a.slice(1).concat(s.slice(1))),a=a[0],s=s[0]),this.returnSequences&&(s=Dd(s,1)),"concat"===this.mergeMode?o=bb([a,s]):"sum"===this.mergeMode?o=Ei(a,s):"ave"===this.mergeMode?o=Fi(.5,Ei(a,s)):"mul"===this.mergeMode?o=Fi(a,s):null==this.mergeMode&&(o=[a,s]),this.returnState?null==this.mergeMode?o.concat(r):[o].concat(r):o})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){eb(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),eb(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=cw(e.layer);if(delete e.layer,null!=e.numConstants)throw new xy("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const a=e;return a.layer=n,new t(a)}}SI.className="Bidirectional",Ki(SI);class TI extends hx{constructor(t){super(t),this.scale=t.scale,t.offset?this.offset=t.offset:this.offset=0}getConfig(){const t={scale:this.scale,offset:this.offset},e=super.getConfig();return Object.assign(t,e),t}call(t,e){return co(()=>("float32"!==(t=$b(t)).dtype&&(t=pb(t,"float32")),Ei(Fi(t,this.scale),this.offset)))}}TI.className="Rescaling",Ki(TI);const{resizeBilinear:CI,cropAndResize:EI}=Vf;class AI extends hx{constructor(t){super(t),this.height=t.height,this.width=t.width}centerCrop(t,e,n,a,s,r,o,i){return co(()=>{let c,l=!1;const u=[e/r,n/o,(a+e)/r,(s+n)/o],h=[];3===t.rank?(l=!0,c=ap([t])):c=t;for(let t=0;t<c.shape[0];t++)h.push(u);const d=Jr(h,[h.length,4]),p=Ed(0,h.length,1,"int32"),f=EI(c,d,p,[a,s],"nearest");return pb(l?$b(yp(f)):f,i)})}upsize(t,e,n,a){return co(()=>pb(CI(t,[e,n]),a))}call(t,e){return co(()=>{const e=$b(t),n=e.dtype,a=e.shape,s=a[a.length-3],r=a[a.length-2];let o=0;s!==this.height&&(o=Math.floor((s-this.height)/2));let i=0;return r!==this.width&&(i=Math.floor((r-this.width)/2),0===i&&(i=1)),o>=0&&i>=0?this.centerCrop(e,o,i,this.height,this.width,s,r,n):this.upsize(t,this.height,this.width,n)})}getConfig(){const t={height:this.height,width:this.width},e=super.getConfig();return Object.assign(t,e),t}computeOutputShape(t){const e=(t=tx(t)).length-3,n=t.length-2;return t[e]=this.height,t[n]=this.width,t}}AI.className="CenterCrop",Ki(AI);class RI extends hx{constructor(t){super(t),this.numTokens=t.numTokens,t.outputMode?this.outputMode=t.outputMode:this.outputMode="multiHot"}getConfig(){const t={numTokens:this.numTokens,outputMode:this.outputMode},e=super.getConfig();return Object.assign(t,e),t}computeOutputShape(t){return null==(t=tx(t))?[this.numTokens]:"oneHot"===this.outputMode&&1!==t[t.length-1]?(t.push(this.numTokens),t):(t[t.length-1]=this.numTokens,t)}call(t,e){return co(()=>{let n;if("int32"!==(t=$b(t)).dtype&&(t=pb(t,"int32")),"undefined"!==typeof e.countWeights){if("count"!==this.outputMode)throw new by("countWeights is not used when outputMode !== count.\n              Received countWeights=".concat(e.countWeights));n=$b(e.countWeights)}const a=ch(t),s=lh(t),r=vh(this.numTokens,a).bufferSync().get(0),o=kh(s,0).bufferSync().get(0);if(!r||!o)throw new by("Input values must be between 0 < values <="+" numTokens with numTokens=".concat(this.numTokens));return function(t,e,n,a){let s=$b(t);if("int32"!==s.dtype&&(s=pb(s,"int32")),"int"===e)return s;const r=s.shape;if(0===s.rank&&(s=mh(s,-1)),"oneHot"===e&&1!==s.shape[s.shape.length-1]&&(s=mh(s,-1)),s.rank>2)throw new by("When outputMode is not int, maximum output rank is 2"+" Received outputMode ".concat(e," and input shape ").concat(r)+" which would result in output rank ".concat(s.rank,"."));const o=["multiHot","oneHot"].includes(e),i=s;let c;if(c=Vu(i,"undefined"!==typeof a&&"count"===e?a:[],n,o),"tfIdf"!==e)return c;if(a)return Fi(c,a);throw new by("When outputMode is 'tfIdf', weights must be provided.")}(t,this.outputMode,this.numTokens,n)})}}RI.className="CategoryEncoding",Ki(RI);const FI=new Set(["bilinear","nearest"]);class DI extends hx{constructor(t){if(super(t),this.height=t.height,this.width=t.width,t.interpolation){if(!FI.has(t.interpolation))throw new by("Invalid interpolation parameter: ".concat(t.interpolation," is not implemented"));this.interpolation=t.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(t.cropToAspectRatio)}computeOutputShape(t){const e=(t=tx(t))[2];return[this.height,this.width,e]}getConfig(){const t={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},e=super.getConfig();return Object.assign(t,e),t}call(t,e){return co(()=>{const e=[this.height,this.width];if("bilinear"===this.interpolation)return Vf.resizeBilinear(t,e,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Vf.resizeNearestNeighbor(t,e,!this.cropToAspectRatio);throw new Error("Interpolation is ".concat(this.interpolation," but only ").concat([...FI]," are supported"))})}}DI.className="Resizing",Ki(DI);class _I{constructor(t){this.seed=t}next(){if(void 0!==this.seed)return this.seed++}}_I.className="RandomSeed";class OI extends hx{constructor(t){super(t),this.randomGenerator=new _I(t.seed)}getConfig(){const t={seed:this.randomGenerator.seed},e=super.getConfig();return Object.assign(t,e),t}}OI.className="BaseRandomLayer";const MI=new Set(["bilinear","nearest"]);class LI extends OI{constructor(t){super(t);const{factor:e,interpolation:n="bilinear"}=t;if(this.factor=e,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new by("Invalid factor: ".concat(this.factor,". Must be positive number or tuple of 2 numbers"));this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new by("factor must have values larger than -1. Got: ".concat(this.factor));if(this.widthUpper<this.widthLower)throw new by("factor cannot have upper bound less than lower bound.\n        Got upper bound: ".concat(this.widthUpper,".\n        Got lower bound: ").concat(this.widthLower,"\n      "));if(n){if(!MI.has(n))throw new by("Invalid interpolation parameter: ".concat(n," is not implemented"));this.interpolation=n}}getConfig(){const t={factor:this.factor,interpolation:this.interpolation},e=super.getConfig();return Object.assign(t,e),t}computeOutputShape(t){const e=(t=tx(t))[2];return[this.imgHeight,-1,e]}call(t,e){return co(()=>{const e=$b(t);this.imgHeight=e.shape[e.shape.length-3];const n=e.shape[e.shape.length-2];this.widthFactor=Td([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let a=this.widthFactor.dataSync()[0]*n;a=Math.round(a);const s=[this.imgHeight,a];switch(this.interpolation){case"bilinear":return Vf.resizeBilinear(t,s);case"nearest":return Vf.resizeNearestNeighbor(t,s);default:throw new Error("Interpolation is ".concat(this.interpolation,"\n          but only ").concat([...MI]," are supported"))}})}}function zI(t){return new px(t)}function PI(t){return new Xv(t)}function BI(t){return new jv(t)}function WI(t){return new qv(t)}function VI(t){return new Kv(t)}function UI(t){return new Zv(t)}function GI(t){return new Yv(t)}function HI(t){return new pk(t)}function jI(t){return new ik(t)}function qI(t){return new lk(t)}function KI(t){return new ck(t)}function XI(t){return new uk(t)}function YI(t){return new dk(t)}function ZI(t){return new fk(t)}function JI(t){return new mk(t)}function QI(t){return new gk(t)}function $I(t){return new zk(t)}function tN(t){return new Mk(t)}function eN(t){return new _k(t)}function nN(t){return new Ok(t)}function aN(t){return new Lk(t)}function sN(t){return new Pk(t)}function rN(t){return new Bk(t)}function oN(t){return new Wk(t)}function iN(t){return new Uk(t)}function cN(t){return new Hk(t)}function lN(t){return new qk(t)}function uN(t){return new Yk(t)}function hN(t){return new Kk(t)}function dN(t){return new Xk(t)}function pN(t){return new jk(t)}function fN(t){return new Jk(t)}function mN(t){return new aI(t)}function gN(t){return new sI(t)}function yN(t){return new rI(t)}function bN(t){return new uI(t)}function xN(t){return bN(t)}function wN(t){return bN(t)}function vN(t){return new pI(t)}function kN(t){return vN(t)}function IN(t){return vN(t)}function NN(t){return new gI(t)}function SN(t){return NN(t)}function TN(t){return NN(t)}function CN(t){return new bI(t)}function EN(t){return new vI(t)}function AN(t){return new xI(t)}function RN(t){return new kI(t)}function FN(t){return new lI(t)}function DN(t){return new dI(t)}function _N(t){return new mI(t)}function ON(t){return new Nk(t)}function MN(t){return new Ik(t)}function LN(t){return new Tk(t)}function zN(t){return new Sk(t)}function PN(t){return new kk(t)}function BN(t){return new vk(t)}function WN(t){return new Dk(t)}function VN(t){return new Fk(t)}function UN(t){return new xk(t)}function GN(t){return new Ck(t)}function HN(t){return new SI(t)}function jN(t){return new NI(t)}LI.className="RandomWidth",Ki(LI);const qN=AN,KN=RN,XN=FN,YN=DN;function ZN(t){return new Qk(t)}function JN(t){return new $k(t)}function QN(t){return new tI(t)}function $N(t){return new Vk(t)}function tS(t){return new TI(t)}function eS(t){return new AI(t)}function nS(t){return new DI(t)}function aS(t){return new RI(t)}function sS(t){return new LI(t)}function rS(t,e){return vw(t,e)}function oS(t,e){return Tw(t,e)}function iS(t,e){return Cw(t,e)}function cS(t,e){return kw(t,e)}function lS(t,e){return Ew(t,e)}function uS(t,e){return Nw(t,e)}function hS(t,e){return Sw(t,e)}function dS(t,e){return bw(t,e)}function pS(t,e){return hw(t,e)}function fS(t,e){return dw(t,e)}function mS(t,e){return dw(t,e)}function gS(t,e){return dw(t,e)}function yS(t,e){return uw(t,e)}function bS(t,e){return uw(t,e)}function xS(t,e){return uw(t,e)}function wS(t,e){return function(t,e){return co(()=>{const n=t.sub(e).square().sum(),a=t.sub(t.mean()).square().sum();return Ui(1).sub(n.div(a))})}(t,e)}function vS(t){return new Wv(t)}function kS(t){return Pv(e=t),new Wv({l1:null!=e?e.l1:null,l2:0});var e}function IS(t){return Pv(e=t),new Wv({l2:null!=e?e.l2:null,l1:0});var e}class NS extends tw{constructor(){super(...arguments),this.model=null}setModel(t){if(!(t instanceof lv))throw new Error("model must be a LayersModel, not some other Container");this.model=t}}function SS(t,e){return t<e}function TS(t,e){return t>e}class CS extends NS{constructor(t){if(super(),null==t&&(t={}),t.restoreBestWeights)throw new xy("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=t.monitor||"val_loss",this.minDelta=Math.abs(t.minDelta||0),this.patience=t.patience||0,this.verbose=t.verbose||0,this.mode=t.mode||"auto",this.baseline=t.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn("EarlyStopping mode '".concat(this.mode,"' is invalid. ")+"Falling back to mode 'auto'."),this.mode="auto"),"min"===this.mode?this.monitorFunc=SS:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=TS:this.monitorFunc=SS,this.monitorFunc===SS&&(this.minDelta*=-1)}async onTrainBegin(t){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===SS?1/0:-1/0}async onEpochEnd(t,e){await Jx(e);const n=this.getMonitorValue(e);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=t,this.model.stopTraining=!0)))}async onTrainEnd(t){this.stoppedEpoch>0&&this.verbose&&console.log("Epoch ".concat(this.stoppedEpoch,": early stopping."))}getMonitorValue(t){null==t&&(t={});const e=t[this.monitor];return null==e&&console.warn("Metric for EarlyStopping ".concat(this.monitor," is not available. ")+"Available metrics are: ".concat(Object.keys(t))),e}}const ES={earlyStopping:function(t){return new CS(t)}};var AS,RS;Yt().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,t=>{t&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_QINT16=15]="DT_QINT16",t[t.DT_QUINT16=16]="DT_QUINT16",t[t.DT_UINT16=17]="DT_UINT16",t[t.DT_COMPLEX128=18]="DT_COMPLEX128",t[t.DT_HALF=19]="DT_HALF",t[t.DT_RESOURCE=20]="DT_RESOURCE",t[t.DT_VARIANT=21]="DT_VARIANT",t[t.DT_UINT32=22]="DT_UINT32",t[t.DT_UINT64=23]="DT_UINT64",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",t[t.DT_QINT16_REF=115]="DT_QINT16_REF",t[t.DT_QUINT16_REF=116]="DT_QUINT16_REF",t[t.DT_UINT16_REF=117]="DT_UINT16_REF",t[t.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",t[t.DT_HALF_REF=119]="DT_HALF_REF",t[t.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",t[t.DT_VARIANT_REF=121]="DT_VARIANT_REF",t[t.DT_UINT32_REF=122]="DT_UINT32_REF",t[t.DT_UINT64_REF=123]="DT_UINT64_REF"}(AS||(AS={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(RS||(RS={}));const FS={};function DS(t,e){const n={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e};FS[t]=n}function _S(t){return FS[t]}function OS(t){delete FS[t]}function MS(t,e,n,a,s){const r=e.inputParams[t];if(r&&void 0!==r.inputIndexStart){const t=r.inputIndexStart,o=0===r.inputIndexEnd?void 0:void 0===r.inputIndexEnd?t+1:r.inputIndexEnd,i=t<0?e.inputNames.length+t:t;if("tensor"===r.type)return LS(e.inputNames[i],n,a,s);if("tensors"===r.type){const r=e.inputs.slice(t,o);return e.inputNames.slice(t,o).filter((t,e)=>{var n;return"NoOp"!==(null===(n=r[e])||void 0===n?void 0:n.op)}).map(t=>LS(t,n,a,s))}const c=LS(e.inputNames[i],n,a,s),l=c.dataSync();return"number"===r.type?l[0]:zt(c.shape,l)}const o=e.attrParams[t];return o&&o.value}function LS(t,e,n,a){const[s,r]=WS(t,n);if(null!=a){const t=a.getHashTableHandleByName(s);if(null!=t)return t}const o=n.currentContextIds.find(t=>!!e[BS(s,t)]);return void 0!==o?e[BS(s,o)][r]:void 0}function zS(t,e,n){return e[BS(t,n.currentContextId)]}function PS(t,e){const[n,a,s]=WS(t,e);return[BS(n,e&&e.currentContextId),a,s]}function BS(t,e){return e?"".concat(t,"-").concat(e):t}function WS(t,e){if(""===t)return["",0,void 0];const n=null!=e&&null!=e.parseNodeNameCache;if(n){const n=e.parseNodeNameCache.get(t);if(null!=n)return n}const a=t.split(":");let s;if(1===a.length)s=[t,0,void 0];else{const t=a[0],e=3===a.length?a[1]:void 0;s=[t,Number(a[a.length-1]),e]}return n&&e.parseNodeNameCache.set(t,s),s}function VS(t,e,n){let a=MS("pad",t,e,n);if("explicit"===a){a=MS("explicitPaddings",t,e,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=a[2*t],s[t][1]=a[2*t+1];return s}return a}function US(t){return t.kept?t:Ti(t)}const GS=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],HS=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],jS=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],qS=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],KS=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],XS=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],YS=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],ZS=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],JS=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],QS=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],$S=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],tT=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],eT=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],nT=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],aT=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],sT=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],rT=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],oT=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],iT=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class cT{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[S,T,C,E,A,R,F,D,_,O,M,L,z,P,B,W,V,U,G].map(t=>t.json));this.opMappers=t.reduce((t,e)=>(t[e.tfOpName]=e,t),{})}transformGraph(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=t.node,a=[],s=[],r=[],o=n.reduce((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?a.push(t[e.name]):"Const"===e.op?s.push(t[e.name]):null!=e.input&&0!==e.input.length||r.push(t[e.name]),t),{});let i=[];const c=[];let l={},u={};null!=e&&(l=this.mapSignatureEntries(e.inputs),u=this.mapSignatureEntries(e.outputs));const h=Object.keys(o);h.forEach(t=>{const e=o[t];e.inputNames.forEach((t,n)=>{const[a,,s]=PS(t),r=o[a];if(null!=r.outputs){const t=r.outputs.indexOf(s);if(-1!==t){const s="".concat(a,":").concat(t);e.inputNames[n]=s}}e.inputs.push(r),r.children.push(e)})}),0===Object.keys(u).length?h.forEach(t=>{const e=o[t];0===e.children.length&&c.push(e)}):Object.keys(u).forEach(t=>{const[e]=PS(t),n=o[e];null!=n&&(n.signatureKey=u[t],c.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(t=>{const[e]=PS(t),n=o[e];n&&(n.signatureKey=l[t],i.push(n))}):i=a;let d={};null!=t.library&&null!=t.library.function&&(d=t.library.function.reduce((t,e)=>(t[e.signature.name]=this.mapFunction(e),t),{}));const p={nodes:o,inputs:i,outputs:c,weights:s,placeholders:a,signature:e,functions:d};return r.length>0&&(p.initNodes=r),p}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,n)=>(e[t[n].name]=n,e),{})}mapNode(t){const e=_S(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(t=>t.startsWith("^")?t.slice(1):t),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((e,n)=>{const a=n.type;let s;switch(n.type){case"string":s=uT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=uT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=wT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=wT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=dT(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=dT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=xT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=xT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=hT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=hT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=kT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=kT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=bT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=bT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=vT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=vT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=mT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=mT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=gT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=gT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=fT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=fT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: ".concat(n.type," for op: ").concat(t.op))}return e[n.name]={value:s,type:a},e},{})),n}mapFunction(t){const e=t.nodeDef,n=[];let a={};null!=e&&(a=e.reduce((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t),{}));const s=[],r=[];t.signature.inputArg.forEach(t=>{const[e]=PS(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:pT(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),a[e]=n});Object.keys(a).forEach(t=>{const e=a[t];e.inputNames.forEach((t,n)=>{const[s,,r]=PS(t),o=a[s];if(null!=o.outputs){const t=o.outputs.indexOf(r);if(-1!==t){const a="".concat(s,":").concat(t);e.inputNames[n]=a}}e.inputs.push(o),o.children.push(e)})});const o=t.ret;t.signature.outputArg.forEach(t=>{const[e,n]=PS(o[t.name]),s=a[e];null!=s&&(s.defaultOutput=n,r.push(s))});const i=this.mapArgsToSignature(t);return{nodes:a,inputs:s,outputs:r,weights:n,placeholders:[],signature:i}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t),{}),outputs:t.signature.outputArg.reduce((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function lT(t,e){const n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=Yt().global;if("undefined"!==typeof e.atob)return e.atob(t);if("undefined"!==typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?n:n.toLowerCase()}function uT(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=t[e];return null!=s?lT(s.s,a):n}function hT(t,e,n){const a=t[e];return a?a.b:n}function dT(t,e,n){const a=t[e]||{},s=null!=a.i?a.i:null!=a.f?a.f:n;return"number"===typeof s?s:parseInt(s,10)}function pT(t){switch("string"===typeof t&&(t=AS[t]),t){case AS.DT_FLOAT:case AS.DT_HALF:return"float32";case AS.DT_INT32:case AS.DT_INT64:case AS.DT_INT8:case AS.DT_UINT8:return"int32";case AS.DT_BOOL:return"bool";case AS.DT_DOUBLE:return"float32";case AS.DT_STRING:return"string";case AS.DT_COMPLEX64:case AS.DT_COMPLEX128:return"complex64";default:return null}}function fT(t,e,n){const a=t[e];return a&&a.func?a.func.name:n}function mT(t,e,n){const a=t[e];return a&&a.type?pT(a.type):n}function gT(t,e,n){const a=t[e];return a&&a.list&&a.list.type?a.list.type.map(t=>pT(t)):n}function yT(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(t=>"number"===typeof t.size?t.size:parseInt(t.size,10)):[]}function bT(t,e,n){const a=t[e];return a&&a.shape?yT(a.shape):n}function xT(t,e,n){const a=t[e];return a?((a.list.f&&a.list.f.length?a.list.f:a.list.i)||[]).map(t=>"number"===typeof t?t:parseInt(t,10)):n}function wT(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=t[e];return s&&s.list&&s.list.s?s.list.s.map(t=>lT(t,a)):n}function vT(t,e,n){const a=t[e];return a&&a.list&&a.list.shape?a.list.shape.map(t=>yT(t)):n}function kT(t,e,n){const a=t[e];return a&&a.list&&a.list.b?a.list.b:n}class IT{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(t=>this.getInput(t)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((t,e)=>(t[e]=this.getAttr(e),t),{}))}getInput(t){return LS(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return LS(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return dT(this.node.rawAttrs,t,e);if(null!=n.s)return uT(this.node.rawAttrs,t,e);if(null!=n.b)return hT(this.node.rawAttrs,t,e);if(null!=n.shape)return bT(this.node.rawAttrs,t,e);if(null!=n.type)return mT(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return xT(this.node.rawAttrs,t,e);if(null!=n.list.s)return wT(this.node.rawAttrs,t,e);if(null!=n.list.shape)return vT(this.node.rawAttrs,t,e);if(null!=n.list.b)return kT(this.node.rawAttrs,t,e);if(null!=n.list.type)return gT(this.node.rawAttrs,t,e)}return e}}function NT(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if("number"!==typeof t&&"number"!==typeof e){ot(t.length===e.length,()=>n+" Shapes ".concat(t," and ").concat(e," must match"));for(let a=0;a<t.length;a++){const s=t[a],r=e[a];ot(s<0||r<0||s===r,()=>n+" Shapes ".concat(t," and ").concat(e," must match"))}}}function ST(t){return"number"!==typeof t&&!t.some(t=>t<0)}function TT(t,e,n){let a=CT(t,n);const s=!ST(a);if(s&&0===e.length)throw new Error("Tried to calculate elements of an empty list"+" with non-fully-defined elementShape: ".concat(a));if(s&&e.forEach(t=>{a=CT(t.shape,a)}),!ST(a))throw new Error("Non-fully-defined elementShape: ".concat(a));return a}function CT(t,e){if("number"===typeof t)return e;if("number"===typeof e)return t;if(t.length!==e.length)throw new Error("Incompatible ranks during merge: ".concat(t," vs. ").concat(e));const n=[];for(let a=0;a<t.length;++a){const s=t[a],r=e[a];if(s>=0&&r>=0&&s!==r)throw new Error("Incompatible shape during merge: ".concat(t," vs. ").concat(e));n[a]=s>=0?s:r}return n}class ET{constructor(t,e,n,a,s,r,o){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=a,this.identicalElementShapes=s,this.dynamicSize=r,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=Ui(0),uo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error("TensorArray ".concat(this.name," has already been closed."));if(t<0||t>=this.size())throw new Error("Tried to read from index ".concat(t,", but array size is: ").concat(this.size()));const e=this.tensors[t];if(e.cleared)throw new Error("TensorArray ".concat(this.name,": Could not read index ").concat(t," twice because it was cleared after a previous read ")+"(perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error("TensorArray ".concat(this.name," has already been closed."));if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error("Tried to write to index ".concat(t,", but array is not resizeable and size is: ").concat(this.maxSize));const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error("TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(t,",\n          because the value dtype is ").concat(e.dtype,", but TensorArray dtype is ").concat(this.dtype,"."));if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),NT(this.elementShape,e.shape,"TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(t,".")),n.read)throw new Error("TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(t,", because it has already been read."));if(n.written)throw new Error("TensorArray ".concat(this.name,": Could not write to TensorArray index ").concat(t,", because it has already been written."));n.tensor=e,uo(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error("TensorArray ".concat(this.name,": could not write multiple tensors,")+"because the index size: ".concat(t.length," is not the same as tensors size: ").concat(e.length,"."));t.forEach((t,n)=>this.write(t,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but gather requested dtype ").concat(e));if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return Jr([],[0].concat(this.elementShape));const n=this.readMany(t);return NT(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),ap(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but concat requested dtype ").concat(t));if(0===this.size())return Jr([],[0].concat(this.elementShape));const e=[];for(let a=0;a<this.size();a++)e.push(a);const n=this.readMany(e);return NT(this.elementShape,n[0].shape,"TensorArray shape mismatch: tensor array shape (".concat(this.elementShape,") vs first tensor shape (").concat(n[0].shape,")")),uu(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but tensor has dtype ").concat(e.dtype));if(t.length!==e.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: ".concat(t.length," vs. ").concat(e.shape[0]));const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error("Max index must be < array size (".concat(n,"  vs. ").concat(this.maxSize,")"));this.writeMany(t,yp(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error("TensorArray dtype is ".concat(this.dtype," but tensor has dtype ").concat(e.dtype));let n=0;const a=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ".concat(n,", and tensor's shape is: ").concat(e.shape));if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error("TensorArray's size is not equal to the size of lengths (".concat(this.maxSize," vs. ").concat(t.length,"), ")+"and the TensorArray is not marked as dynamically resizeable");const s=0===n?0:e.size/n,r=[];co(()=>{e=iu(e,[1,n,s]);for(let n=0;n<t.length;++n){const o=[0,0===n?0:a[n-1],0],i=[1,t[n],s];r[n]=iu(du(e,o,i),this.elementShape)}return r});const o=[];for(let i=0;i<t.length;i++)o[i]=i;this.writeMany(o,r)}}class AT{get id(){return this.idTensor.id}constructor(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1;this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach(t=>{if(n!==t.dtype)throw new Error("Invalid data types; op elements ".concat(n,", but list elements ").concat(t.dtype));NT(e,t.shape,"TensorList shape mismatch: "),uo(t)}),this.idTensor=Ui(0),this.maxNumElements=a,uo(this.idTensor)}copy(){return new AT([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.id)||e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(e!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(e,", but list elements ").concat(this.elementDtype));if(-1!==n&&this.tensors.length!==n)throw new Error("Operation expected a list with ".concat(n," elements but got a list with ").concat(this.tensors.length," elements."));NT(t,this.elementShape,"TensorList shape mismatch: ");const a=TT(this.elementShape,this.tensors,t);return co(()=>{const t=this.tensors.map(t=>iu(t,a));return ap(t,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(e,", but list elements ").concat(this.elementDtype));if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=TT(this.elementShape,this.tensors,t),a=this.tensors.pop();return a.kept=!1,NT(a.shape,t,"TensorList shape mismatch: "),iu(a,n)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(t.dtype,", but list elements ").concat(this.elementDtype));if(NT(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");uo(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error("TensorListResize expects size to be non-negative. Got: ".concat(t));if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error("TensorListResize input size ".concat(t," is greater maxNumElement ").concat(this.maxNumElements,"."));const e=new AT([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let n=0;n<Math.min(this.tensors.length,t);++n)e.tensors[n]=this.tensors[n];return e}getItem(t,e,n){if(n!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(n,", but list elements ").concat(this.elementDtype));if(t<0||t>this.tensors.length)throw new Error("Trying to access element ".concat(t," in a list with ").concat(this.tensors.length," elements."));if(null==this.tensors[t])throw new Error("element at index ".concat(t," is null."));NT(this.tensors[t].shape,e,"TensorList shape mismatch: ");const a=TT(this.elementShape,this.tensors,e);return iu(this.tensors[t],a)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(e.dtype,", but list elements ").concat(this.elementDtype));if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error("Trying to set element ".concat(t," in a list with max ").concat(this.maxNumElements," elements."));NT(this.elementShape,e.shape,"TensorList shape mismatch: "),uo(e),null!=this.tensors[t]&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error("Invalid data types; op elements ".concat(e,", but list elements ").concat(this.elementDtype));NT(this.elementShape,n,"TensorList shape mismatch: "),t=t.slice(0,this.size());const a=TT(this.elementShape,this.tensors,n);return 0===t.length?Jr([],[0].concat(a)):co(()=>{const e=t.map(t=>iu(this.tensors[t],a));return ap(e,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error("TensorList dtype is ".concat(this.elementDtype," but concat requested dtype ").concat(t));NT(this.elementShape,e,"TensorList shape mismatch: ");const n=TT(this.elementShape,this.tensors,e);return 0===this.size()?Jr([],[0].concat(n)):co(()=>{const t=this.tensors.map(t=>iu(t,n));return uu(t,0)})}}const RT=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const a=MS("thenBranch",t,e,n),s=MS("elseBranch",t,e,n),r=MS("cond",t,e,n),o=MS("args",t,e,n);return(await r.data())[0]?n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const a=MS("body",t,e,n),s=MS("cond",t,e,n),r=MS("args",t,e,n),o=await n.functionMap[s].executeFunctionAsync(r,n.tensorArrayMap,n.tensorListMap),i=r.map(t=>t.id);let c=await o[0].data();o.forEach(t=>{t.kept||-1!==i.indexOf(t.id)||t.dispose()});let l=r;for(;c[0];){const t=l;l=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const e=l.map(t=>t.id);t.forEach(t=>{t.kept||-1!==i.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()});const r=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);c=await r[0].data(),r.forEach(t=>{t.kept||-1!==i.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()})}return l}case"LoopCond":return[US(MS("pred",t,e,n))];case"Switch":{const a=MS("pred",t,e,n);let s=MS("data",t,e,n);return s.kept||(s=US(s)),(await a.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const a=t.inputNames.find(t=>void 0!==LS(t,e,n));if(a){return[US(LS(a,e,n))]}return}case"Enter":{const a=MS("frameName",t,e,n),s=MS("tensor",t,e,n);return n.enterFrame(a),[US(s)]}case"Exit":{const a=MS("tensor",t,e,n);return n.exitFrame(),[US(a)]}case"NextIteration":{const a=MS("tensor",t,e,n);return n.nextIteration(),[US(a)]}case"TensorArrayV3":{const a=MS("size",t,e,n),s=MS("dtype",t,e,n),r=MS("elementShape",t,e,n),o=MS("dynamicSize",t,e,n),i=MS("clearAfterRead",t,e,n),c=MS("identicalElementShapes",t,e,n),l=MS("name",t,e,n),u=new ET(l,s,a,r,c,o,i);return n.addTensorArray(u),[u.idTensor,Ui(1)]}case"TensorArrayWriteV3":{const a=MS("tensorArrayId",t,e,n),s=MS("index",t,e,n),r=MS("tensor",t,e,n),o=n.getTensorArray(a.id);return o.write(s,r),[o.idTensor]}case"TensorArrayReadV3":{const a=MS("tensorArrayId",t,e,n),s=MS("index",t,e,n);return[n.getTensorArray(a.id).read(s)]}case"TensorArrayGatherV3":{const a=MS("tensorArrayId",t,e,n),s=MS("indices",t,e,n),r=MS("dtype",t,e,n);return[n.getTensorArray(a.id).gather(s,r)]}case"TensorArrayScatterV3":{const a=MS("tensorArrayId",t,e,n),s=MS("indices",t,e,n),r=MS("tensor",t,e,n),o=n.getTensorArray(a.id);return o.scatter(s,r),[o.idTensor]}case"TensorArrayConcatV3":{const a=MS("tensorArrayId",t,e,n),s=n.getTensorArray(a.id),r=MS("dtype",t,e,n);return[s.concat(r)]}case"TensorArraySplitV3":{const a=MS("tensorArrayId",t,e,n),s=MS("tensor",t,e,n),r=MS("lengths",t,e,n),o=n.getTensorArray(a.id);return o.split(r,s),[o.idTensor]}case"TensorArraySizeV3":{const a=MS("tensorArrayId",t,e,n);return[Ui(n.getTensorArray(a.id).size(),"int32")]}case"TensorArrayCloseV3":{const a=MS("tensorArrayId",t,e,n),s=n.getTensorArray(a.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const a=MS("tensorListId",t,e,n),s=MS("index",t,e,n),r=MS("tensor",t,e,n),o=n.getTensorList(a.id);return o.setItem(s,r),[o.idTensor]}case"TensorListGetItem":{const a=MS("tensorListId",t,e,n),s=MS("index",t,e,n),r=MS("elementShape",t,e,n),o=MS("elementDType",t,e,n);return[n.getTensorList(a.id).getItem(s,r,o)]}case"TensorListScatterV2":case"TensorListScatter":{const a=MS("indices",t,e,n),s=function(t,e,n,a){if(e.length!==t.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: ".concat(e.length," vs. ").concat(t.shape[0]));const s=Math.max(...e);if(null!=a&&-1!==a&&s>=a)throw new Error("Max index must be < array size (".concat(s,"  vs. ").concat(a,")"));const r=new AT([],n,t.dtype,a),o=yp(t,0);return e.forEach((t,e)=>{r.setItem(t,o[e])}),r}(MS("tensor",t,e,n),a,MS("elementShape",t,e,n),MS("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const a=MS("elementShape",t,e,n),s=MS("elementDType",t,e,n);let r;r="TensorListReserve"===t.op?"numElements":"maxNumElements";const o=MS(r,t,e,n),i=function(t,e,n,a){return new AT([],t,e,a)}(a,s,0,"TensorListReserve"===t.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const a=MS("tensorListId",t,e,n),s=MS("indices",t,e,n),r=MS("elementShape",t,e,n),o=MS("elementDType",t,e,n);return[n.getTensorList(a.id).gather(s,o,r)]}case"TensorListStack":{const a=MS("tensorListId",t,e,n),s=MS("elementShape",t,e,n),r=MS("elementDType",t,e,n),o=MS("numElements",t,e,n);return[n.getTensorList(a.id).stack(s,r,o)]}case"TensorListFromTensor":{const a=function(t,e,n){const a=t.dtype;if(t.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: ".concat(t.shape));if(t.dtype!==n)throw new Error("Invalid data types; op elements ".concat(t.dtype,", but list elements ").concat(n));NT(t.shape.slice(1),e,"TensorList shape mismatch: ");const s=yp(t);return new AT(s,e,a)}(MS("tensor",t,e,n),MS("elementShape",t,e,n),MS("elementDType",t,e,n));return n.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const a=MS("tensorListId",t,e,n),s=n.getTensorList(a.id),r=MS("dtype",t,e,n),o=MS("elementShape",t,e,n);return[s.concat(r,o)]}case"TensorListPushBack":{const a=MS("tensorListId",t,e,n),s=MS("tensor",t,e,n),r=n.getTensorList(a.id);return r.pushBack(s),[r.idTensor]}case"TensorListPopBack":{const a=MS("tensorListId",t,e,n),s=MS("elementShape",t,e,n),r=MS("elementDType",t,e,n);return[n.getTensorList(a.id).popBack(s,r)]}case"TensorListSplit":{const a=MS("tensor",t,e,n),s=MS("elementShape",t,e,n),r=function(t,e,n){let a=0;const s=e.map(t=>(a+=t,a));if(a!==t.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ".concat(a,", and tensor's shape is: ").concat(t.shape));const r=CT(t.shape.slice(1),n),o=0===a?0:t.size/a,i=co(()=>{const n=[];t=iu(t,[1,a,o]);for(let a=0;a<e.length;++a){const i=[0,0===a?0:s[a-1],0],c=[1,e[a],o];n[a]=iu(du(t,i,c),r)}return t.dispose(),n}),c=new AT([],n,t.dtype,e.length);for(let l=0;l<i.length;l++)c.setItem(l,i[l]);return c}(a,MS("lengths",t,e,n),s);return n.addTensorList(r),[r.idTensor]}case"TensorListLength":{const a=MS("tensorListId",t,e,n);return[Ui(n.getTensorList(a.id).size(),"int32")]}case"TensorListResize":{const a=MS("tensorListId",t,e,n),s=MS("size",t,e,n),r=n.getTensorList(a.id).resize(s);return n.addTensorList(r),[r.idTensor]}default:throw TypeError("Node type ".concat(t.op," is not implemented"))}};function FT(t,e,n){const[a,s]=MS("fusedOps",t,e,n),r="biasadd"===a,o=!r,i="prelu"===s,c="fusedbatchnorm"===a,l=MS("numArgs",t,e,n);if(r){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&r&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(c)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const u=MS("strides",t,e,n),h=VS(t,e,n),d=MS("dataFormat",t,e,n).toUpperCase(),p=MS("dilations",t,e,n);let[f,m]=MS("args",t,e,n);o&&(m=f,f=void 0);return{stride:u,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:MS("leakyreluAlpha",t,e,n)}}function DT(t,e,n){return{boxes:MS("boxes",t,e,n),scores:MS("scores",t,e,n),maxOutputSize:MS("maxOutputSize",t,e,n),iouThreshold:MS("iouThreshold",t,e,n),scoreThreshold:MS("scoreThreshold",t,e,n),softNmsSigma:MS("softNmsSigma",t,e,n)}}class _T{get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=Ui(0),this.tensorMap=new Map,uo(this.handle)}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ui(this.size(),"int32")}async import(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),co(()=>{const t=yp(e),a=n.length,s=t.length;ot(a===s,()=>"The number of elements doesn't match, keys has "+"".concat(a," elements, the values has ").concat(s," ")+"elements.");for(let e=0;e<a;e++){const a=n[e],s=t[e];uo(s),this.tensorMap.set(a,s)}return this.handle})}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return co(()=>{const t=[];for(let a=0;a<n.length;a++){const s=n[a],r=this.findWithDefault(s,e);t.push(r)}return ap(t)})}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error("Expect key dtype ".concat(this.keyDType,", but got ")+"".concat(t.dtype));if(e.dtype!==this.valueDType)throw new Error("Expect value dtype ".concat(this.valueDType,", but got ")+"".concat(e.dtype))}}function OT(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:co;const r=((t,e,n)=>{switch(t.category){case"arithmetic":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[a.add(MS("a",t,e,n),MS("b",t,e,n))];case"AddN":return[a.addN(MS("tensors",t,e,n))];case"FloorMod":case"Mod":return[a.mod(MS("a",t,e,n),MS("b",t,e,n))];case"Mul":return[a.mul(MS("a",t,e,n),MS("b",t,e,n))];case"RealDiv":case"Div":return[a.div(MS("a",t,e,n),MS("b",t,e,n))];case"DivNoNan":return[a.divNoNan(MS("a",t,e,n),MS("b",t,e,n))];case"FloorDiv":return[a.floorDiv(MS("a",t,e,n),MS("b",t,e,n))];case"Sub":return[a.sub(MS("a",t,e,n),MS("b",t,e,n))];case"Minimum":return[a.minimum(MS("a",t,e,n),MS("b",t,e,n))];case"Maximum":return[a.maximum(MS("a",t,e,n),MS("b",t,e,n))];case"Pow":return[a.pow(MS("a",t,e,n),MS("b",t,e,n))];case"SquaredDifference":return[a.squaredDifference(MS("a",t,e,n),MS("b",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"basic_math":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"Abs":case"ComplexAbs":return[a.abs(MS("x",t,e,n))];case"Acos":return[a.acos(MS("x",t,e,n))];case"Acosh":return[a.acosh(MS("x",t,e,n))];case"Asin":return[a.asin(MS("x",t,e,n))];case"Asinh":return[a.asinh(MS("x",t,e,n))];case"Atan":return[a.atan(MS("x",t,e,n))];case"Atan2":return[a.atan2(MS("x",t,e,n),MS("y",t,e,n))];case"Atanh":return[a.atanh(MS("x",t,e,n))];case"Ceil":return[a.ceil(MS("x",t,e,n))];case"Complex":return[a.complex(MS("real",t,e,n),MS("imag",t,e,n))];case"Cos":return[a.cos(MS("x",t,e,n))];case"Cosh":return[a.cosh(MS("x",t,e,n))];case"Elu":return[a.elu(MS("x",t,e,n))];case"Erf":return[a.erf(MS("x",t,e,n))];case"Exp":return[a.exp(MS("x",t,e,n))];case"Expm1":return[a.expm1(MS("x",t,e,n))];case"Floor":return[a.floor(MS("x",t,e,n))];case"Log":return[a.log(MS("x",t,e,n))];case"Log1p":return[a.log1p(MS("x",t,e,n))];case"Imag":return[a.imag(MS("x",t,e,n))];case"Neg":return[a.neg(MS("x",t,e,n))];case"Reciprocal":return[a.reciprocal(MS("x",t,e,n))];case"Real":return[a.real(MS("x",t,e,n))];case"Relu":return[a.relu(MS("x",t,e,n))];case"Round":return[a.round(MS("x",t,e,n))];case"Selu":return[a.selu(MS("x",t,e,n))];case"Sigmoid":return[a.sigmoid(MS("x",t,e,n))];case"Sin":return[a.sin(MS("x",t,e,n))];case"Sign":return[a.sign(MS("x",t,e,n))];case"Sinh":return[a.sinh(MS("x",t,e,n))];case"Softplus":return[a.softplus(MS("x",t,e,n))];case"Sqrt":return[a.sqrt(MS("x",t,e,n))];case"Square":return[a.square(MS("x",t,e,n))];case"Tanh":return[a.tanh(MS("x",t,e,n))];case"Tan":return[a.tan(MS("x",t,e,n))];case"ClipByValue":return[a.clipByValue(MS("x",t,e,n),MS("clipValueMin",t,e,n),MS("clipValueMax",t,e,n))];case"Relu6":return[a.relu6(MS("x",t,e,n))];case"Rsqrt":return[a.rsqrt(LS(t.inputNames[0],e,n))];case"LeakyRelu":return[a.leakyRelu(MS("x",t,e,n),MS("alpha",t,e,n))];case"Prelu":return[a.prelu(MS("x",t,e,n),MS("alpha",t,e,n))];case"IsNan":return[a.isNaN(LS(t.inputNames[0],e,n))];case"IsInf":return[a.isInf(LS(t.inputNames[0],e,n))];case"IsFinite":return[a.isFinite(LS(t.inputNames[0],e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"control":return RT(t,e,n);case"convolution":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"Conv1D":{const s=MS("stride",t,e,n),r=MS("pad",t,e,n),o=MS("dataFormat",t,e,n).toUpperCase(),i=MS("dilation",t,e,n);return[a.conv1d(MS("x",t,e,n),MS("filter",t,e,n),s,r,o,i)]}case"Conv2D":{const s=MS("strides",t,e,n),r=VS(t,e,n),o=MS("dataFormat",t,e,n).toUpperCase(),i=MS("dilations",t,e,n);return[a.conv2d(MS("x",t,e,n),MS("filter",t,e,n),[s[1],s[2]],r,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:o,dilations:i,biasArg:c,preluArg:l,activationFunc:u,leakyreluAlpha:h}=FT(t,e,n);return[a.fused.conv2d({x:MS("x",t,e,n),filter:MS("filter",t,e,n),strides:[s[1],s[2]],pad:r,dataFormat:o,dilations:[i[1],i[2]],bias:c,activation:u,preluActivationWeights:l,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:o,dilations:i,biasArg:c,preluArg:l,activationFunc:u,leakyreluAlpha:h}=FT(t,e,n);return[a.fused.depthwiseConv2d({x:MS("x",t,e,n),filter:MS("filter",t,e,n),strides:[s[1],s[2]],pad:r,dataFormat:o,dilations:[i[1],i[2]],bias:c,activation:u,preluActivationWeights:l,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=MS("outputShape",t,e,n),r=MS("strides",t,e,n),o=VS(t,e,n);return[a.conv2dTranspose(MS("x",t,e,n),MS("filter",t,e,n),s,[r[1],r[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=MS("strides",t,e,n),r=VS(t,e,n),o=MS("dilations",t,e,n),i=MS("dataFormat",t,e,n).toUpperCase();return[a.depthwiseConv2d(MS("input",t,e,n),MS("filter",t,e,n),[s[1],s[2]],r,i,[o[1],o[2]])]}case"Conv3D":{const s=MS("strides",t,e,n),r=MS("pad",t,e,n),o=MS("dataFormat",t,e,n).toUpperCase(),i=MS("dilations",t,e,n);return[a.conv3d(MS("x",t,e,n),MS("filter",t,e,n),[s[1],s[2],s[3]],r,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=MS("strides",t,e,n),r=MS("pad",t,e,n),o=MS("kernelSize",t,e,n);return[a.avgPool(MS("x",t,e,n),[o[1],o[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=MS("strides",t,e,n),r=MS("pad",t,e,n),o=MS("kernelSize",t,e,n);return[a.maxPool(MS("x",t,e,n),[o[1],o[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=MS("strides",t,e,n),r=MS("pad",t,e,n),o=MS("kernelSize",t,e,n),i=MS("includeBatchInIndex",t,e,n),{result:c,indexes:l}=a.maxPoolWithArgmax(MS("x",t,e,n),[o[1],o[2]],[s[1],s[2]],r,i);return[c,l]}case"AvgPool3D":{const s=MS("strides",t,e,n),r=MS("pad",t,e,n),o=MS("kernelSize",t,e,n);return[a.avgPool3d(MS("x",t,e,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=MS("strides",t,e,n),r=MS("pad",t,e,n),o=MS("kernelSize",t,e,n);return[a.maxPool3d(MS("x",t,e,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=MS("strides",t,e,n),r=MS("pad",t,e,n),o=MS("dilations",t,e,n),i=s[1],c=s[2],l=o[1],u=o[2];return[a.dilation2d(MS("x",t,e,n),MS("filter",t,e,n),[i,c],r,[l,u],"NHWC")]}default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"creation":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"Fill":{const s=MS("shape",t,e,n),r=MS("dtype",t,e,n),o=MS("value",t,e,n);return[a.fill(s,o,r)]}case"LinSpace":{const s=MS("start",t,e,n),r=MS("stop",t,e,n),o=MS("num",t,e,n);return[a.linspace(s,r,o)]}case"Multinomial":{const s=MS("logits",t,e,n),r=MS("numSamples",t,e,n),o=MS("seed",t,e,n);return[a.multinomial(s,r,o)]}case"OneHot":{const s=MS("indices",t,e,n),r=MS("depth",t,e,n),o=MS("onValue",t,e,n),i=MS("offValue",t,e,n),c=MS("dtype",t,e,n);return[a.oneHot(s,r,o,i,c)]}case"Ones":return[a.ones(MS("shape",t,e,n),MS("dtype",t,e,n))];case"OnesLike":return[a.onesLike(MS("x",t,e,n))];case"RandomStandardNormal":return[a.randomStandardNormal(MS("shape",t,e,n),MS("dtype",t,e,n),MS("seed",t,e,n))];case"RandomUniform":return[a.randomUniform(MS("shape",t,e,n),MS("minval",t,e,n),MS("maxval",t,e,n),MS("dtype",t,e,n))];case"RandomUniformInt":return[a.randomUniformInt(MS("shape",t,e,n),MS("minval",t,e,n),MS("maxval",t,e,n),MS("seed",t,e,n))];case"Range":{const s=MS("start",t,e,n),r=MS("stop",t,e,n),o=MS("step",t,e,n);return[a.range(s,r,o,MS("dtype",t,e,n))]}case"TruncatedNormal":{const s=MS("shape",t,e,n),r=MS("mean",t,e,n),o=MS("stdDev",t,e,n),i=MS("seed",t,e,n);return[a.truncatedNormal(s,r,o,MS("dtype",t,e,n),i)]}case"Zeros":return[a.zeros(MS("shape",t,e,n),MS("dtype",t,e,n))];case"ZerosLike":return[a.zerosLike(MS("x",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"dynamic":return async function(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:H;switch(t.op){case"NonMaxSuppressionV5":{const{boxes:a,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:c,softNmsSigma:l}=DT(t,e,n),u=await s.image.nonMaxSuppressionWithScoreAsync(a,r,o,i,c,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:a,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:c}=DT(t,e,n),l=MS("padToMaxOutputSize",t,e,n),u=await s.image.nonMaxSuppressionPaddedAsync(a,r,o,i,c,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:a,scores:r,maxOutputSize:o,iouThreshold:i,scoreThreshold:c}=DT(t,e,n);return[await s.image.nonMaxSuppressionAsync(a,r,o,i,c)]}case"Where":{const a=s.cast(MS("condition",t,e,n),"bool"),r=[await s.whereAsync(a)];return a.dispose(),r}case"ListDiff":return s.setdiff1dAsync(MS("x",t,e,n),MS("y",t,e,n));default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n);case"evaluation":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"LowerBound":{const s=MS("sortedSequence",t,e,n),r=MS("values",t,e,n);return[a.lowerBound(s,r)]}case"TopKV2":{const s=MS("x",t,e,n),r=MS("k",t,e,n),o=MS("sorted",t,e,n),i=a.topk(s,r,o);return[i.values,i.indices]}case"UpperBound":{const s=MS("sortedSequence",t,e,n),r=MS("values",t,e,n);return[a.upperBound(s,r)]}case"Unique":{const s=MS("x",t,e,n),r=a.unique(s);return[r.values,r.indices]}case"UniqueV2":{const s=MS("x",t,e,n),r=MS("axis",t,e,n),o=a.unique(s,r);return[o.values,o.indices]}default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"image":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"ResizeBilinear":{const s=MS("images",t,e,n),r=MS("size",t,e,n),o=MS("alignCorners",t,e,n),i=MS("halfPixelCenters",t,e,n);return[a.image.resizeBilinear(s,[r[0],r[1]],o,i)]}case"ResizeNearestNeighbor":{const s=MS("images",t,e,n),r=MS("size",t,e,n),o=MS("alignCorners",t,e,n),i=MS("halfPixelCenters",t,e,n);return[a.image.resizeNearestNeighbor(s,[r[0],r[1]],o,i)]}case"CropAndResize":{const s=MS("image",t,e,n),r=MS("boxes",t,e,n),o=MS("boxInd",t,e,n),i=MS("cropSize",t,e,n),c=MS("method",t,e,n),l=MS("extrapolationValue",t,e,n);return[a.image.cropAndResize(s,r,o,i,c,l)]}case"ImageProjectiveTransformV3":{const s=MS("images",t,e,n),r=MS("transforms",t,e,n),o=MS("outputShape",t,e,n),i=MS("fillValue",t,e,n),c=MS("interpolation",t,e,n),l=MS("fillMode",t,e,n);return[a.image.transform(s,r,c.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"graph":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const s=MS("default",t,e,n);return[LS(t.name,e,n)||s];case"Placeholder":return[LS(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[US(MS("x",t,e,n))];case"IdentityN":return MS("x",t,e,n).map(t=>US(t));case"Shape":return[a.tensor1d(MS("x",t,e,n).shape,"int32")];case"ShapeN":return MS("x",t,e,n).map(t=>a.tensor1d(t.shape));case"Size":return[a.scalar(MS("x",t,e,n).size,"int32")];case"Rank":return[a.scalar(MS("x",t,e,n).rank,"int32")];case"NoOp":return[a.scalar(1)];case"Print":const r=MS("x",t,e,n),o=MS("data",t,e,n),i=MS("message",t,e,n),c=MS("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let t=0;t<o.length;t++)console.log(Array.prototype.slice.call(o[t].dataSync()).slice(0,c));return[r];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"logical":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"Equal":return[a.equal(MS("a",t,e,n),MS("b",t,e,n))];case"NotEqual":return[a.notEqual(MS("a",t,e,n),MS("b",t,e,n))];case"Greater":return[a.greater(MS("a",t,e,n),MS("b",t,e,n))];case"GreaterEqual":return[a.greaterEqual(MS("a",t,e,n),MS("b",t,e,n))];case"Less":return[a.less(MS("a",t,e,n),MS("b",t,e,n))];case"LessEqual":return[a.lessEqual(MS("a",t,e,n),MS("b",t,e,n))];case"LogicalAnd":return[a.logicalAnd(MS("a",t,e,n),MS("b",t,e,n))];case"LogicalNot":return[a.logicalNot(MS("a",t,e,n))];case"LogicalOr":return[a.logicalOr(MS("a",t,e,n),MS("b",t,e,n))];case"Select":case"SelectV2":return[a.where(MS("condition",t,e,n),MS("a",t,e,n),MS("b",t,e,n))];case"BitwiseAnd":return[a.bitwiseAnd(MS("a",t,e,n),MS("b",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"matrices":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[a.matMul(MS("a",t,e,n),MS("b",t,e,n),MS("transposeA",t,e,n),MS("transposeB",t,e,n))];case"Einsum":return[a.einsum(MS("equation",t,e,n),...MS("tensors",t,e,n))];case"Transpose":return[a.transpose(MS("x",t,e,n),MS("perm",t,e,n))];case"_FusedMatMul":const[s,r]=MS("fusedOps",t,e,n),o="biasadd"===s,i="prelu"===r,c=MS("numArgs",t,e,n),l=MS("leakyreluAlpha",t,e,n);if(o){if(i&&2!==c)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==c)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,h]=MS("args",t,e,n);return[a.fused.matMul({a:MS("a",t,e,n),b:MS("b",t,e,n),transposeA:MS("transposeA",t,e,n),transposeB:MS("transposeB",t,e,n),bias:u,activation:r,preluActivationWeights:h,leakyreluAlpha:l})];case"MatrixBandPart":return[a.linalg.bandPart(MS("a",t,e,n),MS("numLower",t,e,n),MS("numUpper",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"normalization":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"EuclideanNorm":return[a.euclideanNorm(MS("x",t,e,n),MS("axis",t,e,n),MS("keepDims",t,e,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[a.batchNorm(MS("x",t,e,n),MS("mean",t,e,n),MS("variance",t,e,n),MS("offset",t,e,n),MS("scale",t,e,n),MS("epsilon",t,e,n))];case"LRN":return[a.localResponseNormalization(MS("x",t,e,n),MS("radius",t,e,n),MS("bias",t,e,n),MS("alpha",t,e,n),MS("beta",t,e,n))];case"Softmax":return[a.softmax(MS("x",t,e,n))];case"LogSoftmax":return[a.logSoftmax(MS("x",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"ragged":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"RaggedGather":{const{outputNestedSplits:s,outputDenseValues:r}=a.raggedGather(MS("paramsNestedSplits",t,e,n),MS("paramsDenseValues",t,e,n),MS("indices",t,e,n),MS("outputRaggedRank",t,e,n));return s.concat(r)}case"RaggedRange":{const{rtNestedSplits:s,rtDenseValues:r}=a.raggedRange(MS("starts",t,e,n),MS("limits",t,e,n),MS("splits",t,e,n));return[s,r]}case"RaggedTensorToTensor":return[a.raggedTensorToTensor(MS("shape",t,e,n),MS("values",t,e,n),MS("defaultValue",t,e,n),MS("rowPartitionTensors",t,e,n),MS("rowPartitionTypes",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"reduction":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"Max":{const s=MS("axis",t,e,n),r=MS("keepDims",t,e,n);return[a.max(MS("x",t,e,n),s,r)]}case"Mean":{const s=MS("axis",t,e,n),r=MS("keepDims",t,e,n);return[a.mean(MS("x",t,e,n),s,r)]}case"Min":{const s=MS("axis",t,e,n),r=MS("keepDims",t,e,n);return[a.min(MS("x",t,e,n),s,r)]}case"Sum":{const s=MS("axis",t,e,n),r=MS("keepDims",t,e,n);return[a.sum(MS("x",t,e,n),s,r)]}case"All":{const s=MS("axis",t,e,n),r=MS("keepDims",t,e,n);return[a.all(MS("x",t,e,n),s,r)]}case"Any":{const s=MS("axis",t,e,n),r=MS("keepDims",t,e,n);return[a.any(MS("x",t,e,n),s,r)]}case"ArgMax":{const s=MS("axis",t,e,n);return[a.argMax(MS("x",t,e,n),s)]}case"ArgMin":{const s=MS("axis",t,e,n);return[a.argMin(MS("x",t,e,n),s)]}case"Prod":{const s=MS("axis",t,e,n),r=MS("keepDims",t,e,n);return[a.prod(MS("x",t,e,n),s,r)]}case"Cumprod":{const s=MS("axis",t,e,n),r=MS("exclusive",t,e,n),o=MS("reverse",t,e,n);return[a.cumprod(MS("x",t,e,n),s,r,o)]}case"Cumsum":{const s=MS("axis",t,e,n),r=MS("exclusive",t,e,n),o=MS("reverse",t,e,n);return[a.cumsum(MS("x",t,e,n),s,r,o)]}case"Bincount":const s=MS("x",t,e,n),r=MS("weights",t,e,n),o=MS("size",t,e,n);return[a.bincount(s,r,o)];case"DenseBincount":{const s=MS("x",t,e,n),r=MS("weights",t,e,n),o=MS("size",t,e,n),i=MS("binaryOutput",t,e,n);return[a.denseBincount(s,r,o,i)]}default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"slice_join":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"ConcatV2":case"Concat":{const s=MS("n",t,e,n),r=MS("axis",t,e,n);let o=MS("tensors",t,e,n);return o=o.slice(0,s),[a.concat(o,r)]}case"Gather":{const s=MS("x",t,e,n),r=MS("indices",t,e,n);return[a.gather(s,a.cast(r,"int32"),0)]}case"GatherV2":{const s=MS("axis",t,e,n),r=MS("batchDims",t,e,n),o=MS("x",t,e,n),i=MS("indices",t,e,n);return[a.gather(o,a.cast(i,"int32"),s,r)]}case"Reverse":{const s=MS("dims",t,e,n),r=[];for(let t=0;t<s.length;t++)s[t]&&r.push(t);const o=MS("x",t,e,n);return[a.reverse(o,r)]}case"ReverseV2":{const s=MS("axis",t,e,n),r=MS("x",t,e,n);return[a.reverse(r,s)]}case"Slice":{const s=MS("begin",t,e,n),r=MS("size",t,e,n);return[a.slice(MS("x",t,e,n),s,r)]}case"StridedSlice":{const s=MS("begin",t,e,n),r=MS("end",t,e,n),o=MS("strides",t,e,n),i=MS("beginMask",t,e,n),c=MS("endMask",t,e,n),l=MS("ellipsisMask",t,e,n),u=MS("newAxisMask",t,e,n),h=MS("shrinkAxisMask",t,e,n),d=MS("x",t,e,n);return[a.stridedSlice(d,s,r,o,i,c,l,u,h)]}case"Pack":return co(()=>{const s=MS("axis",t,e,n),r=MS("tensors",t,e,n),o=r[0].shape,i=a.squeeze(r[0]).shape,c=r.map(t=>{const e=dt(t.shape,o);if(!e&&!dt(a.squeeze(t).shape,i))throw new Error("the input tensors shape does not match");return e?t:a.reshape(t,o)});return[a.stack(c,s)]});case"Unpack":{const s=MS("axis",t,e,n),r=MS("tensor",t,e,n);return a.unstack(r,s)}case"Tile":{const s=MS("reps",t,e,n);return[a.tile(MS("x",t,e,n),s)]}case"Split":case"SplitV":{const s=MS("axis",t,e,n),r=MS("numOrSizeSplits",t,e,n),o=MS("x",t,e,n);return a.split(o,r,s)}case"ScatterNd":{const s=MS("indices",t,e,n),r=MS("values",t,e,n),o=MS("shape",t,e,n);return[a.scatterND(s,r,o)]}case"GatherNd":{const s=MS("x",t,e,n),r=MS("indices",t,e,n);return[a.gatherND(s,r)]}case"SparseToDense":{const s=MS("sparseIndices",t,e,n),r=MS("outputShape",t,e,n),o=MS("sparseValues",t,e,n),i=MS("defaultValue",t,e,n);return[a.sparseToDense(s,o,r,o.dtype===i.dtype?i:a.cast(i,o.dtype))]}case"TensorScatterUpdate":{const s=MS("indices",t,e,n),r=MS("values",t,e,n),o=MS("tensor",t,e,n);return[a.tensorScatterUpdate(o,s,r)]}default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"sparse":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:r,emptyRowIndicator:o,reverseIndexMap:i}=a.sparse.sparseFillEmptyRows(MS("indices",t,e,n),MS("values",t,e,n),MS("denseShape",t,e,n),MS("defaultValue",t,e,n));return[s,r,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:r}=a.sparse.sparseReshape(MS("inputIndices",t,e,n),MS("inputShape",t,e,n),MS("newShape",t,e,n));return[s,r]}case"SparseSegmentMean":return[a.sparse.sparseSegmentMean(MS("data",t,e,n),MS("indices",t,e,n),MS("segmentIds",t,e,n))];case"SparseSegmentSum":return[a.sparse.sparseSegmentSum(MS("data",t,e,n),MS("indices",t,e,n),MS("segmentIds",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"spectral":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"FFT":return[a.fft(MS("x",t,e,n))];case"IFFT":return[a.ifft(MS("x",t,e,n))];case"RFFT":return[a.rfft(MS("x",t,e,n))];case"IRFFT":return[a.irfft(MS("x",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"string":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"StaticRegexReplace":return[a.string.staticRegexReplace(MS("input",t,e,n),MS("pattern",t,e,n),MS("rewrite",t,e,n),MS("replaceGlobal",t,e,n))];case"StringNGrams":{const{nGrams:s,nGramsSplits:r}=a.string.stringNGrams(MS("data",t,e,n),MS("dataSplits",t,e,n),MS("separator",t,e,n),MS("nGramWidths",t,e,n),MS("leftPad",t,e,n),MS("rightPad",t,e,n),MS("padWidth",t,e,n),MS("preserveShortSequences",t,e,n));return[s,r]}case"StringSplit":{const{indices:s,values:r,shape:o}=a.string.stringSplit(MS("input",t,e,n),MS("delimiter",t,e,n),MS("skipEmpty",t,e,n));return[s,r,o]}case"StringToHashBucketFast":return[a.string.stringToHashBucketFast(MS("input",t,e,n),MS("numBuckets",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"transformation":return s(()=>function(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:H;switch(t.op){case"Cast":return[a.cast(MS("x",t,e,n),MS("dtype",t,e,n))];case"ExpandDims":{const s=MS("axis",t,e,n);return[a.expandDims(MS("x",t,e,n),s)]}case"Squeeze":{const s=MS("axis",t,e,n);return[a.squeeze(MS("x",t,e,n),s)]}case"Reshape":return[a.reshape(MS("x",t,e,n),MS("shape",t,e,n))];case"EnsureShape":return[a.ensureShape(MS("x",t,e,n),MS("shape",t,e,n))];case"MirrorPad":return[a.mirrorPad(MS("x",t,e,n),MS("padding",t,e,n),MS("mode",t,e,n))];case"PadV2":case"Pad":return[a.pad(MS("x",t,e,n),MS("padding",t,e,n),MS("constantValue",t,e,n))];case"SpaceToBatchND":{const s=MS("blockShape",t,e,n),r=MS("paddings",t,e,n);return[a.spaceToBatchND(MS("x",t,e,n),s,r)]}case"BatchToSpaceND":{const s=MS("blockShape",t,e,n),r=MS("crops",t,e,n);return[a.batchToSpaceND(MS("x",t,e,n),s,r)]}case"DepthToSpace":{const s=MS("blockSize",t,e,n),r=MS("dataFormat",t,e,n).toUpperCase();return[a.depthToSpace(MS("x",t,e,n),s,r)]}case"BroadcastTo":return[a.broadcastTo(MS("x",t,e,n),MS("shape",t,e,n))];case"BroadcastArgs":return[a.broadcastArgs(MS("s0",t,e,n),MS("s1",t,e,n))];default:throw TypeError("Node type ".concat(t.op," is not implemented"))}}(t,e,n));case"hash_table":return(async(t,e,n,a)=>{switch(t.op){case"HashTable":case"HashTableV2":{const s=a.getHashTableHandleByName(t.name);if(null!=s)return[s];{const s=MS("keyDType",t,e,n),r=MS("valueDType",t,e,n),o=new _T(s,r);return a.addHashTable(t.name,o),[o.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const s=MS("tableHandle",t,e,n,a),r=MS("keys",t,e,n),o=MS("values",t,e,n),i=a.getHashTableById(s.id);return[await i.import(r,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=MS("tableHandle",t,e,n,a),r=MS("keys",t,e,n),o=MS("defaultValue",t,e,n),i=a.getHashTableById(s.id);return[await i.find(r,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=MS("tableHandle",t,e,n,a);return[a.getHashTableById(s.id).tensorSize()]}default:throw TypeError("Node type ".concat(t.op," is not implemented"))}})(t,e,n,a);case"custom":const r=_S(t.op);if(r&&r.customExecutor)return r.customExecutor(new IT(t,e,n));throw TypeError("Custom op ".concat(t.op," is not registered."));default:throw TypeError("Unknown op '".concat(t.op,"'. File an issue at ")+"https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()")}})(t,e,n);return jt(r)?r.then(t=>[].concat(t)):[].concat(r)}class MT{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=arguments.length>4?arguments[4]:void 0;this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=a,this.parseNodeNameCache=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(t=>0===t.id&&0===t.iterationId?"":"".concat(t.frameName,"-").concat(t.iterationId)).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function LT(t,e,n,a){const s=new Set,r=[];let o=null,i=null;const c=new Set,l=new Set(Object.keys(t).map(t=>WS(t)[0]));a=a||[];const u=new Set(a.map(t=>WS(t.name)[0])),h=[...e];for(;h.length>0;){const t=h.pop();(UT(t)||GT(t)||HT(t))&&null==o&&(o=t,i=o.children.map(t=>t.name).filter(t=>s.has(t))),s.add(t.name),null==n[t.name]&&(l.has(t.name)||u.has(t.name)||(0!==t.inputs.length?t.inputs.forEach(t=>{c.has(t.name)||(c.add(t.name),h.push(t))}):r.push(t.name)))}return{inputs:t,outputs:e,usedNodes:s,missingInputs:r,dynamicNode:o,syncInputs:i}}function zT(t,e){const{usedNodes:n,inputs:a}=e,s=Object.keys(a).map(t=>WS(t)[0]).map(e=>t.nodes[e]),r=t.initNodes||[],o=t=>n.has("string"===typeof t?t:t.name);function i(t){return[...new Map(t.map(t=>[t.name,t])).values()]}const c=i([...s,...t.weights,...r]).filter(o),l=i([...c,...Object.values(t.nodes)]).filter(o),u=new Map(l.map(t=>[t.name,t])),h={};for(const m of l){h[m.name]=h[m.name]||0;for(const t of m.children)o(t)||(h[t.name]=Number.POSITIVE_INFINITY),h[t.name]=(h[t.name]||0)+1}const d=Object.entries(h).filter(t=>{let[,e]=t;return 0===e}).map(t=>{let[e]=t;return e}),p=[...d];for(;d.length>0;){const t=d.pop(),e=u.get(t);for(const n of e.children.filter(o))0===--h[n.name]&&(p.push(n.name),d.push(n.name))}const f=function(t,e){const n=new Map(t.map(t=>[t.name,t])),a=e.map(t=>t.name),s=new Set(a);for(;a.length>0;){const t=a.pop(),e=n.get(t);for(const r of e.children)n.has(r.name)&&!s.has(r.name)&&(s.add(r.name),a.push(r.name))}const r=t.filter(t=>s.has(t.name));return r}(p.map(t=>u.get(t)),c);return function(t,e){const n=new Map(t.map((t,e)=>[t.name,e])),a=new Set(e.map(t=>t.name)),s=t=>a.has("string"===typeof t?t:t.name),r=new Set(t.map(t=>t.name)),o=t=>r.has("string"===typeof t?t:t.name);for(const i of t){for(const t of i.children.filter(o)){if(!n.has(t.name))throw new PT("Child ".concat(t.name," of node ").concat(i.name," is unreachable."));if(n.get(i.name)>n.get(t.name))throw new PT("Node ".concat(i.name," is scheduled to run after its child ").concat(t.name,"."))}if(!s(i))for(const t of i.inputs){if(!n.has(t.name))throw new PT("Input ".concat(t.name," of node ").concat(i.name," is unreachable."));if(n.get(t.name)>n.get(i.name))throw new PT("Node ".concat(i.name," is scheduled to run before its input ").concat(t.name,"."))}}}(f,c),f}class PT extends Error{constructor(t){super("NodesExecutionOrderError: ".concat(t))}}const BT=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),WT=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),VT=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function UT(t){return BT.has(t.op)}function GT(t){return WT.has(t.op)}function HT(t){return VT.has(t.op)}class jT{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?"".concat(e,":").concat(t.defaultOutput):e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(e=>{this._functionExecutorMap[e]=new jT(t.functions[e],this)})}getCompilationKey(t,e){const n=t.map(t=>t.name).sort(),a=e.map(t=>t.name).sort();return n.join(this.SEPARATOR)+"--"+a.join(this.SEPARATOR)}compile(t,e){const n=LT(t,e,this.weightMap,this._initNodes),{missingInputs:a,dynamicNode:s,syncInputs:r}=n;if(null!=s)throw new Error("This execution contains the node '".concat(s.name,"', which has ")+"the dynamic op '".concat(s.op,"'. Please use ")+"model.executeAsync() instead. Alternatively, to avoid the "+"dynamic ops, specify the inputs [".concat(r,"]"));if(a.length>0){const n=e.map(t=>t.name),s=Object.keys(t);throw new Error("Cannot compute the outputs [".concat(n,"] from the provided inputs ")+"[".concat(s,"]. Missing the following inputs: [").concat(a,"]"))}const o=zT(this.graph,n),i=function(t){const e=new Map(t.map((t,e)=>[t.name,e])),n=Number.MAX_SAFE_INTEGER,a=t.map((t,e)=>UT(t)?n:e),s=t=>{const n=a[e.get(t.name)];return null==n?-1:n},r=t.map((t,e)=>t.children.map(s).reduce((t,e)=>Math.max(t,e),a[e])),o=new Map;for(let i=0;i<t.length;++i){const e=r[i];if(e===n)continue;const a=t[i],s=t[e];o.has(s.name)||o.set(s.name,[]),o.get(s.name).push(a)}return o}(o);return{orderedNodes:o,nodeLiveUntilMap:i}}cloneAndKeepTensor(t){if(null==t)return null;const e=t.clone();return uo(e),e}cloneTensorList(t){if(!t)return null;const e=t.map(t=>this.cloneAndKeepTensor(t));return e}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map(t=>{let[e,n]=t;return[e,this.cloneTensorList(n)]}))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const a=n.map(t=>this.graph.nodes[WS(t)[0]]),s=e.map(t=>WS(t)[0]),r=new Set(s);let o=s.map(t=>this.graph.nodes[t]);0===o.length&&(o=this._outputs);const i=this.getCompilationKey(a,o);let c=this.compiledMap.get(i);null==c&&(c=this.compile(t,o),this.compiledMap.set(i,c));try{this.keepIntermediateTensors=Yt().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(h){this.keepIntermediateTensors=!1,console.warn(h.message)}const l={},u={};return co(()=>{const n=new MT(this.weightMap,l,u,this.functionExecutorMap,this.parseNodeNameCache),a=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach(e=>{const[s,r]=WS(e,n),o=[];o[r]=t[e],a[s]=o,this.keepIntermediateTensors&&(this.clonedTensorsMap[s]=this.cloneTensorList(o))});const s=this.getFrozenTensorIds(a),{orderedNodes:o,nodeLiveUntilMap:i}=c;for(const t of o){if(a[t.name])continue;const e=OT(t,a,n,this._resourceManager);if(jt(e))throw new Error("The execution of the op '".concat(t.op,"' returned a promise. ")+"Please use model.executeAsync() instead.");a[t.name]=e,this.keepIntermediateTensors&&(this.clonedTensorsMap[t.name]=this.cloneTensorList(e)),this.checkTensorForDisposalWithNodeLiveUntilInfo(t,a,n,s,r,i.get(t.name))}return null==this.parent&&n.dispose(s),e.map(t=>LS(t,a,n))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,e,n,a,s,r,o){if(!UT(e)&&!r.has(t)){for(const a of n[t])null!=a&&(o[a.id]=(o[a.id]||0)+e.children.length);for(const t of e.inputs){if(UT(t))continue;const e=zS(t.name,n,a);if(null!=e)for(const t of e){if(!t||t.kept||s.has(t.id))continue;const e=o[t.id];1===e?(t.dispose(),delete o[t.id]):null!=e&&o[t.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,n,a,s,r){function o(t){return UT(t)||s.has(t.name)}if(!UT(t)&&null!=r)for(const i of r){if(o(i))continue;const t=zS(i.name,e,n);for(const e of t)!e||e.kept||a.has(e.id)||e.dispose()}}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(t=>{for(const e of t)e&&!e.isDisposed&&e.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};this.disposeIntermediateTensors(),n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));try{this.keepIntermediateTensors=Yt().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(h){this.keepIntermediateTensors=!1,console.warn(h.message)}const r=new MT(this.weightMap,a,s,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const o=await this.executeWithControlFlow(t,r,e,n),i=e.map(t=>LS(t,o,r)),c=i.map(t=>t.id),l=Object.keys(t).map(e=>t[e].id),u=new Set([...c,...l,...this.weightIds]);return Object.values(o).forEach(t=>{t.forEach(t=>{!t||t.isDisposed||u.has(t.id)||t.dispose()})}),null==this.parent&&r.dispose(u),i}async executeFunctionAsync(t,e,n){const a=t.reduce((t,e,n)=>(t[this.inputs[n].name]=e,t),{});return this._executeAsync(a,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,a){const s=Object.keys(t),r=s.map(t=>this.graph.nodes[WS(t)[0]]),o=n.map(t=>WS(t)[0]),i=new Set(o);let c=o.map(t=>this.graph.nodes[t]);0===c.length&&(c=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:h,syncInputs:d}=LT(t,c,this.weightMap,this._initNodes),p=[...r,...this.graph.weights,...this._initNodes||[]].map(t=>({node:t,contexts:e.currentContext})),f=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,a]=WS(e),s=[];s[a]=t[e],f[n]=s});const m={},g=this.getFrozenTensorIds(f),y={};for(;p.length>0;){const t=this.processStack(r,p,e,f,y,g,i,m,l);await Promise.all(t)}null!=h||a||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=c.filter(t=>!UT(t)&&!LS(t.name,f,e)).map(t=>t.name);if(b.length>0){let t="";throw null!=h&&(t="Alternatively, to avoid the dynamic ops, use model.execute() "+"and specify the inputs [".concat(d,"]")),new Error("Cannot compute the outputs [".concat(b,"] from the provided ")+"inputs [".concat(s,"]. Consider providing the following inputs: ")+"[".concat(u,"]. ").concat(t))}return f}processStack(t,e,n,a,s,r,o,i,c){const l=[];for(;e.length>0;){const t=e.pop();n.currentContext=t.contexts;let u="";if("Enter"===t.node.op&&MS("isConstant",t.node,a,n)&&([u]=PS(t.node.name,n)),null==a[t.node.name]){const h=OT(t.node,a,n,this._resourceManager);u||([u]=PS(t.node.name,n));const d=n.currentContext;jt(h)?l.push(h.then(l=>(a[u]=l,this.keepIntermediateTensors&&(this.clonedTensorsMap[u]=this.cloneTensorList(l)),n.currentContext=d,this.checkTensorForDisposal(u,t.node,a,n,r,o,i),this.processChildNodes(t.node,e,n,a,s,c),l))):(a[u]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[u]=this.cloneTensorList(h)),this.checkTensorForDisposal(u,t.node,a,n,r,o,i),this.processChildNodes(t.node,e,n,a,s,c))}else this.processChildNodes(t.node,e,n,a,s,c)}return l}processChildNodes(t,e,n,a,s,r){t.children.forEach(t=>{const[o]=PS(t.name,n);!s[o]&&r.has(t.name)&&("Merge"===t.op?t.inputNames.some(t=>!!LS(t,a,n))&&(s[o]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!LS(t,a,n))&&(s[o]=!0,e.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const n=t[e],[a]=WS(e),s=this.graph.nodes[a];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value;ot(t.length===n.shape.length&&n.shape.every((e,n)=>-1===t[n]||t[n]===e),()=>"The shape of dict['".concat(s.name,"'] provided in ")+"model.execute(dict) must be [".concat(t,"], but was ")+"[".concat(n.shape,"]"))}s.attrParams.dtype&&s.attrParams.dtype.value&&ot(n.dtype===s.attrParams.dtype.value,()=>"The dtype of dict['".concat(s.name,"'] provided in ")+"model.execute(dict) must be "+"".concat(s.attrParams.dtype.value,", but was ").concat(n.dtype))})}mapInputs(t){var e,n;const a={};for(const s in t){const r=null===(n=null===(e=this._signature)||void 0===e?void 0:e.inputs)||void 0===n?void 0:n[s];null!=r?a[r.name]=t[s]:a[s]=t[s]}return a}checkInputs(t){const e=Object.keys(t).filter(t=>{const[e]=WS(t);return null==this.graph.nodes[e]});if(e.length>0)throw new Error("The dict provided in model.execute(dict) has "+"keys: [".concat(e,"] that are not part of graph"))}mapOutputs(t){return t.map(t=>{var e,n;const a=null===(n=null===(e=this._signature)||void 0===e?void 0:e.outputs)||void 0===n?void 0:n[t];return null!=a?a.name:t},{})}checkOutputs(t){t.forEach(t=>{const[e]=WS(t);if(!this.graph.nodes[e])throw new Error("The output '".concat(t,"' is not found in the graph"))})}}class qT{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}const KT="?tfjs-format=file",XT="model.json";class YT{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c;this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=n,null==e&&(this.loadOptions={}),this.resourceManager=new qT}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{const e=this.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error("Found more than one (".concat(e.length,") load handlers for ")+"URL '".concat([t],"'"));this.handler=e[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return jt(t)?t.then(t=>null==t.getWeightStream?this.loadSync(t):this.loadStreaming(t)):this.loadSync(t)}loadSync(t){const e=this.io.decodeWeights(t.weightData,t.weightSpecs);return this.loadWithWeightMap(t,e)}async loadStreaming(t){if(null==t.getWeightStream)throw new Error("Model artifacts missing streamWeights function");const e=await Ao(t.getWeightStream(),t.weightSpecs);return this.loadWithWeightMap(t,e)}loadWithWeightMap(t,e){this.artifacts=t;const n=this.artifacts.modelTopology;let a=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const t=this.artifacts.userDefinedMetadata;null!=t.signature&&(a=t.signature),null!=t.structuredOutputKeys&&(this.structuredOutputKeys=t.structuredOutputKeys)}if(this.signature=a,this.version="".concat(n.versions.producer,".").concat(n.versions.minConsumer),this.executor=new jT(cT.Instance.transformGraph(n,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(e),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const e=cT.Instance.transformGraph(t.modelInitializer);this.initializer=new jT(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}async save(t,e){if("string"===typeof t){const e=this.io.getSaveHandlers(t);if(0===e.length)throw new Error("Cannot find any save handlers for URL '".concat(t,"'"));if(e.length>1)throw new Error("Found more than one (".concat(e.length,") save handlers for ")+"URL '".concat(t,"'"));t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}addStructuredOutputNames(t){if(this.structuredOutputKeys){const e={};return(t instanceof pr?[t]:t).forEach((t,n)=>e[this.structuredOutputKeys[n]]=t),e}return t}predict(t,e){const n=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(t,e){const n=await this.executeAsync(t,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(t){var e;if(!(t instanceof pr)&&!Array.isArray(t)){const n=null===(e=this.signature)||void 0===e?void 0:e.inputs;if(null!=n)for(const e in n){const a=n[e];null!=a.resourceId&&(t[e]=this.resourceIdToCapturedInput[a.resourceId])}return t}t=Array.isArray(t)?t:[t];const n=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+n!==this.inputNodes.length)throw new Error("Input tensor count mismatch, the graph model has ".concat(this.inputNodes.length-n," non-resource placeholders, while there are ").concat(t.length," input tensors provided."));let a=0;return this.inputNodes.reduce((e,n)=>{var s,r,o;const i=null===(o=null===(r=null===(s=this.signature)||void 0===s?void 0:s.inputs)||void 0===r?void 0:r[n])||void 0===o?void 0:o.resourceId;return e[n]=null!=i?this.resourceIdToCapturedInput[i]:t[a++],e},{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){const e=this.initializerSignature.outputs,n=Object.keys(e);for(let a=0;a<n.length;a++){const s=e[n[a]];this.resourceIdToCapturedInput[s.resourceId]=t[a]}}}execute(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,n)=>(e[n]=[t[n]],e),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&lo(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function ZT(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c;if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&"string"===typeof t&&(t=function(t){t.endsWith("/")||(t+="/");return"".concat(t).concat(XT).concat(KT)}(t));const a=new YT(t,e,n);return await a.load(),a}function JT(t){if(null==t)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let e;if(t instanceof Array){const[n,a]=t;if(!n)throw new Error("modelJSON must be the first element of the array");if(!a||!(a instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in n))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in n))throw new Error("Model JSON is missing 'weightsManifest'");e=Ac(Lo(n,Bo(n.weightsManifest),a))}else if("load"in t)e=t;else{if(!("modelTopology"in t&&"weightSpecs"in t&&"weightData"in t))throw new Error("Unknown model format");e=Ac(t)}const n=new YT(e);return n.load(),n}const QT="4.22.0";function $T(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new Map,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new Set;if(null==t)return null;if("function"===typeof Blob&&t instanceof Blob)return t.slice();if(a.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(sC(t)){const s=Array.isArray(t)?[]:{};a.add(t);for(const r in t){const o=$T(t[r],e,n,a);s[r]=o}return a.delete(t),t.__proto__&&(s.__proto__=t.__proto__),s}throw new Error("Can't recurse into non-iterable type: ".concat(t))}return n.set(t,s.value),s.value}function tC(t){return eC(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:nC)}function eC(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new Set;const a=t[0];if(n.has(a))throw new Error("Circular references are not supported.");const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(sC(a)){const s=Array.isArray(a)?[]:{};n.add(a);for(const r in a){const a=eC(t.map(t=>t[r]),e,n);s[r]=a}return n.delete(a),s}throw new Error("Can't recurse into non-iterable type: ".concat(a))}return s.value}function nC(t){return null===t?null:sC(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}async function aC(t,e){const n=new Map;$T(t,e,n);for(const a of Array.from(n.keys())){const t=n.get(a);if(jt(t)){const e=await t;n.set(a,e)}}return $T(t,e,n)}function sC(t){let e=!1;if(Yt().get("IS_BROWSER"))e=t instanceof TextDecoder;else{const{StringDecoder:a}=n(551);e=t instanceof a}return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"===typeof t&&!(t instanceof pr)&&!(t instanceof Promise)&&!e)}function rC(t){return function(t,e){return $T(t,e)}(t,oC)}function oC(t){return t instanceof pr?{value:t.clone(),recurse:!1}:sC(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class iC{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class cC extends iC{constructor(){super(cC.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let a=0;a<n;a++)e[a]=this.get(this.wrap(this.begin+a));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function lC(t){return new pC(t)}function uC(t){return new fC(t)}function hC(t,e){return new SC(t,e)}cC.INITIAL_CAPACITY=32;class dC{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new vC(this,t)}filter(t){return new xC(this,t)}map(t){return new wC(this,t)}mapAsync(t){return new kC(this,t)}serialMapAsync(t){return new kC(this,t).serial()}flatmap(t){return new NC(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(t=>!0===t)}rowMajorBatch(t){return new bC(this,t,!(arguments.length>1&&void 0!==arguments[1])||arguments[1])}columnMajorBatch(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:nC;return this.rowMajorBatch(t,e).map(t=>tC(t,n))}concatenate(t,e){return new SC(lC([this,t]),e)}take(t){return t<0||null==t?this:new yC(this,t)}skip(t){return t<0||null==t?this:new gC(this,t)}prefetch(t){return new EC(this,t)}shuffle(t,e){return new AC(this,t,e)}serial(){return new mC(this)}}class pC extends dC{constructor(t){super(),this.items=t,this.trav=0}summary(){return"Array of ".concat(this.items.length," items")}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:rC(t),done:!1}}}class fC extends dC{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: ".concat(t.message),t}}}class mC extends dC{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return"".concat(this.upstream.summary()," -> Serial")}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class gC extends dC{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return"".concat(this.upstream.summary()," -> Skip")}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;lo(t.value)}return this.upstream.next()}}class yC extends dC{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return"".concat(this.upstream.summary()," -> Take")}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class bC extends dC{constructor(t,e){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return"".concat(this.upstream.summary()," -> RowMajorBatch")}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class xC extends dC{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return"".concat(this.upstream.summary()," -> Filter")}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;lo(t.value)}}}class wC extends dC{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return"".concat(this.upstream.summary()," -> Map")}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=Ar(t.value),n=this.transform(t.value),a=Ar(n);for(const s of e)Er(s,a)||s.dispose();return{value:n,done:!1}}}class vC extends dC{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return"".concat(this.upstream.summary()," -> handleErrors")}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class kC extends dC{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return"".concat(this.upstream.summary()," -> AsyncMap")}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=Ar(t.value),n=await this.transform(t.value),a=Ar(n);for(const s of e)Er(s,a)||s.dispose();return{value:n,done:!1}}}class IC extends dC{constructor(){super(),this.outputQueue=new cC,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class NC extends IC{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return"".concat(this.upstream.summary()," -> Flatmap")}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=Ar(t.value),n=this.transform(t.value),a=Ar(n);this.outputQueue.pushAll(n);for(const s of e)Er(s,a)||s.dispose();return!0}}class SC extends dC{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"".concat("TODO: fill in upstream of chained summaries"," -> Chained")}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var TC;!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(TC||(TC={}));class CC extends dC{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:TC.FAIL;super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return"{".concat("TODO: fill in upstream of zip summaries","} -> Zip")}async nextState(t){await t;let e=0,n=0;const a=await aC(this.iterators,function(t){if(t instanceof dC){return{value:t.next().then(t=>(e++,t.done&&n++,t.value)),recurse:!1}}return{value:null,recurse:!0}});if(e===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case TC.FAIL:throw new Error("Zipped streams should have the same length. "+"Mismatched at element ".concat(this.count,"."));case TC.SHORTEST:return{value:null,done:!0};case TC.LONGEST:}return this.count++,{value:a,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class EC extends dC{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new iC(e)}summary(){return"".concat(this.upstream.summary()," -> Prefetch")}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class AC extends EC{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=xd.alea(n||Ys().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class RC{constructor(){this.size=null}batch(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=this;let a;return ot(t>0,()=>"batchSize needs to be positive, but it is\n      ".concat(t)),a=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),FC(async()=>(await n.iterator()).columnMajorBatch(t,e,OC),a)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,FC(async()=>(await e.iterator()).concatenate(await t.iterator()),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,FC(async()=>(await e.iterator()).filter(e=>co(()=>t(e))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return FC(async()=>(await e.iterator()).map(e=>co(()=>t(e))),this.size)}mapAsync(t){const e=this;return FC(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return FC(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,FC(async()=>hC(uC(async()=>({value:await e.iterator(),done:!1})).take(t)),n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,FC(async()=>(await e.iterator()).skip(t),n)}shuffle(t,e){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for `tf.Tensor`s), consider setting "+"bufferSize to the dataset size (".concat(this.size," elements)"));const a=this,s=xd.alea(e||Ys().toString());return FC(async()=>{let e=s.int32();return n&&(e+=s.int32()),(await a.iterator()).shuffle(t,e.toString())},this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,FC(async()=>(await e.iterator()).take(t),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function FC(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return new class extends RC{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function DC(t){return FC(async()=>lC(t),t.length)}function _C(t){if(!sC(t))throw new Error("The argument to zip() must be an object or array.");let e;if(Array.isArray(t))for(let n=0;n<t.length;n++)e=null==e?t[n].size:Math.min(e,t[n].size);else if(t instanceof Object)for(const n in t)e=null==e?t[n].size:Math.min(e,t[n].size);return FC(async()=>function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:TC.FAIL;return new CC(t,e)}(await aC(t,t=>{if(t instanceof RC)return{value:t.iterator(),recurse:!1};if(sC(t))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),TC.SHORTEST),e)}function OC(t){if(null===t)return null;if(function(t){return null==t||null===(e=t)||"object"!==typeof e&&"function"!==typeof e||Array.isArray(t)||"object"===typeof t&&t instanceof pr||$s(t);var e}(t[0])){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof pr?ap(t):Jr(t)}(t),recurse:!1}}return{value:null,recurse:!0}}RC.MAX_BUFFER_SIZE=1e4;class MC extends RC{constructor(t){super(),this.input=t}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(t=>(t.endsWith("\r")&&(t=t.slice(0,-1)),t))}}const LC='"',zC=Symbol("out"),PC=Symbol("field"),BC=Symbol("quote"),WC=Symbol("quoteafterquote"),VC=Symbol("quoteinquote");class UC extends RC{async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const t=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!t)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&t&&ot(t.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+t.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=t);const e=this.fullColumnNames.reduce((t,e)=>(t[e]=t[e]+1||1,t),{}),n=Object.keys(e).filter(t=>e[t]>1);if(ot(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const a of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(a))throw new Error('The key "'+a+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const t=await this.base.iterator(),e=await t.next();if(e.done)throw new Error("No data was found for CSV parsing.");const n=e.value;return this.parseRow(n,!1)}return null}constructor(t,e){super(),this.input=t,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new MC(t),e||(e={}),this.hasHeader=!1!==e.hasHeader,this.fullColumnNames=e.columnNames,this.columnConfigs=e.columnConfigs,this.configuredColumnsOnly=e.configuredColumnsOnly,e.delimWhitespace?(ot(null==e.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=e.delimiter?e.delimiter:","}async iterator(){this.columnNamesValidated||await this.setColumnNames();let t=await this.base.iterator();return this.hasHeader&&(t=t.skip(1)),t.map(t=>this.makeDataElement(t))}makeDataElement(t){const e=this.parseRow(t),n={},a={};for(let s=0;s<this.fullColumnNames.length;s++){const r=this.fullColumnNames[s],o=this.columnConfigs?this.columnConfigs[r]:null;if(!this.configuredColumnsOnly||o){const i=e[s];let c=null;if(""===i)if(o&&void 0!==o.default)c=o.default;else{if(o&&(o.required||o.isLabel))throw new Error("Required column ".concat(r," is empty in this line: ").concat(t));c=void 0}else{const t=Number(i);if(isNaN(t))c=o&&"bool"===o.dtype?this.getBoolean(i):i;else if(o&&o.dtype)switch(o.dtype){case"float32":default:c=t;break;case"int32":c=Math.floor(t);break;case"bool":c=this.getBoolean(i)}else c=t}o&&o.isLabel?a[r]=c:n[r]=c}}return 0===Object.keys(a).length?n:{xs:n,ys:a}}getBoolean(t){return"1"===t||"true"===t.toLowerCase()?1:0}parseRow(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=[];let a=0;const s=t.length;let r=zC;for(let o=0;o<s;o++)switch(r){case zC:switch(t.charAt(o)){case LC:a=o+1,r=BC;break;case this.delimiter:if(a=o+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),r=zC;break;default:r=PC,a=o}break;case PC:if(t.charAt(o)===this.delimiter)n.push(t.substring(a,o)),r=zC,a=o+1;break;case BC:if(t.charAt(o)===LC)r=WC;break;case WC:switch(t.charAt(o)){case this.delimiter:n.push(t.substring(a,o-1)),r=zC,a=o+1;break;case LC:r=BC;break;default:r=VC}break;case VC:if(t.charAt(o)===LC)r=BC}if(r===WC?n.push(t.substring(a,s-1)):n.push(t.substring(a)),e&&n.length!==this.fullColumnNames.length)throw new Error("Invalid row in csv file. Should have ".concat(this.fullColumnNames.length," elements in a row, but got ").concat(n));return n}}class GC extends dC{constructor(t){super(),this.microphoneConfig=t,this.isClosed=!1,this.fftSize=t.fftSize||1024;const e=Math.log2(this.fftSize);if(this.fftSize<0||e<4||e>14||!Number.isInteger(e))throw new Error("Invalid fftSize: it must be a power of 2 between "+"2 to 4 and 2 to 14, but got ".concat(this.fftSize));if(this.numFrames=t.numFramesPerSpectrogram||43,this.sampleRateHz=t.sampleRateHz,this.columnTruncateLength=t.columnTruncateLength||this.fftSize,this.audioTrackConstraints=t.audioTrackConstraints,this.smoothingTimeConstant=t.smoothingTimeConstant||0,this.includeSpectrogram=!1!==t.includeSpectrogram,this.includeWaveform=!0===t.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!Yt().get("IS_BROWSER"))throw new Error("microphone API is only supported in browser environment.");const e=new GC(t);return await e.start(),e}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(n){throw new Error("Error thrown while initializing video stream: ".concat(n.message))}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const t=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new t,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error("Mismatch in sampling rate: "+"Expected: ".concat(this.sampleRateHz,"; ")+"Actual: ".concat(this.audioContext.sampleRate))}else this.sampleRateHz=this.audioContext.sampleRate;const e=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,e.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let t,e;const n=await this.getAudioData();if(this.includeSpectrogram){const e=this.flattenQueue(n.freqDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const t=this.flattenQueue(n.timeDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:t,waveform:e},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const t=[],e=[];let n=0;return new Promise(a=>{const s=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&a({freqDataQueue:t,timeDataQueue:e}),t.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),e.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),a({freqDataQueue:t,timeDataQueue:e}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(t){const e=t[0].length,n=new Float32Array(t.length*e);return t.forEach((t,a)=>n.set(t,a*e)),n}getTensorFromAudioDataArray(t,e){const n=new Float32Array(lt(e));return n.set(t,n.length-t.length),Jr(n,e)}}class HC extends dC{constructor(t,e){if(super(),this.webcamVideoElement=t,this.webcamConfig=e,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=ip([0],"int32"),this.webcamConfig.centerCrop){const t=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,e=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-t)/2,a=(1-e)/2,s=n+t,r=e+a;this.cropBox=cp([a,n,r,s],[1,4])}else this.cropBox=cp([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!Yt().get("IS_BROWSER"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!t){if(t=document.createElement("video"),!e.resizeWidth||!e.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");t.width=e.resizeWidth,t.height=e.resizeHeight}const n=new HC(t,e);return await n.start(),n}async start(){this.webcamConfig.facingMode&&ot("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>"Invalid webcam facing mode: ".concat(this.webcamConfig.facingMode,". ")+"Please provide 'user' or 'environment'");try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(t){throw t.message="Error thrown while initializing video stream: ".concat(t.message),t}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(t=>{this.webcamVideoElement.onloadedmetadata=()=>{t()}})}async next(){if(this.isClosed)return{value:null,done:!0};let t;try{t=Xc(this.webcamVideoElement)}catch(e){throw new Error("Error thrown converting video to pixels: ".concat(JSON.stringify(e)))}if(!this.resize)return{value:t,done:!1};try{return{value:this.cropAndResizeFrame(t),done:!1}}catch(e){throw new Error("Error thrown cropping the video: ".concat(e.message))}finally{t.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(t){return co(()=>{const e=mh(Si(t,"float32"),0);let n;n=Vf.cropAndResize(e,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const a=n.shape;return iu(n,a.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(t=>t.stop());try{this.webcamVideoElement.srcObject=null}catch(t){console.log(t),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class jC{}class qC extends dC{split(t){return new KC(this,t)}}class KC extends qC{constructor(t,e){super(),this.upstream=t,this.impl=new XC(t,e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class XC extends IC{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=""}summary(){return"".concat(this.upstream.summary()," -> Split('").concat(this.separator,"')")}async pump(){const t=await this.upstream.next();if(t.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const e=t.value.split(this.separator);e[0]=this.carryover+e[0];for(const n of e.slice(0,-1))this.outputQueue.push(n);return this.carryover=e[e.length-1],!0}}class YC extends dC{decodeUTF8(){return new ZC(this)}}class ZC extends qC{constructor(t){super(),this.upstream=t,this.impl=new JC(t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class JC extends IC{constructor(t){if(super(),this.upstream=t,Yt().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:t}=n(4530);this.decoder=new t("utf8")}}summary(){return"".concat(this.upstream.summary()," -> Utf8")}async pump(){const t=await this.upstream.next();let e,n;return!t.done&&(e=t.value,n=Yt().get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(Buffer.from(e.buffer)),this.outputQueue.push(n),!0)}}class QC extends YC{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),this.file=t,this.options=e,ot(t instanceof Uint8Array||!!Yt().get("IS_BROWSER")&&(t instanceof File||t instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=e.offset||0,this.chunkSize=e.chunkSize||1048576}summary(){return"FileChunks ".concat(this.file)}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const t=new Promise((t,e)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)t(new Uint8Array(this.file.slice(this.offset,n)));else{const a=new FileReader;a.onload=n=>{let s=a.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return e(new TypeError("FileReader returned unknown type."));t(s)},a.onabort=t=>e(new Error("Aborted")),a.onerror=t=>e(new Error(t.type));const s=this.file.slice(this.offset,n);a.readAsArrayBuffer(s)}this.offset=n});return{value:await t,done:!1}}}const $C=t=>({method:t.method,headers:t.headers,body:t.body,mode:t.mode,credentials:t.credentials,cache:t.cache,redirect:t.redirect,referrer:t.referrer,integrity:t.integrity});function tE(t){return"string"===typeof t&&"file://"===t.slice(0,7)}class eE extends jC{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),this.input=t,this.options=e}async iterator(){if(tE(this.input)&&Yt().get("IS_NODE")){const t=n(8108);this.input=t.readFileSync(this.input.slice(7))}return new QC(this.input,this.options)}}class nE extends jC{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(),this.url=t,this.fileOptions=e}async iterator(){return tE(this.url)?new eE(this.url,this.fileOptions).iterator():async function(t){let e,n,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=arguments.length>2?arguments[2]:void 0;"string"===typeof t?e=t:(e=t.url,n=$C(t));const r=await(s||Zs)(e,n);if(r.ok){const t=new Uint8Array(await r.arrayBuffer());return new QC(t,a)}throw new Error(r.statusText)}(this.url,this.fileOptions)}}function aE(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new UC(new nE(t),e)}function sE(t){const e=uC(t);return FC(async()=>e)}function rE(t){return FC(async()=>{const e=await t();return uC(()=>e.next())})}async function oE(t,e){return HC.create(t,e)}async function iE(t){return GC.create(t)}const cE="4.22.0";function lE(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&ot("complex64"!==t.dtype,()=>"".concat(e," does not support complex64 tensors in the CPU backend."))})}const uE=wp;class hE extends Z{nextDataId(){return hE.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Y(this,ro())}write(t,e,n){this.firstUse&&(this.firstUse=!1,Yt().get("IS_NODE")&&xs("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:t,dtype:n,refCount:1}),a}makeTensorInfo(t,e,n){let a;if("string"===e&&null!=n&&n.length>0&&At(n[0])){const s=n.map(t=>Js(t));a=this.write(s,t,e)}else a=this.write(n,t,e);return{dataId:a,shape:t,dtype:e}}refCount(t){if(this.data.has(t)){return this.data.get(t).refCount}return 0}incRef(t){this.data.get(t).refCount++}decRef(t){if(this.data.has(t)){this.data.get(t).refCount--}}move(t,e,n,a,s){this.data.set(t,{values:e,dtype:a,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensorInfos:n}=this.data.get(t);if("complex64"===e){return bm(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return Pt(this.data.get(t).values,e)}bufferSync(t){const e=this.readSync(t.dataId);if("string"===t.dtype)try{const n=e.map(t=>Qs(t));return Ni(t.shape,t.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ni(t.shape,t.dtype,e)}makeOutput(t,e,n){return ro().makeTensorFromTensorInfo(this.makeTensorInfo(e,n,t),this)}disposeData(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.data.has(t)){if(this.data.get(t).refCount--,!e&&this.data.get(t).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(t);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(t)}return!0}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}async time(t){const e=Ys();t();return{kernelMs:Ys()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(t){lE([t],"where");const e=this.readSync(t.dataId);return uE(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function dE(t){const e=new Float32Array(t.length);for(let n=0;n<t.length;++n)e[n]=Math.abs(t[n]);return e}hE.nextDataId=0;const pE={kernelName:te,backendName:"cpu",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend;lE(e,"abs");let a=new Float32Array(lt(e.shape));return a=dE(n.data.get(e.dataId).values),n.makeOutput(a,e.shape,e.dtype)}};function fE(t){return(e,n,a,s,r)=>{const o=rc(e,n),i=o.length,c=Mt(o),l=kt(r,lt(o)),u=e.length,h=n.length,d=Mt(e),p=Mt(n),f=ac(e,o),m=ac(n,o);if(f.length+m.length===0)for(let g=0;g<l.length;++g)l[g]=t(a[g%a.length],s[g%s.length]);else for(let g=0;g<l.length;++g){const e=Ht(g,i,c),n=e.slice(-u);f.forEach(t=>n[t]=0);const r=Gt(n,u,d),o=e.slice(-h);m.forEach(t=>o[t]=0);const y=Gt(o,h,p);l[g]=t(a[r],s[y])}return[l,o]}}function mE(t){const{inputs:e,backend:n}=t,{real:a,imag:s}=e,r=n.data.get(a.dataId).values,o=n.data.get(s.dataId).values,i=n.makeTensorInfo(a.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(a.shape,"float32",r),imag:n.makeTensorInfo(s.shape,"float32",o)},i}const gE={kernelName:Ce,backendName:"cpu",kernelFunc:mE};function yE(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"float32";if("complex64"===n){return mE({inputs:{real:yE(t,e,"float32"),imag:yE(t,e,"float32")},backend:t})}const a=Wt(lt(e),n);return t.makeTensorInfo(e,n,a)}function bE(t){const{inputs:e,backend:n}=t,{x:a}=e;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const xE={kernelName:yn,backendName:"cpu",kernelFunc:bE};function wE(t){const{inputs:e,backend:n}=t,{input:a}=e,s=n.data.get(a.dataId).complexTensorInfos.real,r=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,r)}const vE={kernelName:ma,backendName:"cpu",kernelFunc:wE};function kE(t,e,n,a){if("int32"===a){return[e,"int32",Int32Array.from(t)]}if("bool"===a){const a=Xs([0],n),[s,r]=fE((t,e)=>t!==e?1:0)(e,[],t,a,"bool");return[r,"bool",s]}throw new Error("Error in Cast: failed to cast ".concat(n," to ").concat(a))}function IE(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{dtype:r}=a;if("complex64"===r){if("complex64"===s.dtype)return bE({inputs:{x:s},backend:n});const t=yE(n,s.shape,s.dtype),e=IE({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),a=mE({inputs:{real:e,imag:t},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),a}if("complex64"===s.dtype){const t=wE({inputs:{input:s},backend:n}),e=IE({inputs:{x:t},backend:n,attrs:{dtype:r}});return n.disposeIntermediateTensorInfo(t),e}if(!Tt(s.dtype,r)){const t=bE({inputs:{x:s},backend:n});return{dataId:t.dataId,shape:t.shape,dtype:r}}const o=n.data.get(s.dataId).values,[i,c,l]=kE(o,s.shape,s.dtype,r);return n.makeTensorInfo(i,c,l)}const NE={kernelName:Ne,backendName:"cpu",kernelFunc:IE};function SE(t,e,n,a){return null==n?n=>{let{inputs:s,backend:r}=n;const{a:o,b:i}=s,c=r;lE([o,i],t);const l=c.data.get(o.dataId).values,u=c.data.get(i.dataId).values,h="string"===o.dtype?Qm(l):l,d="string"===o.dtype?Qm(u):u,p=a||o.dtype,[f,m]=e(o.shape,i.shape,h,d,p);return c.makeTensorInfo(m,p,f)}:t=>{let{inputs:s,backend:r}=t;const{a:o,b:i}=s,c=r;if("complex64"===o.dtype||"complex64"===i.dtype){const t=IE({inputs:{x:o},backend:c,attrs:{dtype:"complex64"}}),e=c.data.get(t.dataId),a=e.complexTensorInfos.real,s=e.complexTensorInfos.imag,r=c.data.get(a.dataId).values,l=c.data.get(s.dataId).values,u=IE({inputs:{x:i},backend:c,attrs:{dtype:"complex64"}}),h=c.data.get(u.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=c.data.get(d.dataId).values,m=c.data.get(p.dataId).values,[g,y,b]=n(o.shape,i.shape,r,l,f,m),x=c.makeTensorInfo(b,"float32",g),w=c.makeTensorInfo(b,"float32",y),v=mE({inputs:{real:x,imag:w},backend:c});return c.disposeIntermediateTensorInfo(t),c.disposeIntermediateTensorInfo(u),c.disposeIntermediateTensorInfo(x),c.disposeIntermediateTensorInfo(w),v}{const t=c.data.get(o.dataId).values,n=c.data.get(i.dataId).values,s=a||o.dtype,[r,l]=e(o.shape,i.shape,t,n,s);return c.makeTensorInfo(l,s,r)}}}function TE(t){return(e,n,a,s,r,o)=>{const i=rc(e,n),c=lt(i),l=i.length,u=Mt(i),h=kt("float32",c),d=kt("float32",c),p=ac(e,i),f=ac(n,i),m=bm(a,s),g=bm(r,o),y=e.length,b=Mt(e),x=n.length,w=Mt(n);if(p.length+f.length===0)for(let v=0;v<h.length;v++){const e=v%m.length,n=v%g.length,a=t(m[2*e],m[2*e+1],g[2*n],g[2*n+1]);h[v]=a.real,d[v]=a.imag}else for(let v=0;v<h.length;v++){const e=Ht(v,l,u),n=e.slice(-y);p.forEach(t=>n[t]=0);const a=Gt(n,y,b),s=e.slice(-x);f.forEach(t=>s[t]=0);const r=Gt(s,x,w),o=t(m[2*a],m[2*a+1],g[2*r],g[2*r+1]);h[v]=o.real,d[v]=o.imag}return[h,d,i]}}const CE=fE((t,e)=>t+e),EE=TE((t,e,n,a)=>({real:t+n,imag:e+a})),AE=SE(ae,CE,EE),RE={kernelName:ae,backendName:"cpu",kernelFunc:AE};function FE(t,e,n,a,s){const r=lt(a),o=Wt(s,n);for(let i=0;i<t.length;i++){const n=t[i];if(n<0)throw new Error("Input x must be non-negative!");n>=s||(o[n]+=r>0?e[i]:1)}return o}function DE(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=t.shape[0],r=t.shape[1],o=Ni([s,n],e.dtype);for(let i=0;i<s;i++)for(let s=0;s<r;s++){const r=t.get(i,s);if(r<0)throw new Error("Input x must be non-negative!");r>=n||(a?o.set(1,i,r):e.size>0?o.set(o.get(i,r)+e.get(i,s),i,r):o.set(o.get(i,r)+1,i,r))}return o}const _E=fE((t,e)=>t&e),OE=SE(ve,_E),ME={kernelName:ve,backendName:"cpu",kernelFunc:OE};function LE(t){return(e,n,a)=>{const s=It(n,e.length);for(let r=0;r<e.length;++r)s[r]=t(e[r],a);return s}}function zE(t,e,n){return PE(t,LE(e),n)}function PE(t,e,n){return a=>{let{inputs:s,attrs:r,backend:o}=a;const{x:i}=s;lE(i,t);const c=o,l=c.data.get(i.dataId).values;let u;if("string"===i.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=Qm(l)}else u=l;const h=n||i.dtype,d=e(u,h,r);return c.makeTensorInfo(i.shape,h,d)}}const BE=LE(t=>Math.ceil(t)),WE=PE(Se,BE),VE={kernelName:Se,backendName:"cpu",kernelFunc:WE};function UE(t,e,n,a){const s=It(n,lt(e));if(a&&"string"!==n){let e=0;t.forEach(t=>{const n=lt(t.shape);s.set(t.vals,e),e+=n})}else{let a=0;t.forEach(t=>{const r="string"===n?Qm(t.vals):t.vals;let o=0;for(let n=0;n<t.shape[0];++n){const i=n*e[1]+a;for(let e=0;e<t.shape[1];++e)s[i+e]=r[o++]}a+=t.shape[1]})}return s}const GE=fE((t,e)=>t===e?1:0),HE=SE(nn,GE,null,"bool"),jE={kernelName:nn,backendName:"cpu",kernelFunc:HE},qE=LE(t=>Math.exp(t)),KE=PE(an,qE,"float32"),XE={kernelName:an,backendName:"cpu",kernelFunc:KE},YE=LE(t=>Math.expm1(t)),ZE=PE(rn,YE),JE={kernelName:rn,backendName:"cpu",kernelFunc:ZE},QE=LE(t=>Math.floor(t)),$E=PE(un,QE),tA={kernelName:un,backendName:"cpu",kernelFunc:$E},eA=fE((t,e)=>Math.floor(t/e)),nA=SE(hn,eA,null,"int32"),aA={kernelName:hn,backendName:"cpu",kernelFunc:nA};function sA(t,e,n,a,s,r,o,i,c){const l=Ni([a,r],n);for(let u=0;u<a;u++){const n=[];let a=0;for(let e=0;e<s;e++){const r=t[u*s+e];a+=r*o[e],n.push(r)}if(a<0||a>=c/r)throw new Error("Invalid indices: ".concat(n," does not index into ").concat(i));for(let t=0;t<r;t++)l.values[u*r+t]=e.get(...e.indexToLoc(a*r+t))}return l}function rA(t,e,n){const a=Ni(n,t.dtype);for(let s=0;s<a.size;++s){const n=a.indexToLoc(s).slice(),r=n[0],o=n[2],i=e.locToIndex([r,o]);n[2]=e.values[i];const c=t.locToIndex(n);0<=c&&c<t.values.length&&(a.values[s]=t.values[c])}return a}const oA=fE((t,e)=>t>e?1:0),iA=SE(mn,oA,null,"bool"),cA={kernelName:mn,backendName:"cpu",kernelFunc:iA},lA=fE((t,e)=>t>=e?1:0),uA=SE(gn,lA,null,"bool"),hA={kernelName:gn,backendName:"cpu",kernelFunc:uA},dA=fE((t,e)=>t<e?1:0),pA=SE(Nn,dA,null,"bool"),fA={kernelName:Nn,backendName:"cpu",kernelFunc:pA},mA=fE((t,e)=>t<=e?1:0),gA=SE(Sn,mA,null,"bool"),yA={kernelName:Sn,backendName:"cpu",kernelFunc:gA};function bA(t,e,n){const a=(e-t)/(n-1),s=Wt(n,"float32");s[0]=t;for(let r=1;r<s.length;r++)s[r]=s[r-1]+a;return s}const xA=LE(t=>Math.log(t)),wA=PE(Cn,xA),vA={kernelName:Cn,backendName:"cpu",kernelFunc:wA};function kA(t,e,n,a){const s=kt(a,lt(n));for(let r=0;r<s.length;++r){const n=r*e;let a=t[n];for(let s=0;s<e;++s){const e=t[n+s];(Number.isNaN(e)||e>a)&&(a=e)}s[r]=a}return s}const IA=fE((t,e)=>Math.max(t,e)),NA=SE(Bn,IA),SA={kernelName:Bn,backendName:"cpu",kernelFunc:NA},TA=fE((t,e)=>Math.min(t,e)),CA=SE(Kn,TA),EA={kernelName:Kn,backendName:"cpu",kernelFunc:CA},AA=fE((t,e)=>t*e),RA=TE((t,e,n,a)=>({real:t*n-e*a,imag:t*a+e*n})),FA=SE(Jn,AA,RA),DA={kernelName:Jn,backendName:"cpu",kernelFunc:FA};function _A(t,e,n){const a=Ks(-1,n);return AA([],e,a,t,n)}const OA={kernelName:Qn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:a}=e;lE(a,"neg");const s=n.data.get(a.dataId).values,[r,o]=_A(s,a.shape,a.dtype);return n.makeTensorInfo(o,a.dtype,r)}},MA=fE((t,e)=>t!==e?1:0),LA=SE($n,MA,null,"bool"),zA={kernelName:$n,backendName:"cpu",kernelFunc:LA};function PA(t,e,n,a,s){const r=e.length,o=lt(e),i=Mt(e),c=Mt(s),l=kt(n,lt(s));for(let u=0;u<o;++u){const e=Ht(u,r,i),n=new Array(e.length);for(let t=0;t<n.length;t++)n[t]=e[a[t]];l[Gt(n,r,c)]=t[u]}return l}function BA(t){const{inputs:e,attrs:n,backend:a}=t,{x:s}=e,{perm:r}=n;lE(s,"transpose");const o=s.shape.length,i=new Array(o);for(let l=0;l<i.length;l++)i[l]=s.shape[r[l]];const c=PA(a.data.get(s.dataId).values,s.shape,s.dtype,r,i);return{dataId:a.write(c,i,s.dtype),shape:i,dtype:s.dtype}}const WA={kernelName:is,backendName:"cpu",kernelFunc:BA};function VA(t,e,n,a){const[s,r]=nh(t,a),o=kr(e,"int32"),i=Wt(lt(s),o),c=lt(r);for(let l=0;l<i.length;++l){const t=l*c;let e=1;for(let a=0;a<c;++a)e*=n[t+a];i[l]=e}return{outVals:i,outShape:s,outDtype:o}}const UA={kernelName:ua,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a;lE(s,"prod");const i=s.shape.length,c=wt(r,s.shape),l=rh(c,i);let u=c,h=s;const d=[];null!=l&&(h=BA({inputs:{x:s},backend:n,attrs:{perm:l}}),d.push(h),u=ih(u.length,i));const p=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=VA(h.shape,h.dtype,p,u);let y=m;return o&&(y=ah(m,c)),d.forEach(t=>n.disposeIntermediateTensorInfo(t)),n.makeTensorInfo(y,g,f)}};function GA(t,e,n,a){const s=[];let r=0;const o=e.length-1+n.length,i=new Array(o).fill(null).map(()=>[0]);!function(t,e){for(let n=0;n<t.length;++n){const a=t[n],s=n===t.length-1?e:t[n+1].length;if(0===a.length)throw new Error("Ragged splits may not be empty");if(a[0]<0)throw new Error("Ragged splits must be non-negative");if(a[a.length-1]>s)throw new Error("Ragged splits must not point past values");for(let t=1;t<a.length;++t)if(a[t-1]>a[t])throw new Error("Ragged splits must be sorted in ascending order")}}(n,a);let c=1;for(let l=0;l<e.length-1;++l){c*=e[l];const t=e[l+1];for(let e=1;e<c+1;++e)i[l].push(e*t)}for(let l=0;l<t.length;++l){let a=t[l],o=t[l]+1;for(let t=0;t<n.length;++t){const s=n[t],r=t+e.length-1;if(r>=0){const t=i[r],e=t[t.length-1]-s[a];for(let n=a;n<o;++n)i[r].push(s[n+1]+e)}a=s[a],o=s[o]}o!==a&&(s.push([a,o]),r+=o-a)}return{outSplits:i,valueSlices:s,numValues:r}}function HA(t,e){const n=t.slice(0,e);for(;n.length<e;)n.push(1);for(let a=e;a<t.length;a++)n[e-1]*=t[a];return n}function jA(t,e,n,a,s){const r=e.slice();r[0]=s;const o=It(n,lt(r)),i=t.length;return function(t,e,n,a,s,r){const o=HA(e,2)[1],i=HA(r,2)[1];let c=0;for(const l of n)for(let e=l[0];e<l[1];++e){for(let n=0;n<a;++n)s[c*i+n]=t[e*o+n];++c}}(t,e,a,0===i?0:i/e[0],o,r),[o,r]}function qA(t,e,n,a,s,r,o,i){if(0===t.length)throw new Error("paramsNestedSplits must be non empty");if(0===e[0].length)throw new Error("Split tensors must not be scalars");if(function(t,e,n){t.forEach((t,a)=>{if(t<0||t>=n){const s=Ht(a,e.length,Mt(e)).join(",");throw new Error("indices[".concat(s,"] = ").concat(t," is not in [0, ").concat(n,")"))}})}(r,o,e[0][0]-1),0===a.length)throw new Error("params.rank must be nonzero");const c=a[0],{outSplits:l,valueSlices:u,numValues:h}=GA(r,o,t,c),d=function(t){const e=[];for(let n=0;n<t.length;++n){const a=It("int32",t[n].length);e.push(a),t[n].forEach((t,e)=>a[e]=t)}return e}(l),p=jA(n,a,s,u,h);return[d,p[0],p[1]]}const KA=2147483647;function XA(t,e,n,a,s,r,o){if(e.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===e.length,c=0===s.length,l=0===o.length,u=[];i||u.push(e[0]),c||u.push(s[0]),l||u.push(o[0]);for(let m=1;m<u.length;++m)if(u[m]!==u[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===u.length?1:u[0],d=It("int32",h+1);d[0]=0;for(let m=0;m<h;++m){const e=i?t[0]:t[m],n=c?a[0]:a[m],s=l?r[0]:r[m];if(0===s)throw new Error("Requires delta != 0");let o;if(s>0&&n<e||s<0&&n>e)o=0;else if(o=Math.ceil(Math.abs((n-e)/s)),o>KA)throw new Error("Requires ((limit - start) / delta) <= ".concat(KA));d[m+1]=d[m]+o}const p=It(n,d[h]);let f=0;for(let m=0;m<h;++m){const e=d[m+1]-d[m];let n=i?t[0]:t[m];const a=l?r[0]:r[m];for(let t=0;t<e;++t)p[f++]=n,n+=a}return[d,p]}var YA=Jf;class ZA{constructor(t,e,n,a,s,r,o,i,c,l){this.shape=t,this.shapeShape=e,this.values=n,this.valuesShape=a,this.valuesDType=s,this.defaultValue=r,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=c,this.rowPartitionTypes=$f(l),this.raggedRank=tm(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===YA.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===YA.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){const e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case YA.VALUE_ROWIDS:return ZA.getMaxWidthValueRowID(e);case YA.ROW_SPLITS:return ZA.getMaxWidthRowSplit(e);default:throw new Error("Cannot handle partition type ".concat(YA[this.getRowPartitionTypeByDimension(t-1)]))}}static getMaxWidthRowSplit(t){const e=t.length;if(0===e||1===e)return 0;let n=0;for(let a=0;a<e-1;++a){const e=t[a+1]-t[a];e>n&&(n=e)}return n}static getMaxWidthValueRowID(t){const e=t.length;if(0===e)return 0;let n=0,a=t[0],s=0;for(let r=1;r<e;++r){const e=t[r];e!==a&&(a=e,s=Math.max(r-n,s),n=r)}return Math.max(e-n,s)}tensorShapeFromTensor(t,e){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(0===e.length){if(-1===t[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return QA(t,n)}calculateOutputSize(t){const e=this.valuesShape;em(this.defaultValueShape,e);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=Qf(this.raggedRank,n,e);a[0]<0&&(a[0]=t);for(let s=1;s<=this.raggedRank;++s)a[s]<0&&(a[s]=this.getMaxWidth(s));return a}calculateFirstParentOutputIndex(t,e,n){const a=Math.min(t,n),s=[];let r=0;for(let o=0;o<a;++o,r+=e)s.push(r);for(let o=a;o<t;++o)s.push(-1);return ot(s.length===t,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(t,e,n,a){const s=t.length,r=[];for(let o=0;o<s-1;++o){const s=t[o+1]-t[o];let i=Math.min(a,s),c=e[o];-1===c&&(i=0);for(let t=0;t<i;++t)r.push(c),c+=n;for(let t=0;t<s-i;++t)r.push(-1)}if(s>0&&r.length!==t[s-1])throw new Error("Invalid row split size.");return r}calculateOutputIndexValueRowID(t,e,n,a){const s=t.length,r=[];if(0===s)return[];let o=0,i=t[0];if(i>=e.length)throw new Error("Got currentValueRowId=".concat(i,", which is not less than ").concat(e.length));let c=e[i];r.push(c);for(let l=1;l<s;++l){const s=t[l];if(s===i)c>=0&&(++o,o<a?c+=n:c=-1);else{if(o=0,i=s,s>=e.length)throw new Error("Got nextValueRowId=".concat(s," which is not less than ").concat(e.length));c=e[s]}r.push(c)}if(r.length!==t.length)throw new Error("Invalid row ids.");return r}calculateOutputIndex(t,e,n,a){const s=this.getRowPartitionTensor(t),r=this.getRowPartitionTypeByDimension(t);switch(r){case YA.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,e,n,a);case YA.ROW_SPLITS:if(s.length-1>e.length)throw new Error("Row partition size is greater than output size: ".concat(s.length-1," > ").concat(e.length));return this.calculateOutputIndexRowSplit(s,e,n,a);default:throw new Error("Unsupported partition type: ".concat(YA[r]))}}getFirstDimensionSize(){const t=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case YA.FIRST_DIM_SIZE:return t[0];case YA.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case YA.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error("Cannot handle type ".concat(YA[e]))}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const t=this.getFirstDimensionSize(),e=this.calculateOutputSize(t),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let r=n.length-2;r>=0;--r)n[r]=n[r+1]*e[r+1];const a=QA(e,!1),s=It(this.valuesDType,lt(a));if(n[0]*e[0]>0){let r=this.calculateFirstParentOutputIndex(t,n[0],e[0]);for(let t=1;t<=this.raggedRank;++t){r=this.calculateOutputIndex(t-1,r,n[t],e[t])}this.setOutput(this.raggedRank,r,s,a)}return[a,s]}setOutput(t,e,n,a){if(0===n.length)return;const s=this.values,r=n;let o=a.slice();o=o.slice(t+1);const i=lt(o),c=e.length;let l=this.defaultValue;if(l.length!==i&&1!==l.length){const t=this.defaultValueShape;co(()=>{const e=iu(l,t),n=Iu(e,o);l=n.dataSync()})}let u=0,h=0,d=0;for(let p=0;p<=c;++p){let t=p<c?e[p]:-1;if(t!==d){if(h<d){const t=s.subarray(u*i);JA(r.subarray(h*i),t,(d-h)*i)}if(p>=c){const e=n.length;t=Math.floor(e/i)}if(t>d)if(1===this.defaultValue.length)r.subarray(d*i,t*i).fill(this.defaultValue[0]),d=t;else for(;t>d;){JA(r.slice(d*i),l,i),++d}t<0?(u=p+1,h=d):(u=p,h=d,d=h+1)}else++d}}}function JA(t,e,n){for(let a=0;a<n;a++)t[a]=e[a]}function QA(t,e){const n=[];for(let a of t){if(a<0){if(!e)throw new Error("Dimension ".concat(a," must be >= 0"));if(a<-1)throw new Error("Dimension ".concat(a," must be >= -1"));a=-1}n.push(a)}return n}function $A(t,e,n,a,s,r,o,i,c,l){return new ZA(t,e,n,a,s,r,o,i,c,l).compute()}function tR(t,e,n,a){if(t===e||t<e&&n<0||e<t&&n>1)return Wt(0,a);const s=Wt(Math.abs(Math.ceil((e-t)/n)),a);e<t&&1===n&&(n=-1),s[0]=t;for(let r=1;r<s.length;r++)s[r]=s[r-1]+n;return s}const eR=LE(t=>1/Math.sqrt(t)),nR=PE(Ta,eR),aR={kernelName:Ta,backendName:"cpu",kernelFunc:nR};function sR(t,e,n,a,s,r,o,i,c,l){const u=[a/s,s],h=t.values,d=e.values;if(0===a)return Ni(n,e.dtype);const p=c instanceof lr?c:Ni(u,e.dtype);"string"===typeof c||"number"===typeof c?p.values.fill(c):"boolean"===typeof c&&p.values.fill(+c);for(let f=0;f<r;f++){const t=[];let r=0;for(let e=0;e<o;e++){const n=h[f*o+e];t.push(n),r+=n*i[e]}if(r<0||r>=a/s)throw new Error("Invalid indices: ".concat(t," does not index into ").concat(n));for(let n=0;n<s;n++)l?p.values[r*s+n]+=d[f*s+n]:p.values[r*s+n]=0===e.rank?d[0]:d[f*s+n]}return p}const rR=LE(t=>1/(1+Math.exp(-t))),oR=zE(La,t=>1/(1+Math.exp(-t))),iR={kernelName:La,backendName:"cpu",kernelFunc:oR};function cR(t,e,n,a,s){const r=pl(a,e,n),o=lt(n),i=Mt(a);if(r){const n=fl(e,i);return"string"===s?t.slice(n,n+o):t.subarray(n,n+o)}const c=Ni(a,s,"string"===s?Qm(t):t),l=Ni(n,s);for(let u=0;u<l.size;++u){const t=l.indexToLoc(u),n=t.map((t,n)=>t+e[n]);l.set(c.get(...n),...t)}return"string"===s?$m(l.values):l.values}function lR(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{begin:r,size:o}=a;lE(s,"slice");const[i,c]=ml(s,r,o);el(s,i,c);const l=cR(n.data.get(s.dataId).values,i,c,s.shape,s.dtype);return n.makeTensorInfo(c,s.dtype,l)}const uR={kernelName:Da,backendName:"cpu",kernelFunc:lR};function hR(t,e,n,a,s,r,o){const i=e[0],c=r[0],l=new Array(c),u=new Array(i),h=e[1];if(0===c){if(0!==i)throw new Error(zm(i));return[It(n,0),[0,h],It(s,0),l,u]}let d=!0,p=0;const f=new Array(c).fill(0);for(let g=0;g<i;++g){const e=t[g*h];if(e<0)throw new Error(Pm(g,e));if(e>=c)throw new Error(Bm(g,e,c));++f[e],d=d&&e>=p,p=e}let m=!0;for(let g=0;g<c;++g){const t=0===f[g];l[g]=t,m=m&&!t,f[g]=Math.max(f[g],1),g>0&&(f[g]+=f[g-1])}if(m&&d){const e=t,n=a;for(let t=0;t<i;++t)u[t]=t;return[e,[i,h],n,l,u]}{const e=f[c-1],r=It(n,e*h),d=It(s,e),p=new Array(c).fill(0);for(let n=0;n<i;++n){const e=t[n*h],s=p[e],o=(0===e?0:f[e-1])+s;p[e]++;for(let a=0;a<h;++a)r[o*h+a]=t[n*h+a];d[o]=a[n],u[n]=o}for(let t=0;t<c;++t){if(0===p[t]){const e=0===t?0:f[t-1];r[e*h+0]=t;for(let t=1;t<h;++t)r[e*h+t]=0;d[e]=o}}return[r,[e,h],d,l,u]}}function dR(t,e,n,a,s){const r=lt(a),o=e[0],i=s.length,c=[];let l=1,u=-1;for(let m=0;m<i;++m){const t=s[m];if(-1===t){if(-1!==u)throw new Error(Wm(u,m));u=m,c.push(1)}else{if(t<0)throw new Error(Vm(m,t));l*=t,c.push(t)}}if(-1!==u){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const t=Math.trunc(r/l);if(l*t!==r)throw new Error(Gm(a,c));c[u]=t}if(lt(c)!==r)throw new Error(Hm(a,c));const h=a.length,d=[];if(h>0){d[h-1]=1;for(let t=h-2;t>=0;--t)d[t]=d[t+1]*a[t+1]}const p=[];if(i>0){p[i-1]=1;for(let t=i-2;t>=0;--t)p[t]=p[t+1]*c[t+1]}const f=It(n,o*i);for(let m=0;m<o;++m){let e=0;for(let n=0;n<h;++n)e+=t[m*h+n]*d[n];for(let t=0;t<i;++t)f[m*i+t]=Math.trunc(e/p[t]),e%=p[t]}return[f,[o,i],c]}function pR(t,e,n,a,s){let r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0;const i=a.length,c=[e[0],t.length/e[0]],l=c[1],u=i>0?s[i-1]+1:0;if(u<0)throw new Error("segment ids must be >= 0");const h=e.slice();h[0]=u;const d=It(n,h.reduce((t,e)=>t*e,1));if(0===i)return u>0&&d.fill(o),[d,h];if(u<=0)throw new Error("segment ids must be >= 0");let p=0,f=1,m=0,g=s[p];for(;;){let e=0;if(f<i){if(e=s[f],g===e){++f;continue}if(g>=e)throw new Error(qm())}if(g<0||g>=u)throw new Error(Km(g,u));g>m&&d.fill(o,m*l,g*l);for(let n=p;n<f;++n){const e=a[n];if(e<0||e>=c[0])throw new Error(Xm(n,a[n],c[0]));for(let n=0;n<l;n++)d[g*l+n]+=t[e*l+n]}if(r)for(let t=0;t<l;t++)d[g*l+t]/=f-p;if(p=f,++f,m=g+1,g=e,f>i)break}return m<u&&d.fill(o,m*l,u*l),[d,h]}const fR=LE(t=>Math.sqrt(t)),mR=zE(Pa,t=>Math.sqrt(t)),gR={kernelName:Pa,backendName:"cpu",kernelFunc:mR},yR=fE((t,e)=>{const n=t-e;return n*n}),bR=SE(Xa,yR),xR={kernelName:Xa,backendName:"cpu",kernelFunc:bR},wR=LE((t,e)=>{const{pattern:n,replaceGlobal:a,rewrite:s}=e;return t.replace(new RegExp(n,a?"g":""),s)}),vR=PE(Za,wR),kR={kernelName:Za,backendName:"cpu",kernelFunc:vR};function IR(t,e,n,a){const s=Ni(t,e.dtype);for(let r=0;r<s.size;r++){const t=s.indexToLoc(r),o=new Array(t.length);for(let e=0;e<o.length;e++)o[e]=t[e]*n[e]+a[e];s.set(e.get(...o),...t)}return s}class NR{constructor(t,e,n,a,s,r){this.separator=Js(t),this.nGramWidths=e,this.leftPad=Js(n),this.rightPad=Js(a),this.padWidth=s,this.preserveShort=r}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const n=this.getPadWidth(e);return Math.max(0,t+2*n-e+1)}createNGrams(t,e,n,a,s,r){for(let o=0;o<s;++o){const i=this.getPadWidth(r),c=Math.max(0,i-o),l=Math.max(0,i-(s-(o+1))),u=r-(c+l),h=e+(c>0?0:o-i);let d=0;d+=c*this.leftPad.length;for(let e=0;e<u;++e)d+=t[h+e].length;d+=l*this.rightPad.length;d+=(c+l+u-1)*this.separator.length,n[a+o]=new Uint8Array(d);const p=n[a+o];let f=0;const m=t=>t.forEach(t=>p[f++]=t);for(let t=0;t<c;++t)m(this.leftPad),m(this.separator);for(let e=0;e<u-1;++e)m(t[h+e]),m(this.separator);if(u>0){m(t[h+u-1]);for(let t=0;t<l;++t)m(this.separator),m(this.rightPad)}else{for(let t=0;t<l-1;++t)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(t,e){const n=t.length,a=e.length;if(a>0){let t=e[0];if(0!==t)throw new Error("First split value must be 0, got ".concat(t));for(let s=1;s<a;++s){let a=e[s]>=t;if(a=a&&e[s]<=n,!a)throw new Error("Invalid split value ".concat(e[s],", must be in [").concat(t,", ").concat(n,"]"));t=e[s]}if(t!==n)throw new Error("Last split value must be data size. Expected ".concat(n,", got ").concat(t))}const s=a-1,r=It("int32",a);if(0===n||0===a){const t=new Array(n);for(let e=0;e<=s;++e)r[e]=0;return[t,r]}r[0]=0;for(let i=1;i<=s;++i){const t=e[i]-e[i-1];let n=0;this.nGramWidths.forEach(e=>{n+=this.getNumNGrams(t,e)}),this.preserveShort&&t>0&&0===n&&(n=1),r[i]=r[i-1]+n}const o=new Array(r[s]);for(let i=0;i<s;++i){const n=e[i];let a=r[i];if(this.nGramWidths.forEach(s=>{const r=e[i+1]-e[i],c=this.getNumNGrams(r,s);this.createNGrams(t,n,o,a,c,s),a+=c}),this.preserveShort&&a===r[i]){const s=e[i+1]-e[i];if(0===s)continue;const r=s+2*this.padWidth,c=1;this.createNGrams(t,n,o,a,c,r)}}return[o,r]}}function SR(t,e,n,a,s,r,o,i){return new NR(n,a,s,r,o,i).compute(t,e)}function TR(t,e,n,a){if(!t.length)return;if(0===e.length){for(let e=0;e<t.length;++e)a.push(t.subarray(e,e+1));return}if(1===e.length){const s=e[0];let r=t.indexOf(s);for(;-1!==r;){const e=t.subarray(0,r);n&&0===e.length||a.push(e),r=(t=t.subarray(r+1)).indexOf(s)}return void(n&&0===t.length||a.push(t))}let s=0;for(let r=0;r<t.length+1;r++)if(r===t.length||-1!==e.indexOf(t[r])){const e=t.subarray(s,r);n&&0===e.length||a.push(e),s=r+1}}function CR(t,e,n){const a=t.length,s=[];let r=0,o=0;const i=new Array(a);for(let d=0;d<a;++d){const a=s.length;TR(t[d],e,n,s);const c=s.length-a;i[d]=c,r+=c,o=Math.max(o,c)}const c=It("int32",2*r),l=new Array(r),u=[a,o];let h=0;for(let d=0;d<a;++d)for(let t=0;t<i[d];++t)c[2*h]=d,c[2*h+1]=t,l[h]=s[h],++h;return[c,l,u]}function ER(t,e){const n=It("int32",t.length);for(let a=0;a<t.length;++a)n[a]=qs(t[a]).modulo(e).getLowBitsUnsigned();return n}const AR=fE((t,e)=>t-e),RR=TE((t,e,n,a)=>({real:t-n,imag:e-a})),FR=SE(es,AR,RR),DR={kernelName:es,backendName:"cpu",kernelFunc:FR};function _R(t,e){const n=new Array(t.rank);for(let s=0;s<n.length;s++)n[s]=t.shape[s]*e[s];const a=Ni(n,t.dtype);for(let s=0;s<a.values.length;++s){const e=a.indexToLoc(s),n=new Array(t.rank);for(let a=0;a<n.length;a++)n[a]=e[a]%t.shape[a];const r=t.locToIndex(n);a.values[s]=t.values[r]}return a}const OR=(t,e)=>{const n=e.value-t.value;return 0===n?t.index-e.index:n};function MR(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.length-1;for(;a>n;){if(a-n>600){const s=a-n+1,r=e-n+1,o=Math.log(s),i=.5*Math.exp(2*o/3),c=.5*Math.sqrt(o*i*(s-i)/s)*Math.sign(r-s/2);MR(t,e,Math.max(n,Math.floor(e-r*i/s+c)),Math.min(a,Math.floor(e+(s-r)*i/s+c)))}const s=t[e];let r=n,o=a;for(nt(t,n,e),OR(t[a],s)>0&&nt(t,n,a);r<o;){for(nt(t,r,o),r++,o--;OR(t[r],s)<0;)r+=1;for(;OR(t[o],s)>0;)o-=1}0===OR(t[n],s)?nt(t,n,o):(o+=1,nt(t,o,a)),o<=e&&(n=o+1),e<=o&&(a=o-1)}}function LR(t,e,n,a,s){const r=e[e.length-1],[o,i]=[t.length/r,r],c=kt(n,o*a),l=kt("int32",o*a);for(let h=0;h<o;h++){const e=h*i,n=t.subarray(e,e+i);let r=new Array(n.length);n.forEach((t,e)=>r[e]={value:t,index:e}),a<r.length&&(MR(r,a),r=r.slice(0,a)),s&&r.sort(OR);const o=h*a,u=c.subarray(o,o+a),d=l.subarray(o,o+a);for(let t=0;t<a;t++)u[t]=r[t].value,d[t]=r[t].index}const u=e.slice();return u[u.length-1]=a,[Ni(u,n,c),Ni(u,"int32",l)]}function zR(t,e,n,a){const s=wt(e,n)[0],r=[1,n[0],1];for(let f=0;f<s;f++)r[0]*=n[f];r[1]=n[s];for(let f=s+1;f<n.length;f++)r[2]*=n[f];const o=new Map,i=new Int32Array(n[s]),c=new lr(r,a,t),l=[],u=1===r[0]&&1===r[2];for(let f=0;f<n[s];f++){let e;if(u)e=t[f].toString();else{const t=[];for(let e=0;e<r[0];e++)for(let n=0;n<r[2];n++)t.push(c.get(e,f,n));e=t.join(",")}const n=o.get(e);if(null!=n)i[f]=n;else{const t=o.size;o.set(e,t),i[f]=t,l.push(f)}}const h=r.slice();h[1]=o.size;const d=new lr(h,a);l.forEach((t,e)=>{for(let n=0;n<r[0];n++)for(let a=0;a<r[2];a++)d.set(c.get(n,t,a),n,e,a)});const p=n.slice();return p[s]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const PR="4.22.0";xo("cpu",()=>new hE,1);const BR=zE($e,t=>t>=0?t:Math.exp(t)-1),WR={kernelName:$e,backendName:"cpu",kernelFunc:BR};function VR(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{alpha:r}=a;lE([s],"leakyRelu");const o=lt(s.shape),i=n.data.get(s.dataId).values,c=kt("float32",o);for(let l=0;l<i.length;l++)c[l]=i[l]<0?r*i[l]:i[l];return n.makeTensorInfo(s.shape,"float32",c)}const UR={kernelName:In,backendName:"cpu",kernelFunc:VR},GR=fE((t,e)=>t<0?e*t:t);function HR(t){const{inputs:e,backend:n}=t,{x:a,alpha:s}=e;lE([a,s],"prelu");const r=n.data.get(a.dataId).values,o=n.data.get(s.dataId).values,[i,c]=GR(a.shape,s.shape,r,o,"float32");return n.makeTensorInfo(c,"float32",i)}const jR={kernelName:la,backendName:"cpu",kernelFunc:HR},qR=zE(ya,t=>Math.max(0,t)),KR={kernelName:ya,backendName:"cpu",kernelFunc:qR},XR=zE(Ia,t=>Math.min(Math.max(0,t),6)),YR={kernelName:Ia,backendName:"cpu",kernelFunc:XR};function ZR(t,e,n,a,s){if("linear"===n)return bE({inputs:{x:e},backend:t});if("relu"===n)return qR({inputs:{x:e},backend:t});if("elu"===n)return BR({inputs:{x:e},backend:t});if("relu6"===n)return XR({inputs:{x:e},backend:t});if("prelu"===n)return HR({inputs:{x:e,alpha:a},backend:t});if("leakyrelu"===n)return VR({inputs:{x:e},backend:t,attrs:{alpha:s}});if("sigmoid"===n)return oR({inputs:{x:e},backend:t});throw new Error("Activation ".concat(n," has not been implemented for the CPU backend."))}function JR(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{shape:r}=a,o=lt(s.shape),i=xt(r,o),c=lt(i);ot(o===c,()=>"The new shape (".concat(i,") has ").concat(c," elements and the old ")+"shape (".concat(s.shape,") has ").concat(o," elements. The new shape and old ")+"shape must have the same number of elements."),n.incRef(s.dataId);const l=n.data.get(s.dataId);if(null!=l.complexTensorInfos){const t=l.complexTensorInfos.real,e=l.complexTensorInfos.imag;t.shape=i,e.shape=i}return{dataId:s.dataId,shape:i,dtype:s.dtype}}const QR={kernelName:ba,backendName:"cpu",kernelFunc:JR};function $R(t){const{inputs:e,backend:n,attrs:a}=t,{a:s,b:r}=e,{transposeA:o,transposeB:i}=a;lE([s,r],"matMul");const c=s.shape.length,l=r.shape.length,u=o?s.shape[c-2]:s.shape[c-1],h=i?r.shape[l-1]:r.shape[l-2],d=o?s.shape[c-1]:s.shape[c-2],p=i?r.shape[l-2]:r.shape[l-1],f=s.shape.slice(0,-2),m=r.shape.slice(0,-2),g=lt(f),y=lt(m),b=rc(s.shape.slice(0,-2),r.shape.slice(0,-2)).concat([d,p]);ot(u===h,()=>"Error in matMul: inner shapes (".concat(u,") and (")+"".concat(h,") of Tensors with shapes ").concat(s.shape," and ")+"".concat(r.shape," and transposeA=").concat(o)+" and transposeB=".concat(i," must match."));const x=i?[y,p,h]:[y,h,p],w=JR({inputs:{x:s},backend:n,attrs:{shape:o?[g,u,d]:[g,d,u]}}),v=JR({inputs:{x:r},backend:n,attrs:{shape:x}}),k=o?w.shape[1]:w.shape[2],I=o?w.shape[2]:w.shape[1],N=i?v.shape[1]:v.shape[2],S=Math.max(g,y),T=n.data.get(w.dataId).values,C=n.data.get(v.dataId).values,E=Mt(w.shape),A=Mt(v.shape),[R,F,D]=o?[E[0],1,E[1]]:[E[0],E[1],1],[_,O,M]=i?[1,A[1],A[0]]:[A[1],1,A[0]],L=I*N,z=Ni([S,I,N],w.dtype),P=z.values,B=n.blockSize;for(let W=0;W<S;W++){const t=W%g,e=W%y;for(let n=0;n<I;n+=B){const a=Math.min(n+B,I);for(let s=0;s<N;s+=B){const r=Math.min(s+B,N);for(let o=0;o<k;o+=B){const i=Math.min(o+B,k);for(let c=n;c<a;c++)for(let n=s;n<r;n++){let a=0;for(let s=o;s<i;s++){a+=T[t*R+c*F+s*D]*C[s*_+n*O+e*M]}P[W*L+(c*N+n)]+=a}}}}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,z.dtype,z.values)}const tF={kernelName:be,backendName:"cpu",kernelFunc:$R};const eF={kernelName:gs,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{a:s,b:r,bias:o,preluActivationWeights:i}=e,{transposeA:c,transposeB:l,activation:u,leakyreluAlpha:h}=a;let d,p,f;const m=[];d=$R({inputs:{a:s,b:r},attrs:{transposeA:c,transposeB:l},backend:n}),o&&(p=AE({inputs:{a:d,b:o},backend:n}),m.push(d),d=p),u&&(f=ZR(n,d,u,i,h),m.push(d),d=f);for(const g of m)n.disposeIntermediateTensorInfo(g);return d}},nF=zE(ee,t=>Math.acos(t)),aF={kernelName:ee,backendName:"cpu",kernelFunc:nF},sF=zE(ne,t=>Math.acosh(t)),rF={kernelName:ne,backendName:"cpu",kernelFunc:sF};const oF={kernelName:se,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,a=e;lE(e,"addN");const s=a.map(t=>n.data.get(t.dataId).values),r=Ni(a[0].shape,a[0].dtype),o=r.values;for(let i=0;i<a.length;i++){const t=s[i];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(r.shape,r.dtype,r.values)}};const iF={kernelName:re,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a;lE(s,"all");const i=wt(r,s.shape);let c=i;const l=rh(c,s.shape.length);let u=s;null!=l&&(u=BA({inputs:{x:s},backend:n,attrs:{perm:l}}),c=ih(c.length,s.shape.length)),sh("all",c,u.shape.length);const[h,d]=nh(u.shape,c),p=lt(d),f=Wt(lt(h),u.dtype),m=n.data.get(u.dataId).values;for(let y=0;y<f.length;++y){const t=y*p;let e=m[t];for(let n=0;n<p;++n){const a=m[t+n];e=e&&a}f[y]=e}null!=l&&n.disposeIntermediateTensorInfo(u);const g=n.makeTensorInfo(h,u.dtype,f);if(o){const t=JR({inputs:{x:g},backend:n,attrs:{shape:ah(h,i)}});return n.disposeIntermediateTensorInfo(g),t}return g}};const cF={kernelName:oe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a;lE(s,"any");const i=wt(r,s.shape);let c=i;const l=rh(c,s.shape.length);let u=s;null!=l&&(u=BA({inputs:{x:s},backend:n,attrs:{perm:l}}),c=ih(c.length,s.shape.length)),sh("any",c,u.shape.length);const[h,d]=nh(u.shape,c),p=lt(d),f=Wt(lt(h),u.dtype),m=n.data.get(u.dataId).values;for(let y=0;y<f.length;++y){const t=y*p;let e=m[t];for(let n=0;n<p;++n){const a=m[t+n];e=e||a}f[y]=e}null!=l&&n.disposeIntermediateTensorInfo(u);const g=n.makeTensorInfo(h,u.dtype,f);if(o){const t=JR({inputs:{x:g},backend:n,attrs:{shape:ah(h,i)}});return n.disposeIntermediateTensorInfo(g),t}return g}};const lF={kernelName:ie,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r}=a;lE(s,"argMax");let o=wt(r,s.shape);const i=rh(o,s.shape.length);let c=s;const l=[];null!=i&&(c=BA({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(c),o=ih(o.length,c.shape.length)),o=[o[0]],sh("argMax",o,c.shape.length);const[u,h]=nh(c.shape,o),d=Wt(lt(u),"int32"),p=lt(h),f=n.data.get(c.dataId).values;for(let m=0;m<d.length;++m){const t=m*p;let e=f[t],n=0;for(let a=0;a<p;++a){const s=f[t+a];s>e&&(e=s,n=a)}d[m]=n}return l.forEach(t=>n.disposeIntermediateTensorInfo(t)),n.makeTensorInfo(u,"int32",d)}};const uF={kernelName:ce,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r}=a;lE(s,"argMin");let o=wt(r,s.shape);const i=rh(o,s.shape.length);let c=s;const l=[];null!=i&&(c=BA({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(c),o=ih(o.length,c.shape.length)),o=[o[0]],sh("argMin",o,c.shape.length);const[u,h]=nh(c.shape,o),d=Wt(lt(u),"int32"),p=lt(h),f=n.data.get(c.dataId).values;for(let m=0;m<d.length;++m){const t=m*p;let e=f[t],n=0;for(let a=0;a<p;++a){const s=f[t+a];s<e&&(e=s,n=a)}d[m]=n}return l.forEach(t=>n.disposeIntermediateTensorInfo(t)),n.makeTensorInfo(u,"int32",d)}},hF=zE(le,t=>Math.asin(t)),dF={kernelName:le,backendName:"cpu",kernelFunc:hF},pF=zE(ue,t=>Math.asinh(t)),fF={kernelName:ue,backendName:"cpu",kernelFunc:pF},mF=zE(he,t=>Math.atan(t)),gF={kernelName:he,backendName:"cpu",kernelFunc:mF},yF=fE((t,e)=>Math.atan2(t,e)),bF=SE(pe,yF),xF={kernelName:pe,backendName:"cpu",kernelFunc:bF},wF=zE(de,t=>Math.atanh(t)),vF={kernelName:de,backendName:"cpu",kernelFunc:wF};function kF(t,e,n,a,s,r){const o=s.strideHeight,i=s.strideWidth,c=s.dilationHeight,l=s.dilationWidth,u=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,p=s.padInfo.left,f="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Ni(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let w=0;w<s.batchSize;++w){const e=w*y,n=w*a[0];for(let m=0;m<s.inChannels;++m)for(let y=0;y<s.outHeight;++y){const w=y*o-d,v=Math.max(0,w),k=Math.min(s.inHeight,u+w),I=e+y*b;for(let e=0;e<s.outWidth;++e){const o=e*i-p,u=Math.max(0,o),d=Math.min(s.inWidth,h+o);let y=f,b=0,w=0;for(let e=v;e<k;e+=c){const s=n+e*a[1];for(let e=u;e<d;e+=l){const n=t[s+e*a[2]+m];"max"===r&&n>y?y=n:"avg"===r&&(b+=n,w++)}if(isNaN(y))break}g[I+e*x+m]="avg"===r?b/w:y}}}return m}function IF(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const o=Ni(a.outShape,"int32"),i=a.strideHeight,c=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,h=a.effectiveFilterHeight,d=a.effectiveFilterWidth,p=a.padInfo.top,f=a.padInfo.left,m=Ni(e,n,t);for(let g=0;g<a.batchSize;++g)for(let t=0;t<a.inChannels;++t)for(let e=0;e<a.outHeight;++e){const n=e*i-p;let y=n;for(;y<0;)y+=l;const b=Math.min(a.inHeight,h+n);for(let i=0;i<a.outWidth;++i){const h=i*c-f;let p=h;for(;p<0;)p+=u;const x=Math.min(a.inWidth,d+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let e=y;e<b;e+=l){const o=e-n;for(let n=p;n<x;n+=u){const i=n-h,c=m.get(g,e,n,t);c>w&&(w=c,v=s?r?((g*a.inHeight+e)*a.inWidth+n)*a.inChannels+t:(e*a.inWidth+n)*a.inChannels+t:o*d+i)}}o.set(v,g,e,i,t)}}return o}function NF(t,e,n,a,s,r){const o=s.strideDepth,i=s.strideHeight,c=s.strideWidth,l=s.dilationDepth,u=s.dilationHeight,h=s.dilationWidth,d=s.effectiveFilterDepth,p=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Ni(s.outShape,n),w=x.values,v=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],k=s.outShape[2]*s.outShape[3]*s.outShape[4],I=s.outShape[3]*s.outShape[4],N=s.outShape[4];for(let S=0;S<s.batchSize;++S){const e=S*v,n=S*a[0];for(let x=0;x<s.inChannels;++x)for(let v=0;v<s.outDepth;++v){const S=v*o-m;let T=S;for(;T<0;)T+=l;const C=Math.min(s.inDepth,d+S),E=e+v*k;for(let e=0;e<s.outHeight;++e){const o=e*i-g;let d=o;for(;d<0;)d+=u;const m=Math.min(s.inHeight,p+o),v=E+e*I;for(let e=0;e<s.outWidth;++e){const o=e*c-y;let i=o;for(;i<0;)i+=h;const p=Math.min(s.inWidth,f+o),g=v+e*N;let k=b,I=0,S=0;for(let e=T;e<C;e+=l){const s=n+e*a[1];for(let e=d;e<m;e+=u){const n=s+e*a[2];for(let e=i;e<p;e+=h){const s=t[n+e*a[3]+x];if("max"===r&&s>k?k=s:"avg"===r&&(I+=s,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[g+x]="avg"===r?I/Math.max(S,1):k}}}}return x}const SF={kernelName:fe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e;lE(s,"avgPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:c}=a;ot(au(o,1),()=>"Error in avgPool: Either strides or dilations must be 1. "+"Got strides ".concat(o," and dilations '").concat(1,"'"));const l=Kl(s.shape,r,o,1,i,c);let u;if(1===l.filterWidth&&1===l.filterHeight&&dt(l.inShape,l.outShape))u=bE({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=Mt(s.shape),a=kF(t,s.shape,s.dtype,e,l,"avg");u=n.makeTensorInfo(l.outShape,s.dtype,a.values)}return u}};const TF={kernelName:ge,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{filterSize:r,strides:o,pad:i,dimRoundingMode:c,dataFormat:l}=a;lE(s,"avgPool3d");const u=Xl(s.shape,r,o,1,i,c,l),h=NF(n.data.get(s.dataId).values,s.shape,s.dtype,Mt(s.shape),u,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const CF={kernelName:ye,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,input:r}=e,{filterSize:o,strides:i,pad:c,dimRoundingMode:l}=a;lE([s,r],"avgPool3DGrad");const u=Xl(r.shape,o,i,1,c,l),h=u.strideDepth,d=u.strideHeight,p=u.strideWidth,f=u.filterDepth,m=u.filterHeight,g=u.filterWidth,y=u.dilationDepth,b=u.dilationHeight,x=u.dilationWidth,w=u.effectiveFilterDepth,v=u.effectiveFilterHeight,k=u.effectiveFilterWidth,I=w-1-u.padInfo.front,N=k-1-u.padInfo.left,S=v-1-u.padInfo.top,T=Ni(r.shape,"float32"),C=1/(f*m*g),E=n.bufferSync(s);for(let A=0;A<u.batchSize;++A)for(let t=0;t<u.inChannels;++t)for(let e=0;e<u.inDepth;++e)for(let n=0;n<u.inHeight;++n)for(let a=0;a<u.inWidth;++a){const s=e-I,r=n-S,o=a-N;let i=0;for(let e=0;e<w;e+=y){const n=(s+e)/h;if(!(n<0||n>=u.outDepth||Math.floor(n)!==n))for(let e=0;e<v;e+=b){const a=(r+e)/d;if(!(a<0||a>=u.outHeight||Math.floor(a)!==a))for(let e=0;e<k;e+=x){const s=(o+e)/p;if(s<0||s>=u.outWidth||Math.floor(s)!==s)continue;i+=E.get(A,n,a,s,t)}}}T.set(i*C,A,e,n,a,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const EF={kernelName:me,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,input:r}=e,o=r;lE([s,r],"avgPoolGrad");const{filterSize:i,strides:c,pad:l}=a,u=Kl(o.shape,i,c,1,l),h=u.strideHeight,d=u.strideWidth,p=u.filterHeight,f=u.filterWidth,m=u.dilationHeight,g=u.dilationWidth,y=u.effectiveFilterHeight,b=u.effectiveFilterWidth,x=b-1-u.padInfo.left,w=y-1-u.padInfo.top,v=Ni(o.shape,"float32"),k=1/(p*f),I=n.data.get(s.dataId).values,N=Ni(s.shape,"float32",I);for(let S=0;S<u.batchSize;++S)for(let t=0;t<u.inChannels;++t)for(let e=0;e<u.inHeight;++e)for(let n=0;n<u.inWidth;++n){const a=e-w,s=n-x;let r=0;for(let e=0;e<y;e+=m){const n=(a+e)/h;if(!(n<0||n>=u.outHeight||Math.floor(n)!==n))for(let e=0;e<b;e+=g){const a=(s+e)/d;if(a<0||a>=u.outWidth||Math.floor(a)!==a)continue;r+=N.get(S,n,a,t)}}v.set(r*k,S,e,n,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const AF={kernelName:dn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,scale:r,offset:o,mean:i,variance:c}=e;ot(i.shape.length===c.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),ot(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),ot(null==r||i.shape.length===r.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),lE([s,i,c,r,o],"batchNorm");let{varianceEpsilon:l}=a;null==l&&(l=.001);const u=n.data.get(s.dataId).values,h=n.data.get(i.dataId).values,d=n.data.get(c.dataId).values,p=r?n.data.get(r.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(u.length),g=f.length,y=p.length,b=d.length,x=h.length;let w=0,v=0,k=0,I=0;for(let N=0;N<u.length;++N)m[N]=f[w++]+(u[N]-h[v++])*p[k++]/Math.sqrt(d[I++]+l),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),I>=b&&(I=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};const RF={kernelName:xe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{blockShape:r,crops:o}=a;lE([s],"batchToSpaceND");const i=r.reduce((t,e)=>t*e),c=rm(s.shape,r,i),l=om(c.length,r.length),u=im(s.shape,r,i),h=cm(o,r.length),d=lm(u,o,r.length),p=JR({inputs:{x:s},backend:n,attrs:{shape:c}}),f=BA({inputs:{x:p},backend:n,attrs:{perm:l}}),m=JR({inputs:{x:f},backend:n,attrs:{shape:u}}),g=lR({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const FF={kernelName:we,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,weights:r}=e,{size:o}=a,i=FE(n.data.get(s.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,i)}};const DF={kernelName:Ie,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{s0:a,s1:s}=e,r=n.data.get(a.dataId).values,o=n.data.get(s.dataId).values,i=rc(Array.from(r),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},_F=zE(Te,(t,e)=>{const n=e;return t>n.clipValueMax?n.clipValueMax:t<n.clipValueMin?n.clipValueMin:t}),OF={kernelName:Te,backendName:"cpu",kernelFunc:_F},MF={kernelName:Ee,backendName:"cpu",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend,a=new Float32Array(lt(e.shape)),s=n.data.get(e.dataId),r=s.complexTensorInfos.real,o=s.complexTensorInfos.imag,i=n.data.get(r.dataId).values,c=n.data.get(o.dataId).values;for(let l=0;l<i.length;l++){const t=i[l],e=c[l];a[l]=Math.hypot(t,e)}return n.makeOutput(a,e.shape,"float32")}};function LF(t){const{inputs:e,backend:n}=t,{input:a}=e,s=n.data.get(a.dataId).complexTensorInfos.imag,r=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,r)}const zF={kernelName:xn,backendName:"cpu",kernelFunc:LF};function PF(t){const{inputs:e,backend:n,attrs:a}=t,{axis:s}=a,r=wt(s,e[0].shape)[0];Yf(e.map(t=>t.shape),r);let o=Zf(e.map(t=>t.shape),r);if(0===lt(o))return n.makeTensorInfo(o,e[0].dtype,[]);const i=e.filter(t=>lt(t.shape)>0);if(1===i.length)return bE({inputs:{x:i[0]},backend:n});if("complex64"===i[0].dtype){const t=i.map(t=>wE({inputs:{input:t},backend:n})),e=i.map(t=>LF({inputs:{input:t},backend:n})),a=PF({inputs:t,backend:n,attrs:{axis:r}}),s=PF({inputs:e,backend:n,attrs:{axis:r}}),o=mE({inputs:{real:a,imag:s},backend:n});return t.forEach(t=>n.disposeIntermediateTensorInfo(t)),e.forEach(t=>n.disposeIntermediateTensorInfo(t)),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}const c=i.map(t=>{const e=lt(t.shape.slice(r));return JR({inputs:{x:t},backend:n,attrs:{shape:[-1,e]}})}),l=c.map(t=>({vals:n.data.get(t.dataId).values,shape:t.shape}));o=Zf(c.map(t=>t.shape),1);const u=1===c[0].shape[0],h=UE(l,o,e[0].dtype,u),d=Zf(i.map(t=>t.shape),r),p=n.makeTensorInfo(d,e[0].dtype,h);return c.forEach(t=>n.disposeIntermediateTensorInfo(t)),p}const BF={kernelName:Ae,backendName:"cpu",kernelFunc:PF};function WF(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r}=e,{strides:o,pad:i,dataFormat:c,dilations:l,dimRoundingMode:u}=a;lE([s,r],"conv2d");const h=ru(c),d=Yl(s.shape,r.shape,o,l,i,u,!1,h),p=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,y=d.padInfo.left,b=d.padInfo.top,x="channelsLast"===d.dataFormat,w=new lr(d.outShape,s.dtype),v=Mt(s.shape),k=Mt(r.shape),I=v[0],N=x?v[1]:v[2],S=x?v[2]:1,T=x?1:v[1],C=w.strides[0],E=x?w.strides[1]:w.strides[2],A=x?w.strides[2]:1,R=x?1:w.strides[1],F=n.data.get(s.dataId).values,D=n.data.get(r.dataId).values,_=w.values;for(let O=0;O<d.batchSize;++O){const t=O*I,e=O*C;for(let n=0;n<d.outHeight;++n){const a=e+n*E,s=n*d.strideHeight-b;for(let e=0;e<p;++e){const n=s+e*m;if(n<0||n>=d.inHeight)continue;const r=e*k[0],o=t+n*N;for(let t=0;t<d.outWidth;++t){const e=a+t*A,n=t*d.strideWidth-y;for(let t=0;t<f;++t){const a=n+t*g;if(a<0||a>=d.inWidth)continue;const s=o+a*S;let i=r+t*k[1];for(let t=0;t<d.inChannels;++t){const n=F[s+t*T];for(let t=0;t<d.outChannels;++t)_[e+t*R]+=n*D[i+t];i+=d.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,_)}const VF={kernelName:Re,backendName:"cpu",kernelFunc:WF};const UF={kernelName:Fe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,dy:r}=e,{strides:o,pad:i,dataFormat:c,dimRoundingMode:l,filterShape:u}=a;lE([s,r],"conv2dBackpropFilter");const h=ru(c),d=Yl(s.shape,u,o,1,i,l,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,y="channelsLast"===d.dataFormat,b=new lr(d.filterShape,"float32"),x=d.padInfo.left,w=d.padInfo.top,v=n.data.get(s.dataId).values,k=n.data.get(r.dataId).values,I=new lr(s.shape,s.dtype,v),N=new lr(r.shape,r.dtype,k);for(let S=0;S<m;++S){const t=Math.max(0,Math.ceil((w-S)/p)),e=Math.min(d.outHeight,(d.inHeight+w-S)/p);for(let n=0;n<g;++n){const a=Math.max(0,Math.ceil((x-n)/f)),s=Math.min(d.outWidth,(d.inWidth+x-n)/f);for(let r=0;r<d.inChannels;++r)for(let o=0;o<d.outChannels;++o){let i=0;for(let c=0;c<d.batchSize;++c)for(let l=t;l<e;++l){const t=S+l*p-w;for(let e=a;e<s;++e){const a=n+e*f-x;i+=y?I.get(c,t,a,r)*N.get(c,l,e,o):I.get(c,r,t,a)*N.get(c,o,l,e)}}b.set(i,S,n,r,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const GF={kernelName:De,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,filter:r}=e,{inputShape:o,strides:i,pad:c,dataFormat:l,dimRoundingMode:u}=a;lE([s,r],"conv2dBackpropInput");const h=Mt(r.shape),d=Mt(s.shape);let p=ru(l);const f=Yl(o,r.shape,i,1,c,u,!1,p),m=new lr(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(r.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:I,filterWidth:N,inChannels:S,inHeight:T,inWidth:C,outChannels:E,outHeight:A,outWidth:R,strideHeight:F,strideWidth:D}=f;p=f.dataFormat;const _=I-1-f.padInfo.top,O=N-1-f.padInfo.left,M="channelsLast"===p,L=m.strides[0],z=M?m.strides[1]:m.strides[2],P=M?m.strides[2]:1,B=M?1:m.strides[1],W=d[0],V=M?d[1]:d[2],U=M?d[2]:1,G=M?1:d[1];for(let H=0;H<k;++H)for(let t=0;t<S;++t)for(let e=0;e<T;++e){const n=e-_,a=Math.max(0,Math.ceil(n/F)),s=Math.min(A,(I+n)/F);for(let r=0;r<C;++r){const o=r-O,i=Math.max(0,Math.ceil(o/D)),c=Math.min(R,(N+o)/D);let l=0;for(let e=a;e<s;++e){const a=e*F-n;for(let n=i;n<c;++n){const s=W*H+V*e+U*n,r=x*(I-1-a)+w*(N-1-(n*D-o))+v*t;for(let t=0;t<E;++t){l+=y[s+G*t]*b[r+t]}}}g[L*H+z*e+P*r+B*t]=l}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const HF={kernelName:_e,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r}=e,{strides:o,pad:i,dilations:c}=a;lE([s,r],"conv3d");const l=Zl(s.shape,r.shape,o,c,i),{filterDepth:u,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,w=new lr(l.outShape,s.dtype),v=n.data.get(s.dataId).values,k=n.data.get(r.dataId).values,I=w.values,N=Mt(s.shape),S=Mt(r.shape);for(let T=0;T<l.batchSize;++T){const t=T*N[0],e=T*w.strides[0];for(let n=0;n<l.outDepth;++n){const a=e+n*w.strides[1],s=n*l.strideDepth-y;for(let e=0;e<u;++e){const n=s+e*p;if(n<0||n>=l.inDepth)continue;const r=e*S[0],o=t+n*N[1];for(let t=0;t<l.outHeight;++t){const e=a+t*w.strides[2],n=t*l.strideHeight-x;for(let t=0;t<h;++t){const a=n+t*f;if(a<0||a>=l.inHeight)continue;const s=r+t*S[1],i=o+a*N[2];for(let t=0;t<l.outWidth;++t){const n=e+t*l.outChannels,a=t*l.strideWidth-b;for(let t=0;t<d;++t){const e=a+t*m;if(e<0||e>=l.inWidth)continue;const r=s+t*S[2],o=i+e*l.inChannels;let c=r;for(let t=0;t<l.inChannels;++t){const e=v[o+t];for(let t=0;t<l.outChannels;++t)I[n+t]+=e*k[c+t];c+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const jF={kernelName:Oe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,dy:r}=e,{strides:o,pad:i,filterShape:c}=a;lE([s,r],"conv3dBackpropFilterV2");const l=Mt(s.shape),u=Mt(r.shape),h=Zl(s.shape,c,o,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new lr(h.filterShape,"float32"),x=b.values,[w,v,k,I]=b.strides,N=n.data.get(r.dataId).values,[S,T,C,E]=u,A=n.data.get(s.dataId).values,[R,F,D,_]=l,O=h.padInfo.front,M=h.padInfo.left,L=h.padInfo.top;for(let z=0;z<m;++z){const t=Math.max(0,Math.ceil((O-z)/d)),e=Math.min(h.outDepth,(h.inDepth+O-z)/d),n=z*w;for(let a=0;a<g;++a){const s=Math.max(0,Math.ceil((L-a)/p)),r=Math.min(h.outHeight,(h.inHeight+L-a)/p),o=a*v+n;for(let n=0;n<y;++n){const i=Math.max(0,Math.ceil((M-n)/f)),c=Math.min(h.outWidth,(h.inWidth+M-n)/f),l=n*k+o;for(let o=0;o<h.inChannels;++o){const u=o*I+l;for(let l=0;l<h.outChannels;++l){let m=0;for(let u=0;u<h.batchSize;++u){const h=u*R,g=u*S;for(let u=t;u<e;++u){const t=(z+u*d-O)*F+h,e=u*T+g;for(let u=s;u<r;++u){const s=(a+u*p-L)*D+t,r=u*C+e;for(let t=i;t<c;++t){const e=t*E+r;m+=A[(n+t*f-M)*_+s+o]*N[e+l]}}}}x[u+l]=m}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const qF={kernelName:Me,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,filter:r}=e,{pad:o,strides:i,inputShape:c}=a;lE([s],"conv3dBackpropInputV2");const l=Mt(s.shape),u=Mt(r.shape),h=Zl(c,r.shape,i,1,o),d=new lr(h.inShape,"float32"),p=d.values,[f,m,g,y]=d.strides,b=n.data.get(s.dataId).values,[x,w,v,k]=l,I=n.data.get(r.dataId).values,[N,S,T,C]=u,{batchSize:E,filterDepth:A,filterHeight:R,filterWidth:F,inChannels:D,inDepth:_,inHeight:O,inWidth:M,outChannels:L,outDepth:z,outHeight:P,outWidth:B,strideDepth:W,strideHeight:V,strideWidth:U}=h,G=A-1-h.padInfo.front,H=R-1-h.padInfo.top,j=F-1-h.padInfo.left;for(let q=0;q<E;++q)for(let t=0;t<D;++t)for(let e=0;e<_;++e){const n=e-G,a=Math.max(0,Math.ceil(n/W)),s=Math.min(z,(A+n)/W);for(let r=0;r<O;++r){const o=r-H,i=Math.max(0,Math.ceil(o/V)),c=Math.min(P,(R+o)/V);for(let l=0;l<M;++l){const u=l-j,h=Math.max(0,Math.ceil(u/U)),d=Math.min(B,(F+u)/U);let E=0;for(let e=a;e<s;++e){const a=e*W-n;for(let n=i;n<c;++n){const s=n*V-o;for(let r=h;r<d;++r){const o=x*q+w*e+v*n+k*r,i=N*(A-1-a)+S*(R-1-s)+T*(F-1-(r*U-u))+C*t;for(let t=0;t<L;++t){E+=b[o+t]*I[i+t]}}}}p[f*q+m*e+g*r+y*l+t]=E}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},KF=zE(Le,t=>Math.cos(t)),XF={kernelName:Le,backendName:"cpu",kernelFunc:KF},YF=zE(ze,t=>Math.cosh(t)),ZF={kernelName:ze,backendName:"cpu",kernelFunc:YF};const JF={kernelName:We,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{image:s,boxes:r,boxInd:o}=e,{cropSize:i,method:c,extrapolationValue:l}=a,[u,h,d,p]=s.shape,f=r.shape[0],[m,g]=i,y=Ni([f,m,g,p],"float32"),b=n.data.get(r.dataId).values,x=n.data.get(o.dataId).values,w=n.data.get(s.dataId).values,v=Mt(s.shape),k=Mt(y.shape);for(let I=0;I<f;I++){const t=4*I,e=b[t],n=b[t+1],a=b[t+2],s=b[t+3],r=x[I];if(r>=u)continue;const o=m>1?(a-e)*(h-1)/(m-1):0,i=g>1?(s-n)*(d-1)/(g-1):0;for(let u=0;u<m;u++){const t=m>1?e*(h-1)+u*o:.5*(e+a)*(h-1);if(t<0||t>h-1)for(let e=0;e<g;e++)for(let t=0;t<p;t++){const n=t+e*k[2]+u*k[1]+I*k[0];y.values[n]=l}else if("bilinear"===c){const e=Math.floor(t),a=Math.ceil(t),o=t-e;for(let t=0;t<g;t++){const c=g>1?n*(d-1)+t*i:.5*(n+s)*(d-1);if(c<0||c>d-1){for(let e=0;e<p;e++){const n=e+t*k[2]+u*k[1]+I*k[0];y.values[n]=l}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let n=0;n<p;n++){let s=n+h*v[2]+e*v[1]+r*v[0];const i=w[s];s=n+f*v[2]+e*v[1]+r*v[0];const c=w[s];s=n+h*v[2]+a*v[1]+r*v[0];const l=w[s];s=n+f*v[2]+a*v[1]+r*v[0];const d=i+(c-i)*m,p=l+(w[s]-l)*m;s=n+t*k[2]+u*k[1]+I*k[0],y.values[s]=d+(p-d)*o}}}else for(let e=0;e<g;++e){const a=g>1?n*(d-1)+e*i:.5*(n+s)*(d-1);if(a<0||a>d-1){for(let t=0;t<p;t++){const n=t+e*k[2]+u*k[1]+I*k[0];y.values[n]=l}continue}const o=Math.round(a),c=Math.round(t);for(let t=0;t<p;t++){const n=t+o*v[2]+c*v[1]+r*v[0],a=t+e*k[2]+u*k[1]+I*k[0];y.values[a]=w[n]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const QF={kernelName:Pe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,exclusive:o,reverse:i}=a;lE(s,"cumprod");const c=rh([r],s.shape.length);let l=s;null!=c&&(l=BA({inputs:{x:s},backend:n,attrs:{perm:c}}));const u=ih(1,s.shape.length)[0];if(u!==l.shape.length-1)throw new Error("backend.cumprod in CPU expects an inner-most "+"axis=".concat(l.shape.length-1," but got axis=").concat(u));const h=kr(l.dtype,"int32"),d=Bt(lt(l.shape),h),p=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(t,e)=>t+f-e-1:(t,e)=>t+e;for(let y=0;y<p.length;y+=f)for(let t=0;t<f;t++){const e=m(y,t);if(0===t)d[e]=o?1:p[e];else{const n=m(y,t-1);d[e]=o?p[n]*d[n]:p[e]*d[n]}}const g=n.makeTensorInfo(l.shape,h,d);if(null!=c){const t=BA({inputs:{x:g},backend:n,attrs:{perm:oh(c)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),t}return g}};const $F={kernelName:Be,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,exclusive:o,reverse:i}=a;lE(s,"cumsum");const c=rh([r],s.shape.length);let l=s;null!=c&&(l=BA({inputs:{x:s},backend:n,attrs:{perm:c}}));const u=ih(1,s.shape.length)[0];if(u!==l.shape.length-1)throw new Error("backend.cumsum in CPU expects an inner-most "+"axis=".concat(l.shape.length-1," but got axis=").concat(u));const h=kr(l.dtype,"int32"),d=Wt(lt(l.shape),h),p=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(t,e)=>t+f-e-1:(t,e)=>t+e;for(let y=0;y<p.length;y+=f)for(let t=0;t<f;t++){const e=m(y,t);if(0===t)d[e]=o?0:p[e];else{const n=m(y,t-1);d[e]=o?p[n]+d[n]:p[e]+d[n]}}const g=n.makeTensorInfo(l.shape,h,d);if(null!=c){const t=BA({inputs:{x:g},backend:n,attrs:{perm:oh(c)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),t}return g}};const tD={kernelName:Ve,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,weights:r}=e,{size:o,binaryOutput:i}=a;if(1===s.shape.length){const t=FE(n.data.get(s.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,t)}if(2===s.shape.length){const t=DE(n.bufferSync(s),n.bufferSync(r),o,i);return n.makeTensorInfo(t.shape,r.dtype,t.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+"".concat(s.shape.length,"."))}};const eD={kernelName:Ue,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{blockSize:r,dataFormat:o}=a;ot("NHWC"===o,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got ".concat(o));const i=s.shape[0],c=s.shape[1],l=s.shape[2],u=s.shape[3],h=c*r,d=l*r,p=u/(r*r),f=n.data.get(s.dataId).values,m=new Float32Array(i*h*d*p);let g=0;for(let y=0;y<i;++y)for(let t=0;t<h;++t){const e=Math.floor(t/r),n=t%r;for(let t=0;t<d;++t){const a=Math.floor(t/r),s=(n*r+t%r)*p;for(let t=0;t<p;++t){const n=t+s+u*(a+l*(e+c*y));m[g++]=f[n]}}}return n.makeTensorInfo([i,h,d,p],s.dtype,m)}};function nD(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r}=e,{strides:o,pad:i,dilations:c,dimRoundingMode:l}=a;lE([s,r],"depthwiseConv2DNative");const u=Mt(s.shape),h=Mt(r.shape);let d=c;null==d&&(d=[1,1]),ot(au(o,d),()=>"Error in depthwiseConv2d: Either strides or dilations must be "+"1. Got strides ".concat(o," and dilations '").concat(d,"'"));const p=Yl(s.shape,r.shape,o,d,i,l,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=p,x=b.left,w=b.top,v=p.outChannels/p.inChannels,k=new lr(p.outShape,s.dtype),I=n.data.get(s.dataId).values,N=n.data.get(r.dataId).values,S=k.values;for(let T=0;T<p.batchSize;++T){const t=T*u[0],e=T*k.strides[0];for(let n=0;n<p.outHeight;++n){const a=e+n*k.strides[1],s=n*p.strideHeight-w;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=p.inHeight)continue;const r=e*h[0],o=t+n*u[1];for(let t=0;t<p.outWidth;++t){const e=a+t*k.strides[2],n=t*p.strideWidth-x;for(let t=0;t<m;++t){const a=n+t*y;if(a<0||a>=p.inWidth)continue;const s=r+t*h[1],i=o+a*p.inChannels;let c=e,l=s;for(let t=0;t<p.inChannels;++t){const e=I[i+t];for(let t=0;t<v;++t)S[c+t]+=e*N[l+t];c+=v,l+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const aD={kernelName:Ge,backendName:"cpu",kernelFunc:nD};const sD={kernelName:He,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,dy:r}=e,{strides:o,dilations:i,pad:c,dimRoundingMode:l,filterShape:u}=a;lE([s,r],"depthwiseConv2dNativeBackpropFilter");const h=Yl(s.shape,u,o,i,c,l,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,g=new lr(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(s.dataId).values,v=new lr(s.shape,s.dtype,w),k=n.data.get(r.dataId).values,I=new lr(r.shape,r.dtype,k);for(let N=0;N<f;++N){const t=Math.max(0,Math.ceil((b-N)/d)),e=Math.min(h.outHeight,(h.inHeight+b-N)/d);for(let n=0;n<m;++n){const a=Math.max(0,Math.ceil((y-n)/p)),s=Math.min(h.outWidth,(h.inWidth+y-n)/p);for(let r=0;r<h.outChannels;++r){const o=Math.trunc(r/x),i=r%x;let c=0;for(let l=0;l<h.batchSize;++l)for(let i=t;i<e;++i){const t=N+i*d-b;for(let e=a;e<s;++e){const a=n+e*p-y;c+=v.get(l,t,a,o)*I.get(l,i,e,r)}}g.set(c,N,n,o,i)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const rD={kernelName:je,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,filter:r}=e,{strides:o,dilations:i,pad:c,dimRoundingMode:l,inputShape:u}=a;lE([s,r],"depthwiseConv2DNativeBackpropInput");const h=Mt(s.shape),d=Mt(r.shape),p=Yl(u,r.shape,o,i,c,l,!0),f=new lr(p.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,v,k]=h,I=n.data.get(r.dataId).values,[N,S,T]=d,{batchSize:C,filterHeight:E,filterWidth:A,inChannels:R,inHeight:F,inWidth:D,outChannels:_,outHeight:O,outWidth:M,strideHeight:L,strideWidth:z}=p,P=E-1-p.padInfo.top,B=A-1-p.padInfo.left,W=_/R;for(let V=0;V<C;++V)for(let t=0;t<R;++t)for(let e=0;e<F;++e){const n=e-P,a=Math.max(0,Math.ceil(n/L)),s=Math.min(O,(E+n)/L);for(let r=0;r<D;++r){const o=r-B,i=Math.max(0,Math.ceil(o/z)),c=Math.min(M,(A+o)/z);let l=0;for(let e=a;e<s;++e){const a=e*L-n;for(let n=i;n<c;++n){const s=w*V+v*e+k*n,r=N*(E-1-a)+S*(A-1-(n*z-o))+T*t;for(let e=0;e<W;++e){l+=x[s+(t*W+e)]*I[r+e]}}}m[g*V+y*e+b*r+t]=l}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const oD={kernelName:qe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:a}=e,s=lt(a.shape),r=n.data.get(a.dataId).values,o=Ni([s,s],a.dtype),i=o.values;for(let l=0;l<r.length;l++)i[l*s+l]=r[l];const c=[...a.shape,...a.shape];return n.makeTensorInfo(c,o.dtype,o.values)}},iD={kernelName:Ke,backendName:"cpu",kernelFunc:t=>{let{inputs:e,backend:n,attrs:a}=t;const{x:s,filter:r}=e,{strides:o,pad:i,dilations:c}=a,l=n,u=l.data.get(s.dataId).values,h=s.shape.length,d=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:v,strideWidth:k,filterHeight:I,filterWidth:N,dilationHeight:S,dilationWidth:T,outShape:C}=ql(s.shape,r.shape,o,i,"NHWC",c),E=lt(C),A=C.length,R=It(s.dtype,E);for(let F=0;F<f;++F)for(let t=0;t<b;++t){const e=t*v-w.top;for(let n=0;n<x;++n){const a=n*k-w.left;for(let o=0;o<y;++o){let i=Number.MIN_SAFE_INTEGER;for(let t=0;t<I;++t){const n=e+t*S;if(n>=0&&n<m)for(let e=0;e<N;++e){const c=a+e*T;if(c>=0&&c<g){const a=Gt([F,n,c,o],h,Mt(s.shape)),l=Gt([t,e,o],p,Mt(r.shape)),f=u[a]+d[l];f>i&&(i=f)}}}R[Gt([F,t,n,o],A,Mt(C))]=i}}}return{dataId:l.write(Xs(R,s.dtype),C,s.dtype),shape:C,dtype:s.dtype}}},cD={kernelName:Ye,backendName:"cpu",kernelFunc:t=>{let{inputs:e,backend:n,attrs:a}=t;const{x:s,filter:r,dy:o}=e,{strides:i,pad:c,dilations:l}=a,u=n,h=zt(s.shape,u.data.get(s.dataId).values),d=zt(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:T}=ql(s.shape,r.shape,i,c,"NHWC",l);ot(o.rank===T.length,()=>"Error in ".concat(Ye,", dy ")+"must have the same rank as output ".concat(T.length,", but got ")+"".concat(o.rank));const C=zt(T,u.data.get(o.dataId).values),E=Vt(r.shape,r.dtype);for(let A=0;A<p;++A)for(let t=0;t<y;++t){const e=t*w-x.top;for(let n=0;n<b;++n){const a=n*v-x.left;for(let s=0;s<g;++s){let r=Number.MIN_SAFE_INTEGER,o=0,i=0;for(let t=0;t<k;++t){const n=e+t*N;if(n>=0&&n<f)for(let e=0;e<I;++e){const c=a+e*S;if(c>=0&&c<m){const a=h[A][n][c][s]+d[t][e][s];a>r&&(r=a,o=t,i=e)}}}E[o][i][s]+=C[A][t][n][s]}}}return{dataId:u.write(Xs(E,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},lD={kernelName:Xe,backendName:"cpu",kernelFunc:t=>{let{inputs:e,backend:n,attrs:a}=t;const{x:s,filter:r,dy:o}=e,{strides:i,pad:c,dilations:l}=a,u=n,h=zt(s.shape,u.data.get(s.dataId).values),d=zt(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:T}=ql(s.shape,r.shape,i,c,"NHWC",l);ot(o.rank===T.length,()=>"Error in ".concat(Xe,", dy ")+"must have the same rank as output ".concat(T.length,", but got ")+"".concat(o.rank));const C=zt(T,u.data.get(o.dataId).values),E=Vt(s.shape,s.dtype);for(let A=0;A<p;++A)for(let t=0;t<y;++t){const e=t*w-x.top;for(let n=0;n<b;++n){const a=n*v-x.left;for(let s=0;s<g;++s){let r=Number.MIN_SAFE_INTEGER,o=e<0?0:e,i=a<0?0:a;for(let t=0;t<k;++t){const n=e+t*N;if(n>=0&&n<f)for(let e=0;e<I;++e){const c=a+e*S;if(c>=0&&c<m){const a=h[A][n][c][s]+d[t][e][s];a>r&&(r=a,o=n,i=c)}}}E[A][o][i][s]+=C[A][t][n][s]}}}return{dataId:u.write(Xs(E,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};const uD={kernelName:Ze,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{image:s}=e,{canvas:r,options:o}=a,{contextOptions:i,imageOptions:c}=o||{},l=(null===c||void 0===c?void 0:c.alpha)||1,u=(null===i||void 0===i?void 0:i.contextType)||"2d";if("2d"!==u)throw new Error("Context type ".concat(i.contextType," is not supported by the CPU backend."));const h=r.getContext(u,(null===i||void 0===i?void 0:i.contextAttributes)||{});if(null==h)throw new Error("Could not get the context with ".concat(u," type."));const[d,p]=s.shape.slice(0,2),f=2===s.shape.length?1:s.shape[2],m=n.data.get(s.dataId).values,g="float32"===s.dtype?255:1,y=new Uint8ClampedArray(p*d*4);for(let x=0;x<d*p;++x){const t=[0,0,0,255*l];for(let n=0;n<f;n++){const e=m[x*f+n];if("float32"===s.dtype){if(e<0||e>1)throw new Error("Tensor values for a float32 Tensor must be in the "+"range [0 - 1] but encountered ".concat(e,"."))}else if("int32"===s.dtype&&(e<0||e>255))throw new Error("Tensor values for a int32 Tensor must be in the "+"range [0 - 255] but encountered ".concat(e,"."));1===f?(t[0]=e*g,t[1]=e*g,t[2]=e*g):t[n]=e*g}const e=4*x;y[e+0]=Math.round(t[0]),y[e+1]=Math.round(t[1]),y[e+2]=Math.round(t[2]),y[e+3]=Math.round(t[3])}r.width=p,r.height=d;const b=new ImageData(y,p,d);return h.putImageData(b,0,0),s}};function hD(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a;let i;lE(s,"sum"),i="bool"===s.dtype?IE({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):bE({inputs:{x:s},backend:n});const c=i.shape.length,l=wt(r,i.shape),u=rh(l,c);let h=l,d=i;null!=u&&(d=BA({inputs:{x:i},backend:n,attrs:{perm:u}}),h=ih(h.length,c)),sh("sum",h,d.shape.length);const[p,f]=nh(d.shape,h);let m=yE(n,p,kr(d.dtype,"int32"));const g=lt(f),y=n.data.get(m.dataId).values,b=n.data.get(d.dataId).values;for(let x=0;x<y.length;++x){const t=x*g;let e=0;for(let n=0;n<g;++n)e+=b[t+n];y[x]=e}if(o){const t=m;m=JR({inputs:{x:m},backend:n,attrs:{shape:ah(m.shape,l)}}),n.disposeIntermediateTensorInfo(t)}return n.disposeIntermediateTensorInfo(i),null!=u&&n.disposeIntermediateTensorInfo(d),m}const dD={kernelName:Ba,backendName:"cpu",kernelFunc:hD};const pD={kernelName:Qe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{equation:s}=a,r=e,{allDims:o,summedDims:i,idDims:c}=Rm(s,r.length);Dm(o.length,c,r);const{path:l,steps:u}=_m(i,c),h=u.length;let d=null,p=o.length;const f=[];for(let m=0;m<h;++m){for(const t of u[m]){const{permutationIndices:e,expandDims:a}=Fm(p,c[t]);let s;Om(e)?s=r[t]:(s=BA({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let t=0;t<a.length;++t)o.splice(a[t],0,1);dt(s.shape,o)||(s=JR({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===d?d=s:(d=FA({inputs:{a:s,b:d},backend:n}),f.push(d))}m<h-1&&(l[m]>=0&&(d=hD({inputs:{x:d},backend:n,attrs:{axis:l[m]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const m of f)m!==d&&n.disposeIntermediateTensorInfo(m);return d}};const fD={kernelName:tn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{dy:a,y:s}=e;lE([a,s],"eluGrad");const r=new Float32Array(lt(s.shape)),o=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values;for(let c=0;c<o.length;++c){const t=o[c];r[c]=t>=0?i[c]:i[c]*(t+1)}return n.makeTensorInfo(s.shape,"float32",r)}},mD=dm,gD=pm,yD=fm,bD=mm,xD=gm,wD=ym,vD=zE(en,t=>{const e=Math.sign(t),n=Math.abs(t),a=1/(1+mD*n);return e*(1-((((wD*a+xD)*a+bD)*a+yD)*a+gD)*a*Math.exp(-n*n))}),kD={kernelName:en,backendName:"cpu",kernelFunc:vD};function ID(t){const{inputs:e,backend:n,attrs:a}=t,{input:s}=e,{dim:r}=a,o=s.shape.length,i=s.shape.slice();let c=r;return r<0&&(ot(-(o+1)<=r,()=>"Axis must be in the interval [".concat(-(o+1),", ").concat(o,"]")),c=o+r+1),i.splice(c,0,1),JR({inputs:{x:s},backend:n,attrs:{shape:i}})}const ND={kernelName:sn,backendName:"cpu",kernelFunc:ID},SD=fE((t,e)=>t/e),TD=SE(Je,SD),CD={kernelName:Je,backendName:"cpu",kernelFunc:TD};function ED(t,e,n){const a=t.shape,s=a[0],r=a[1],o=n.data.get(t.dataId),i=o.complexTensorInfos.real,c=o.complexTensorInfos.imag,l=[s,r],u=lt(l),h=kt("float32",u),d=kt("float32",u);for(let g=0;g<s;g++){const t=lR({inputs:{x:i},backend:n,attrs:{begin:[g,0],size:[1,r]}}),a=lR({inputs:{x:c},backend:n,attrs:{begin:[g,0],size:[1,r]}}),s=mE({inputs:{real:t,imag:a},backend:n}),{real:o,imag:l}=AD(s,e,n),u=bm(o,l);for(let e=0;e<r;e++){const t=km(u,e);h[g*r+e]=t.real,d[g*r+e]=t.imag}n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s)}const p=n.makeTensorInfo(l,"float32",h),f=n.makeTensorInfo(l,"float32",d),m=mE({inputs:{real:p,imag:f},backend:n});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}function AD(t,e,n){const a=lt(t.shape),s=n.data.get(t.dataId),r=n.data.get(s.complexTensorInfos.real.dataId).values,o=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0===((i=a)&i-1)){const s=RD(r,o,a,e,n),i=[t.shape[0],t.shape[1]];if(e){const t=n.makeTensorInfo(i,"float32",s.real),e=n.makeTensorInfo(i,"float32",s.imag),r=n.makeTensorInfo([],"float32",Ks(a,"float32")),o=bE({inputs:{x:r},backend:n}),c=CD.kernelFunc({inputs:{a:t,b:r},backend:n}),l=CD.kernelFunc({inputs:{a:e,b:o},backend:n}),u=n.data.get(c.dataId).values,h=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(l),{real:u,imag:h}}return s}{const t=function(t,e,n){const a=new Float32Array(2*e);for(let s=0;s<e;s++){let r=0,o=0;for(let a=0;a<e;a++){const i=Sm(s*a,e,n),c=km(t,a);r+=c.real*i.real-c.imag*i.imag,o+=c.real*i.imag+c.imag*i.real}n&&(r/=e,o/=e),Im(a,r,o,s)}return a}(bm(r,o),a,e);return xm(t)}var i}function RD(t,e,n,a,s){if(1===n)return{real:t,imag:e};const r=bm(t,e),o=n/2,i=wm(r),c=i.real,l=i.imag,u=[c.length],h=s.makeTensorInfo(u,"float32",c),d=s.makeTensorInfo(u,"float32",l),p=mE({inputs:{real:h,imag:d},backend:s}),f=vm(r),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=mE({inputs:{real:b,imag:x},backend:s}),v=RD(c,l,o,a,s),k=v.real,I=v.imag,N=[k.length],S=s.makeTensorInfo(N,"float32",k),T=s.makeTensorInfo(N,"float32",I),C=mE({inputs:{real:S,imag:T},backend:s}),E=RD(m,g,o,a,s),A=E.real,R=E.imag,F=[A.length],D=s.makeTensorInfo(F,"float32",A),_=s.makeTensorInfo(F,"float32",R),O=mE({inputs:{real:D,imag:_},backend:s}),M=Nm(n,a),L=[M.real.length],z=s.makeTensorInfo(L,"float32",M.real),P=s.makeTensorInfo(L,"float32",M.imag),B=mE({inputs:{real:z,imag:P},backend:s}),W=FA({inputs:{a:B,b:O},backend:s}),V=AE({inputs:{a:C,b:W},backend:s}),U=FR({inputs:{a:C,b:W},backend:s}),G=wE({inputs:{input:V},backend:s}),H=wE({inputs:{input:U},backend:s}),j=LF({inputs:{input:V},backend:s}),q=LF({inputs:{input:U},backend:s}),K=PF({inputs:[G,H],backend:s,attrs:{axis:0}}),X=PF({inputs:[j,q],backend:s,attrs:{axis:0}}),Y=s.data.get(K.dataId).values,Z=s.data.get(X.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(K),s.disposeIntermediateTensorInfo(X),{real:Y,imag:Z}}const FD={kernelName:on,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:a}=e,s=lt(a.shape),r=a.shape[a.shape.length-1],o=JR({inputs:{x:a},backend:n,attrs:{shape:[s/r,r]}}),i=ED(o,!1,n),c=JR({inputs:{x:i},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),c}};function DD(t){const{backend:e,attrs:n}=t,{shape:a,value:s,dtype:r}=n,o=r||Dt(s),i=It(o,lt(a));return function(t,e){t.fill(e)}(i,s),e.makeTensorInfo(a,o,i)}const _D={kernelName:cn,backendName:"cpu",kernelFunc:DD};const OD={kernelName:ln,backendName:"cpu",kernelFunc:t=>{let{inputs:e,attrs:n,backend:a}=t;const{image:s}=e,r=a,o=kt(s.dtype,lt(s.shape)),[i,c,l,u]=s.shape,h=r.data.get(s.dataId).values;for(let d=0;d<i;d++){const t=d*l*c*u;for(let e=0;e<c;e++){const n=e*(l*u);for(let e=0;e<l;e++){const a=e*u;for(let s=0;s<u;s++){const r=Math.round(l-e-1),i=t+n+a+s;let c=h[i];if(r>=0&&r<l){c=h[t+n+r*u+s]}o[i]=c}}}}return{dataId:r.write(o,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};const MD={kernelName:ys,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r,bias:o,preluActivationWeights:i}=e,{strides:c,pad:l,dataFormat:u,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=a;let m=WF({inputs:{x:s,filter:r},backend:n,attrs:{strides:c,pad:l,dataFormat:u,dilations:h,dimRoundingMode:d}});if(o){const t=m;if("NCHW"===u&&1===o.shape.length&&1!==o.shape[0]){const t=JR({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=AE({inputs:{a:m,b:t},backend:n}),n.disposeIntermediateTensorInfo(t)}else m=AE({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(t)}if(p){const t=m;if("NCHW"===u&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const t=JR({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=ZR(n,m,p,t,f),n.disposeIntermediateTensorInfo(t)}else m=ZR(n,m,p,i,f);n.disposeIntermediateTensorInfo(t)}return m}};const LD={kernelName:bs,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r,bias:o,preluActivationWeights:i}=e,{strides:c,pad:l,dataFormat:u,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=a;let m=nD({inputs:{x:s,filter:r},backend:n,attrs:{strides:c,pad:l,dataFormat:u,dilations:h,dimRoundingMode:d}});if(o){const t=m;m=AE({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(t)}if(p){const t=m;m=ZR(n,m,p,i,f),n.disposeIntermediateTensorInfo(t)}return m}};const zD={kernelName:fn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{params:a,indices:s}=e,r=lt(a.shape),o=s.shape,i=o[o.length-1],[c,l,u,h]=Yc(a,s);if(0===l)return n.makeTensorInfo(c,a.dtype,[]);const d=sA(n.data.get(s.dataId).values,n.bufferSync(a),a.dtype,l,i,u,h,a.shape,r);return n.makeTensorInfo(c,a.dtype,d.values)}};const PD={kernelName:pn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,indices:r}=e,{axis:o,batchDims:i}=a;lE([s,r],"gatherV2");const c=wt(o,s.shape)[0],l=n.data.get(r.dataId).values,u=s.shape[c];for(let x=0;x<l.length;++x){const t=l[x];ot(t<=u-1&&t>=0,()=>"GatherV2: the index value ".concat(t," is not in [0, ").concat(u-1,"]"))}let h=i;null==i&&(h=0);const d=lt(r.shape),p=Jm(s,r,c,h),f=JR({inputs:{x:s},backend:n,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),m=JR({inputs:{x:r},backend:n,attrs:{shape:[p.batchSize,d/p.batchSize]}}),g=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],y=n.bufferSync(m),b=rA(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(p.outputShape,b.dtype,b.values)}};const BD={kernelName:bn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:a}=e,s=lt(a.shape),r=a.shape[a.shape.length-1],o=JR({inputs:{x:a},backend:n,attrs:{shape:[s/r,r]}}),i=ED(o,!0,n),c=JR({inputs:{x:i},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),c}},WD=zE(wn,t=>Number.isFinite(t)?1:0,"bool"),VD={kernelName:wn,backendName:"cpu",kernelFunc:WD},UD=zE(vn,t=>Math.abs(t)===1/0?1:0,"bool"),GD={kernelName:vn,backendName:"cpu",kernelFunc:UD},HD=zE(kn,t=>Number.isNaN(t)?1:0,"bool"),jD={kernelName:kn,backendName:"cpu",kernelFunc:HD};const qD={kernelName:Tn,backendName:"cpu",kernelFunc:function(t){const{backend:e,attrs:n}=t,{start:a,stop:s,num:r}=n,o=bA(a,s,r);return e.makeTensorInfo([o.length],"float32",o)}},KD=zE(En,t=>Math.log1p(t)),XD={kernelName:En,backendName:"cpu",kernelFunc:KD},YD=fE((t,e)=>t&&e),ZD=SE(An,YD,null,"bool"),JD={kernelName:An,backendName:"cpu",kernelFunc:ZD},QD=zE(Rn,t=>t?0:1,"bool"),$D={kernelName:Rn,backendName:"cpu",kernelFunc:QD},t_=fE((t,e)=>t||e),e_=SE(Fn,t_,null,"bool"),n_={kernelName:Fn,backendName:"cpu",kernelFunc:e_};const a_={kernelName:Mn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{depthRadius:r,bias:o,alpha:i,beta:c}=a;lE(s,"LRN");const l=s.shape[3],u=l-1,h=n.data.get(s.dataId).values,d=lt(s.shape),p=new Float32Array(d);function f(t){const e=t%l;let n=t-e+Math.max(0,e-r);const a=t-e+Math.min(e+r,u);let s=0;for(;n<=a;n++){const t=h[n];s+=t*t}return s}for(let m=0;m<d;m++){const t=f(m),e=h[m]*Math.pow(o+i*t,-c);p[m]=e}return n.makeTensorInfo(s.shape,s.dtype,p)}};const s_={kernelName:Ln,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,y:r,dy:o}=e,{depthRadius:i,bias:c,alpha:l,beta:u}=a;lE(o,"LRNGrad");const h=lt(o.shape),d=o.shape[3],p=n.data.get(o.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(r.dataId).values,g=new Float32Array(h),y=h;for(let b=0;b<y;b++){const t=b%d,e=b-t+Math.max(0,t-i),n=b-t+Math.min(d,t+i+1);let a=0;for(let s=e;s<n;s++)a+=Math.pow(f[s],2);a=l*a+c;for(let s=e;s<n;s++){let t=-2*l*u*f[s]*m[b]/a;b===s&&(t+=Math.pow(a,-u)),t*=p[b],g[s]+=t}}return n.makeTensorInfo(o.shape,s.dtype,g)}};function r_(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{reductionIndices:r,keepDims:o}=a,i=n;let c=s.shape;const l=c.length,u=wt(r,c);let h=u;const d=rh(h,l);let p=i.data.get(s.dataId).values;if(null!=d){const t=new Array(l);for(let e=0;e<t.length;e++)t[e]=c[d[e]];p=PA(p,c,s.dtype,d,t),h=ih(h.length,l),c=t}lE(s,"max"),sh("max",h,l);const[f,m]=nh(c,h),g=kA(p,lt(m),f,s.dtype),y=i.write(g,f,s.dtype);let b=f;if(o){b=ah(f,u)}return{dataId:y,shape:b,dtype:s.dtype}}const o_={kernelName:Pn,backendName:"cpu",kernelFunc:r_};const i_={kernelName:Wn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e;lE(s,"maxPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:c}=a;ot(au(o,1),()=>"Error in maxPool: Either strides or dilations must be 1. "+"Got strides ".concat(o," and dilations '").concat(1,"'"));const l=Kl(s.shape,r,o,1,i,c);let u;if(1===l.filterWidth&&1===l.filterHeight&&dt(l.inShape,l.outShape))u=bE({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=Mt(s.shape),a=kF(t,s.shape,s.dtype,e,l,"max");u=n.makeTensorInfo(l.outShape,s.dtype,a.values)}return u}};const c_={kernelName:Un,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{filterSize:r,strides:o,pad:i,dimRoundingMode:c,dataFormat:l}=a;lE(s,"maxPool3d");const u=Xl(s.shape,r,o,1,i,c,l),h=NF(n.data.get(s.dataId).values,s.shape,s.dtype,Mt(s.shape),u,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const l_={kernelName:Gn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,input:r}=e,{filterSize:o,strides:i,pad:c,dimRoundingMode:l}=a;lE([s,r],"maxPool3DGrad");const u=Xl(r.shape,o,i,1,c,l),h=function(t,e){const n=Ni(e.outShape,"int32"),a=e.strideDepth,s=e.strideHeight,r=e.strideWidth,o=e.dilationDepth,i=e.dilationHeight,c=e.dilationWidth,l=e.effectiveFilterDepth,u=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left;for(let m=0;m<e.batchSize;++m)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*a-d;let x=b;for(;x<0;)x+=o;const w=Math.min(e.inDepth,l+b);for(let a=0;a<e.outHeight;++a){const l=a*s-p;let d=l;for(;d<0;)d+=i;const v=Math.min(e.inHeight,u+l);for(let s=0;s<e.outWidth;++s){const p=s*r-f;let k=p;for(;k<0;)k+=c;const I=Math.min(e.inWidth,h+p);let N=Number.NEGATIVE_INFINITY,S=-1;for(let e=x;e<w;e+=o){const n=e-b;for(let a=d;a<v;a+=i){const s=a-l;for(let r=k;r<I;r+=c){const o=r-p,i=t.get(m,e,a,r,g);i>=N&&(N=i,S=n*u*h+s*u+o)}}}n.set(S,m,y,a,s,g)}}}return n}(n.bufferSync(r),u),d=u.strideDepth,p=u.strideHeight,f=u.strideWidth,m=u.dilationDepth,g=u.dilationHeight,y=u.dilationWidth,b=u.effectiveFilterDepth,x=u.effectiveFilterHeight,w=u.effectiveFilterWidth,v=b-1-u.padInfo.front,k=w-1-u.padInfo.left,I=x-1-u.padInfo.top,N=Ni(r.shape,"float32"),S=n.bufferSync(s);for(let T=0;T<u.batchSize;++T)for(let t=0;t<u.inChannels;++t)for(let e=0;e<u.inDepth;++e)for(let n=0;n<u.inHeight;++n)for(let a=0;a<u.inWidth;++a){const s=e-v,r=n-I,o=a-k;let i=0;for(let e=0;e<b;e+=m){const n=(s+e)/d;if(!(n<0||n>=u.outDepth||Math.floor(n)!==n))for(let a=0;a<x;a+=g){const s=(r+a)/p;if(!(s<0||s>=u.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=y){const c=(o+r)/f;if(c<0||c>=u.outWidth||Math.floor(c)!==c)continue;const l=b*x*w-1-h.get(T,n,s,c,t)===e*x*w+a*w+r?1:0;if(0===l)continue;i+=S.get(T,n,s,c,t)*l}}}N.set(i,T,e,n,a,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const u_={kernelName:Vn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,input:r,output:o}=e,i=r;lE([r,o],"maxPoolGrad");const{filterSize:c,strides:l,pad:u,dimRoundingMode:h}=a,d=Kl(i.shape,c,l,1,u,h),p=n.data.get(i.dataId).values,f=Ni(d.outShape,i.dtype,IF(p,i.shape,i.dtype,d).values),m=d.strideHeight,g=d.strideWidth,y=d.dilationHeight,b=d.dilationWidth,x=d.effectiveFilterHeight,w=d.effectiveFilterWidth,v=w-1-d.padInfo.left,k=x-1-d.padInfo.top,I=Ni(i.shape,"float32"),N=n.data.get(s.dataId).values,S=Ni(s.shape,"float32",N);for(let T=0;T<d.batchSize;++T)for(let t=0;t<d.inChannels;++t)for(let e=0;e<d.inHeight;++e)for(let n=0;n<d.inWidth;++n){const a=e-k,s=n-v;let r=0;for(let e=0;e<x;e+=y){const n=(a+e)/m;if(!(n<0||n>=d.outHeight||Math.floor(n)!==n))for(let a=0;a<w;a+=b){const o=(s+a)/g;if(o<0||o>=d.outWidth||Math.floor(o)!==o)continue;const i=x*w-1-f.get(T,n,o,t)===e*w+a?1:0;if(0===i)continue;r+=S.get(T,n,o,t)*i}}I.set(r,T,e,n,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const h_={kernelName:Hn,backendName:"cpu",kernelFunc:t=>{let{inputs:e,attrs:n,backend:a}=t;const{x:s}=e,{filterSize:r,strides:o,pad:i,includeBatchInIndex:c}=n,l=a;lE(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,h=Kl(s.shape,r,o,[1,1],i),[d,p]=function(t,e,n,a,s){const r=kF(t,0,n,Mt(e),s,"max"),o=IF(t,e,n,s,!0,a);return[r.values,o.values]}(u,s.shape,s.dtype,c,h),f=l.write(d,h.outShape,s.dtype),m=l.write(p,h.outShape,s.dtype);return[{dataId:f,shape:h.outShape,dtype:s.dtype},{dataId:m,shape:h.outShape,dtype:"int32"}]}};const d_={kernelName:jn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a,i=wt(r,s.shape),c=lt(nh(s.shape,i)[1]),l=[],u=n.makeTensorInfo([],"float32",new Float32Array([c]));l.push(u);const h=IE({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});l.push(h);const d=TD({inputs:{a:h,b:u},backend:n});l.push(d);const p=hD({inputs:{x:d},backend:n,attrs:{axis:r,keepDims:o}});return l.forEach(t=>n.disposeIntermediateTensorInfo(t)),p}};const p_={kernelName:qn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a;lE(s,"min");const i=wt(r,s.shape);let c=i;const l=rh(c,s.shape.length);let u=s;null!=l&&(u=BA({inputs:{x:s},backend:n,attrs:{perm:l}}),c=ih(c.length,s.shape.length)),sh("min",c,u.shape.length);const[h,d]=nh(u.shape,c),p=lt(d),f=Wt(lt(h),u.dtype),m=n.data.get(u.dataId).values;for(let y=0;y<f.length;++y){const t=y*p;let e=m[t];for(let n=0;n<p;++n){const a=m[t+n];(Number.isNaN(a)||a<e)&&(e=a)}f[y]=e}null!=l&&n.disposeIntermediateTensorInfo(u);const g=n.makeTensorInfo(h,u.dtype,f);if(o){const t=JR({inputs:{x:g},backend:n,attrs:{shape:ah(h,i)}});return n.disposeIntermediateTensorInfo(g),t}return g}};const f_={kernelName:Xn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{paddings:r,mode:o}=a;lE(s,"mirrorPad");const i=r.map((t,e)=>t[0]+s.shape[e]+t[1]),c=r.map(t=>t[0]),l=r.map((t,e)=>t[0]+s.shape[e]),u="reflect"===o?0:1,h=n.data.get(s.dataId).values,d=s.shape.length,p=Mt(s.shape),f=lt(i),m=i.length,g=Mt(i),y=kt(s.dtype,f);for(let b=0;b<f;b++){let t=Ht(b,m,g);for(let n=0;n<m;n++)t[n]<c[n]?t[n]=2*c[n]-t[n]-u:t[n]>=l[n]&&(t[n]=2*(l[n]-1)-t[n]+u);t=t.map((t,e)=>t-c[e]);const e=Gt(t,d,p);y[b]=h[e]}return{dataId:n.write(y,i,s.dtype),shape:i,dtype:s.dtype}}},m_=fE((t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}),g_=SE(Yn,m_),y_={kernelName:Yn,backendName:"cpu",kernelFunc:g_};function b_(t){const{inputs:e,backend:n,attrs:a}=t,{logits:s}=e,{dim:r}=a,o=s.shape.length;let i=r;if(-1===i&&(i=o-1),i!==o-1)throw Error("Softmax along a non-last dimension is not yet supported. "+"Logits was rank ".concat(o," and dim was ").concat(i));const c=wt([i],s.shape),l=r_({inputs:{x:s},backend:n,attrs:{reductionIndices:c,keepDims:!1}}),u=ah(l.shape,c),h=JR({inputs:{x:l},backend:n,attrs:{shape:u}}),d=FR({inputs:{a:s,b:h},backend:n}),p=KE({inputs:{x:d},backend:n}),f=hD({inputs:{x:p},backend:n,attrs:{axis:c,keepDims:!1}}),m=JR({inputs:{x:f},backend:n,attrs:{shape:u}}),g=TD({inputs:{a:p,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const x_={kernelName:Ua,backendName:"cpu",kernelFunc:b_};const w_={kernelName:Zn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{logits:s}=e,{numSamples:r,seed:o,normalized:i}=a;lE(s,"multinomial");const c=i?s:b_({inputs:{logits:s},backend:n,attrs:{dim:-1}}),l=c.shape[0],u=c.shape[1],h=n.data.get(c.dataId).values,d=[l,r],p=Wt(lt(d),"int32");for(let f=0;f<l;++f){const t=f*u,e=new Float32Array(u-1);e[0]=h[t];for(let s=1;s<e.length;++s)e[s]=e[s-1]+h[t+s];const n=xd.alea(o.toString()),a=f*r;for(let s=0;s<r;++s){const t=n();p[a+s]=e.length;for(let n=0;n<e.length;n++)if(t<e[n]){p[a+s]=n;break}}}return i||n.disposeIntermediateTensorInfo(c),n.makeTensorInfo(d,"int32",p)}},v_=tf;const k_={kernelName:ta,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{boxes:s,scores:r}=e,{maxOutputSize:o,iouThreshold:i,scoreThreshold:c}=a;lE(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,u=n.data.get(r.dataId).values,{selectedIndices:h}=v_(l,u,o,i,c);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},I_=ef;const N_={kernelName:ea,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{boxes:s,scores:r}=e,{maxOutputSize:o,iouThreshold:i,scoreThreshold:c,padToMaxOutputSize:l}=a;lE(s,"NonMaxSuppressionPadded");const u=n.data.get(s.dataId).values,h=n.data.get(r.dataId).values,{selectedIndices:d,validOutputs:p}=I_(u,h,o,i,c,l);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},S_=nf;const T_={kernelName:na,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{boxes:s,scores:r}=e,{maxOutputSize:o,iouThreshold:i,scoreThreshold:c,softNmsSigma:l}=a;lE(s,"NonMaxSuppressionWithScore");const u=n.data.get(s.dataId).values,h=n.data.get(r.dataId).values,d=o,p=i,f=c,m=l,{selectedIndices:g,selectedScores:y}=S_(u,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};const C_={kernelName:sa,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{indices:s}=e,{dtype:r,depth:o,onValue:i,offValue:c}=a;lE(s,"oneHot");const l=lt(s.shape),u=new Float32Array(l*o);u.fill(c);const h=n.data.get(s.dataId).values;for(let d=0;d<l;++d)h[d]>=0&&h[d]<o&&(u[d*o+h[d]]=i);return n.makeTensorInfo([...s.shape,o],r,u)}};function E_(t){const{inputs:e,backend:n}=t,{x:a}=e;if("string"===a.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===a.dtype){const t=wE({inputs:{input:a},backend:n}),e=E_({inputs:{x:t},backend:n}),s=LF({inputs:{input:a},backend:n}),r=E_({inputs:{x:s},backend:n}),o=mE({inputs:{real:e,imag:r},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),o}return DD({backend:n,attrs:{shape:a.shape,value:0,dtype:a.dtype}})}const A_={kernelName:ds,backendName:"cpu",kernelFunc:E_};const R_={kernelName:aa,backendName:"cpu",kernelFunc:function t(e){const{inputs:n,backend:a}=e,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const e=wE({inputs:{input:s},backend:a}),n=t({inputs:{x:e},backend:a}),r=LF({inputs:{input:s},backend:a}),o=E_({inputs:{x:r},backend:a}),i=mE({inputs:{real:n,imag:o},backend:a});return a.disposeIntermediateTensorInfo(e),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(r),a.disposeIntermediateTensorInfo(o),i}return DD({backend:a,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function F_(t){const{inputs:e,backend:n,attrs:a}=t,{axis:s}=a;if(1===e.length)return ID({inputs:{input:e[0]},backend:n,attrs:{dim:s}});const r=e[0].shape,o=e[0].dtype;e.forEach(t=>{it(r,t.shape,"All tensors passed to stack must have matching shapes"),ot(o===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],c=PF({inputs:e.map(t=>{const e=ID({inputs:{input:t},backend:n,attrs:{dim:s}});return i.push(e),e}),backend:n,attrs:{axis:s}});return i.forEach(t=>n.disposeIntermediateTensorInfo(t)),c}const D_={kernelName:ra,backendName:"cpu",kernelFunc:F_};const __={kernelName:oa,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{paddings:r,constantValue:o}=a;lE(s,"pad");const i=r.map((t,e)=>t[0]+s.shape[e]+t[1]),c=r.map(t=>t[0]),l=n.data.get(s.dataId).values,u=lt(s.shape),h=s.shape.length,d=Mt(s.shape),p=lt(i),f=i.length,m=Mt(i),g=kt(s.dtype,p);0!==o&&g.fill(o);for(let y=0;y<u;y++){g[Gt(Ht(y,h,d).map((t,e)=>t+c[e]),f,m)]=l[y]}return{dataId:n.write(g,i,s.dtype),shape:i,dtype:s.dtype}}},O_=fE((t,e)=>Math.pow(t,e)),M_=SE(ca,O_),L_={kernelName:ca,backendName:"cpu",kernelFunc:M_};const z_={kernelName:ha,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{paramsNestedSplits:s,paramsDenseValues:r,indices:o}=e,{outputRaggedRank:i}=a,c=s.map(t=>n.data.get(t.dataId).values),l=s.map(t=>t.shape),u=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,[d,p,f]=qA(c,l,u,r.shape,r.dtype,h,o.shape),m=d.map(t=>n.makeTensorInfo([t.length],"int32",t)),g=n.makeTensorInfo(f,r.dtype,p);return m.concat([g])}};const P_={kernelName:da,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{starts:a,limits:s,deltas:r}=e,o=n.data.get(a.dataId).values,i=n.data.get(s.dataId).values,c=n.data.get(r.dataId).values,[l,u]=XA(o,a.shape,a.dtype,i,s.shape,c,r.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([u.length],a.dtype,u)]}};const B_={kernelName:pa,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{shape:s,values:r,defaultValue:o,rowPartitionTensors:i}=e,{rowPartitionTypes:c}=a,l=n.data.get(s.dataId).values,u=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,d=i.map(t=>n.data.get(t.dataId).values),p=i.map(t=>t.shape),[f,m]=$A(l,s.shape,u,r.shape,r.dtype,h,o.shape,d,p,c);return n.makeTensorInfo(f,r.dtype,m)}};const W_={kernelName:fa,backendName:"cpu",kernelFunc:function(t){const{backend:e,attrs:n}=t,{start:a,stop:s,dtype:r,step:o}=n,i=tR(a,s,o,r);return e.makeTensorInfo([i.length],r,i)}},V_=zE(ga,t=>1/t),U_={kernelName:ga,backendName:"cpu",kernelFunc:V_};const G_={kernelName:va,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{images:s}=e,{alignCorners:r,halfPixelCenters:o,size:i}=a;lE(s,"resizeBilinear");const c=Mt(s.shape),[l,u]=i,[h,d,p,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(lt([h,l,u,f])),y=[r&&l>1?d-1:d,r&&u>1?p-1:p],b=[r&&l>1?l-1:l,r&&u>1?u-1:u];let x=0;const w=y[0]/b[0],v=y[1]/b[1];for(let k=0;k<h;k++)for(let t=0;t<l;t++){let e;e=o?w*(t+.5)-.5:w*t;const n=Math.max(0,Math.floor(e)),a=e-n,s=Math.min(d-1,Math.ceil(e)),r=k*c[0]+n*c[1],i=k*c[0]+s*c[1];for(let t=0;t<u;t++){let e;e=o?v*(t+.5)-.5:v*t;const n=Math.max(0,Math.floor(e)),s=e-n,l=Math.min(p-1,Math.ceil(e)),u=r+n*c[2],h=i+n*c[2],d=r+l*c[2],y=i+l*c[2];for(let t=0;t<f;t++){const e=m[u+t],n=m[h+t],r=e+(m[d+t]-e)*s,o=r+(n+(m[y+t]-n)*s-r)*a;g[x++]=o}}}return n.makeTensorInfo([h,l,u,f],"float32",g)}};const H_={kernelName:ka,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{images:s,dy:r}=e,{alignCorners:o}=a;lE([r,s],"resizeBilinearGrad");const i=Mt(s.shape),[c,l,u,h]=s.shape,[,d,p]=r.shape,f=new Float32Array(c*l*u*h),m=[o&&d>1?l-1:l,o&&p>1?u-1:u],g=[o&&d>1?d-1:d,o&&p>1?p-1:p],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(r.dataId).values;let w=0;for(let v=0;v<c;v++){const t=v*i[0];for(let e=0;e<d;e++){const n=e*y,a=Math.floor(n),s=Math.min(Math.ceil(n),l-1),r=t+a*i[1],o=t+s*i[1],c=n-a,d=1-c;for(let t=0;t<p;t++){const e=t*b,n=Math.floor(e),a=Math.min(Math.ceil(e),u-1),s=e-n,l=1-s,p=r+n*i[2],m=r+a*i[2],g=o+n*i[2],y=o+a*i[2],v=d*l,k=d*s,I=c*l,N=c*s;for(let t=0;t<h;t++){const e=x[w++];f[p+t]+=e*v,f[m+t]+=e*k,f[g+t]+=e*I,f[y+t]+=e*N}}}}return n.makeTensorInfo([c,u,l,h],"float32",f)}};const j_={kernelName:xa,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{images:s}=e,{alignCorners:r,halfPixelCenters:o,size:i}=a;lE(s,"resizeNearestNeighbor");const c=Mt(s.shape),[l,u]=i,[h,d,p,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(h*l*u*f),y=[r&&l>1?d-1:d,r&&u>1?p-1:p],b=[r&&l>1?l-1:l,r&&u>1?u-1:u],x=y[0]/b[0],w=y[1]/b[1];let v=0;for(let k=0;k<h;k++){const t=k*c[0];for(let e=0;e<l;e++){const n=o?x*(e+.5):x*e;let a=Math.min(d-1,r?Math.round(n):Math.floor(n));o&&(a=Math.max(0,a));const s=t+a*c[1];for(let t=0;t<u;t++){const e=o?w*(t+.5):w*t;let n=Math.min(p-1,r?Math.round(e):Math.floor(e));o&&(n=Math.max(0,n));const a=s+n*c[2];for(let t=0;t<f;t++){const e=m[a+t];g[v++]=e}}}}return n.makeTensorInfo([h,l,u,f],s.dtype,g)}};const q_={kernelName:wa,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{images:s,dy:r}=e,{alignCorners:o}=a;lE([r,s],"resizeNearestNeighborGrad");const i=Mt(s.shape),c=Mt(r.shape),[l,u,h,d]=s.shape,[,p,f]=r.shape,m=new Float32Array(l*u*h*d),g=n.data.get(r.dataId).values,y=[o&&p>1?u-1:u,o&&f>1?h-1:h],b=[o&&p>1?p-1:p,o&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],v=1/x,k=1/w,I=2*Math.ceil(v)+2,N=2*Math.ceil(k)+2;for(let S=0;S<l;S++){const t=S*i[0];for(let e=0;e<u;e++){const n=t+e*i[1],a=Math.floor(e*v),s=Math.floor(a-I/2);for(let r=0;r<h;r++){const a=n+r*i[2],l=Math.floor(r*k),y=Math.floor(l-N/2);for(let n=0;n<d;n++){let i=0;for(let a=0;a<I;a++){const l=a+s;if(l<0||l>=p)continue;const d=t+l*c[1],m=l*x;if(e===Math.min(u-1,o?Math.round(m):Math.floor(m)))for(let t=0;t<N;t++){const e=t+y;if(e<0||e>=f)continue;const a=d+e*c[2],s=e*w;r===Math.min(h-1,o?Math.round(s):Math.floor(s))&&(i+=g[a+n])}}m[a+n]=i}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}};const K_={kernelName:Na,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{dims:r}=a;lE(s,"reverse");const o=s.shape.length,i=wt(r,s.shape);if(0===o)return bE({inputs:{x:s},backend:n});const c=new lr(s.shape,s.dtype),l=n.bufferSync(s);for(let u=0;u<c.size;u++){const t=c.indexToLoc(u),e=t.slice();i.forEach(t=>e[t]=s.shape[t]-1-e[t]),c.set(l.get(...e),...t)}return n.makeTensorInfo(c.shape,c.dtype,c.values)}},X_={kernelName:ms,backendName:"cpu",kernelFunc:t=>{let{inputs:e,attrs:n,backend:a}=t;const{image:s}=e,{radians:r,fillValue:o,center:i}=n,c=a,l=kt(s.dtype,lt(s.shape)),[u,h,d,p]=s.shape,[f,m]=sm(i,h,d),g=Math.sin(r),y=Math.cos(r),b=c.data.get(s.dataId).values;for(let x=0;x<u;x++){const t=x*d*h*p;for(let e=0;e<h;e++){const n=e*(d*p);for(let a=0;a<d;a++){const s=a*p;for(let r=0;r<p;r++){const i=[u,e,a,r],c=i[2],x=i[1];let w=(c-f)*y-(x-m)*g,v=(c-f)*g+(x-m)*y;w=Math.round(w+f),v=Math.round(v+m);let k=o;if("number"!==typeof o&&(k=3===r?255:o[r]),w>=0&&w<d&&v>=0&&v<h){k=b[t+v*(d*p)+w*p+r]}l[t+n+s+r]=k}}}}return{dataId:c.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Y_=zE(Sa,t=>{const e=Math.floor(t);return t-e<.5?Math.floor(t):t-e>.5?Math.ceil(t):e%2===0?e:e+1}),Z_={kernelName:Sa,backendName:"cpu",kernelFunc:Y_};const J_={kernelName:Ca,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{indices:s,updates:r}=e,{shape:o}=a,{sliceRank:i,numUpdates:c,sliceSize:l,strides:u,outputSize:h}=Qc(0,s,o),d=sR(n.bufferSync(s),n.bufferSync(r),o,h,l,c,i,u,0,!0);return n.makeTensorInfo(o,d.dtype,d.values)}};function Q_(t,e){let n=0,a=t.length,s=0;for(;n<a;)s=Math.floor((n+a)/2),t[s]<e?n=s+1:a=s;return a}function $_(t,e){let n=0,a=t.length,s=0;for(;n<a;)s=Math.floor((n+a)/2),t[s]<=e?n=s+1:a=s;return a}const tO={kernelName:Aa,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{sortedSequence:s,values:r}=e,{side:o}=a,i=function(t,e,n,a,s,r){const o=It("int32",n*s);for(let i=0;i<n;++i){const n=t.slice(i*a,(i+1)*a),c=i*s;for(let t=0;t<s;++t)o[c+t]="left"===r?Q_(n,e[t+c]):$_(n,e[t+c])}return o}(n.data.get(s.dataId).values,n.data.get(r.dataId).values,s.shape[0],s.shape[1],r.shape[1],o);return n.makeTensorInfo(r.shape,"int32",i)}};const eO={kernelName:Ra,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{condition:a,t:s,e:r}=e;lE([a,s,r],"select");const o=a.shape.length,i=n.data.get(a.dataId).values,c=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=kr(s.dtype,r.dtype),h=Wt(lt(s.shape),u);let d=0;const p=0===o||o>1||1===s.shape.length?1:lt(s.shape.slice(1));for(let f=0;f<i.length;f++)for(let t=0;t<p;t++)1===i[f]?h[d++]=c[f]:h[d++]=l[f];return n.makeTensorInfo(s.shape,u,h)}},nO=um,aO=hm,sO=zE(Fa,t=>t>=0?aO*t:nO*(Math.exp(t)-1)),rO={kernelName:Fa,backendName:"cpu",kernelFunc:sO},oO=zE(Ma,t=>t<0?-1:t>0?1:0),iO={kernelName:Ma,backendName:"cpu",kernelFunc:oO},cO=zE(_a,t=>Math.sin(t)),lO={kernelName:_a,backendName:"cpu",kernelFunc:cO},uO=zE(Oa,t=>Math.sinh(t)),hO={kernelName:Oa,backendName:"cpu",kernelFunc:uO},dO=Math.log(1.1920928955078125e-7)+2,pO=zE(za,t=>{const e=t>-dO,n=t<dO,a=Math.exp(t);let s;return s=n?a:e?t:Math.log(1+a),s}),fO={kernelName:za,backendName:"cpu",kernelFunc:pO};const mO={kernelName:Wa,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{blockShape:r,paddings:o}=a;lE([s],"spaceToBatchND");const i=lt(r),c=[[0,0]];c.push(...o);for(let g=1+r.length;g<s.shape.length;++g)c.push([0,0]);const l=__.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:c,constantValue:0}}),u=rm(l.shape,r,i,!1),h=om(u.length,r.length,!1),d=im(l.shape,r,i,!1),p=JR({inputs:{x:l},backend:n,attrs:{shape:u}}),f=BA({inputs:{x:p},backend:n,attrs:{perm:h}}),m=JR({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};const gO={kernelName:Ga,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{indices:a,values:s,denseShape:r,defaultValue:o}=e;if(1!==r.shape.length)throw new Error("Dense shape must be a vector, saw:\n        ".concat(r.shape));if(2!==a.shape.length)throw new Error("Indices must be a matrix, saw:\n        ".concat(a.shape));if(1!==s.shape.length)throw new Error("Values must be a vector, saw:\n        ".concat(s.shape));if(0!==o.shape.length)throw new Error("Default value must be a scalar, saw:\n        ".concat(o.shape));const i=n.data.get(a.dataId).values,c=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(o.dataId).values[0],[h,d,p,f,m]=hR(i,a.shape,a.dtype,c,s.dtype,l,u);return[n.makeTensorInfo(d,a.dtype,h),n.makeTensorInfo([d[0]],s.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(t=>Number(t)))),n.makeTensorInfo([m.length],a.dtype,new Int32Array(m))]}};const yO={kernelName:Ha,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{inputIndices:a,inputShape:s,newShape:r}=e;if(2!==a.shape.length)throw new Error("Input indices should be a matrix but received shape\n        ".concat(a.shape));if(1!==s.shape.length)throw new Error("Input shape should be a vector but received shape\n        ".concat(s.shape));if(1!==r.shape.length)throw new Error("Target shape should be a vector but received shape ".concat(r.shape));const o=Array.from(n.data.get(s.dataId).values),i=n.data.get(a.dataId).values,c=Array.from(n.data.get(r.dataId).values),[l,u,h]=dR(i,a.shape,a.dtype,o,c);return[n.makeTensorInfo(u,a.dtype,l),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}};const bO={kernelName:ja,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{data:a,indices:s,segmentIds:r}=e;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error("Indices should be a vector but received shape\n          ".concat(s.shape));if(1!==r.shape.length)throw new Error("Segment ids should be a vector but received shape\n          ".concat(r.shape));if(s.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(a.dataId).values,i=n.data.get(s.dataId).values,c=n.data.get(r.dataId).values,[l,u]=pR(o,a.shape,a.dtype,i,c,!0);return n.makeTensorInfo(u,a.dtype,l)}};const xO={kernelName:qa,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{data:a,indices:s,segmentIds:r}=e;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error("Indices should be a vector but received shape\n         ".concat(s.shape));if(1!==r.shape.length)throw new Error("Segment ids should be a vector but received shape\n         ".concat(r.shape));if(s.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(a.dataId).values,i=n.data.get(s.dataId).values,c=n.data.get(r.dataId).values,[l,u]=pR(o,a.shape,a.dtype,i,c);return n.makeTensorInfo(u,a.dtype,l)}};const wO={kernelName:Ka,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{sparseIndices:s,sparseValues:r,defaultValue:o}=e,{outputShape:i}=a,{sliceRank:c,numUpdates:l,sliceSize:u,strides:h,outputSize:d}=Qc(0,s,i),p=!1,f=n.bufferSync(s);let m;switch(r.dtype){case"bool":m=sR(f,n.bufferSync(r),i,d,u,l,c,h,Boolean(n.data.get(o.dataId).values[0]),p);break;case"float32":m=sR(f,n.bufferSync(r),i,d,u,l,c,h,n.data.get(o.dataId).values[0],p);break;case"int32":m=sR(f,n.bufferSync(r),i,d,u,l,c,h,n.data.get(o.dataId).values[0],p);break;case"string":m=sR(f,n.bufferSync(r),i,d,u,l,c,h,Qs(n.data.get(o.dataId).values[0]),p);break;default:throw new Error("Unsupported type ".concat(r.dtype))}return n.makeTensorInfo(i,m.dtype,m.values)}};const vO={kernelName:Va,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{numOrSizeSplits:r,axis:o}=a,i=wt(o,s.shape)[0],c=Lm(s,r,i),l=new Array(s.shape.length).fill(0),u=s.shape.slice();return c.map(t=>{const e=[...u];e[i]=t;const a=lR({inputs:{x:s},backend:n,attrs:{begin:l,size:e}});return l[i]+=t,a})}},kO={kernelName:Ya,backendName:"cpu",kernelFunc:t=>{let{inputs:e,backend:n}=t;const{x:a}=e,s=n;lE(a,"square");const r=s.data.get(a.dataId).values,o=new Float32Array(r.length);for(let i=0;i<r.length;++i){const t=r[i];o[i]=t*t}return{dataId:s.write(o,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},IO=zE(ps,(t,e)=>{const n=e;return isNaN(t)?NaN:t>0?1:n.alpha}),NO={kernelName:ps,backendName:"cpu",kernelFunc:IO};const SO={kernelName:Ja,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{begin:r,end:o,strides:i,beginMask:c,endMask:l,ellipsisMask:u,newAxisMask:h,shrinkAxisMask:d}=a;lE(s,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=gl(s.shape,r,o,i,c,l,u,h,d);let v;if(m)v=JR({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){ot(s.shape.length>=1,()=>"Input must have rank at least 1, got: ".concat(s.shape.length));const t=al(b,x,w),e=lR({inputs:{x:s},backend:n,attrs:{begin:b,size:t}});v=JR({inputs:{x:e},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(e)}else{const t=IR(p,n.bufferSync(s),w,b);v=n.makeTensorInfo(f,t.dtype,t.values)}return v}};const TO={kernelName:Qa,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{separator:s,nGramWidths:r,leftPad:o,rightPad:i,padWidth:c,preserveShortSequences:l}=a,{data:u,dataSplits:h}=e,d=n.data.get(u.dataId).values,p=n.data.get(h.dataId).values,[f,m]=SR(d,p,s,r,o,i,c,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const CO={kernelName:$a,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{skipEmpty:s}=a,{input:r,delimiter:o}=e;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error("Input must be a vector, got shape: ".concat(r.shape));if(0!==o.shape.length)throw new Error("Delimiter must be a scalar, got shape: ".concat(o.shape));const i=n.data.get(r.dataId).values,c=n.data.get(o.dataId).values[0],[l,u,h]=CR(i,c,s),d=u.length;return[n.makeTensorInfo([d,2],"int32",l),n.makeTensorInfo([d],"string",u),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const EO={kernelName:ts,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{numBuckets:s}=a,{input:r}=e;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=ER(n.data.get(r.dataId).values,s);return n.makeTensorInfo(r.shape,"int32",o)}},AO=zE(ns,t=>Math.tan(t)),RO={kernelName:ns,backendName:"cpu",kernelFunc:AO},FO=zE(as,t=>Math.tanh(t));const DO={kernelName:Ea,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{tensor:a,indices:s,updates:r}=e,{sliceRank:o,numUpdates:i,sliceSize:c,strides:l,outputSize:u}=Qc(0,s,a.shape),h=n.bufferSync(s),d=n.bufferSync(r),p=n.bufferSync(a),f=sR(h,d,a.shape,u,c,i,o,l,p,!1);return n.makeTensorInfo(a.shape,f.dtype,f.values)}};const _O={kernelName:ss,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{reps:r}=a;lE(s,"tile");const o=_R(n.bufferSync(s),r);return n.makeTensorInfo(o.shape,o.dtype,o.values)}};const OO={kernelName:rs,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{k:r,sorted:o}=a;lE(s,"topk");const i=n.data.get(s.dataId).values,[c,l]=LR(i,s.shape,s.dtype,r,o);return[n.makeTensorInfo(c.shape,c.dtype,c.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}};const MO={kernelName:os,backendName:"cpu",kernelFunc:function(t){const{inputs:e,attrs:n,backend:a}=t,{image:s,transforms:r}=e,{interpolation:o,fillMode:i,fillValue:c,outputShape:l}=n,[u,h,d,p]=s.shape,[f,m]=null!=l?l:[h,d],g=[u,f,m,p],y=Mt(s.shape),b=y[0],x=y[1],w=y[2],v=Mt(g),k=v[0],I=v[1],N=v[2],S=kt(s.dtype,lt(g));S.fill(c);const T=a.data.get(s.dataId).values,C=a.data.get(r.dataId).values;for(let E=0;E<u;++E){const t=1===r.shape[0]?C:C.subarray(8*E,8*E+8);for(let e=0;e<f;++e)for(let n=0;n<m;++n)for(let a=0;a<p;++a){let s;const r=t[6]*n+t[7]*e+1;if(0===r)continue;const l=(t[0]*n+t[1]*e+t[2])/r,u=(t[3]*n+t[4]*e+t[5])/r,p=LO(l,d,i),f=LO(u,h,i);switch(o){case"nearest":s=PO(T,h,d,b,x,w,E,f,p,a,c);break;case"bilinear":s=BO(T,h,d,b,x,w,E,f,p,a,c);break;default:throw new Error("Error in Transform: Expect 'nearest' or "+"'bilinear', but got ".concat(o))}S[E*k+e*I+n*N+a]=s}return a.makeTensorInfo(g,s.dtype,S)}return{dataId:a.write(S,g,s.dtype),shape:s.shape,dtype:s.dtype}}};function LO(t,e,n){switch(n){case"reflect":return function(t,e){let n=t;if(n<0)if(e<=1)n=0;else{const t=2*e;n<t&&(n=t*Math.trunc(-n/t)+n),n=n<-e?n+t:-n-1}else if(n>e-1)if(e<=1)n=0;else{const t=2*e;n-=t*Math.trunc(n/t),n>=e&&(n=t-n-1)}return tt(0,n,e-1)}(t,e);case"wrap":return function(t,e){let n=t;if(n<0)if(e<=1)n=0;else{const t=e-1;n+=e*(Math.trunc(-n/t)+1)}else if(n>e-1)if(e<=1)n=0;else{const t=e-1;n-=e*Math.trunc(n/t)}return tt(0,n,e-1)}(t,e);case"nearest":return function(t,e){return tt(0,t,e-1)}(t,e);default:return function(t){return t}(t)}}function zO(t,e,n,a,s,r,o,i,c,l,u){return 0<=i&&i<e&&0<=c&&c<n?t[o*a+i*s+c*r+l]:u}function PO(t,e,n,a,s,r,o,i,c,l,u){return zO(t,e,n,a,s,r,o,Math.round(i),Math.round(c),l,u)}function BO(t,e,n,a,s,r,o,i,c,l,u){const h=Math.floor(i),d=Math.floor(c),p=h+1,f=d+1;return(p-i)*((f-c)*zO(t,e,n,a,s,r,o,h,d,l,u)+(c-d)*zO(t,e,n,a,s,r,o,h,f,l,u))+(i-h)*((f-c)*zO(t,e,n,a,s,r,o,p,d,l,u)+(c-d)*zO(t,e,n,a,s,r,o,p,f,l,u))}const WO={kernelName:cs,backendName:"cpu",kernelFunc:function(t){const{inputs:e,attrs:n,backend:a}=t,{axis:s}=n,{x:r}=e;lE(r,"unique");const o=a.data.get(r.dataId).values,{outputValues:i,outputShape:c,indices:l}=zR(o,s,r.shape,r.dtype);return[a.makeTensorInfo(c,r.dtype,i),a.makeTensorInfo([l.length],"int32",l)]}};const VO={kernelName:ls,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{value:s}=e;let{axis:r}=a;r<0&&(r+=s.shape.length);const o=s.shape.length,i=s.shape[r],c=new Array(o-1);let l=0;for(let p=0;p<o;p++)p!==r&&(c[l++]=s.shape[p]);const u=new Array(o).fill(0),h=s.shape.slice();h[r]=1;const d=new Array(i);for(let p=0;p<d.length;p++){u[r]=p;const t=lR({inputs:{x:s},backend:n,attrs:{begin:u,size:h}});d[p]=JR({inputs:{x:t},backend:n,attrs:{shape:c}}),n.disposeIntermediateTensorInfo(t)}return d}};const UO={kernelName:us,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,segmentIds:r}=e,{numSegments:o}=a;lE(s,"unsortedSegmentSum");const i=[],c=[],l=s.shape.length-r.shape.length;let u=r;for(let d=0;d<l;++d){const t=ID({inputs:{input:u},backend:n,attrs:{dim:d+1}});u=t,c.push(t)}for(let d=0;d<o;++d){const t=Ks(d,"int32"),e=n.makeTensorInfo([],"int32",t),a=HE({inputs:{a:e,b:u},backend:n}),r=IE({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),o=FA({inputs:{a:r,b:s},backend:n}),l=hD({inputs:{x:o},backend:n,attrs:{axis:0,keepDims:!1}});i.push(l),c.push(e),c.push(a),c.push(r),c.push(o),c.push(l)}const h=F_({inputs:i,backend:n,attrs:{axis:0}});return c.forEach(t=>n.disposeIntermediateTensorInfo(t)),h}},GO=[eF,pE,aF,rF,RE,oF,iF,cF,lF,uF,dF,fF,gF,xF,vF,SF,TF,CF,EF,tF,AF,RF,FF,ME,DF,NE,VE,OF,gE,MF,BF,VF,UF,GF,HF,jF,qF,XF,ZF,JF,QF,$F,tD,eD,aD,sD,rD,oD,iD,cD,lD,uD,pD,WR,fD,jE,kD,XE,ND,JE,FD,_D,OD,tA,aA,MD,LD,zD,PD,cA,hA,xE,BD,zF,VD,GD,jD,UR,fA,yA,qD,vA,XD,JD,$D,n_,a_,s_,o_,SA,i_,c_,l_,u_,h_,d_,p_,EA,f_,y_,w_,DA,OA,k_,N_,T_,zA,C_,R_,D_,__,L_,jR,UA,z_,P_,B_,W_,vE,CD,U_,KR,YR,QR,G_,H_,j_,q_,K_,X_,Z_,aR,J_,tO,eO,rO,iR,iO,lO,hO,uR,x_,fO,mO,gO,yO,bO,xO,wO,vO,gR,kO,xR,kR,NO,SO,TO,CO,EO,DR,dD,RO,{kernelName:as,backendName:"cpu",kernelFunc:FO},DO,_O,OO,MO,WA,WO,VO,UO,A_];for(const hj of GO)Ts(hj);const HO={},jO={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function qO(t,e){HO[t]=e}function KO(t,e){if(!(t in HO)||null!=e){const n=function(t,e){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==e?function(t){if(Yt().getBool("IS_SAFARI")||"undefined"===typeof OffscreenCanvas||2!==t){if("undefined"!==typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(t):e;n.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete HO[t]},!1),Yt().getBool("SOFTWARE_WEBGL_ENABLED")&&(jO.failIfMajorPerformanceCaveat=!1);if(1===t)return n.getContext("webgl",jO)||n.getContext("experimental-webgl",jO);return n.getContext("webgl2",jO)}(t,e);if(null===n)return console.log("Could not get context for WebGL version",t),null;HO[t]=n}const n=HO[t];return null==n||n.isContextLost()?(delete HO[t],KO(t)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),HO[t])}var XO,YO,ZO;function JO(t,e){return[e,t]}function QO(t){const e=lt(t);return mt(Math.ceil(e/4))}function $O(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function tM(t,e){const n=t;let a,s,r,o,i,c,l,u,h,d;return 2===Yt().getNumber("WEBGL_VERSION")?(a=n.R32F,s=n.R16F,r=n.RGBA16F,o=n.RGBA32F,i=n.RED,l=4,u=1,h=n.HALF_FLOAT,d=n.FLOAT,c=n.RGBA8):(a=t.RGBA,s=t.RGBA,r=t.RGBA,o=n.RGBA,i=t.RGBA,l=4,u=4,h=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT,c=t.RGBA),{internalFormatFloat:a,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:r,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:c,downloadUnpackNumChannels:l,defaultNumChannels:u,textureTypeHalfFloat:h,textureTypeFloat:d}}function eM(t,e){const n=e();return Yt().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+rM(t,e))}(t),n}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(XO||(XO={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(YO||(YO={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(ZO||(ZO={}));const nM=5.96e-8,aM=65504;function sM(t){return!!(Yt().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||nM<Math.abs(t)&&Math.abs(t)<aM)}function rM(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code ".concat(e)}}function oM(t,e){return FM(t,()=>t.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function iM(t,e){const n=FM(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(eM(t,()=>t.shaderSource(n,e)),eM(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function cM(t,e){const n=FM(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(eM(t,()=>t.shaderSource(n,e)),eM(t,()=>t.compileShader(n)),Yt().get("ENGINE_COMPILE_ONLY"))return n;if(!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw uM(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const lM=/ERROR: [0-9]+:([0-9]+):/g;function uM(t,e){const n=lM.exec(e);if(null==n)return console.log("Couldn't parse line number in error: ".concat(e)),void console.log(t);const a=+n[1],s=t.split("\n"),r=s.length.toString().length+2,o=s.map((t,e)=>yt((e+1).toString(),r)+t);let i=0;for(let h=0;h<o.length;h++)i=Math.max(o[h].length,i);const c=o.slice(0,a-1),l=o.slice(a-1,a),u=o.slice(a);console.log(c.join("\n")),console.log(e.split("\n")[0]),console.log("%c ".concat(yt(l[0],i)),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(u.join("\n"))}function hM(t){return FM(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}function dM(t,e){if(eM(t,()=>t.linkProgram(e)),!Yt().get("ENGINE_COMPILE_ONLY")&&!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function pM(t,e){if(eM(t,()=>t.validateProgram(e)),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function fM(t,e){const n=FM(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return eM(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),eM(t,()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)),n}function mM(t,e){const n=FM(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return eM(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)),eM(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)),n}function gM(){return 2===Yt().getNumber("WEBGL_VERSION")?1:4}function yM(t){return FM(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}function bM(t,e){const n=Yt().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){const n="[".concat(t,"x").concat(e,"]");throw new Error("Requested texture size "+n+" is invalid.")}if(t>n||e>n){const a="[".concat(t,"x").concat(e,"]"),s="[".concat(n,"x").concat(n,"]");throw new Error("Requested texture size "+a+" greater than WebGL maximum on this browser / GPU "+s+".")}}function xM(t){return FM(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function wM(t,e,n,a,s,r,o){const i=t.getAttribLocation(e,n);return-1!==i&&(eM(t,()=>t.bindBuffer(t.ARRAY_BUFFER,a)),eM(t,()=>t.vertexAttribPointer(i,s,t.FLOAT,!1,r,o)),eM(t,()=>t.enableVertexAttribArray(i)),!0)}function vM(t,e,n){DM(t,n),eM(t,()=>t.activeTexture(t.TEXTURE0+n)),eM(t,()=>t.bindTexture(t.TEXTURE_2D,e))}function kM(t,e){DM(t,e),eM(t,()=>t.activeTexture(t.TEXTURE0+e)),eM(t,()=>t.bindTexture(t.TEXTURE_2D,null))}function IM(t,e,n){return FM(t,()=>t.getUniformLocation(e,n),'uniform "'+n+'" not present in program.')}function NM(t,e,n){return t.getUniformLocation(e,n)}function SM(t,e,n,a){eM(t,()=>vM(t,e,a)),eM(t,()=>t.uniform1i(n,a))}function TM(t){eM(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),eM(t,()=>t.viewport(0,0,t.canvas.width,t.canvas.height)),eM(t,()=>t.scissor(0,0,t.canvas.width,t.canvas.height))}function CM(t,e,n){eM(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),eM(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0))}function EM(t,e){eM(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),eM(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function AM(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+RM(t,e))}function RM(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error ".concat(e)}}function FM(t,e,n){const a=eM(t,()=>e());if(null==a)throw new Error(n);return a}function DM(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,a=e+t.TEXTURE0;if(a<t.TEXTURE0||a>n){const t="[gl.TEXTURE0, gl.TEXTURE".concat(n,"]");throw new Error("textureUnit must be in ".concat(t,"."))}}function _M(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return lt(t.slice(0,t.length-e))}function OM(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function MM(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[_M(t),...OM(t)]),e}function LM(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Yt().getNumber("WEBGL_MAX_TEXTURE_SIZE"),a=Yt().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(a===1/0&&Yt().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(a=n/2),e&&(n*=2,a*=2,1===(t=t.map((e,n)=>n>=t.length-2?et(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=vt(t);t=e.newShape}let s=lt(t),r=null;t.length<=1&&s<=n?r=[1,s]:2===t.length&&t[0]<=n&&t[1]<=n?r=t:3===t.length&&t[0]*t[1]<=n&&t[2]<=n?r=[t[0]*t[1],t[2]]:3===t.length&&t[0]<=n&&t[1]*t[2]<=n?r=[t[0],t[1]*t[2]]:4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n?r=[t[0]*t[1]*t[2],t[3]]:4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n&&(r=[t[0],t[1]*t[2]*t[3]]);const o=null!=r&&Math.max(...r)>a&&Math.min(...r)<=(e?2:1)&&Math.min(...r)>0;if(null==r||o)if(e){const e=_M(t);let n=2,a=2;t.length&&([n,a]=OM(t)),s=e*(n/2)*(a/2),r=mt(s).map(t=>2*t)}else r=mt(s);return r}function zM(t){return t%2===0}function PM(t,e){if(dt(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t[t.length-1],a=e[e.length-1];if(n===a)return!0;if(zM(n)&&zM(a)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&zM(t[0])&&zM(e[0])}let BM,WM;function VM(t){if(null==BM){const e=KO(t);BM=e.getParameter(e.MAX_TEXTURE_SIZE)}return BM}function UM(){BM=null}function GM(){WM=null}function HM(t){if(null==WM){const e=KO(t);WM=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,WM)}function jM(t){if(0===t)return 0;let e;const n=KO(t);return e=qM(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:qM(n,"EXT_disjoint_timer_query")?1:0,e}function qM(t,e){return null!=t.getExtension(e)}function KM(t){try{if(null!=KO(t))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function XM(t){if(0===t)return!1;const e=KO(t);if(1===t){if(!qM(e,"OES_texture_float"))return!1}else if(!qM(e,"EXT_color_buffer_float"))return!1;return ZM(e)}function YM(t){if(0===t)return!1;const e=KO(t);if(1!==t){if(qM(e,"EXT_color_buffer_float"))return ZM(e);const t="EXT_color_buffer_half_float";if(qM(e,t)){const n=e.getExtension(t);return function(t,e){const n=tM(t,e),a=t.createTexture();t.bindTexture(t.TEXTURE_2D,a);const s=1,r=1;t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,s,r,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,a,0);const i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(a),t.deleteFramebuffer(o),i}(e,n)}return!1}if(!qM(e,"OES_texture_float"))return!1;if(!qM(e,"WEBGL_color_buffer_float"))return!1;return ZM(e)}function ZM(t){const e=tM(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const a=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,a),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(a),s}function JM(t){if(2!==t)return!1;return null!=KO(t).fenceSync}function QM(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&ot("complex64"!==t.dtype,()=>"".concat(e," does not support complex64 tensors ")+"in the WebGL backend.")})}const $M=Yt();function tL(){let t,e,n,a,s,r,o,i,c,l;return 2===Yt().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",a="in",s="texture",r="outputColor",o="out vec4 outputColor;",i=Yt().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",c="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",a="varying",s="texture2D",r="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",c="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:a,texture2D:s,output:r,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:c,defineRound:l}}function eL(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const a=Mt(e);return a.map((e,s)=>{const r="int ".concat(t[s]," = ").concat(n," / ").concat(e),o=s===a.length-1?"int ".concat(t[s+1]," = ").concat(n," - ").concat(t[s]," * ").concat(e):"index -= ".concat(t[s]," * ").concat(e);return"".concat(r,"; ").concat(o,";")}).join("")}function nL(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const a=Mt(e);return a.map((e,s)=>{const r="int ".concat(t[s]," = ").concat(n," / outShapeStrides[").concat(s,"]"),o=s===a.length-1?"int ".concat(t[s+1]," = ").concat(n," - ").concat(t[s]," * outShapeStrides[").concat(s,"]"):"index -= ".concat(t[s]," * outShapeStrides[").concat(s,"]");return"".concat(r,"; ").concat(o,";")}).join("")}function aL(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const a=function(t,e){const n=t.length,a=t.map(t=>"".concat(e,"[").concat(t,"]")),s=new Array(n-1);s[n-2]=a[n-1];for(let r=n-3;r>=0;--r)s[r]="(".concat(s[r+1]," * ").concat(a[r+1],")");return s}(t.map((t,e)=>e),e);return a.map((e,s)=>{const r="int ".concat(t[s]," = ").concat(n," / ").concat(a[s]),o=s===a.length-1?"int ".concat(t[s+1]," = ").concat(n," - ").concat(t[s]," * ").concat(a[s]):"index -= ".concat(t[s]," * ").concat(a[s]);return"".concat(r,"; ").concat(o,";")}).join("")}function sL(t){const e=Mt(t).map(t=>t.toString());return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ".concat(e[0]," + coords.y * ").concat(e[1]," + coords.z;\n  }\n")}$M.registerFlag("HAS_WEBGL",()=>$M.getNumber("WEBGL_VERSION")>0),$M.registerFlag("WEBGL_VERSION",()=>KM(2)?2:KM(1)?1:0),$M.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),$M.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===$M.get("WEBGL_VERSION")),$M.registerFlag("WEBGL_CPU_FORWARD",()=>!0),$M.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),$M.registerFlag("WEBGL_PACK",()=>$M.getBool("HAS_WEBGL")),$M.registerFlag("WEBGL_PACK_NORMALIZATION",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_PACK_CLIP",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_PACK_REDUCE",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_LAZILY_UNPACK",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_CONV_IM2COL",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>$M.getBool("WEBGL_PACK")),$M.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>VM($M.getNumber("WEBGL_VERSION"))),$M.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>HM($M.getNumber("WEBGL_VERSION"))),$M.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=$M.getNumber("WEBGL_VERSION");return 0===t?0:jM(t)}),$M.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>$M.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Br()),$M.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>XM($M.getNumber("WEBGL_VERSION"))),$M.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!$M.getBool("WEBGL_FORCE_F16_TEXTURES")&&$M.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),$M.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>YM($M.getNumber("WEBGL_VERSION"))),$M.registerFlag("WEBGL_FENCE_API_ENABLED",()=>JM($M.getNumber("WEBGL_VERSION"))),$M.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>$M.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),$M.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if("number"!==typeof t)throw new Error("WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but "+"got ".concat(t,"."));if(t<0&&-1!==t)throw new Error("WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never "+"delete) or at least 0, but got ".concat(t,"."))}),$M.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Br()?1:-1,t=>{if("number"!==typeof t)throw new Error("WEBGL_FLUSH_THRESHOLD must be a number but got "+"".concat(t,"."));if(t<0&&-1!==t)throw new Error("WEBGL_FLUSH_THRESHOLD must be -1 (indicating never "+"manual flush) or at least 0, but got ".concat(t,"."))}),$M.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),$M.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),$M.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),$M.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),$M.registerFlag("WEBGL_EXP_CONV",()=>!1),$M.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>$M.getBool("IS_TEST")),$M.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),$M.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),$M.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),$M.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const rL="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:oL}=y;function iL(t,e,n){const a=[];if(t.forEach(t=>{const e=lt(t.shapeInfo.logicalShape);if(t.shapeInfo.isUniform?a.push("uniform float ".concat(t.name).concat(e>1?"[".concat(e,"]"):"",";")):(a.push("uniform sampler2D ".concat(t.name,";")),a.push("uniform int offset".concat(t.name,";"))),n.enableShapeUniforms){const{uniformShape:e}=yL(n.packedInputs,t.shapeInfo.logicalShape,t.shapeInfo.texShape);switch(e.length){case 1:a.push("uniform int ".concat(t.name,"Shape;"));break;case 2:a.push("uniform ivec2 ".concat(t.name,"Shape;"));break;case 3:a.push("uniform ivec3 ".concat(t.name,"Shape;"));break;case 4:a.push("uniform ivec4 ".concat(t.name,"Shape;"))}a.push("uniform ivec2 ".concat(t.name,"TexShape;"))}}),n.enableShapeUniforms){switch(e.logicalShape.length){case 1:a.push("uniform int outShape;");break;case 2:a.push("uniform ivec2 outShape;"),a.push("uniform int outShapeStrides;");break;case 3:a.push("uniform ivec3 outShape;"),a.push("uniform ivec2 outShapeStrides;");break;case 4:a.push("uniform ivec4 outShape;"),a.push("uniform ivec3 outShapeStrides;")}a.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach(t=>{a.push("uniform ".concat(t.type," ").concat(t.name).concat(t.arrayIndex?"[".concat(t.arrayIndex,"]"):"",";"))});const s=a.join("\n"),r=t.map(t=>function(t,e){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3?arguments[3]:void 0,s="";s+=n?lL(t,a):cL(t,a);const r=t.shapeInfo.logicalShape,o=e.logicalShape;r.length<=o.length&&(s+=n?function(t,e){const n=t.name,a=n.charAt(0).toUpperCase()+n.slice(1),s="get"+a+"AtOutCoords",r=t.shapeInfo.logicalShape.length,o=e.logicalShape.length,i=oL(t.shapeInfo.logicalShape,e.logicalShape),c=gL(o),l=o-r;let u;const h=["x","y","z","w","u","v"];u=0===r?"":o<2&&i.length>=1?"coords = 0;":i.map(t=>"coords.".concat(h[t+l]," = 0;")).join("\n");let d="";d=o<2&&r>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords.".concat(h[e+l])).join(", ");let p="return outputValue;";const f=1===lt(t.shapeInfo.logicalShape),m=lt(e.logicalShape),g=1===m;if(1!==r||f||g){if(f&&!g)p=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const t=r-2,e=r-1;i.indexOf(t)>-1&&i.indexOf(e)>-1?p="return vec4(outputValue.x);":i.indexOf(t)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(e)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 ".concat(s,"() {\n      ").concat(c," coords = getOutputCoords();\n      ").concat(u,"\n      vec4 outputValue = get").concat(a,"(").concat(d,");\n      ").concat(p,"\n    }\n  ")}(t,e):function(t,e){const n=t.name,a=n.charAt(0).toUpperCase()+n.slice(1),s="get"+a+"AtOutCoords",r=e.texShape,o=t.shapeInfo.texShape,i=t.shapeInfo.logicalShape.length,c=e.logicalShape.length;if(!t.shapeInfo.isUniform&&i===c&&null==t.shapeInfo.flatOffset&&dt(o,r))return"\n      float ".concat(s,"() {\n        return sampleTexture(").concat(n,", resultUV);\n      }\n    ");const l=gL(c),u=oL(t.shapeInfo.logicalShape,e.logicalShape),h=c-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":c<2&&u.length>=1?"coords = 0;":u.map(t=>"coords.".concat(p[t+h]," = 0;")).join("\n");let f="";f=c<2&&i>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords.".concat(p[e+h])).join(", ");return"\n    float ".concat(s,"() {\n      ").concat(l," coords = getOutputCoords();\n      ").concat(d,"\n      return get").concat(a,"(").concat(f,");\n    }\n  ")}(t,e));return s}(t,e,n.packedInputs,n.enableShapeUniforms)).join("\n"),o=e.texShape,i=tL(),c=function(t){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ".concat(t.texture2D,"(textureSampler, uv).r;\n    }\n  ")}(i);let l,u,h=function(t){const e="".concat(t.version,"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ").concat(t.varyingFs," vec2 resultUV;\n    ").concat(t.defineOutput,"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ").concat(t.defineSpecialNaN,"\n    ").concat(t.defineSpecialInf,"\n    ").concat(t.defineRound,"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ").concat(uL,"\n    ").concat(hL,"\n    ").concat(dL,"\n  ");return e}(i);e.isPacked?(l=function(t,e,n){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e,n){const a=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===a[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ".concat(a[1],".0);\n      }\n    ");if(1===a[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ".concat(a[0],".0);\n      }\n    ");if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(a[0],", ").concat(a[1],"));\n      return 2 * (resTexRC.x * ").concat(a[1]," + resTexRC.y);\n    }\n  ")}(0,e,n);case 2:return function(t,e,n){const a=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(dt(t,e))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(".concat(a[0],", ").concat(a[1],"));\n      }\n    ");const s=Math.ceil(t[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(a[0],", ").concat(a[1],"));\n\n      int index = resTexRC.x * ").concat(a[1]," + resTexRC.y;\n      int r = 2 * (index / ").concat(s,");\n      int c = imod(index, ").concat(s,") * 2;\n\n      return ivec2(r, c);\n    }\n  ")}(t,e,n);case 3:return function(t,e,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const a=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[2]/2),r=s*Math.ceil(t[1]/2);return"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(a[0],", ").concat(a[1],"));\n      int index = resTexRC.x * ").concat(a[1]," + resTexRC.y;\n\n      int b = index / ").concat(r,";\n      index -= b * ").concat(r,";\n\n      int r = 2 * (index / ").concat(s,");\n      int c = imod(index, ").concat(s,") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ")}(t,e,n);default:return function(t,e,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const a=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[t.length-1]/2),r=s*Math.ceil(t[t.length-2]/2);let o=r,i="",c="b, r, c";for(let l=2;l<t.length-1;l++)o*=t[t.length-l-1],i="\n      int b".concat(l," = index / ").concat(o,";\n      index -= b").concat(l," * ").concat(o,";\n    ")+i,c="b".concat(l,", ")+c;return"\n    ivec".concat(t.length," getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(").concat(a[0],", ").concat(a[1],"));\n      int index = resTexRC.x * ").concat(a[1]," + resTexRC.y;\n\n      ").concat(i,"\n\n      int b = index / ").concat(r,";\n      index -= b * ").concat(r,";\n\n      int r = 2 * (index / ").concat(s,");\n      int c = imod(index, ").concat(s,") * 2;\n\n      return ivec").concat(t.length,"(").concat(c,");\n    }\n  ")}(t,e,n)}}(e.logicalShape,o,n.enableShapeUniforms),u=function(t){return"\n    void setOutput(vec4 val) {\n      ".concat(t.output," = val;\n    }\n  ")}(i)):(l=function(t,e,n){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e,n){if(1===e[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":"\n      int getOutputCoords() {\n        return int(resultUV.x * ".concat(e[1],".0);\n      }\n    ");if(1===e[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":"\n      int getOutputCoords() {\n        return int(resultUV.y * ".concat(e[0],".0);\n      }\n    ");if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(e[0],", ").concat(e[1],"));\n      return resTexRC.x * ").concat(e[1]," + resTexRC.y;\n    }\n  ")}(0,e,n);case 2:return function(t,e,n){if(dt(t,e))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(".concat(e[0],", ").concat(e[1],"));\n      }\n    ");if(1===t[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(".concat(e[0],", ").concat(e[1],"));\n        int index = resTexRC.x * ").concat(e[1]," + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ");if(1===t[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(".concat(e[0],", ").concat(e[1],"));\n        int index = resTexRC.x * ").concat(e[1]," + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ");if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(e[0],", ").concat(e[1],"));\n      int index = resTexRC.x * ").concat(e[1]," + resTexRC.y;\n      int r = index / ").concat(t[1],";\n      int c = index - r * ").concat(t[1],";\n      return ivec2(r, c);\n    }\n  ")}(t,e,n);case 3:return function(t,e,n){if(n){const e=nL(["r","c","d"],t);return"\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ".concat(e,"\n    return ivec3(r, c, d);\n  }\n")}const a=eL(["r","c","d"],t);return"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(".concat(e[0],", ").concat(e[1],"));\n      int index = resTexRC.x * ").concat(e[1]," + resTexRC.y;\n      ").concat(a,"\n      return ivec3(r, c, d);\n    }\n  ")}(t,e,n);case 4:return function(t,e,n){if(n){const e=nL(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ".concat(e,"\n      return ivec4(r, c, d, d2);\n    }\n  ")}const a=eL(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(".concat(e[0],", ").concat(e[1],"));\n      int index = resTexRC.x * ").concat(e[1]," + resTexRC.y;\n      ").concat(a,"\n      return ivec4(r, c, d, d2);\n    }\n  ")}(t,e,n);case 5:return function(t,e){const n=eL(["r","c","d","d2","d3"],t);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(".concat(e[0],",\n                             ").concat(e[1],"));\n\n      int index = resTexRC.x * ").concat(e[1]," + resTexRC.y;\n\n      ").concat(n,"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ")}(t,e);case 6:return function(t,e){const n=eL(["r","c","d","d2","d3","d4"],t);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(".concat(e[0],", ").concat(e[1],"));\n      int index = resTexRC.x * ").concat(e[1]," + resTexRC.y;\n\n      ").concat(n,"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ")}(t,e);default:throw new Error("".concat(t.length,"-D output sampling is not yet supported"))}}(e.logicalShape,o,n.enableShapeUniforms),u=function(t){return"\n    void setOutput(float val) {\n      ".concat(t.output," = vec4(val, 0, 0, 0);\n    }\n  ")}(i)),n.packedInputs&&(h+=pL);return[h,c,u,s,l,r,n.userCode].join("\n")}function cL(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=t.shapeInfo.logicalShape;switch(n.length){case 0:return function(t,e){const n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1);if(t.shapeInfo.isUniform)return"float ".concat(a,"() {return ").concat(n,";}");const[s,r]=t.shapeInfo.texShape;if(1===s&&1===r)return"\n      float ".concat(a,"() {\n        return sampleTexture(").concat(n,", halfCR);\n      }\n    ");const o=fL(n);if(e)return"\n    float ".concat(a,"() {\n      vec2 uv = uvFromFlat(").concat(n,"TexShape[0], ").concat(n,"TexShape[1], ").concat(o,");\n      return sampleTexture(").concat(n,", uv);\n    }\n  ");const[i,c]=t.shapeInfo.texShape;return"\n    float ".concat(a,"() {\n      vec2 uv = uvFromFlat(").concat(i,", ").concat(c,", ").concat(o,");\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(t,e);case 1:return function(t,e){const n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1);if(t.shapeInfo.isUniform)return"\n      float ".concat(a,"(int index) {\n        ").concat(mL(t),"\n      }\n    ");const s=t.shapeInfo.texShape,r=s[0],o=s[1];if(1===o&&1===r)return"\n      float ".concat(a,"(int index) {\n        return sampleTexture(").concat(n,", halfCR);\n      }\n    ");const i=fL(n);if(1===o)return e?"\n      float ".concat(a,"(int index) {\n        vec2 uv = vec2(0.5, (float(index + ").concat(i,") + 0.5) / float(").concat(n,"TexShape[0]));\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):"\n      float ".concat(a,"(int index) {\n        vec2 uv = vec2(0.5, (float(index + ").concat(i,") + 0.5) / ").concat(r,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");if(1===r)return e?"\n      float ".concat(a,"(int index) {\n        vec2 uv = vec2((float(index + ").concat(i,") + 0.5) / float(").concat(n,"TexShape[1]), 0.5);\n        return sampleTexture(").concat(n,", uv);\n      }\n    "):"\n      float ".concat(a,"(int index) {\n        vec2 uv = vec2((float(index + ").concat(i,") + 0.5) / ").concat(o,".0, 0.5);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");if(e)return"\n    float ".concat(a,"(int index) {\n      vec2 uv = uvFromFlat(").concat(n,"TexShape[0], ").concat(n,"TexShape[1], index + ").concat(i,");\n      return sampleTexture(").concat(n,", uv);\n    }\n  ");return"\n    float ".concat(a,"(int index) {\n      vec2 uv = uvFromFlat(").concat(r,", ").concat(o,", index + ").concat(i,");\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(t,e);case 2:return function(t,e){const n=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),r=t.shapeInfo.texShape;if(null!=r&&dt(n,r)){if(e)return"\n      float ".concat(s,"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    ");const t=r[0],n=r[1];return"\n    float ".concat(s,"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(n,".0, ").concat(t,".0);\n      return sampleTexture(").concat(a,", uv);\n    }\n  ")}const{newShape:o,keptDims:i}=vt(n),c=o;if(c.length<n.length){const n=bL(t,c),a=["row","col"];return"\n      ".concat(cL(n,e),"\n      float ").concat(s,"(int row, int col) {\n        return ").concat(s,"(").concat(xL(a,i),");\n      }\n    ")}if(t.shapeInfo.isUniform)return"\n      float ".concat(s,"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(").concat(n[1],", 1)));\n        ").concat(mL(t),"\n      }\n    ");const l=r[0],u=r[1],h=fL(a);if(1===u)return e?"\n      float ".concat(s,"(int row, int col) {\n        float index = dot(vec3(row, col, ").concat(h,"), vec3(").concat(a,"Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(").concat(a,"TexShape[0]));\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n    float ".concat(s,"(int row, int col) {\n      float index = dot(vec3(row, col, ").concat(h,"), vec3(").concat(n[1],", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ").concat(l,".0);\n      return sampleTexture(").concat(a,", uv);\n    }\n  ");if(1===l)return e?"\n      float ".concat(s,"(int row, int col) {\n        float index = dot(vec3(row, col, ").concat(h,"), vec3(").concat(a,"Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(").concat(a,"TexShape[1]), 0.5);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n    float ".concat(s,"(int row, int col) {\n      float index = dot(vec3(row, col, ").concat(h,"), vec3(").concat(n[1],", 1, 1));\n      vec2 uv = vec2((index + 0.5) / ").concat(u,".0, 0.5);\n      return sampleTexture(").concat(a,", uv);\n    }\n  ");if(e)return"\n      float ".concat(s,"(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ").concat(a,"Shape[1] + col + ").concat(h,";\n        vec2 uv = uvFromFlat(").concat(a,"TexShape[0], ").concat(a,"TexShape[1], index);\n        return sampleTexture(").concat(a,", uv);\n      }\n    ");return"\n  float ".concat(s,"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ").concat(n[1]," + col + ").concat(h,";\n    vec2 uv = uvFromFlat(").concat(l,", ").concat(u,", index);\n    return sampleTexture(").concat(a,", uv);\n  }\n")}(t,e);case 3:return function(t,e){const n=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),r=n[1]*n[2],o=n[2],{newShape:i,keptDims:c}=vt(n),l=i;if(l.length<n.length){const n=bL(t,l),a=["row","col","depth"];return"\n        ".concat(cL(n,e),"\n        float ").concat(s,"(int row, int col, int depth) {\n          return ").concat(s,"(").concat(xL(a,c),");\n        }\n      ")}if(t.shapeInfo.isUniform)return"\n      float ".concat(s,"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(").concat(r,", ").concat(o,", 1)));\n        ").concat(mL(t),"\n      }\n    ");const u=t.shapeInfo.texShape,h=u[0],d=u[1],p=t.shapeInfo.flatOffset;if(d===r&&null==p)return e?"\n      float ".concat(s,"(int row, int col, int depth) {\n        int stride1 = ").concat(a,"Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n        float ".concat(s,"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(").concat(o,", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(").concat(d,".0, ").concat(h,".0);\n          return sampleTexture(").concat(a,", uv);\n        }\n      ");if(d===o&&null==p)return e?"\n      float ".concat(s,"(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(").concat(a,"Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n    float ".concat(s,"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(").concat(n[1],", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(").concat(d,".0, ").concat(h,".0);\n      return sampleTexture(").concat(a,", uv);\n    }\n  ");const f=fL(a);if(e)return"\n    float ".concat(s,"(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ").concat(a,"Shape[1] * ").concat(a,"Shape[2];\n      int stride1 = ").concat(a,"Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ").concat(f,";\n      vec2 uv = uvFromFlat(").concat(a,"TexShape[0], ").concat(a,"TexShape[1], index);\n      return sampleTexture(").concat(a,", uv);\n    }\n    ");return"\n      float ".concat(s,"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ").concat(r," + col * ").concat(o," + depth + ").concat(f,";\n        vec2 uv = uvFromFlat(").concat(h,", ").concat(d,", index);\n        return sampleTexture(").concat(a,", uv);\n      }\n  ")}(t,e);case 4:return function(t,e){const n=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),r=n[3],o=n[2]*r,i=n[1]*o,{newShape:c,keptDims:l}=vt(n);if(c.length<n.length){const n=bL(t,c),a=["row","col","depth","depth2"];return"\n      ".concat(cL(n,e),"\n      float ").concat(s,"(int row, int col, int depth, int depth2) {\n        return ").concat(s,"(").concat(xL(a,l),");\n      }\n    ")}if(t.shapeInfo.isUniform)return"\n      float ".concat(s,"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(").concat(i,", ").concat(o,", ").concat(r,", 1)));\n        ").concat(mL(t),"\n      }\n    ");const u=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],p=h[1],f="int stride2 = ".concat(a,"Shape[3];"),m="int stride1 = ".concat(a,"Shape[2] * stride2;"),g="int stride0 = ".concat(a,"Shape[1] * stride1;");if(p===i&&null==u)return e?"\n      float ".concat(s,"(int row, int col, int depth, int depth2) {\n        ").concat(f,"\n        ").concat(m,"\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n      float ".concat(s,"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(").concat(o,", ").concat(r,", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(p,".0, ").concat(d,".0);\n        return sampleTexture(").concat(a,", uv);\n      }\n    ");if(p===r&&null==u)return e?"\n      float ".concat(s,"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(").concat(a,"Shape[1] * ").concat(a,"Shape[2], ").concat(a,"Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n        return sampleTexture(").concat(a,", uv);\n      }\n    "):"\n      float ".concat(s,"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(").concat(n[1]*n[2],", ").concat(n[2],", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(p,".0, ").concat(d,".0);\n        return sampleTexture(").concat(a,", uv);\n      }\n    ");const y=fL(a);if(e)return"\n    float ".concat(s,"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ").concat(f,"\n      ").concat(m,"\n      ").concat(g,"\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(").concat(a,"TexShape[0], ").concat(a,"TexShape[1], index + ").concat(y,");\n      return sampleTexture(").concat(a,", uv);\n    }\n  ");return"\n    float ".concat(s,"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ").concat(i," + col * ").concat(o," +\n          depth * ").concat(r," + depth2;\n      vec2 uv = uvFromFlat(").concat(d,", ").concat(p,", index + ").concat(y,");\n      return sampleTexture(").concat(a,", uv);\n    }\n  ")}(t,e);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],r=e[3]*s,o=e[2]*r,i=e[1]*o,{newShape:c,keptDims:l}=vt(e);if(c.length<e.length){const e=bL(t,c),n=["row","col","depth","depth2","depth3"];return"\n      ".concat(cL(e),"\n      float ").concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n        return ").concat(a,"(").concat(xL(n,l),");\n      }\n    ")}if(t.shapeInfo.isUniform)return"\n      float ".concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(").concat(i,", ").concat(o,", ").concat(r,", ").concat(s,")) +\n          depth3;\n        ").concat(mL(t),"\n      }\n    ");const u=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==u)return"\n      float ".concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(").concat(o,", ").concat(r,", ").concat(s,", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(p,".0, ").concat(d,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");if(p===s&&null==u)return"\n      float ".concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(").concat(e[1]*e[2]*e[3],",\n               ").concat(e[2]*e[3],", ").concat(e[3],", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(p,".0, ").concat(d,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");const f=fL(n);return"\n    float ".concat(a,"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ").concat(i," + col * ").concat(o," + depth * ").concat(r," +\n          depth2 * ").concat(s," + depth3 + ").concat(f,";\n      vec2 uv = uvFromFlat(").concat(d,", ").concat(p,", index);\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:r}=vt(e);if(s.length<e.length){const e=bL(t,s),n=["row","col","depth","depth2","depth3","depth4"];return"\n      ".concat(cL(e),"\n      float ").concat(a,"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ").concat(a,"(").concat(xL(n,r),");\n      }\n    ")}const o=e[5],i=e[4]*o,c=e[3]*i,l=e[2]*c,u=e[1]*l;if(t.shapeInfo.isUniform)return"\n      float ".concat(a,"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(").concat(u,", ").concat(l,", ").concat(c,", ").concat(i,")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(").concat(o,", 1)));\n        ").concat(mL(t),"\n      }\n    ");const h=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],f=d[1];if(f===u&&null==h)return"\n      float ".concat(a,"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(").concat(l,", ").concat(c,", ").concat(i,", ").concat(o,")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(").concat(f,".0, ").concat(p,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");if(f===o&&null==h)return"\n      float ".concat(a,"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(").concat(e[1]*e[2]*e[3]*e[4],",\n               ").concat(e[2]*e[3]*e[4],",\n               ").concat(e[3]*e[4],",\n               ").concat(e[4],")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(").concat(f,".0, ").concat(p,".0);\n        return sampleTexture(").concat(n,", uv);\n      }\n    ");const m=fL(n);return"\n    float ".concat(a,"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ").concat(u," + col * ").concat(l," + depth * ").concat(c," +\n          depth2 * ").concat(i," + depth3 * ").concat(o," + depth4 + ").concat(m,";\n      vec2 uv = uvFromFlat(").concat(p,", ").concat(f,", index);\n      return sampleTexture(").concat(n,", uv);\n    }\n  ")}(t);default:throw new Error("".concat(n.length,"-D input sampling")+" is not yet supported")}}function lL(t,e){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),a=tL();return"\n    vec4 ".concat(n,"() {\n      return ").concat(a.texture2D,"(").concat(e,", halfCR);\n    }\n  ")}(t);case 1:return function(t,e){const n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,r=tL();if(e)return"\n    vec4 ".concat(a,"(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(").concat(n,"TexShape[0]) / 2.0), ceil(float(").concat(n,"TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ").concat(r.texture2D,"(").concat(n,", uv);\n    }\n  ");const o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return"\n    vec4 ".concat(a,"(int index) {\n      vec2 uv = packedUVfrom1D(\n        ").concat(o[0],", ").concat(o[1],", index);\n      return ").concat(r.texture2D,"(").concat(n,", uv);\n    }\n  ")}(t,e);case 2:return function(t,e){const n=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),r=t.shapeInfo.texShape,o=r[0],i=r[1],c=tL();if(null!=r&&dt(n,r))return e?"\n      vec4 ".concat(s,"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(a,"TexShape[1], ").concat(a,"TexShape[0]);\n\n        return ").concat(c.texture2D,"(").concat(a,", uv);\n      }\n    "):"\n      vec4 ".concat(s,"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(").concat(i,".0, ").concat(o,".0);\n\n        return ").concat(c.texture2D,"(").concat(a,", uv);\n      }\n    ");if(e)return"\n    vec4 ".concat(s,"(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(").concat(a,"TexShape[0]) / 2.0), ceil(float(").concat(a,"TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(").concat(a,"Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ").concat(c.texture2D,"(").concat(a,", uv);\n    }\n  ");const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],u=Math.ceil(n[1]/2);return"\n    vec4 ".concat(s,"(int row, int col) {\n      vec2 uv = packedUVfrom2D(").concat(u,", ").concat(l[0],", ").concat(l[1],", row, col);\n      return ").concat(c.texture2D,"(").concat(a,", uv);\n    }\n  ")}(t,e);case 3:return function(t,e){const n=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===n[0]){const a=[1,2],r=bL(t,n.slice(1)),o=["b","row","col"];return"\n        ".concat(lL(r,e),"\n        vec4 ").concat(s,"(int b, int row, int col) {\n          return ").concat(s,"(").concat(xL(o,a),");\n        }\n      ")}const i=tL();if(e)return"\n    vec4 ".concat(s,"(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(").concat(a,"TexShape[0]) / 2.0), ceil(float(").concat(a,"TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(").concat(a,"Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(").concat(a,"Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ").concat(i.texture2D,"(").concat(a,", uv);\n    }\n  ");const c=o[0],l=o[1],u=Math.ceil(n[2]/2),h=u*Math.ceil(n[1]/2);return"\n    vec4 ".concat(s,"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ").concat(c,", ").concat(l,", ").concat(h,", ").concat(u,", b, row, col);\n      return ").concat(i.texture2D,"(").concat(a,", uv);\n    }\n  ")}(t,e);default:return function(t,e){const n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),s=tL();if(e)return"\n    vec4 ".concat(a,"(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(").concat(n,"Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(").concat(n,"Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ").concat(n,"Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(").concat(n,"TexShape[0]) / 2.0), ceil(float(").concat(n,"TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ").concat(s.texture2D,"(").concat(n,", uv);\n    }\n  ");const r=t.shapeInfo.logicalShape,o=r.length,i=t.shapeInfo.texShape,c=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],l=c[0],u=c[1],h=Math.ceil(r[o-1]/2);let d=h*Math.ceil(r[o-2]/2),p="int b, int row, int col",f="b * ".concat(d," + (row / 2) * ").concat(h," + (col / 2)");for(let m=2;m<o-1;m++)p="int b".concat(m,", ")+p,d*=r[o-m-1],f="b".concat(m," * ").concat(d," + ")+f;return"\n    vec4 ".concat(a,"(").concat(p,") {\n      int index = ").concat(f,";\n      int texR = index / ").concat(u,";\n      int texC = index - texR * ").concat(u,";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(").concat(u,", ").concat(l,");\n      return ").concat(s.texture2D,"(").concat(n,", uv);\n    }\n  ")}(t,e)}}const uL="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",hL="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",dL="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",pL="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function fL(t){return"offset".concat(t)}function mL(t){const e=t.name,n=lt(t.shapeInfo.logicalShape);return n<2?"return ".concat(e,";"):"\n    for (int i = 0; i < ".concat(n,"; i++) {\n      if (i == index) {\n        return ").concat(e,"[i];\n      }\n    }\n  ")}function gL(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error("GPU for rank ".concat(t," is not yet supported"))}function yL(t,e,n){const{newShape:a,keptDims:s}=vt(e),r=e.length,o=t&&3===r&&1===e[0],i=o?e.slice(1):a,c=!t&&r>1&&!dt(e,n)&&a.length<r||o;return{useSqueezeShape:c,uniformShape:c?i:e,keptDims:s}}function bL(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function xL(t,e){return e.map(e=>t[e]).join(", ")}function wL(t,e,n){const a=[],s=[];let r,o,i,c=null,l=null;l=t.getUniformLocation(n,"NAN",!1),1===Yt().getNumber("WEBGL_VERSION")&&(c=t.getUniformLocation(n,"INFINITY",!1));const u=!1;for(const h of e.variableNames){const s={name:h,uniform:t.getUniformLocation(n,h,u),offset:t.getUniformLocation(n,"offset".concat(h),u)};e.enableShapeUniforms&&(s.shape=t.getUniformLocation(n,"".concat(h,"Shape"),u),s.texShape=t.getUniformLocation(n,"".concat(h,"TexShape"),u)),a.push(s)}if(e.enableShapeUniforms&&(r=t.getUniformLocation(n,"outShape",u),i=t.getUniformLocation(n,"outShapeStrides",u),o=t.getUniformLocation(n,"outTexShape",u)),e.customUniforms)for(const h of e.customUniforms)s.push(t.getUniformLocation(n,h.name,u));return{variablesLocations:a,customUniformLocations:s,infLoc:c,nanLoc:l,outShapeLocation:r,outShapeStridesLocation:i,outTexShapeLocation:o}}function vL(t,e){if(t.length!==e.length)throw Error("Binary was compiled with ".concat(t.length," inputs, but ")+"was executed with ".concat(e.length," inputs"));t.forEach((t,n)=>{const a=t.logicalShape,s=e[n],r=s.shape;if(!dt(a,r))throw Error("Binary was compiled with different shapes than "+"the current args. Shapes ".concat(a," and ").concat(r," must match"));if(t.isUniform&&s.isUniform)return;const o=t.texShape,i=s.isUniform?null:s.texData.texShape;if(!dt(o,i))throw Error("Binary was compiled with different texture shapes than the"+" current args. Shape ".concat(o," and ").concat(i," must match"))})}function kL(t){return Yt().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&t<=4}class IL{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=XO.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=tL();this.outputShape=t,this.enableShapeUniforms=kL(this.outputShape.length),this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ".concat(this.enableShapeUniforms?nL(["r","c","d"],t):eL(["r","c","d"],t),"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ").concat(e.output," = result;\n      }\n    ")}}class NL{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=XO.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=tL();this.outputShape=t,this.enableShapeUniforms=kL(this.outputShape.length),this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ".concat(this.enableShapeUniforms?nL(["r","c","d"],t):eL(["r","c","d"],t),"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ").concat(e.output," = result;\n      }\n    ")}}class SL{constructor(t){this.variableNames=["A"],this.outTexUsage=YO.DOWNLOAD;const e=tL();this.outputShape=t,this.userCode="\n      ".concat(rL,"\n\n      void main() {\n        float x = getAAtOutCoords();\n        ").concat(e.output," = encode_float(x);\n      }\n    ")}}class TL{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=YO.DOWNLOAD;const e=tL();this.outputShape=t,this.userCode="\n      ".concat(rL,"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ").concat(e.output," = encode_float(x);\n      }\n    ")}}const CL={R:0,G:1,B:2,A:3};class EL{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"RGBA";this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const a=tL();this.outputShape=t,this.enableShapeUniforms=kL(this.outputShape.length);let s="result";e&&(s="floor(result * 255. + 0.5)");let r="";for(let o=0;o<n.length;o++){const t=n[o];r+="\n          if(offset == ".concat(o,") {\n            result = values[").concat(CL[t],"];\n          }")}this.userCode="\n      ".concat(this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":sL(t),"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ").concat(n.length,");\n\n        flatIndex = idiv(flatIndex, ").concat(n.length,", 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ").concat(a.texture2D,"(A, uv);\n          ").concat(r,"\n        }\n        ").concat(a.output," = vec4(").concat(s,", 0., 0., 0.);\n      }\n    ")}}class AL{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=tL();this.outputShape=t,this.enableShapeUniforms=kL(this.outputShape.length);let a="",s="result";e&&(s="floor(result * 255. + 0.5)");for(let r=0;r<=1;r++)for(let e=0;e<=1;e++){const s=2*r+e;a+="\n          localCoords = coords;\n          if(localCoords[2] + ".concat(e," < ").concat(this.enableShapeUniforms?"outShape[2]":"".concat(t[2]),") {\n          localCoords[2] += ").concat(e,";\n          if (localCoords[1] + ").concat(r," < ").concat(this.enableShapeUniforms?"outShape[1]":"".concat(t[1]),") {\n            localCoords[1] += ").concat(r,";\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ").concat(n.texture2D,"(A, uv);\n\n            if (offset == 0) {\n              result[").concat(s,"] = values[0];\n            } else if (offset == 1) {\n              result[").concat(s,"] = values[1];\n            } else if (offset == 2) {\n              result[").concat(s,"] = values[2];\n            } else {\n              result[").concat(s,"] = values[3];\n            }\n          }\n        }\n        ")}this.userCode="\n        ".concat(this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":sL(t),"\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ").concat(a,"\n\n          ").concat(n.output," = ").concat(s,";\n        }\n    ")}}function RL(t){const e=tL();return iM(t,"".concat(e.version,"\n    precision highp float;\n    ").concat(e.attribute," vec3 clipSpacePos;\n    ").concat(e.attribute," vec2 uv;\n    ").concat(e.varyingVs," vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }"))}function FL(t){return fM(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function DL(t){return mM(t,new Uint16Array([0,1,2,2,1,3]))}function _L(t,e,n,a,s,r){bM(e,n);const o=yM(t),i=t.TEXTURE_2D;return eM(t,()=>t.bindTexture(i,o)),eM(t,()=>t.texParameteri(i,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),eM(t,()=>t.texParameteri(i,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),eM(t,()=>t.texParameteri(i,t.TEXTURE_MIN_FILTER,t.NEAREST)),eM(t,()=>t.texParameteri(i,t.TEXTURE_MAG_FILTER,t.NEAREST)),1===Yt().getNumber("WEBGL_VERSION")?eM(t,()=>t.texImage2D(i,0,a,e,n,0,s,r,null)):eM(t,()=>t.texStorage2D(i,1,a,e,n)),eM(t,()=>t.bindTexture(t.TEXTURE_2D,null)),{texture:o,texShape:[n,e]}}function OL(t){return t.internalFormatFloat}function ML(t,e,n,a){const[s,r]=JO(e,n);return _L(t,s,r,OL(a),a.textureFormatFloat,t.FLOAT)}function LL(t){return t.internalFormatHalfFloat}function zL(t,e,n,a){const[s,r]=JO(e,n);return _L(t,s,r,LL(a),a.textureFormatFloat,a.textureTypeHalfFloat)}function PL(t){return t.downloadTextureFormat}function BL(t,e,n,a){const[s,r]=JO(e,n);return _L(t,s,r,PL(a),t.RGBA,t.UNSIGNED_BYTE)}function WL(t){return t.internalFormatPackedFloat}function VL(t,e,n,a){const[s,r]=$O(e,n);return _L(t,s,r,WL(a),t.RGBA,t.FLOAT)}function UL(t){return t.internalFormatPackedHalfFloat}function GL(t,e,n,a){const[s,r]=$O(e,n);return _L(t,s,r,UL(a),t.RGBA,a.textureTypeHalfFloat)}function HL(t,e,n){eM(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n));return wM(t,e,"clipSpacePos",n,3,20,0)&&wM(t,e,"uv",n,2,20,12)}function jL(t,e,n,a,s,r){let o,i,c;eM(t,()=>t.bindTexture(t.TEXTURE_2D,e)),s instanceof Uint8Array?(o=new Uint8Array(n*a*4),i=t.UNSIGNED_BYTE,c=t.RGBA):(o=new Float32Array(n*a*4),i=t.FLOAT,c=r.internalFormatPackedFloat),o.set(s),2===Yt().getNumber("WEBGL_VERSION")?eM(t,()=>t.texSubImage2D(t.TEXTURE_2D,0,0,0,n,a,t.RGBA,i,o)):eM(t,()=>t.texImage2D(t.TEXTURE_2D,0,c,n,a,0,t.RGBA,i,o)),eM(t,()=>t.bindTexture(t.TEXTURE_2D,null))}function qL(t,e,n){eM(t,()=>t.bindTexture(t.TEXTURE_2D,e)),n.data instanceof Uint8Array?2===Yt().getNumber("WEBGL_VERSION")?eM(t,()=>t.texSubImage2D(t.TEXTURE_2D,0,0,0,n.width,n.height,t.RGBA,t.UNSIGNED_BYTE,n.data)):eM(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data)):2===Yt().getNumber("WEBGL_VERSION")?eM(t,()=>t.texSubImage2D(t.TEXTURE_2D,0,0,0,t.RGBA,t.UNSIGNED_BYTE,n)):eM(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)),eM(t,()=>t.bindTexture(t.TEXTURE_2D,null))}function KL(t,e,n,a){const s=t.createBuffer();eM(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s));const r=16*e*n;return eM(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,r,t.STREAM_READ)),eM(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0)),eM(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),s}function XL(t,e,n){const a=t,s=new Float32Array(n);return a.bindBuffer(a.PIXEL_PACK_BUFFER,e),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,s),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),s}function YL(t,e,n,a){const[s,r]=JO(e,n),o=new Uint8Array(e*n*4);return eM(t,()=>t.readPixels(0,0,s,r,a.downloadTextureFormat,t.UNSIGNED_BYTE,o)),new Float32Array(o.buffer)}function ZL(t,e,n,a,s,r,o,i){const c=t,l=new Float32Array(function(t,e){const[n,a]=$O(t,e);return n*a*4}(r,o));return c.bindBuffer(c.PIXEL_PACK_BUFFER,e),c.getBufferSubData(c.PIXEL_PACK_BUFFER,0,l),c.bindBuffer(c.PIXEL_PACK_BUFFER,null),l}function JL(t,e,n){const a=new Float32Array(e*n*4);return eM(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,a)),a}class QL{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=Yt().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,qO(e,t)):this.gl=KO(e),t=this.gl,2===Yt().getNumber("WEBGL_VERSION")){const e=t;this.createVertexArray=()=>eM(e,()=>e.createVertexArray()),this.bindVertexArray=t=>eM(e,()=>e.bindVertexArray(t)),this.deleteVertexArray=t=>eM(e,()=>e.deleteVertexArray(t)),this.getVertexArray=()=>eM(e,()=>e.getParameter(e.VERTEX_ARRAY_BINDING))}else if(null!=t){const e=t.getExtension("OES_vertex_array_object");if(null==e)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>eM(t,()=>e.createVertexArrayOES()),this.bindVertexArray=n=>eM(t,()=>e.bindVertexArrayOES(n)),this.deleteVertexArray=n=>eM(t,()=>e.deleteVertexArrayOES(n)),this.getVertexArray=()=>eM(t,()=>t.getParameter(e.VERTEX_ARRAY_BINDING_OES))}let n="WEBGL_color_buffer_float";const a="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===Yt().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=oM(this.gl,t),qM(this.gl,e))this.textureHalfFloatExtension=oM(this.gl,e);else if(Yt().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),qM(this.gl,a))this.colorBufferHalfFloatExtension=oM(this.gl,a);else if(Yt().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",qM(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!qM(this.gl,a))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(a)}this.vertexBuffer=FL(this.gl),this.indexBuffer=DL(this.gl),this.framebuffer=xM(this.gl),this.textureConfig=tM(this.gl,this.textureHalfFloatExtension)}get debug(){return Yt().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;eM(t,()=>t.finish()),eM(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),eM(t,()=>t.deleteFramebuffer(this.framebuffer)),eM(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),eM(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),eM(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),ML(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),zL(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),BL(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),qL(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,a){this.throwIfDisposed(),jL(this.gl,t,e,n,a,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),GL(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),VL(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(EM(this.gl,this.framebuffer),this.outputTexture=null),eM(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>YL(this.gl,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,a,s,r){return ZL(this.gl,t,0,0,0,s,r,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return XL(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const a=KL(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),a}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(Yt().getBool("WEBGL_FENCE_API_ENABLED")){const a=t,s=a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=a.clientWaitSync(s,0,0);return t===a.ALREADY_SIGNALED||t===a.CONDITION_SATISFIED},e=s}else Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>JL(this.gl,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=RL(e));const n=hM(e);eM(e,()=>e.attachShader(n,this.vertexShader)),eM(e,()=>e.attachShader(n,t)),dM(e,n);const a=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&pM(e,a),a}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);const e=this.gl;eM(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),HL(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&(eM(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&pM(this.gl,this.program),eM(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.throwIfDisposed(),n?IM(this.gl,t,e):NM(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),eM(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),SM(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[a,s]=$O(e,n);this.setOutputMatrixTextureDriver(t,a,s)}setOutputMatrixWriteRegion(t,e,n,a){this.setOutputMatrixWriteRegionDriver(n,t,a,e)}setOutputPackedMatrixWriteRegion(t,e,n,a){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&pM(this.gl,this.program),AM(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;if(this.debug){const t=this.getVertexArray();console.assert(t===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}eM(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),eM(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=oM(this.gl,2===Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await bt(()=>this.disposed||this.isQueryAvailable(t,Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),a=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),a&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in Yt().platform&&(n=Yt().platform.setTimeoutCustom.bind(Yt().platform)),bt(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,n)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),CM(this.gl,t,this.framebuffer),this.debug&&AM(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(CM(this.gl,this.outputTexture,this.framebuffer),this.debug&&AM(this.gl)):EM(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const a=this.gl;CM(a,t,this.framebuffer),this.debug&&AM(a),this.outputTexture=t,eM(a,()=>a.viewport(0,0,e,n)),eM(a,()=>a.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,a){this.throwIfDisposed(),eM(this.gl,()=>this.gl.scissor(t,e,n,a))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:$L,bincountImpl:tz,bincountReduceImpl:ez,bitwiseAndImpl:nz,castImpl:az,ceilImpl:sz,concatImpl:rz,equalImpl:oz,expImpl:iz,expm1Impl:cz,floorImpl:lz,gatherNdImpl:uz,gatherV2Impl:hz,greaterImpl:dz,greaterEqualImpl:pz,lessImpl:fz,lessEqualImpl:mz,linSpaceImpl:gz,logImpl:yz,maxImpl:bz,maximumImpl:xz,minimumImpl:wz,multiplyImpl:vz,negImpl:kz,notEqualImpl:Iz,prodImpl:Nz,raggedGatherImpl:Sz,raggedRangeImpl:Tz,raggedTensorToTensorImpl:Cz,rangeImpl:Ez,rsqrtImpl:Az,scatterImpl:Rz,sigmoidImpl:Fz,simpleAbsImpl:Dz,sliceImpl:_z,sparseFillEmptyRowsImpl:Oz,sparseReshapeImpl:Mz,sparseSegmentReductionImpl:Lz,sqrtImpl:zz,staticRegexReplaceImpl:Pz,stridedSliceImpl:Bz,stringNGramsImpl:Wz,stringSplitImpl:Vz,stringToHashBucketFastImpl:Uz,subImpl:Gz,tileImpl:Hz,topKImpl:jz,transposeImpl:qz,uniqueImpl:Kz}=q;function Xz(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>"".concat(t,".").concat(e))}function Yz(t,e){return 1===e?[t]:Xz(t,e)}class Zz{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=kL(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const t=Yz("rc",this.rank),e=gL(this.rank),n=this.getOutOfBoundsCondition(t),a=this.getSetup(t),s=this.getOutput(t);this.userCode="\n        void main() {\n          ".concat(e," rc = getOutputCoords();\n\n          if(").concat(n,") {\n            setOutput(vec4(0));\n          } else {\n            ").concat(a,"\n\n            setOutput(vec4(").concat(s,"));\n          }\n        }\n      ")}}getSourceCoordsArr(t){const e=[];for(let n=0;n<=1;n++)for(let a=0;a<=1;a++){let s="".concat(0===n?"r":"rp1",", ").concat(0===a?"c":"cp1");for(let e=2;e<this.rank;e++)s="".concat(t[t.length-1-e],",")+s;e.push(s)}return e}getOutOfBoundsCondition(t){if(1===this.rank)return"rc > ".concat(this.enableShapeUniforms?"outShape":this.outputShape[0]);let e="";for(let n=this.rank-2;n<this.rank;n++)e+="".concat(t[n]," >= ").concat(this.enableShapeUniforms?"outShape[".concat(n,"]"):this.outputShape[n]),n<this.rank-1&&(e+="||");return e}getSetup(t){if(1===this.rank)return"";const e=t.slice(-2),n=this.enableShapeUniforms?"outShape[".concat(this.rank," - 1]"):this.outputShape[this.rank-1],a=this.enableShapeUniforms?"outShape[".concat(this.rank," - 2]"):this.outputShape[this.rank-2];return"\n      int r = ".concat(e[0],";\n      int c = ").concat(e[1],";\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ").concat(n,";\n      bool rEdge = rp1 >= ").concat(a,";\n    ")}getOutput(t){const e=this.getSourceCoordsArr(t);if(1===this.rank){const t=this.enableShapeUniforms?"outShape":this.outputShape[0];return"getA(rc), (rc + 1 >= ".concat(t," ? 0. : getA(rc + 1)), 0, 0")}return"getA(".concat(e[0],"),\n            cEdge ? 0. : getA(").concat(e[1],"),\n            rEdge ? 0. : getA(").concat(e[2],"),\n            rEdge || cEdge ? 0. : getA(").concat(e[3],")")}}class Jz{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=kL(this.outputShape.length);let n="";for(let a=0;a<4;a++){let t="thisRC = rc;";a%2===1&&(t+="thisRC.z += 1;"),a>1&&(t+="thisRC.y += 1;"),n+="\n        ".concat(t,"\n        ").concat(a>0?"if(thisRC.y < rows && thisRC.z < cols){":"","\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[").concat(a,"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ").concat(a>0?"}":"","\n      ")}this.userCode="\n      ".concat(function(t,e){const n=e?aL(["r","c","d"],"inputShape"):eL(["r","c","d"],t);return"\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ".concat(n,"\n      return ivec3(r, c, d);\n    }\n  ")}(e,this.enableShapeUniforms),"\n      ").concat(this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":sL(t),"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ").concat(this.enableShapeUniforms?"outShape[1]":t[1],";\n        int cols = ").concat(this.enableShapeUniforms?"outShape[2]":t[2],";\n\n        ").concat(n,"\n\n        setOutput(result);\n      }\n    ")}}class Qz{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,n){const a=tP(e,n),s=eP(t,a,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const r=$z(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=r,this.log();const t=this.freeTextures[s].pop();return this.usedTextures[s].push(t),t}let o;return a===ZO.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):a===ZO.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):a===ZO.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):a===ZO.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):a===ZO.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=r,this.log(),o}releaseTexture(t,e,n,a){if(null==this.freeTextures)return;const s=tP(n,a),r=eP(e,s,a);r in this.freeTextures||(this.freeTextures[r]=[]);const o=$z(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,a),i=Yt().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=o):(this.freeTextures[r].push(t),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const c=this.usedTextures[r],l=c&&c.indexOf(t);if(null==l||l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");c[l]=c[c.length-1],c.pop(),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used","".concat(this.numFreeTextures," / ").concat(this.numUsedTextures),"(".concat(t,")"));const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: ".concat(this._numBytesAllocated)),console.log("Bytes unused: ".concat(this._numBytesFree," (").concat(Math.round(100*e),"%)"))}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function $z(t,e,n,a,s){const r=function(t,e){switch(t){case ZO.PACKED_2X2_FLOAT32:return WL(e);case ZO.PACKED_2X2_FLOAT16:return UL(e);case ZO.UNPACKED_FLOAT32:return OL(e);case ZO.UNPACKED_FLOAT16:return LL(e);case ZO.PACKED_4X1_UNSIGNED_BYTE:return PL(e);default:throw new Error("Unknown physical texture type ".concat(t))}}(e,a);let o;if(s){const[e,n]=$O(t[0],t[1]);o=e*n}else{const[e,n]=JO(t[0],t[1]);o=e*n}const i=function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;if(e===n.RGBA8)return 4;throw new Error("Unknown internal format ".concat(e))}(n,r);return o*i}function tP(t,e){if(t===YO.UPLOAD)return ZO.PACKED_2X2_FLOAT32;if(t===YO.RENDER||null==t)return function(t){return Yt().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?ZO.PACKED_2X2_FLOAT32:ZO.UNPACKED_FLOAT32:t?ZO.PACKED_2X2_FLOAT16:ZO.UNPACKED_FLOAT16}(e);if(t===YO.DOWNLOAD||t===YO.PIXELS)return ZO.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type ".concat(t))}function eP(t,e,n){return"".concat(t[0],"_").concat(t[1],"_").concat(e,"_").concat(n)}class nP{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=kL(this.outputShape.length),this.userCode="\n      float unaryOperation(float x) {\n        ".concat(e,"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ")}}const aP="if (isnan(x)) return x;",sP="return abs(x);";const rP=aP+"\n  return (x < 0.0) ? 0.0 : x;\n",oP=aP+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",iP="return x;";class cP{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=kL(this.outputShape.length),this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        ".concat(e,"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ")}}class lP{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=kL(this.outputShape.length);const e=t.length,n=Yz("rc",e),a=gL(e),s=function(t,e){if(1===t)return"rc";let n="";for(let a=0;a<t;a++)n+=e[a],a<t-1&&(n+=",");return n}(e,n),r=n.slice(-2),o=e<=1?"rc":"vec2(".concat(r.join(","),")");this.userCode="\n      void main() {\n        ".concat(a," rc = getOutputCoords();\n        vec4 packedInput = getA(").concat(s,");\n\n        setOutput(getChannel(packedInput, ").concat(o,"));\n      }\n    ")}}const uP=wp,hP={};const dP=Yt().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class pP extends Z{nextDataId(){return pP.nextDataId++}constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!Yt().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let e;if(null!=t){if(t instanceof QL)e=t;else{const n=KO(Yt().getNumber("WEBGL_VERSION"),t);e=new QL(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const t=KO(Yt().getNumber("WEBGL_VERSION"));e=new QL(t),this.binaryCache=((n=Yt().getNumber("WEBGL_VERSION"))in hP||(hP[n]={}),hP[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=e,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Qz(this.gpgpu),this.numMBBeforeWarning=null==Yt().global.screen?1024:Yt().global.screen.height*Yt().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Y(this,ro())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(t,e,n,a,s,r){const o=this.makeTensorInfo(e,n),i=this.texData.get(o.dataId);i.isPacked=!1,i.texture={texture:t,texShape:[a,s]},i.texShape=[a,s];const c=MM(e),l=new EL(c,!1,r),u=this.runWebGLProgram(l,[o],n,[[a,s]]);return u.shape=e,i.texture=null,this.disposeIntermediateTensorInfo(o),u.dataId}write(t,e,n){if((Yt().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Yt().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const a={id:this.nextDataId()};return this.texData.set(a,{shape:e,dtype:n,values:t,usage:YO.UPLOAD,refCount:1}),a}refCount(t){if(this.texData.has(t)){return this.texData.get(t).refCount}return 0}incRef(t){this.texData.get(t).refCount++}decRef(t){if(this.texData.has(t)){this.texData.get(t).refCount--}}move(t,e,n,a,s){if(Yt().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:a,values:e,usage:YO.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}readSync(t){const e=this.texData.get(t),{values:n,dtype:a,complexTensorInfos:s,slice:r,shape:o,isPacked:i}=e;if(null!=r){let e;e=i?new cP(o,iP):new nP(o,iP);const n=this.runWebGLProgram(e,[{dataId:t,shape:o,dtype:a}],a),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===a)return n;const c=null!=this.activeTimers;let l,u;if(c&&(l=Ys()),"complex64"===a){u=bm(this.readSync(s.real.dataId),this.readSync(s.imag.dataId))}else u=this.getValuesFromTexture(t);return c&&(this.downloadWaitMs+=Ys()-l),this.convertAndCacheOnCPU(t,u)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:n,shape:a,slice:s,dtype:r,complexTensorInfos:o,isPacked:i}=e;if(null!=s){let e;e=i?new cP(a,iP):new nP(a,iP);const n=this.runWebGLProgram(e,[{dataId:t,shape:a,dtype:r}],r),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(Yt().getBool("DEBUG")&&!Yt().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Yt().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let c,l,u=null;if("complex64"!==r&&Yt().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(t);const e=this.texData.get(c.dataId);u=this.gpgpu.createBufferFromTexture(e.texture.texture,...QO(a))}if(this.pendingRead.set(t,[]),"complex64"!==r&&await this.gpgpu.createAndWaitForFence(),"complex64"===r){const t=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);l=bm(t[0],t[1])}else if(null==u)l=this.getValuesFromTexture(t);else{const t=lt(a);l=this.gpgpu.downloadFloat32MatrixFromBuffer(u,t)}if(null!=c&&this.disposeIntermediateTensorInfo(c),null!=u){const t=this.gpgpu.gl;eM(t,()=>t.deleteBuffer(u))}const h=this.convertAndCacheOnCPU(t,l),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach(t=>t(h)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)&&ro().removeDataId(t,this),this.pendingDeletes--),h}readToGPU(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=this.texData.get(t),{values:a,shape:s,slice:r,dtype:o,isPacked:i,texture:c}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=r){let n;n=i?new cP(s,iP):new nP(s,iP);const a=this.runWebGLProgram(n,[{dataId:t,shape:s,dtype:o}],o),r=this.readToGPU(a,e);return this.disposeIntermediateTensorInfo(a),r}if(null==c)throw null!=a?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(t,e.customTexShape),u=ro().makeTensorFromTensorInfo(l),h=this.texData.get(l.dataId);return Object.assign({tensorRef:u},h.texture)}bufferSync(t){const e=this.readSync(t.dataId);if("string"===t.dtype)try{const n=e.map(t=>Qs(t));return Ni(t.shape,t.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ni(t.shape,t.dtype,e)}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!sM(n)){if(Yt().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value ".concat(n," cannot be represented with your ")+"current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value ".concat(n," cannot be represented on this device."))}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:a}=this.texData.get(t),s=lt(e);if(Yt().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),a=this.texData.get(n.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(a.texture.texture,...QO(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),r}const r=Yt().getBool("WEBGL_PACK")&&!0===a,o=r?MM(e):e,i=r?new TL(o):new SL(o),c=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:t}],"float32"),l=this.texData.get(c.dataId),u=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(c),u}timerAvailable(){return Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(t){const e=this.activeTimers,n=[];let a=!1;null==this.programTimersStack?(this.programTimersStack=n,a=!0):this.activeTimers.push(n),this.activeTimers=n,t();const s=tr(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),r=tr(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,a&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(s);o.kernelMs=at(t),o.getExtraProfileInfo=()=>t.map((t,e)=>({name:r[e],ms:t})).map(t=>"".concat(t.name,": ").concat(t.ms)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Ys(),endMs:null}}endTimer(t){return Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=Ys(),t)}async getQueryTime(t){if(Yt().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.pendingDisposal.has(t))return!1;if(!this.texData.has(t))return!0;if(e?this.texData.get(t).refCount=0:this.texData.get(t).refCount--,!e&&this.texData.get(t).refCount>0)return!1;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),this.pendingDeletes++,!1;this.releaseGPUData(t);const{complexTensorInfos:n}=this.texData.get(t);return null!=n&&(this.disposeData(n.real.dataId,e),this.disposeData(n.imag.dataId,e)),this.texData.delete(t),!0}releaseGPUData(t){const{texture:e,dtype:n,texShape:a,usage:s,isPacked:r,slice:o}=this.texData.get(t),i=o&&o.origDataId||t,c=this.dataRefCount.get(i);c>1?this.dataRefCount.set(i,c-1):(this.dataRefCount.delete(i),null!=e&&(this.numBytesInGPU-=this.computeBytes(a,n),this.textureManager.releaseTexture(e,a,s,r)));const l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture.texture}getDataInfo(t){return this.texData.get(t)}shouldExecuteOnCPU(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:dP;return Yt().getBool("WEBGL_CPU_FORWARD")&&t.every(t=>null==this.texData.get(t.dataId).texture&&lt(t.shape)<e)}getGPGPUContext(){return this.gpgpu}where(t){xs("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return uP(t.shape,e)}packedUnaryOp(t,e,n){const a=new cP(t.shape,e),s=this.compileAndRun(a,[t],n);return ro().makeTensorFromTensorInfo(s)}abs(t){if(this.shouldExecuteOnCPU([t])&&"complex64"!==t.dtype){const e=Dz(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,e)}if(Yt().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,sP,t.dtype);const e=new nP(t.shape,sP),n=this.compileAndRun(e,[t]);return ro().makeTensorFromTensorInfo(n)}makeTensorInfo(t,e,n){let a;if("string"===e&&null!=n&&n.length>0&&At(n[0])){const s=n.map(t=>Js(t));a=this.write(s,t,e)}else a=this.write(n,t,e);return this.texData.get(a).usage=null,{dataId:a,shape:t,dtype:e}}makeOutput(t,e,n){return ro().makeTensorFromTensorInfo(this.makeTensorInfo(t,e,n),this)}unpackTensor(t){const e=new lP(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new Zz(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[_M(t.shape),...OM(t.shape)],a={dtype:t.dtype,shape:n,dataId:t.dataId},s=[_M(e),...OM(e)],r=new Jz(s,n),o=[n],i=this.runWebGLProgram(r,[a],t.dtype,o,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t,e){const n=this.texData.get(t),{isPacked:a,shape:s,dtype:r}=n;if(null!=e){ot(lt(s)<=e[0]*e[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}const o=MM(s);let i;i=a?new NL(o):new IL(o);const c=[null!=e?e:QO(o)];return{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:o,dtype:r,dataId:t}],r,c,!0,e).dataId}}runWebGLProgram(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5?arguments[5]:void 0;const o=this.makeTensorInfo(t.outputShape,n),i=this.texData.get(o.dataId);if(t.packedOutput&&(i.isPacked=!0),t.outPackingScheme===XO.DENSE){const e=null!=r?r:QO(t.outputShape);i.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(i.usage=t.outTexUsage),0===lt(o.shape))return i.values=kt(o.dtype,0),o;const c=[],l=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&lt(e.shape)<=Yt().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}if(this.uploadToGPU(e.dataId),!!n.isPacked!==!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),c.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!PM(n.shape,e.shape)){const t=e,a=e.shape;e.shape=n.shape,e=this.packedReshape(e,a),c.push(e),n=this.texData.get(e.dataId),t.shape=a}return{shape:e.shape,texData:n,isUniform:!1}});this.uploadToGPU(o.dataId);const u={shape:o.shape,texData:i,isUniform:!1},h=function(t,e,n){let a="";e.concat(n).forEach(e=>{const s=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0;if(t.enableShapeUniforms&&!e.isUniform){const r=e.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:c}=yL(t.packedInputs,e.shape,r);let l="",u="",h="";if(1===i.length&&t.packedInputs){const t=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];l="".concat(t[0]>1,"_").concat(t[1]>1)}else if(2!==i.length||t.packedInputs){if(i.length>2&&!t.packedInputs){const t=Mt(i);h="".concat(t[0]===r[1],"_").concat(t[t.length-1]===r[1])}}else u="".concat(i[0]>1,"_").concat(i[1]>1);const d=e.shape.length,p=2===i.length&&dt(e.shape,r),f=1===lt(e.shape),m=ac(e.shape,n.shape),g=!t.packedInputs&&d===n.shape.length&&dt(r,n.texData.texShape),y=t.packedInputs||i.length>2?"":"".concat(r[0]>1,"_").concat(r[1]>1);a+="".concat(d,"_").concat(g,"_").concat(o?c:"","_").concat(i.length,"_").concat(f,"_").concat(m,"_").concat(p,"_").concat(l,"_").concat(u,"_").concat(h,"_").concat(y,"_").concat(s)}else{const t=e.isUniform?"uniform":e.texData.texShape;a+="".concat(e.shape,"_").concat(t,"_").concat(s)}});const s=t.userCode;let r=t.constructor.name;return r+="_"+a+"_"+s+"".concat(Yt().getNumber("WEBGL_VERSION")),r}(t,l,u),d=this.getAndSaveBinary(h,()=>function(t,e,n,a){const s=n.map((t,n)=>{const a={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(a.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:a}}),r=s.map(t=>t.shapeInfo),o={logicalShape:a.shape,texShape:a.texData.texShape,isUniform:!1,isPacked:a.texData.isPacked,flatOffset:null},i=iL(s,o,e),c=cM(t.gl,i),l=t.createProgram(c);return Yt().get("ENGINE_COMPILE_ONLY")?{program:e,fragmentShader:c,source:i,webGLProgram:l,inShapeInfos:r,outShapeInfo:o,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(t.buildVao(l),Object.assign({program:e,fragmentShader:c,source:i,webGLProgram:l,inShapeInfos:r,outShapeInfo:o},wL(t,e,l)))}(this.gpgpu,t,l,u)),p=null!=this.activeTimers;let f;p&&(f=this.startTimer()),Yt().get("ENGINE_COMPILE_ONLY")||function(t,e,n,a,s){e.program.enableShapeUniforms||(vL(e.inShapeInfos,n),vL([e.outShapeInfo],[a]));const r=a.texData.texture,o=a.texData.texShape;a.texData.isPacked?t.setOutputPackedMatrixTexture(r.texture,o[0],o[1]):t.setOutputMatrixTexture(r.texture,o[0],o[1]),t.setProgram(e.webGLProgram),t.bindVertexArray(e.webGLProgram.vao),1===Yt().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN);for(let c=0;c<n.length;++c){const a=n[c],{uniform:s,offset:r,shape:o,texShape:i}=e.variablesLocations[c];if(o){const{uniformShape:n}=yL(e.program.packedInputs,a.shape,a.texData.texShape);switch(n.length){case 1:t.gl.uniform1iv(o,new Int32Array(n));break;case 2:t.gl.uniform2iv(o,new Int32Array(n));break;case 3:t.gl.uniform3iv(o,new Int32Array(n));break;case 4:t.gl.uniform4iv(o,new Int32Array(n))}}if(i&&t.gl.uniform2i(i,a.texData.texShape[0],a.texData.texShape[1]),null!=s)if(a.isUniform)if(lt(a.shape)<2)t.gl.uniform1f(s,a.uniformValues[0]);else{let e=a.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(s,e)}else null!=a.texData.slice&&null!=r&&t.gl.uniform1i(r,a.texData.slice.flatOffset),t.setInputMatrixTexture(a.texData.texture.texture,s,c)}const i=e.outShapeLocation;if(i)switch(a.shape.length){case 1:t.gl.uniform1iv(i,new Int32Array(a.shape));break;case 2:t.gl.uniform2iv(i,new Int32Array(a.shape));break;case 3:t.gl.uniform3iv(i,new Int32Array(a.shape));break;case 4:t.gl.uniform4iv(i,new Int32Array(a.shape))}if(e.outShapeStridesLocation){const n=Mt(a.shape);switch(a.shape.length){case 2:t.gl.uniform1iv(e.outShapeStridesLocation,new Int32Array(n));break;case 3:t.gl.uniform2iv(e.outShapeStridesLocation,new Int32Array(n));break;case 4:t.gl.uniform3iv(e.outShapeStridesLocation,new Int32Array(n))}}if(e.outTexShapeLocation&&t.gl.uniform2i(e.outTexShapeLocation,a.texData.texShape[0],a.texData.texShape[1]),e.program.customUniforms&&s)for(let c=0;c<e.program.customUniforms.length;++c){const n=e.program.customUniforms[c],a=e.customUniformLocations[c],r=s[c];if("float"===n.type)t.gl.uniform1fv(a,r);else if("vec2"===n.type)t.gl.uniform2fv(a,r);else if("vec3"===n.type)t.gl.uniform3fv(a,r);else if("vec4"===n.type)t.gl.uniform4fv(a,r);else if("int"===n.type)t.gl.uniform1iv(a,r);else if("ivec2"===n.type)t.gl.uniform2iv(a,r);else if("ivec3"===n.type)t.gl.uniform3iv(a,r);else{if("ivec4"!==n.type)throw Error("uniform type ".concat(n.type," is not supported yet."));t.gl.uniform4iv(a,r)}}t.executeProgram()}(this.gpgpu,d,l,u,a),c.forEach(t=>this.disposeIntermediateTensorInfo(t)),p&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)}));const m=Yt().getNumber("WEBGL_FLUSH_THRESHOLD");if(m>0){const t=Ys();t-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=t)}if(!Yt().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const t=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),t}return o}compileAndRun(t,e,n,a){let s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];n=n||e[0].dtype;return this.runWebGLProgram(t,e,n,a,s)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Yt().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!==typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=co(()=>{if(!Yt().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=Yt().getBool("DEBUG");Yt().set("DEBUG",!1);const e=this.abs(Ui(1e-8)).dataSync()[0];if(Yt().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:a,values:s,texture:r,usage:o,isPacked:i}=e;if(null!=r)return;const c=null!=this.activeTimers;let l;c&&(l=Ys());let u=e.texShape;if(null==u&&(u=LM(n,i),e.texShape=u),null!=s){const t=MM(n);let r,o=u[1],h=u[0];const d=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!i&&d||([o,h]=$O(u[0],u[1])),r=i?new AL(t,d):new EL(t,d);const p=d?[h,o]:u,f=this.makeTensorInfo(p,a),m=this.texData.get(f.dataId);m.usage=d?YO.PIXELS:YO.UPLOAD,m.texShape=p,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,h,s);const g=[[h,o]],y=!0,b=this.runWebGLProgram(r,[f],a,g,y),x=this.texData.get(b.dataId);e.texShape=x.texShape,e.isPacked=x.isPacked,e.usage=x.usage,Yt().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(e.texture=x.texture,e.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),c&&(this.uploadWaitMs+=Ys()-l)}else{const t=this.acquireTexture(u,o,a,i);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:a}=n;return null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype ".concat(e))}(e,a)),n.values}acquireTexture(t,e,n,a){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: ".concat(t," MB, ")+"most likely due to a memory leak")}return this.textureManager.acquireTexture(t,e,a)}computeBytes(t,e){return t[0]*t[1]*Ct(e)}checkCompileCompletion(){for(const[,t]of Object.entries(this.binaryCache))this.checkCompletion_(t)}async checkCompileCompletionAsync(){const t=[];if(this.gpgpu.parallelCompilationExtension){for(const[,e]of Object.entries(this.binaryCache))t.push(this.checkCompletionAsync_(e));return Promise.all(t)}for(const[,e]of Object.entries(this.binaryCache)){const n=new Promise(t=>{try{this.checkCompletion_(e),t(!0)}catch(n){throw n}});t.push(n)}return Promise.all(t)}async checkCompletionAsync_(t){return this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(t):(await Xf(),this.checkCompletionAsync_(t))}checkCompletion_(t){if(!1===this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(t.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw uM(t.source,this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const t of Object.values(this.binaryCache)){this.gpgpu.buildVao(t.webGLProgram);const{variablesLocations:e,customUniformLocations:n,infLoc:a,nanLoc:s,outShapeLocation:r,outShapeStridesLocation:o,outTexShapeLocation:i}=wL(this.gpgpu,t.program,t.webGLProgram);t.variablesLocations=e,t.customUniformLocations=n,t.infLoc=a,t.nanLoc=s,t.outShapeLocation=r,t.outShapeStridesLocation=o,t.outTexShapeLocation=i}}createTensorFromGPUData(t,e,n){t.channels=t.channels||"RGBA";const{texture:a,height:s,width:r,channels:o}=t,i=ro().backend;if(!i.gpgpu.gl.isTexture(a))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=i.writeTexture(a,e,n,s,r,o);return ro().makeTensorFromDataId(c,e,n,i)}}pP.nextDataId=0;const fP="4.22.0";function mP(){Yt().set("WEBGL_FORCE_F16_TEXTURES",!0)}Wr()&&xo("webgl",()=>new pP,2);const gP={forceHalfFloat:mP},yP="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class bP{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=rc(e,n),this.enableShapeUniforms=kL(this.outputShape.length),this.userCode="\n      float binaryOperation(float a, float b) {\n        ".concat(t,"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ")}}const xP="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class wP{constructor(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=rc(e,n);const s=this.outputShape.length;this.enableShapeUniforms=kL(s);let r="";if(a)if(0===s||1===lt(this.outputShape))r="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{const t=gL(s);if(r="\n          ".concat(t," coords = getOutputCoords();\n        "),1===s)this.enableShapeUniforms?r+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":r+="\n            result.y = (coords + 1) >= ".concat(this.outputShape[0]," ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ");else{const t=Yz("coords",s);this.enableShapeUniforms?r+="\n            bool nextRowOutOfBounds =\n              (".concat(t[s-2]," + 1) >= outShape[").concat(s," - 2];\n            bool nextColOutOfBounds =\n              (").concat(t[s-1]," + 1) >= outShape[").concat(s," - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "):r+="\n            bool nextRowOutOfBounds =\n              (".concat(t[s-2]," + 1) >= ").concat(this.outputShape[s-2],";\n            bool nextColOutOfBounds =\n              (").concat(t[s-1]," + 1) >= ").concat(this.outputShape[s-1],";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ")}}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ".concat(t,"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ").concat(r,"\n\n        setOutput(result);\n      }\n    ")}}function vP(t){const{inputs:e,backend:n}=t,{x:a}=e;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const kP={kernelName:yn,backendName:"webgl",kernelFunc:vP};function IP(t){const{inputs:e,backend:n}=t,{real:a,imag:s}=e,r=n.makeTensorInfo(a.shape,"complex64"),o=n.texData.get(r.dataId),i=vP({inputs:{x:a},backend:n}),c=vP({inputs:{x:s},backend:n});return o.complexTensorInfos={real:i,imag:c},r}const NP={kernelName:Ce,backendName:"webgl",kernelFunc:IP},SP="return (a < 0.) ? b * a : a;",TP="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const CP={kernelName:In,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{alpha:r}=a,o=n.makeTensorInfo([],"float32",Ks(r,"float32")),i=Yt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wP(TP,s.shape,o.shape):new bP(SP,s.shape,o.shape),c=n.runWebGLProgram(i,[s,o],"float32");return n.disposeIntermediateTensorInfo(o),c}},EP="return (a < 0.) ? b * a : a;",AP="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const RP={kernelName:la,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:a,alpha:s}=e,r=Yt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wP(AP,a.shape,s.shape):new bP(EP,a.shape,s.shape);return n.runWebGLProgram(r,[a,s],"float32")}},FP="if (isnan(x)) return x;";function DP(t){let{opSnippet:e,packedOpSnippet:n,cpuKernelImpl:a,dtype:s}=t;return t=>{let{inputs:r,backend:o}=t;const{x:i}=r,c=o,l=s||i.dtype;if(c.shouldExecuteOnCPU([i])&&null!=a){const t=c.texData.get(i.dataId),e=a(t.values,l);return c.makeTensorInfo(i.shape,l,e)}let u;return u=Yt().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=n?new cP(i.shape,n):new nP(i.shape,e),c.runWebGLProgram(u,[i],l)}}function _P(t){let{opSnippet:e,packedOpSnippet:n,checkOutOfBounds:a=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:o}=t;return t=>{let{inputs:i,backend:c}=t;const{a:l,b:u}=i,h=c;if(s&&"complex64"===l.dtype){const t=h.texData.get(l.dataId),n=h.texData.get(u.dataId),[a,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,a]=t,s={dataId:n.dataId,dtype:n.dtype,shape:l.shape},r={dataId:a.dataId,dtype:a.dtype,shape:u.shape},o=new bP(e,l.shape,u.shape);return h.runWebGLProgram(o,[s,r],kr(n.dtype,a.dtype))}),r=IP({inputs:{real:a,imag:s},backend:h});return h.disposeIntermediateTensorInfo(a),h.disposeIntermediateTensorInfo(s),r}const d=o||kr(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||h.shouldExecuteOnCPU([l,u]))&&null!=r){const t=h.texData.get(l.dataId).values,e=h.texData.get(u.dataId).values,n="string"===l.dtype?Qm(t):t,a="string"===l.dtype?Qm(e):e,[s,o]=r(l.shape,u.shape,n,a,d),i=h.makeTensorInfo(o,d);return h.texData.get(i.dataId).values=s,i}let p;return p=Yt().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=n?new wP(n,l.shape,u.shape,a):new bP(e,l.shape,u.shape),h.runWebGLProgram(p,[l,u],d)}}function OP(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("linear"===t)return"return x;";if("relu"===t)return e?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":rP;if("elu"===t)return e?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===t)return e?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":oP;if("prelu"===t)return e?AP:EP;if("leakyrelu"===t)return e?TP:SP;if("sigmoid"===t)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error("Activation ".concat(t," has not been implemented for the WebGL backend."))}class MP{constructor(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,i=arguments.length>7&&void 0!==arguments[7]&&arguments[7],c=arguments.length>8&&void 0!==arguments[8]&&arguments[8];this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=kL(this.outputShape.length);const l=a?t[1]:t[2],u=Math.ceil(l/2),h=a?"i * 2, rc.y":"rc.y, i * 2",d=s?"rc.z, i * 2":"i * 2, rc.z",p=a?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ".concat(o,"\n        }"):c?"vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ".concat(o,"\n        }"):"vec4 activation(vec4 x) {\n          ".concat(o,"\n        }"),g="result = activation(result);");const y=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),c&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";t[0]<e[0]?b="imod(rc.x, ".concat(t[0],")"):e[0]<t[0]&&(x="imod(rc.x, ".concat(e[0],")")),this.userCode="\n      ".concat(m,"\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ").concat(u,".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ").concat(b,";\n        int batchB = ").concat(x,";\n        for (int i = 0; i < ").concat(u,"; i++) {\n          vec4 a = getMatrixA(batchA, ").concat(h,");\n          vec4 b = getMatrixB(batchB, ").concat(d,");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (").concat(p[0]," * ").concat(f[0],");\n          result += (").concat(p[1]," * ").concat(f[1],");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ").concat(y,"\n\n        ").concat(g,"\n\n        setOutput(result);\n      }\n    ")}}const LP="return areal * breal - aimag * bimag;",zP="return areal * bimag + aimag * breal;";class PP{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=rc(e,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ".concat(t,"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ")}}const BP="return a * b;";function WP(t){const{inputs:e,backend:n}=t,{a:a,b:s}=e,r=kr(a.dtype,s.dtype);if("complex64"===a.dtype){const t=n.texData.get(a.dataId),e=n.texData.get(s.dataId),r=new PP(LP,a.shape,s.shape),o=new PP(zP,a.shape,s.shape),i=[{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape}],c=n.runWebGLProgram(r,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),u=IP({inputs:{real:c,imag:l},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(l),u}if(n.shouldExecuteOnCPU([a,s])){const t=n.texData.get(a.dataId),e=n.texData.get(s.dataId),[o,i]=vz(a.shape,s.shape,t.values,e.values,r),c=n.makeTensorInfo(i,r);return n.texData.get(c.dataId).values=o,c}let o;return o=Yt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wP(BP,a.shape,s.shape):new bP(BP,a.shape,s.shape),n.runWebGLProgram(o,[a,s],r)}const VP={kernelName:Jn,backendName:"webgl",kernelFunc:WP};function UP(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{shape:r}=a,o=n,i=lt(s.shape),c=xt(r,i),l=lt(c);ot(i===l,()=>"The new shape (".concat(c,") has ").concat(l," elements and the old ")+"shape (".concat(s.shape,") has ").concat(i," elements. The new shape and old ")+"shape must have the same number of elements.");const u=o.texData.get(s.dataId);return!u.isPacked||PM(s.shape,c)||null!==u.texture&&PM(u.shape,c)?(o.incRef(s.dataId),{dataId:s.dataId,shape:c,dtype:s.dtype}):function(t,e,n){const a=[_M(t.shape),...OM(t.shape)],s={dtype:t.dtype,shape:a,dataId:t.dataId},r=[_M(e),...OM(e)],o=new Jz(r,a),i=[a],c=n.runWebGLProgram(o,[s],t.dtype,i,!0);return{dataId:c.dataId,shape:e,dtype:c.dtype}}(s,c,o)}const GP={kernelName:ba,backendName:"webgl",kernelFunc:UP};class HP{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:a,inSize:s,outSize:r}=t;this.outputShape=[a,r];const o=4*Math.floor(n/4),i=n%4;let c="sumValue += dot(values, ones);";if(null!=e){const t=1/e;c="sumValue += dot(values * ".concat(pt(t)?t.toPrecision(2):t,", ones);")}let l="";s%n>0&&(l="\n        if (inIdx < 0 || inIdx >= ".concat(s,") {\n          return 0.0;\n        }\n      ")),this.userCode="\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ".concat(l,"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ").concat(n,";\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ").concat(o,"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ").concat(c,"\n        }\n\n        int inIdx = inOffset + ").concat(o,";\n        if (").concat(1===i,") {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ").concat(c,"\n        } else if (").concat(2===i,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ").concat(c,"\n        } else if (").concat(3===i,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ").concat(c,"\n        }\n        setOutput(sumValue);\n      }\n    ")}}class jP{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:a,inSize:s,outSize:r}=t;this.outputShape=[a,r];let o="0.0",i="";"prod"===e?o="1.0":"min"===e?(o="1.0 / 1e-20",i="min"):"max"===e&&(o="-1.0 / 1e-20",i="max");let c="".concat(e,"(").concat(e,"(").concat(e,"(")+"minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===e?c="sumValue":"prod"===e?c="prodValue":"all"===e?c="allValue":"any"===e&&(c="anyValue");const l=4*Math.floor(n/4),u=n%4;let h="\n      if (".concat("sum"===e,") {\n        sumValue += dot(values, ones);\n      } else if (").concat("prod"===e,") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ").concat(i,"(values, minMaxValue);\n        if (").concat("min"===e," || ").concat("max"===e,") {\n          minMaxValue = ").concat(i,"(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    "),d="vec4";"all"===e?(o="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===e&&(o="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";s%n>0&&(p="\n        if (inIdx < 0 || inIdx >= ".concat(s,") {\n          return initializationValue;\n        }\n      ")),this.userCode="\n      const float initializationValue = ".concat(o,";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ").concat(p,"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ").concat(n,";\n\n        vec4 minMaxValue = vec4(").concat(o,");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ").concat(l,"; i += 4) {\n          int inIdx = inOffset + i;\n          ").concat(d," values = ").concat(d,"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ").concat(h,"\n        }\n\n        int inIdx = inOffset + ").concat(l,";\n        if (").concat(1===u,") {\n          ").concat(d," values = ").concat(d,"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ").concat(h,"\n        } else if (").concat(2===u,") {\n          ").concat(d," values = ").concat(d,"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ").concat(h,"\n        } else if (").concat(3===u,") {\n          ").concat(d," values = ").concat(d,"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ").concat(h,"\n        }\n        setOutput(").concat(c,");\n      }\n    ")}}function qP(t,e,n,a){const s=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],a=am(n);e.push({inSize:n,windowSize:a,outSize:Math.ceil(n/a)})}return e}(t.shape);let r=t;for(let o=0;o<s.length;o++){const{inSize:i,windowSize:c,outSize:l}=s[o];let u,h;u="mean"===n?0===o?new HP({windowSize:c,inSize:i,batchSize:t.shape[0],outSize:l},i):new HP({windowSize:c,inSize:i,batchSize:t.shape[0],outSize:l}):new jP({windowSize:c,inSize:i,batchSize:t.shape[0],outSize:l},n),h=r,r=a.runWebGLProgram(u,[r],e),h.dataId!==t.dataId&&a.disposeIntermediateTensorInfo(h)}return r}class KP{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const a=gL(this.rank),s=function(t){const e=t.length;if(e>6)throw Error("Transpose for rank ".concat(e," is not yet supported"));const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],a=new Array(e);for(let s=0;s<t.length;s++)a[t[s]]=n[s];return a.join()}(e);this.userCode="\n    void main() {\n      ".concat(a," resRC = getOutputCoords();\n      setOutput(getA(").concat(s,"));\n    }\n    ")}}class XP{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let l=0;l<n.length;l++)n[l]=t[e[l]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error("Packed transpose for rank ".concat(this.rank," is not yet supported."));const a=gL(this.rank),s=Xz("rc",this.rank),r=new Array(this.rank);for(let l=0;l<e.length;l++)r[e[l]]=s[l];const o="vec2(".concat(r.slice(-2).join(),")"),i="++".concat(s[this.rank-1]," < ").concat(n[this.rank-1]),c="getChannel(getA(".concat(r.join(),"), ").concat(o,")");this.userCode="\n    void main() {\n      ".concat(a," rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ").concat(c,";\n      if(").concat(i,") {\n        result[1] = ").concat(c,";\n      }\n      --").concat(s[this.rank-1],";\n      if(++").concat(s[this.rank-2]," < ").concat(n[this.rank-2],") {\n        result[2] = ").concat(c,";\n        if(").concat(i,") {\n          result[3] = ").concat(c,";\n        }\n      }\n      setOutput(result);\n    }\n    ")}}function YP(t,e,n){const a=Yt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new XP(t.shape,e):new KP(t.shape,e);return n.runWebGLProgram(a,[t],t.dtype)}function ZP(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a;return function(t,e,n,a){const s=e,r=t.shape.length,o=wt(s,t.shape);let i=o;const c=rh(i,r),l=null!=c;let u=t;l&&(u=YP(t,c,a),i=ih(i.length,r)),sh("sum",i,r);const[h,d]=nh(u.shape,i);let p=h;n&&(p=ah(h,o));const f=lt(d),m=UP({inputs:{x:u},attrs:{shape:[lt(t.shape)/f,f]},backend:a}),g=qP(m,Ir(t.dtype),"sum",a),y=UP({inputs:{x:g},attrs:{shape:p},backend:a});return a.disposeIntermediateTensorInfo(m),a.disposeIntermediateTensorInfo(g),l&&a.disposeIntermediateTensorInfo(u),y}(s,r,o,n)}const JP={kernelName:Ba,backendName:"webgl",kernelFunc:ZP};function QP(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{perm:r}=a,o=n,i=s.shape.length,c=new Array(i);for(let u=0;u<c.length;u++)c[u]=s.shape[r[u]];let l;if(o.shouldExecuteOnCPU([s])){const t=o.texData.get(s.dataId).values,e=qz(t,s.shape,s.dtype,r,c);l=o.makeTensorInfo(c,s.dtype);o.texData.get(l.dataId).values=e}else l=YP(s,r,o);return l}const $P={kernelName:is,backendName:"webgl",kernelFunc:QP};function tB(t){let{a:e,b:n,transposeA:a,transposeB:s,backend:r,bias:o=null,preluActivationWeights:i=null,leakyreluAlpha:c=0,activation:l=null}=t;const u=e.shape.length,h=n.shape.length,d=a?e.shape[u-2]:e.shape[u-1],p=s?n.shape[h-1]:n.shape[h-2],f=a?e.shape[u-1]:e.shape[u-2],m=s?n.shape[h-2]:n.shape[h-1],g=e.shape.slice(0,-2),y=n.shape.slice(0,-2),b=lt(g),x=lt(y),w=rc(e.shape.slice(0,-2),n.shape.slice(0,-2)).concat([f,m]);ot(d===p,()=>"Error in matMul: inner shapes (".concat(d,") and (")+"".concat(p,") of Tensors with shapes ").concat(e.shape," and ")+"".concat(n.shape," and transposeA=").concat(a)+" and transposeB=".concat(s," must match."));const v=a?[b,d,f]:[b,f,d],k=s?[x,m,p]:[x,p,m],I=UP({inputs:{x:e},backend:r,attrs:{shape:v}}),N=UP({inputs:{x:n},backend:r,attrs:{shape:k}}),S=[I,N],T=Math.max(b,x),C=a?I.shape[1]:I.shape[2],E=null!=o,A=null!=i,R="leakyrelu"===l,F=null!=l?OP(l,!0):null;let D;if((1===f||1===m)&&C>1e3&&!1===(E||A||R||null!=F)){let t=I,e=N;a&&(t=QP({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),S.push(t)),s&&(e=QP({inputs:{x:N},backend:r,attrs:{perm:[0,2,1]}}),S.push(e));const n=1===m;let o=t;1!==m&&(o=UP({inputs:{x:t},backend:r,attrs:{shape:[T,C,1]}}),S.push(o));const i=1===m?2:1;let c=e;n&&(c=UP({inputs:{x:e},backend:r,attrs:{shape:[T,1,C]}}),S.push(c));const l=WP({inputs:{a:o,b:c},backend:r});D=ZP({inputs:{x:l},backend:r,attrs:{axis:i,keepDims:!0}}),S.push(l)}else{const t=kr(e.dtype,n.dtype),l=new MP(v,k,[T,f,m],a,s,E,F,A,R),u=[I,N];if(null!=o&&u.push(o),A&&u.push(i),R){const t=r.makeTensorInfo([],"float32",Ks(c,"float32"));u.push(t),S.push(t)}D=r.runWebGLProgram(l,u,t)}const _=UP({inputs:{x:D},backend:r,attrs:{shape:w}});S.push(D);for(const O of S)r.disposeIntermediateTensorInfo(O);return _}const eB={kernelName:gs,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{a:s,b:r,bias:o,preluActivationWeights:i}=e,{transposeA:c,transposeB:l,activation:u,leakyreluAlpha:h}=a;return tB({a:s,b:r,transposeA:c,transposeB:l,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:h,activation:u})}},nB="return abs(x);";const aB={kernelName:te,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:a}=e;if(n.shouldExecuteOnCPU([a])&&"complex64"!==a.dtype){const t=n.texData.get(a.dataId),e=Dz(t.values);return n.makeTensorInfo(a.shape,a.dtype,e)}let s;return s=Yt().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new cP(a.shape,nB):new nP(a.shape,nB),n.runWebGLProgram(s,[a],a.dtype)}},sB=DP({opSnippet:aP+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),rB={kernelName:ee,backendName:"webgl",kernelFunc:sB},oB=DP({opSnippet:aP+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),iB={kernelName:ne,backendName:"webgl",kernelFunc:oB},cB="return a + b;",lB=_P({opSnippet:cB,packedOpSnippet:cB,supportsComplex:!0,cpuKernelImpl:$L}),uB={kernelName:ae,backendName:"webgl",kernelFunc:lB};class hB{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T".concat(e));const n=[];this.variableNames.forEach(t=>{n.push("float v".concat(t," = get").concat(t,"AtOutCoords();"))});const a=this.variableNames.map(t=>"v".concat(t)).join(" + ");this.userCode="\n      void main() {\n        ".concat(n.join("\n        "),"\n\n        float result = ").concat(a,";\n        setOutput(result);\n      }\n    ")}}class dB{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T".concat(e));const n=[];this.variableNames.forEach(t=>{n.push("vec4 v".concat(t," = get").concat(t,"AtOutCoords();"))});const a=this.variableNames.map(t=>"v".concat(t)).join(" + ");this.userCode="\n      void main() {\n        ".concat(n.join("\n        "),"\n\n        vec4 result = ").concat(a,";\n        setOutput(result);\n      }\n    ")}}const pB={kernelName:se,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:a}=e,s=n;if(1===s.length)return vP({inputs:{x:s[0]},backend:a});if(s.length>Yt().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(s.length/2),n=t({inputs:s.slice(0,e),backend:a}),r=t({inputs:s.slice(e),backend:a});return t({inputs:[n,r],backend:a})}const r=s.map(t=>t.dtype).reduce((t,e)=>kr(t,e)),o=s.map(t=>t.shape),i=Yt().getBool("WEBGL_PACK")?new dB(s[0].shape,o):new hB(s[0].shape,o);return a.runWebGLProgram(i,s,r)}};const fB={kernelName:re,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a,i=s.shape.length,c=wt(r,s.shape);let l=c;const u=rh(l,i);let h=s;null!=u&&(h=QP({inputs:{x:s},backend:n,attrs:{perm:u}}),l=ih(l.length,i)),sh("all",l,i);const[d,p]=nh(h.shape,l),f=UP({inputs:{x:h},backend:n,attrs:{shape:[-1,lt(p)]}}),m=qP(f,f.dtype,"all",n);let g;if(o){g=UP({inputs:{x:m},backend:n,attrs:{shape:ah(d,c)}})}else g=UP({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=u&&n.disposeIntermediateTensorInfo(h),g}};const mB={kernelName:oe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a,i=s.shape.length,c=wt(r,s.shape);let l=c;const u=rh(l,i);let h=s;null!=u&&(h=QP({inputs:{x:s},backend:n,attrs:{perm:u}}),l=ih(l.length,i)),sh("any",l,i);const[d,p]=nh(h.shape,l),f=UP({inputs:{x:h},backend:n,attrs:{shape:[-1,lt(p)]}}),m=qP(f,f.dtype,"any",n);let g;if(o){g=UP({inputs:{x:m},backend:n,attrs:{shape:ah(d,c)}})}else g=UP({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=u&&n.disposeIntermediateTensorInfo(h),g}};class gB{constructor(t,e,n){this.variableNames=["A"];const{windowSize:a,batchSize:s,outSize:r}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,r];const o="max"===e?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ".concat(a,";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ").concat(a,"; i++) {\n          int inIdx = ").concat(i,";\n          float candidate = getA(batch, inIdx);\n          if (candidate ").concat(o," bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ")}}class yB{constructor(t,e,n,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,ot(t.length>2,()=>"Packed arg".concat(n.charAt(0).toUpperCase()+n.slice(1)," supports only inputs with rank above 2."));const s=t[t.length-1],r=Math.ceil(s/e);this.outputShape=t.slice(0,-1),r>1&&this.outputShape.push(r),a||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,c=gL(i),l=Yz("coords",i);let u,h;if(1===r){h=i+1;const t=gL(h);u="\n        ".concat(t," sourceLocR = ").concat(t,"(").concat(l.join(),", 0);\n        ++").concat(l[i-1],";\n        ").concat(t," sourceLocG = ").concat(t,"(").concat(l.join(),", 0);\n        ++").concat(l[i-2],";\n        ").concat(t," sourceLocA = ").concat(t,"(").concat(l.join(),", 0);\n        --").concat(l[i-1],";\n        ").concat(t," sourceLocB = ").concat(t,"(").concat(l.join(),", 0);\n        --").concat(l[i-2],";")}else h=i,u="\n        ".concat(c," sourceLocR = coords;\n        ++").concat(l[i-1],";\n        ").concat(c," sourceLocG = coords;\n        ++").concat(l[i-2],";\n        ").concat(c," sourceLocA = coords;\n        --").concat(l[i-1],";\n        ").concat(c," sourceLocB = coords;\n        --").concat(l[i-2],";");const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map(t=>"int "+t),m=Yz("sourceLocR",h-1).concat("inIdx.r"),g=Yz("sourceLocG",h-1).concat("inIdx.g"),y=Yz("sourceLocB",h-1).concat("inIdx.b"),b=Yz("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=a?"":"\n          inIdx = round(vec4(getBestIndicesAChannel(".concat(m.join(),"),\n                             getBestIndicesAChannel(").concat(g.join(),"),\n                             getBestIndicesAChannel(").concat(y.join(),"),\n                             getBestIndicesAChannel(").concat(b.join(),")));"),v="vec4(\n            getAChannel(".concat(m.join(),"),\n            hasNextCol ? getAChannel(").concat(g.join(),") : 0.,\n            hasNextRow ? getAChannel(").concat(y.join(),") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(").concat(b.join(),") : 0.)"),k=a?"":"\n      float getBestIndicesAChannel(".concat(f.join(),") {\n        return getChannel(getBestIndicesA(").concat(d.join(),"),\n                                          vec2(").concat(d.slice(-2).join(),"));\n      }");this.userCode="\n      float getAChannel(".concat(f.join(),") {\n        return getChannel(getA(").concat(d.join(),"),\n                               vec2(").concat(d.slice(-2).join(),"));\n      }\n      ").concat(k,"\n      void main() {\n        ").concat(c," coords = getOutputCoords();\n        bool hasNextCol = ").concat(l[i-1]," < ").concat(o[i-1]-1,";\n        bool hasNextRow = ").concat(l[i-2]," < ").concat(o[i-2]-1,";\n        ").concat(u,"\n        ivec4 srcIdx = ivec4(sourceLocR").concat(p,", sourceLocG").concat(p,",\n          sourceLocB").concat(p,", sourceLocA").concat(p,") * ").concat(e,";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ").concat(v,";\n\n        for (int i = 0; i < ").concat(e,"; i++) {\n          inIdx = srcIdx;\n          ").concat(w,"\n          vec4 candidate = ").concat(v,";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(").concat(x,"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ")}}function bB(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,s=e.shape[0],r=e.shape[1];null!=a&&(s=a.shape[0],r=a.shape[1]);const o=am(r),i={windowSize:o,inSize:r,batchSize:s,outSize:Math.ceil(r/o)},c=new gB(i,n,null==a),l=[e];null!=a&&l.push(a);const u=t.runWebGLProgram(c,l,"int32");if(1===u.shape[1])return u;const h=bB(t,e,n,u);return t.disposeIntermediateTensorInfo(u),h}function xB(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;const s=null!=a?a.shape:e.shape,r=am(s[s.length-1]),o=new yB(s,r,n,null==a),i=null==a?[e]:[e,a],c=t.runWebGLProgram(o,i,"int32");if(c.shape.length===e.shape.length){const a=xB(t,e,n,c);return t.disposeIntermediateTensorInfo(c),a}return c}function wB(t,e,n,a){const s=[n];if(sh("arg"+a.charAt(0).toUpperCase()+a.slice(1),s,e.shape.length),!Yt().getBool("WEBGL_PACK_REDUCE")||e.shape.length<=2){const n=[],r=t.texData.get(e.dataId);let o=e;null!==r&&r.isPacked&&(o=t.unpackTensor(e),n.push(o));const[i,c]=nh(o.shape,s),l=lt(c),u=UP({inputs:{x:o},backend:t,attrs:{shape:[-1,l]}});n.push(u);const h=bB(t,u,a);n.push(h);const d=UP({inputs:{x:h},backend:t,attrs:{shape:i}});return n.forEach(e=>t.disposeIntermediateTensorInfo(e)),d}return xB(t,e,a)}const vB={kernelName:ie,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r}=a;let o=wt(r,s.shape);const i=rh(o,s.shape.length);let c=s;const l=[];null!=i&&(c=QP({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(c),o=ih(o.length,c.shape.length)),sh("argMax",[o[0]],c.shape.length);const u=wB(n,c,o[0],"max");return l.forEach(t=>n.disposeIntermediateTensorInfo(t)),u}};const kB={kernelName:ce,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r}=a;let o=wt(r,s.shape);const i=rh(o,s.shape.length);let c=s;const l=[];null!=i&&(c=QP({inputs:{x:s},backend:n,attrs:{perm:i}}),l.push(c),o=ih(o.length,c.shape.length)),sh("argMin",[o[0]],c.shape.length);const u=wB(n,c,o[0],"min");return l.forEach(t=>n.disposeIntermediateTensorInfo(t)),u}},IB=DP({opSnippet:aP+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),NB={kernelName:le,backendName:"webgl",kernelFunc:IB},SB=DP({opSnippet:aP+"return log(x + sqrt(x * x + 1.0));"}),TB={kernelName:ue,backendName:"webgl",kernelFunc:SB},CB=DP({opSnippet:aP+"\n  return atan(x);\n"}),EB={kernelName:he,backendName:"webgl",kernelFunc:CB},AB=_P({opSnippet:yP+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+xP+"\n  return result;\n"}),RB={kernelName:pe,backendName:"webgl",kernelFunc:AB},FB=DP({opSnippet:aP+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),DB={kernelName:de,backendName:"webgl",kernelFunc:FB};class _B{constructor(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const r=t.filterWidth,o=t.strideHeight,i=t.strideWidth,c=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.top,p=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m="((batch  * ".concat(t.inHeight," + xR) * ").concat(t.inWidth," + xC) * ").concat(t.inChannels," + d"),g="(xR * ".concat(t.inWidth," + xC) * ").concat(t.inChannels," + d");let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode="\n        const ivec2 strides = ivec2(".concat(o,", ").concat(i,");\n        const ivec2 pads = ivec2(").concat(d,", ").concat(p,");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ").concat(u,";\n              wR += ").concat(c,") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int wC = 0; wC < ").concat(h,";\n                wC += ").concat(l,") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ").concat(e," currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ").concat(a?s?m:g:"wR * ".concat(h," + wC"),";\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      "))}let b="".concat(e,"(").concat(e,"(").concat(e,"(")+"minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(b="avgValue / max(count, 1.0)");const x=4*Math.floor(r/4),w=r%4,v="\n      if (".concat(f,") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ").concat("max","(values, minMaxValue);\n      }\n    ");this.userCode="\n      const ivec2 strides = ivec2(".concat(o,", ").concat(i,");\n      const ivec2 pads = ivec2(").concat(d,", ").concat(p,");\n      const float initializationValue = ").concat(y,";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ").concat(t.inWidth,") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(").concat(y,");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ").concat(u,";\n            wR += ").concat(c,") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ").concat(t.inHeight,") {\n            continue;\n          }\n\n          for (int wC = 0; wC < ").concat(x,"; wC += 4) {\n            int xC = xCCorner + wC * ").concat(l,";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ").concat(l,", d),\n              getValue(batch, xR, xC + 2 * ").concat(l,", d),\n              getValue(batch, xR, xC + 3 * ").concat(l,", d)\n            );\n\n            ").concat(v,"\n          }\n\n          int xC = xCCorner + ").concat(x,";\n          if (").concat(1===w,") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ").concat(v,"\n          } else if (").concat(2===w,") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ").concat(l,", d),\n              initializationValue,\n              initializationValue\n            );\n\n            ").concat(v,"\n          } else if (").concat(3===w,") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ").concat(l,", d),\n              getValue(batch, xR, xC + 2 * ").concat(l,", d),\n              initializationValue\n            );\n\n            ").concat(v,"\n          }\n        }\n        setOutput(").concat(b,");\n      }\n    ")}}class OB{constructor(t,e,n){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,c=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,h=t.dilationWidth,d=t.effectiveFilterDepth,p=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode="\n        const ivec3 strides =\n            ivec3(".concat(o,", ").concat(i,", ").concat(c,");\n        const ivec3 pads = ivec3(").concat(m,", ").concat(g,", ").concat(y,");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ").concat(d,";\n              wD += ").concat(l,") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ").concat(t.inDepth,") {\n              continue;\n            }\n\n            for (int wR = 0; wR < ").concat(p,";\n                wR += ").concat(u,") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ").concat(t.inHeight,") {\n                continue;\n              }\n\n              for (int wC = 0; wC < ").concat(f,";\n                  wC += ").concat(h,") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ").concat(e," currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ").concat(a?s?"(((batch * ".concat(t.inDepth," + xD) * ").concat(t.inHeight," + xR) * ").concat(t.inWidth," + xC) * ").concat(t.inChannels," + ch"):"((xD * ".concat(t.inHeight," + xR) * ").concat(t.inWidth," + xC) * ").concat(t.inChannels," + ch"):"wD * ".concat(p," * ").concat(f," +\n                      wR * ").concat(f," + wC"),";\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      "))}let w="".concat(e,"(").concat(e,"(").concat(e,"(")+"minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(w="avgValue / max(count, 1.0)");const v=4*Math.floor(r/4),k=r%4,I="\n      if (".concat(b,") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ").concat("max","(values, minMaxValue);\n      }\n    ");this.userCode="\n      const ivec3 strides =\n        ivec3(".concat(o,", ").concat(i,", ").concat(c,");\n      const ivec3 pads = ivec3(").concat(m,", ").concat(g,", ").concat(y,");\n      const float initializationValue = ").concat(x,";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ").concat(t.inWidth,") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(").concat(x,");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ").concat(d,";\n            wD += ").concat(l,") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ").concat(t.inDepth,") {\n            continue;\n          }\n\n          for (int wR = 0; wR < ").concat(p,";\n            wR += ").concat(u,") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int wC = 0; wC < ").concat(v,"; wC += 4) {\n              int xC = xCCorner + wC * ").concat(h,";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ").concat(h,", ch),\n                getValue(batch, xD, xR, xC + 2 * ").concat(h,", ch),\n                getValue(batch, xD, xR, xC + 3 * ").concat(h,", ch)\n              );\n\n              ").concat(I,"\n            }\n\n            int xC = xCCorner + ").concat(v,";\n            if (").concat(1===k,") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ").concat(I,"\n            } else if (").concat(2===k,") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ").concat(h,", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ").concat(I,"\n            } else if (").concat(3===k,") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ").concat(h,", ch),\n                getValue(batch, xD, xR, xC + 2 * ").concat(h,", ch),\n                initializationValue\n              );\n\n              ").concat(I,"\n            }\n          }\n        }\n        setOutput(").concat(w,");\n      }\n    ")}}const MB={kernelName:fe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e;QM(s,"avgPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:c}=a;ot(au(o,1),()=>"Error in avgPool: Either strides or dilations must be 1. "+"Got strides ".concat(o," and dilations '").concat(1,"'"));const l=Kl(s.shape,r,o,1,i,c);if(1===l.filterWidth&&1===l.filterHeight&&dt(l.inShape,l.outShape))return vP({inputs:{x:s},backend:n});const u=new _B(l,"avg",!1);return n.runWebGLProgram(u,[s],"float32")}};const LB={kernelName:ge,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{filterSize:r,strides:o,pad:i,dimRoundingMode:c,dataFormat:l}=a,u=Xl(s.shape,r,o,[1,1,1],i,c,l),h=new OB(u,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};class zB{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,a=t.strideHeight,s=t.strideWidth,r=t.dilationHeight,o=t.dilationWidth,i=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=i-1-t.padInfo.top,u=c-1-t.padInfo.left,h=1/(e*n);this.userCode="\n      const ivec2 pads = ivec2(".concat(l,", ").concat(u,");\n      const float avgMultiplier = float(").concat(h,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(i,";\n            wR += ").concat(r,") {\n          float dyR = float(dyRCorner + wR) / ").concat(a,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ").concat(c,";\n            wC+= ").concat(o,") {\n            float dyC = float(dyCCorner + wC) / ").concat(s,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class PB{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,a=t.filterWidth,s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,i=t.dilationDepth,c=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=u-1-t.padInfo.front,f=h-1-t.padInfo.top,m=d-1-t.padInfo.left,g=1/(e*n*a);this.userCode="\n      const ivec3 pads = ivec3(".concat(p,", ").concat(f,", ").concat(m,");\n      const float avgMultiplier = float(").concat(g,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ").concat(u,";\n            wD += ").concat(i,") {\n          float dyD = float(dyDCorner + wD) / ").concat(s,".0;\n\n          if (dyD < 0.0 || dyD >= ").concat(t.outDepth,".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ").concat(h,";\n              wR += ").concat(c,") {\n            float dyR = float(dyRCorner + wR) / ").concat(r,".0;\n\n            if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ").concat(d,";\n                wC += ").concat(l,") {\n              float dyC = float(dyCCorner + wC) / ").concat(o,".0;\n\n              if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}const BB={kernelName:ye,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,input:r}=e,o=r,{filterSize:i,strides:c,pad:l,dimRoundingMode:u}=a,h=Xl(o.shape,i,c,[1,1,1],l,u),d=new PB(h);return n.runWebGLProgram(d,[s],o.dtype)}};const WB={kernelName:me,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,input:r}=e,o=r;QM([s,r],"avgPoolGrad");const{filterSize:i,strides:c,pad:l}=a,u=Kl(o.shape,i,c,1,l),h=new zB(u);return n.runWebGLProgram(h,[s],o.dtype)}};const VB={kernelName:be,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{a:s,b:r}=e,{transposeA:o,transposeB:i}=a;return tB({a:s,b:r,transposeA:o,transposeB:i,backend:n})}};class UB{constructor(t,e,n,a,s,r){this.outputShape=[],this.variableNames=["x","mean","variance"],rc(t,e),rc(t,n);let o="0.0";null!=a&&(rc(t,a),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=s&&(rc(t,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ".concat(o,";\n        float scale = ").concat(i,";\n        float inv = scale * inversesqrt(variance + float(").concat(r,"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ")}}class GB{constructor(t,e,n,a,s,r){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],rc(t,e),rc(t,n);let o="vec4(0.0)";null!=a&&(rc(t,a),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=s&&(rc(t,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = ".concat(o,";\n        vec4 scale = ").concat(i,";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(").concat(r,"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ")}}const HB={kernelName:dn,backendName:"webgl",kernelFunc:t=>{let{inputs:e,backend:n,attrs:a}=t;const{x:s,mean:r,variance:o,offset:i,scale:c}=e;ot(r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),ot(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),ot(null==c||r.shape.length===c.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=a;null==l&&(l=.001);const u=[s,r,o];let h=null;null!=i&&(h=i.shape,u.push(i));let d=null;null!=c&&(d=c.shape,u.push(c));const p=Yt().getBool("WEBGL_PACK_NORMALIZATION")?new GB(s.shape,r.shape,o.shape,h,d,l):new UB(s.shape,r.shape,o.shape,h,d,l);return n.runWebGLProgram(p,u,u[0].dtype)}};class jB{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=gL(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(t){if(1===t)return"sourceLoc";if(t<=6)return qB.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error("Slicing for rank ".concat(t," is not yet supported"))}(this.rank);let a;const s=t.map((t,e)=>"sourceLoc.".concat(qB[e]," = start[").concat(e,"] + coords.").concat(qB[e],";"));a="\n        ".concat(e," sourceLoc;\n        ").concat(e," coords = getOutputCoords();\n        ").concat(s.join("\n"),"\n      "),this.userCode="\n      void main() {\n        ".concat(a,"\n        setOutput(getSource(").concat(n,"));\n      }\n    ")}}const qB=["x","y","z","w","u","v"];class KB{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=gL(this.rank),n=Yz("coords",this.rank),a=Yz("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":"vec2(".concat(a.slice(-2).join(),")"),r="getChannel(getSource(".concat(a.join(),"), ").concat(s,")"),o="\n      result.x = ".concat(r,";\n      if (++").concat(n[this.rank-1]," < ").concat(t[this.rank-1],") {\n        ++").concat(a[this.rank-1],";\n        result.y = ").concat(r,";\n        --").concat(a[this.rank-1],";\n      }\n    "),i=1===this.rank?"":"\n      --".concat(n[this.rank-1],";\n      if (++").concat(n[this.rank-2]," < ").concat(t[this.rank-2],") {\n        ++").concat(a[this.rank-2],";\n        result.z = ").concat(r,";\n        if (++").concat(n[this.rank-1]," < ").concat(t[this.rank-1],") {\n          ++").concat(a[this.rank-1],";\n          result.w = ").concat(r,";\n        }\n      }\n    "),c=this.rank<=4?"sourceLoc = coords +\n            ".concat(e,"(").concat(t.map((t,e)=>"start[".concat(e,"]")).join(),");"):t.map((t,e)=>"".concat(a[e]," = ").concat(n[e]," + start[").concat(e,"];")).join("\n");this.userCode="\n      void main() {\n        ".concat(e," coords = getOutputCoords();\n        ").concat(e," sourceLoc;\n        ").concat(c,"\n        vec4 result = vec4(0.);\n        ").concat(o,"\n        ").concat(i,"\n        setOutput(result);\n      }\n    ")}}function XB(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{begin:r,size:o}=a,[i,c]=ml(s,r,o);if(el(s,i,c),0===lt(c))return n.makeTensorInfo(c,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const t=n.texData.get(s.dataId),e=_z(t.values,i,c,s.shape,s.dtype);return n.makeTensorInfo(c,s.dtype,e)}const{isPacked:l}=n.texData.get(s.dataId),u=pl(s.shape,i,c);if(l||!u){const t=Yt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new KB(c):new jB(c),e=[i];return n.runWebGLProgram(t,[s],s.dtype,e)}return n.uploadToGPU(s.dataId),function(t,e,n,a){const s=a.texData.get(t.dataId),r=a.makeTensorInfo(n,t.dtype),o=a.texData.get(r.dataId);Object.assign(o,s),o.refCount=1,o.shape=n,o.dtype=t.dtype;let i=fl(e,Mt(t.shape));s.slice&&(i+=s.slice.flatOffset),o.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||t.dataId};const c=a.dataRefCount.get(o.slice.origDataId)||1;return a.dataRefCount.set(o.slice.origDataId,c+1),r}(s,i,c,n)}const YB={kernelName:Da,backendName:"webgl",kernelFunc:XB},ZB={kernelName:xe,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{blockShape:r,crops:o}=a;ot(s.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const i=r.reduce((t,e)=>t*e),c=rm(s.shape,r,i),l=om(c.length,r.length),u=im(s.shape,r,i),h=cm(o,r.length),d=lm(u,o,r.length),p=[],f=UP({inputs:{x:s},backend:n,attrs:{shape:c}}),m=QP({inputs:{x:f},backend:n,attrs:{perm:l}}),g=UP({inputs:{x:m},backend:n,attrs:{shape:u}}),y=XB({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return p.push(f),p.push(m),p.push(g),p.forEach(t=>n.disposeIntermediateTensorInfo(t)),y}};const JB={kernelName:we,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,weights:r}=e,{size:o}=a,i=n.readSync(s.dataId),c=n.readSync(r.dataId),l=tz(i,c,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,l)}};const QB={kernelName:ve,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{a:a,b:s}=e,r=Yt().getBool("WEBGL_PACK_BINARY_OPERATIONS"),o=Yt().getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([a,s])||1===o){const t=n.texData.get(a.dataId).values,e=n.texData.get(s.dataId).values,[r,o]=nz(a.shape,s.shape,t,e,a.dtype),i=n.makeTensorInfo(o,a.dtype);return n.texData.get(i.dataId).values=r,i}let i;return i=r?new wP("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",a.shape,s.shape,!1):new bP("\n  return float(int(a.r) & int(b.r));\n",a.shape,s.shape),n.runWebGLProgram(i,[a,s],a.dtype)}};const $B={kernelName:Ie,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{s0:a,s1:s}=e,r=n.readSync(a.dataId),o=n.readSync(s.dataId),i=rc(Array.from(r),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},tW=_P({opSnippet:"return float(a != b);",cpuKernelImpl:Iz,dtype:"bool"}),eW={kernelName:$n,backendName:"webgl",kernelFunc:tW};function nW(t){const{inputs:e,backend:n}=t,{input:a}=e;return vP({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.real},backend:n})}const aW={kernelName:ma,backendName:"webgl",kernelFunc:nW};const sW={kernelName:Ne,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:a,attrs:s}=e,{x:r}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return vP({inputs:{x:r},backend:a});const e=Xh(r.shape),n=t({inputs:{x:r},backend:a,attrs:{dtype:"float32"}}),s=IP({inputs:{real:n,imag:e},backend:a});return e.dispose(),a.disposeIntermediateTensorInfo(n),s}if("complex64"===r.dtype){const e=nW({inputs:{input:r},backend:a}),n=t({inputs:{x:e},backend:a,attrs:{dtype:o}});return a.disposeIntermediateTensorInfo(e),n}if(!Tt(r.dtype,o)){const t=vP({inputs:{x:r},backend:a});return{dataId:t.dataId,shape:t.shape,dtype:o}}if(a.shouldExecuteOnCPU([r])){const t=a.texData.get(r.dataId).values,[e,n,s]=az(t,r.shape,r.dtype,o);return a.makeTensorInfo(e,n,s)}if("int32"===o)return function(t,e){const n=new nP(t.shape,"return float(int(x));"),a=e.runWebGLProgram(n,[t],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(r,a);if("bool"===o){const t=a.makeTensorInfo([],"bool",kt("bool",1)),e=tW({inputs:{a:r,b:t},backend:a});return a.disposeIntermediateTensorInfo(t),e}throw new Error("Error in Cast: failed to cast ".concat(r.dtype," to ").concat(o))}},rW="return ceil(x);",oW=DP({opSnippet:rW,packedOpSnippet:rW,cpuKernelImpl:sz}),iW={kernelName:Se,backendName:"webgl",kernelFunc:oW};class cW{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class lW{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const uW={kernelName:Te,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{clipValueMin:r,clipValueMax:o}=a;let i;i=Yt().getBool("WEBGL_PACK_CLIP")?new lW(s.shape):new cW(s.shape);const c=[[r],[o]];return n.runWebGLProgram(i,[s],s.dtype,c)}};class hW{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function dW(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}const pW={kernelName:Ee,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:a}=e,s=n.texData.get(a.dataId),r=new hW(a.shape),o=[dW(a,s.complexTensorInfos.real),dW(a,s.complexTensorInfos.imag)];return n.runWebGLProgram(r,o,o[0].dtype)}};class fW{constructor(t){this.outputShape=[],this.outputShape=Zf(t,1),this.variableNames=t.map((t,e)=>"T".concat(e));const e=new Array(t.length-1);e[0]=t[0][1];for(let r=1;r<e.length;r++)e[r]=e[r-1]+t[r][1];const n=["if (yC < ".concat(e[0],") setOutput(getT0(yR, yC));")];for(let r=1;r<e.length;r++){const t=e[r-1];n.push("else if (yC < ".concat(e[r],") ")+"setOutput(getT".concat(r,"(yR, yC-").concat(t,"));"))}const a=e.length,s=e[e.length-1];n.push("else setOutput(getT".concat(a,"(yR, yC-").concat(s,"));")),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ".concat(n.join("\n        "),"\n      }\n    ")}}class mW{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Zf(t,e);const n=this.outputShape,a=n.length,s=gL(a),r=Yz("coords",a),o=["x","y","z","w","u","v"].slice(0,a);this.variableNames=t.map((t,e)=>"T".concat(e));const i=new Array(t.length-1);i[0]=t[0][e];for(let f=1;f<i.length;f++)i[f]=i[f-1]+t[f][e];const c=o[e],l=o.slice(-2),u=o.join();let h="if (".concat(c," < ").concat(i[0],") {\n        return getChannel(\n            getT0(").concat(u,"), vec2(").concat(l.join(),"));\n        }");for(let f=1;f<i.length;f++){const t=i[f-1];h+="\n        if (".concat(c," < ").concat(i[f],"  && ").concat(c," >= ").concat(i[f-1],") {\n          return getChannel(\n            getT").concat(f,"(").concat(gW(o,c,t),"),\n            vec2(").concat(gW(l,c,t),"));\n        }")}const d=i.length,p=i[i.length-1];h+="\n        return getChannel(\n          getT".concat(d,"(").concat(gW(o,c,p),"),\n          vec2(").concat(gW(l,c,p),"));"),this.userCode="\n      float getValue(".concat(o.map(t=>"int "+t),") {\n        ").concat(h,"\n      }\n\n      void main() {\n        ").concat(s," coords = getOutputCoords();\n        vec4 result = vec4(getValue(").concat(r,"), 0., 0., 0.);\n\n        ").concat(r[a-1]," = ").concat(r[a-1]," + 1;\n        if (").concat(r[a-1]," < ").concat(n[a-1],") {\n          result.g = getValue(").concat(r,");\n        }\n\n        ").concat(r[a-2]," = ").concat(r[a-2]," + 1;\n        if (").concat(r[a-2]," < ").concat(n[a-2],") {\n          result.a = getValue(").concat(r,");\n        }\n\n        ").concat(r[a-1]," = ").concat(r[a-1]," - 1;\n        if (").concat(r[a-2]," < ").concat(n[a-2]," &&\n            ").concat(r[a-1]," < ").concat(n[a-1],") {\n          result.b = getValue(").concat(r,");\n        }\n        setOutput(result);\n      }\n    ")}}function gW(t,e,n){const a=t.indexOf(e);return t.map((t,e)=>e===a?"".concat(t," - ").concat(n):t).join()}function yW(t){const{inputs:e,backend:n}=t,{input:a}=e;return vP({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.imag},backend:n})}const bW={kernelName:xn,backendName:"webgl",kernelFunc:yW};function xW(t,e,n){const a=t[0].dtype;if("complex64"===a){const a=t.map(t=>nW({inputs:{input:t},backend:n})),s=t.map(t=>yW({inputs:{input:t},backend:n})),r=xW(a,e,n),o=xW(s,e,n),i=IP({inputs:{real:r,imag:o},backend:n});return a.forEach(t=>n.disposeIntermediateTensorInfo(t)),s.forEach(t=>n.disposeIntermediateTensorInfo(t)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o),i}let s=n.shouldExecuteOnCPU(t);if("string"===a&&(s=!0),s){const s=t.map(t=>{const a=lt(t.shape.slice(e));return UP({inputs:{x:t},backend:n,attrs:{shape:[-1,a]}})}),r=s.map(t=>({vals:n.readSync(t.dataId),shape:t.shape})),o=Zf(s.map(t=>t.shape),1),i=1===s[0].shape[0],c=rz(r,o,a,i),l=Zf(t.map(t=>t.shape),e),u=n.makeTensorInfo(l,a,c);return s.forEach(t=>n.disposeIntermediateTensorInfo(t)),u}const r=t.filter(t=>lt(t.shape)>0),o=Yt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&r[0].shape.length>1;if(1===r.length){const e=o?new nP(t[0].shape,iP):new cP(t[0].shape,iP);return n.runWebGLProgram(e,t,a)}const i=Yt().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(r.length>i){const t=[];for(let s=0;s<r.length;s+=i){const a=r.slice(s,s+i);t.push(xW(a,e,n))}const a=xW(t,e,n);for(const e of t)n.disposeIntermediateTensorInfo(e);return a}if(o){const t=new mW(r.map(t=>t.shape),e);return n.runWebGLProgram(t,r,a)}const{tensors2D:c,outShape:l}=function(t,e,n){const a=Zf(t.map(t=>t.shape),e),s=t.map(t=>UP({inputs:{x:t},attrs:{shape:[-1,lt(t.shape.slice(e))]},backend:n}));return{tensors2D:s,outShape:a}}(r,e,n),u=new fW(c.map(t=>t.shape)),h=n.runWebGLProgram(u,c,a);c.forEach(t=>n.disposeIntermediateTensorInfo(t));const d=UP({inputs:{x:h},attrs:{shape:l},backend:n});return n.disposeIntermediateTensorInfo(h),d}function wW(t){const{inputs:e,backend:n,attrs:a}=t,{axis:s}=a,r=wt(s,e[0].shape)[0];Yf(e.map(t=>t.shape),r);const o=Zf(e.map(t=>t.shape),r);if(0===lt(o))return n.makeTensorInfo(o,e[0].dtype,[]);const i=e.filter(t=>lt(t.shape)>0);return 1===i.length?vP({inputs:{x:i[0]},backend:n}):xW(i,r,n)}const vW={kernelName:Ae,backendName:"webgl",kernelFunc:wW};class kW{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.outputShape=t.outShape;const r=t.padInfo.top,o=t.padInfo.left,i=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,h=t.filterHeight,d=t.filterWidth,p=4*Math.floor(t.inChannels/4),f=t.inChannels%4,m="channelsLast"===t.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=a?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ".concat(n,"\n        }"):s?"float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ".concat(n,"\n        }"):"\n          float activation(float x) {\n            ".concat(n,"\n          }\n        "),w="result = activation(result);");const v=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode="\n      ".concat(x,"\n\n      const ivec2 strides = ivec2(").concat(i,", ").concat(c,");\n      const ivec2 pads = ivec2(").concat(r,", ").concat(o,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[").concat(b,"];\n\n        ivec2 xRCCorner =\n            ivec2(coords[").concat(g,"], coords[").concat(y,"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(h,"; wR++) {\n          int xR = xRCorner + wR * ").concat(l,";\n\n          if (xR < 0 || xR >= ").concat(t.inHeight,") {\n            continue;\n          }\n\n          for (int wC = 0; wC < ").concat(d,"; wC++) {\n            int xC = xCCorner + wC * ").concat(u,";\n\n            if (xC < 0 || xC >= ").concat(t.inWidth,") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ").concat(p,"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (").concat(m,") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (").concat(1===f,") {\n\n              if (").concat(m,") {\n                dotProd +=\n                    getX(batch, xR, xC, ").concat(p,") *\n                    getW(wR, wC, ").concat(p,", d2);\n              } else {\n                dotProd +=\n                    getX(batch, ").concat(p,", xR, xC) *\n                    getW(wR, wC, ").concat(p,", d2);\n              }\n\n            } else if (").concat(2===f,") {\n              vec2 wValues = vec2(\n                getW(wR, wC, ").concat(p,", d2),\n                getW(wR, wC, ").concat(p," + 1, d2)\n              );\n\n              if (").concat(m,") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ").concat(p,"),\n                  getX(batch, xR, xC, ").concat(p," + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ").concat(p,", xR, xC),\n                  getX(batch, ").concat(p," + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (").concat(3===f,") {\n              vec3 wValues = vec3(\n                getW(wR, wC, ").concat(p,", d2),\n                getW(wR, wC, ").concat(p," + 1, d2),\n                getW(wR, wC, ").concat(p," + 2, d2)\n              );\n\n              if (").concat(m,") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ").concat(p,"),\n                  getX(batch, xR, xC, ").concat(p," + 1),\n                  getX(batch, xR, xC, ").concat(p," + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ").concat(p,", xR, xC),\n                  getX(batch, ").concat(p," + 1, xR, xC),\n                  getX(batch, ").concat(p," + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ").concat(v,"\n        ").concat(w,"\n        setOutput(result);\n      }\n    ")}}class IW{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,a=t.padInfo.left,s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,i=t.dilationDepth,c=t.dilationHeight,l=t.dilationWidth,u=t.filterDepth,h=t.filterHeight,d=t.filterWidth,p=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3(".concat(s,", ").concat(r,", ").concat(o,");\n      const ivec3 pads = ivec3(").concat(e,", ").concat(n,", ").concat(a,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ").concat(u,"; wF++) {\n          int xF = xFCorner + wF * ").concat(i,";\n\n          if (xF < 0 || xF >= ").concat(t.inDepth,") {\n            continue;\n          }\n\n          for (int wR = 0; wR < ").concat(h,"; wR++) {\n            int xR = xRCorner + wR * ").concat(c,";\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int wC = 0; wC < ").concat(d,"; wC++) {\n              int xC = xCCorner + wC * ").concat(l,";\n\n              if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ").concat(p,"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (").concat(1===f,") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ").concat(p,") *\n                  getW(wF, wR, wC, ").concat(p,", d2);\n              } else if (").concat(2===f,") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ").concat(p,"),\n                  getX(batch, xF, xR, xC, ").concat(p," + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ").concat(p,", d2),\n                  getW(wF, wR, wC, ").concat(p," + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (").concat(3===f,") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ").concat(p,"),\n                  getX(batch, xF, xR, xC, ").concat(p," + 1),\n                  getX(batch, xF, xR, xC, ").concat(p," + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ").concat(p,", d2),\n                  getW(wF, wR, wC, ").concat(p," + 1, d2),\n                  getW(wF, wR, wC, ").concat(p," + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class NW{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=kL(this.outputShape.length);const r=t.padInfo.left,o=t.strideWidth,i=t.dilationWidth,c=t.filterHeight,l=t.filterWidth,u=l;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let m=0;m<l;m++)h+="\n           vec4 xTexelC".concat(2*m,";\n           int xTexelC").concat(2*m,"Ready;\n           vec4 xTexelC").concat(2*m+1,";\n           int xTexelC").concat(2*m+1,"Ready;\n           vec4 xC").concat(m,";");h+="\n     for (int r = 0; r < ".concat(c,"; r++) {\n      for (int d1 = 0; d1 < ").concat(t.inChannels,"; d1 += 2) {\n       ");for(let m=0;m<l;m++)h+="\n           xTexelC".concat(2*m," = vec4(0.0);\n           xTexelC").concat(2*m,"Ready = 0;\n           xTexelC").concat(2*m+1," = vec4(0.0);\n           xTexelC").concat(2*m+1,"Ready = 0;\n           xC").concat(m," = vec4(0.0);");h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(u+1)/2;m++){const e=2*m;if(h+="\n           xC = xCCorner + ".concat(e*i,";\n           "),1===o){if(e<l&&(r%2===1?(h+="\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC".concat(e,"Ready == 0) {\n                   xTexelC").concat(e," = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC").concat(e,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(e,"Ready = 1;\n                 }\n               "),h+=1===i&&e>0?"\n                 xC".concat(e," = vec4(xTexelC").concat(e-2,".zw, xTexelC").concat(e,".xy);\n                 "):"\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC".concat(e," = vec4(previous.zw, xTexelC").concat(e,".xy);\n                   } else {\n                     xC").concat(e," = vec4(0.0, 0.0, xTexelC").concat(e,".xy);\n                   }\n                   ")):h+="\n                 if (xC >= 0 && xC < inDims[1] && xTexelC".concat(e,"Ready == 0) {\n                   xTexelC").concat(e," = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC").concat(e,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(e,"Ready = 1;\n                 }\n\n                 xC").concat(e," = xTexelC").concat(e,";\n                 "),e+1<l)){const t=r%2===0?et(i):i;i%2===0&&r%2===1||i%2!==0&&r%2!==1?(h+="\n                   xCOffset = xC + imod(pads[1], 2) + ".concat(t,";\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(e+1,"Ready == 0) {\n                     xTexelC").concat(e+1," = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC").concat(e+1,".zw = vec2(0.0);\n                     }\n                     xTexelC").concat(e+1,"Ready = 1;\n                   }\n                   "),h+=i>1?"\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC".concat(e+1," = vec4(previous.zw, xTexelC").concat(e+1,".xy);\n                     } else {\n                      xC").concat(e+1," = vec4(0.0, 0.0, xTexelC").concat(e+1,".xy);\n                     }\n                     "):"\n                     xC".concat(e+1," = vec4(xTexelC").concat(e,".zw, xTexelC").concat(e+1,".xy);\n                     ")):h+=1===t?"\n                     xC".concat(e+1," = xTexelC").concat(e,";\n                     "):"\n                     xCOffset = xC + ".concat(t,";\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(e+1,"Ready == 0) {\n                       xTexelC").concat(e+1," = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC").concat(e+1,".zw = vec2(0.0);\n                       }\n                       xTexelC").concat(e+1,"Ready = 1;\n                     }\n\n                     xC").concat(e+1," = xTexelC").concat(e+1,";\n                     ")}}else e<l&&(r%2===1?(h+="\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC".concat(e,"Ready == 0) {\n                   xTexelC").concat(e," = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC").concat(e,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(e,"Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC").concat(e+1,"Ready == 0) {\n                   xTexelC").concat(e+1," = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC").concat(e+1,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(e+1,"Ready = 1;\n                 }\n\n                 xC").concat(e," = vec4(xTexelC").concat(e,".zw, xTexelC").concat(e+1,".zw);\n               "),e+1<l&&(h+="\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC".concat(e+1," = vec4(xTexelC").concat(e+1,".xy, final.xy);\n                 "))):(h+="\n                 if(xC >= 0 && xC < inDims[1] && xTexelC".concat(e,"Ready == 0) {\n                   xTexelC").concat(e," = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC").concat(e,".zw = vec2(0.0);\n                   }\n                   xTexelC").concat(e,"Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(e+1,"Ready == 0) {\n                   xTexelC").concat(e+1," = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC").concat(e+1,".zw = vec2(0.);\n                   }\n                   xTexelC").concat(e+1,"Ready = 1;\n                 }\n\n                 xC").concat(e," = vec4(\n                   xTexelC").concat(e,".xy, xTexelC").concat(e+1,".xy);\n               "),e+1<l&&(h+="\n                   xC".concat(e+1," = vec4(xTexelC").concat(e,".zw, xTexelC").concat(e+1,".zw);\n                 "))));e<l&&(h+="\n             wTexel = getW(r, ".concat(e,", d1, d2);\n             dotProd += xC").concat(e,".xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ").concat(t.inChannels,") {\n               dotProd += xC").concat(e,".yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           "),e+1<l&&(h+="\n               wTexel = getW(r, ".concat(e+1,", d1, d2);\n               dotProd += xC").concat(e+1,".xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ").concat(t.inChannels,") {\n                 dotProd += xC").concat(e+1,".yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             ")))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let d="",p="";n&&(d=a?"vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ".concat(n,"\n         }"):s?"vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ".concat(n,"\n         }"):"vec4 activation(vec4 x) {\n           ".concat(n,"\n         }"),p="result = activation(result);");const f=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode="\n       ".concat(d,"\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ").concat(h,"\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ").concat(f,"\n         ").concat(p,"\n         setOutput(result);\n       }\n     ")}}class SW{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=kL(this.outputShape.length);const{dataFormat:n}=e,a=tL(),s="channelsLast"===n,r=s?1:2,o=s?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":"if(blockIndex < ".concat(t[2]," && pos < ").concat(t[1],") {");let c="";for(let l=0;l<=1;l++)for(let t=0;t<=1;t++)c+="\n          blockIndex = rc.z + ".concat(t,";\n          pos = rc.y + ").concat(l,";\n\n          ").concat(i,"\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[").concat(r,"] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[").concat(o,"] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (").concat(s,") {\n                  innerDims = vec2(d1, ch);\n                  result[").concat(2*l+t,"] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[").concat(2*l+t,"] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ");this.userCode="\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ".concat(c,"\n\n        ").concat(a.output," = result;\n      }\n    ")}}function TW(t,e){const n=t.length;return n>=3?e?[...t.slice(0,-3),t[n-3]*t[n-2],t[n-1]]:[...t.slice(0,-3),t[n-3],t[n-2]*t[n-1]]:!e&&1===n&&t[0]>1?[t[0],1]:null}function CW(t){let{x:e,filter:n,convInfo:a,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:c=null}=t;const l=e.shape,u=s.texData.get(e.dataId),h=a.inChannels,d=l[0]*l[1]*l[2],p=a.outChannels,f="channelsLast"===a.dataFormat,m=!1;let g;const y=[];if(null!=o){const t=TW(o.shape,f);null!=t&&(o=UP({inputs:{x:o},backend:s,attrs:{shape:t}}),y.push(o))}if(null!=r){const t=TW(r.shape,f);null!=t&&(r=UP({inputs:{x:r},backend:s,attrs:{shape:t}}),y.push(r))}if(!((1===d||1===p)&&h>1e3)&&u.isPacked&&f&&null!=u.texture&&l[2]%2!==0&&dt(u.shape.slice(-3),l.slice(-3))){const t=l[0]*l[1]*(l[2]+1),h={dataId:e.dataId,shape:[1,t,a.inChannels],dtype:e.dtype},d=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,ot(PM(u.shape,h.shape),()=>"packed reshape ".concat(u.shape," to ").concat(h.shape," isn't free"));const p=UP({inputs:{x:n},backend:s,attrs:{shape:[1,a.inChannels,a.outChannels]}});y.push(p);const f=tB({a:h,b:p,backend:s,transposeA:false,transposeB:m,bias:r,activation:c,preluActivationWeights:o,leakyreluAlpha:i}),b=s.texData.get(f.dataId);ot(b.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=d,b.shape=a.outShape,g=vP({inputs:{x:f},backend:s}),g.shape=a.outShape,y.push(f)}else{const t=a.outHeight*a.outWidth,l=UP({inputs:{x:e},backend:s,attrs:{shape:f?[a.batchSize,t,a.inChannels]:[a.batchSize,a.inChannels,t]}}),u=UP({inputs:{x:n},backend:s,attrs:{shape:[1,a.inChannels,a.outChannels]}}),h=tB({a:f?l:u,b:f?u:l,transposeA:!f,transposeB:m,backend:s,bias:r,activation:c,preluActivationWeights:o,leakyreluAlpha:i});g=UP({inputs:{x:h},backend:s,attrs:{shape:a.outShape}}),y.push(l),y.push(u),y.push(h)}for(const b of y)s.disposeIntermediateTensorInfo(b);return g}function EW(t){let{x:e,filter:n,convInfo:a,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:c=null}=t;const{filterWidth:l,filterHeight:u,inChannels:h,outWidth:d,outHeight:p,dataFormat:f}=a,m="channelsLast"===f,g=l*u*h,y=p*d,b=[a.batchSize,g,y],x=[];if(null!=o){const t=TW(o.shape,m);null!=t&&(o=UP({inputs:{x:o},backend:s,attrs:{shape:t}}),x.push(o))}if(null!=r){const t=TW(r.shape,m);null!=t&&(r=UP({inputs:{x:r},backend:s,attrs:{shape:t}}),x.push(r))}const w=UP({inputs:{x:n},backend:s,attrs:{shape:[1,g,lt(n.shape)/g]}});x.push(w);const v=new SW(b,a),k=[e.shape,[a.padInfo.top,a.padInfo.left],[a.strideHeight,a.strideWidth],[a.dilationHeight,a.dilationWidth],[a.inChannels],[a.filterWidth*a.inChannels],[a.outWidth]],I=s.runWebGLProgram(v,[e],"float32",k),N=UP({inputs:{x:I},backend:s,attrs:{shape:b}});x.push(I),x.push(N);const S=null!=r,T=null!=o,C="leakyrelu"===c,E=c?OP(c,!0):null,A=new MP(m?N.shape:w.shape,m?w.shape:N.shape,m?[a.batchSize,y,a.outChannels]:[a.batchSize,a.outChannels,y],!0,!1,S,E,T,C),R=m?[N,w]:[w,N];if(r&&R.push(r),T&&R.push(o),C){const t=s.makeTensorInfo([],"float32",Ks(i,"float32"));R.push(t),x.push(t)}const F=s.runWebGLProgram(A,R,"float32"),D=UP({inputs:{x:F},backend:s,attrs:{shape:a.outShape}});x.push(F);for(const _ of x)s.disposeIntermediateTensorInfo(_);return D}const AW={kernelName:Re,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r}=e,{strides:o,pad:i,dataFormat:c,dilations:l,dimRoundingMode:u}=a,h=ru(c),d=Yl(s.shape,r.shape,o,l,i,u,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&Yt().getBool("WEBGL_EXP_CONV")){const t=new NW(d),e=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];p=n.runWebGLProgram(t,[s,r],"float32",e)}else if(Yt().getBool("WEBGL_CONV_IM2COL"))p=EW({x:s,filter:r,convInfo:d,backend:n});else{const t=new kW(d);p=n.runWebGLProgram(t,[s,r],"float32")}else p=CW({x:s,filter:r,convInfo:d,backend:n});const f=UP({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class RW{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,a=t.padInfo.top,s=t.padInfo.left,r="channelsLast"===t.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ".concat(t.batchSize,"; b++) {\n          for (int yR = 0; yR < ").concat(t.outHeight,"; yR++) {\n            int xR = wR + yR * ").concat(e," - ").concat(a,";\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int yC = 0; yC < ").concat(t.outWidth,"; yC++) {\n              int xC = wC + yC * ").concat(n," - ").concat(s,";\n\n              if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                continue;\n              }\n\n              ").concat(r?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);","\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class FW{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,a=t.strideHeight,s=t.strideWidth,r="channelsLast"===t.dataFormat,o=e-1-t.padInfo.top,i=n-1-t.padInfo.left,c=r?1:2,l=r?2:3,u=r?3:1;this.userCode="\n      const ivec2 pads = ivec2(".concat(o,", ").concat(i,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[").concat(u,"];\n\n        ivec2 dyCorner = ivec2(coords[").concat(c,"], coords[").concat(l,"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(e,"; wR++) {\n          float dyR = float(dyRCorner + wR) / ").concat(a,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ").concat(e," - 1 - wR;\n\n          for (int wC = 0; wC < ").concat(n,"; wC++) {\n            float dyC = float(dyCCorner + wC) / ").concat(s,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ").concat(n," - 1 - wC;\n\n            for (int d2 = 0; d2 < ").concat(t.outChannels,"; d2++) {\n\n              if (").concat(r,") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class DW{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,a=t.strideWidth,s=t.padInfo.front,r=t.padInfo.top,o=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ".concat(t.batchSize,"; b++) {\n          for (int yF = 0; yF < ").concat(t.outDepth,"; yF++) {\n            int xF = wF + yF * ").concat(e," - ").concat(s,";\n\n            if (xF < 0 || xF >= ").concat(t.inDepth,") {\n              continue;\n            }\n\n            for (int yR = 0; yR < ").concat(t.outHeight,"; yR++) {\n              int xR = wR + yR * ").concat(n," - ").concat(r,";\n\n              if (xR < 0 || xR >= ").concat(t.inHeight,") {\n                continue;\n              }\n\n              for (int yC = 0; yC < ").concat(t.outWidth,"; yC++) {\n                int xC = wC + yC * ").concat(a," - ").concat(o,";\n\n                if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class _W{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,a=t.filterWidth,s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,i=e-1-t.padInfo.front,c=n-1-t.padInfo.top,l=a-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3(".concat(i,", ").concat(c,", ").concat(l,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ").concat(e,"; wF++) {\n          float dyF = float(dyFCorner + wF) / ").concat(s,".0;\n\n          if (dyF < 0.0 || dyF >= ").concat(t.outDepth,".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ").concat(e," - 1 - wF;\n\n          for (int wR = 0; wR < ").concat(n,"; wR++) {\n            float dyR = float(dyRCorner + wR) / ").concat(r,".0;\n\n            if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ").concat(n," - 1 - wR;\n\n            for (int wC = 0; wC < ").concat(a,"; wC++) {\n              float dyC = float(dyCCorner + wC) / ").concat(o,".0;\n\n              if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ").concat(a," - 1 - wC;\n\n              for (int d2 = 0; d2 < ").concat(t.outChannels,"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}const OW={kernelName:Fe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,dy:r}=e,{strides:o,pad:i,dataFormat:c,dimRoundingMode:l,filterShape:u}=a,h=ru(c),d=Yl(s.shape,u,o,1,i,l,!1,h),p=new RW(d);return n.runWebGLProgram(p,[s,r],"float32")}};class MW{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=kL(this.outputShape.length);const e=t.filterHeight,n=t.filterWidth,a=e-1-t.padInfo.top,s=n-1-t.padInfo.left;this.userCode="\n      const ivec2 pads = ivec2(".concat(a,", ").concat(s,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ").concat(e,"; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ").concat(e," - 1 - wR;\n\n          for (int wC = 0; wC < ").concat(n,"; wC++) {\n            int wCPerm = ").concat(n," - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ").concat(t.outWidth,".0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ").concat(t.outWidth,".0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ").concat(t.outChannels,"; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ").concat(t.outChannels,"; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ").concat(t.outChannels,"; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    ")}}const LW={kernelName:De,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,filter:r}=e,{inputShape:o,strides:i,pad:c,dataFormat:l,dimRoundingMode:u}=a,h=ru(l),d=Yl(o,r.shape,i,1,c,u,!1,h);if(Yt().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const t=[[d.strideHeight,d.strideWidth]],e=new MW(d);return n.runWebGLProgram(e,[s,r],"float32",t)}{const t=new FW(d);return n.runWebGLProgram(t,[s,r],"float32")}}};const zW={kernelName:_e,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r}=e,{strides:o,pad:i,dilations:c}=a,l=Zl(s.shape,r.shape,o,c,i),u=new IW(l);return n.runWebGLProgram(u,[s,r],"float32")}};const PW={kernelName:Oe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,dy:r}=e,{strides:o,pad:i,filterShape:c}=a,l=Zl(s.shape,c,o,1,i),u=new DW(l);return n.runWebGLProgram(u,[s,r],"float32")}};const BW={kernelName:Me,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,filter:r}=e,{pad:o,strides:i,inputShape:c}=a,l=Zl(c,r.shape,i,1,o),u=new _W(l);return n.runWebGLProgram(u,[s,r],"float32")}},WW=DP({opSnippet:FP+"\n  return cos(x);\n",packedOpSnippet:"\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ".concat(xP,"\n  return result;\n")}),VW={kernelName:Le,backendName:"webgl",kernelFunc:WW},UW=DP({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),GW={kernelName:ze,backendName:"webgl",kernelFunc:UW};class HW{constructor(t,e,n,a,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[r,o,i,c]=t,[l]=e,[u,h]=n;this.outputShape=[l,u,h,c];const d="bilinear"===a?1:0,[p,f]=["".concat(o-1,".0"),"".concat(i-1,".0")],[m,g,y]=u>1?["".concat((o-1)/(u-1)),"(y2-y1) * height_ratio","y1*".concat(p," + float(y)*(height_scale)")]:["0.0","0.0","0.5 * (y1+y2) * ".concat(p)],[b,x,w]=h>1?["".concat((i-1)/(h-1)),"(x2-x1) * width_ratio","x1*".concat(f," + float(x)*(width_scale)")]:["0.0","0.0","0.5 * (x1+x2) * ".concat(f)];this.userCode="\n      const float height_ratio = float(".concat(m,");\n      const float width_ratio = float(").concat(b,");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ").concat(r,") {\n          return;\n        }\n\n        float height_scale = ").concat(g,";\n        float width_scale = ").concat(x,";\n\n        float in_y = ").concat(y,";\n        if( in_y < 0.0 || in_y > ").concat(p," ) {\n          setOutput(float(").concat(s,"));\n          return;\n        }\n        float in_x = ").concat(w,";\n        if( in_x < 0.0 || in_x > ").concat(f," ) {\n          setOutput(float(").concat(s,"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(").concat(d," == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ")}}const jW={kernelName:We,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:a}=t,{image:s,boxes:r,boxInd:o}=e,{cropSize:i,method:c,extrapolationValue:l}=a,u=new HW(s.shape,r.shape,i,c,l);return n.runWebGLProgram(u,[s,r,o],"float32")}};var qW;!function(t){t.Prod="*",t.Sum="+"}(qW||(qW={}));class KW{constructor(t,e,n,a){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const s=this.outputShape.length,r=this.op===qW.Prod?"1.0":"0.0",o=n?r:"getX(".concat(XW(s,"coords",this.op),")"),i=this.outputShape[this.outputShape.length-1];let c="",l="";n?(c=a?"end != ".concat(i-1):"end != 0",l=a?"end + 1":"end - 1"):(c=a?"end + pow2 < ".concat(i):"end >= pow2",l=a?"end + pow2":"end - pow2"),this.userCode="\n      void main() {\n        ".concat(gL(s)," coords = getOutputCoords();\n        int end = ").concat(YW(s,"coords",this.op),";\n        float val = ").concat(o,";\n        int pow2 = int(pow(2.0, index));\n        if (").concat(c,") {\n          int idx = ").concat(l,";\n          ").concat(YW(s,"coords",this.op)," = idx;\n          val ").concat(this.op,"= getX(").concat(XW(s,"coords",this.op),");\n        }\n        setOutput(val);\n      }\n    ")}}function XW(t,e,n){if(1===t)return"".concat(e);if(2===t)return"".concat(e,".x, ").concat(e,".y");if(3===t)return"".concat(e,".x, ").concat(e,".y, ").concat(e,".z");if(4===t)return"".concat(e,".x, ").concat(e,".y, ").concat(e,".z, ").concat(e,".w");throw new Error("Cumulative ".concat(n," for rank ").concat(t," is not yet supported"))}function YW(t,e,n){if(1===t)return"".concat(e);if(2===t)return"".concat(e,".y");if(3===t)return"".concat(e,".z");if(4===t)return"".concat(e,".w");throw new Error("Cumulative ".concat(n," for rank ").concat(t," is not yet supported"))}function ZW(t,e,n,a,s,r){const o=e.shape.length,i=rh([a],o);let c=e;null!=i&&(c=QP({inputs:{x:e},backend:n,attrs:{perm:i}}));const l=ih(1,o)[0];if(l!==o-1)throw new Error("WebGL cumprod shader expects an inner-most axis=".concat(e.shape.length-1," ")+"but got axis=".concat(a));const u=c.shape[l];let h=vP({inputs:{x:c},backend:n});for(let d=0;d<=Math.ceil(Math.log2(u))-1;d++){const e=new KW(t,c.shape,!1,r),a=[[d]],s=h;h=n.runWebGLProgram(e,[h],h.dtype,a),n.disposeIntermediateTensorInfo(s)}if(s){const e=new KW(t,c.shape,s,r),a=h;h=n.runWebGLProgram(e,[h],h.dtype),n.disposeIntermediateTensorInfo(a)}if(null!=i){const t=QP({inputs:{x:h},backend:n,attrs:{perm:oh(i)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(c),t}return h}const JW={kernelName:Pe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,exclusive:o,reverse:i}=a;return ZW(qW.Prod,s,n,r,o,i)}};const QW={kernelName:Be,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,exclusive:o,reverse:i}=a;return ZW(qW.Sum,s,n,r,o,i)}};const $W={kernelName:Ve,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,weights:r}=e,{size:o,binaryOutput:i}=a;if(1===s.shape.length){const t=n.readSync(s.dataId),e=n.readSync(r.dataId),a=tz(t,e,r.dtype,r.shape,o);return n.makeTensorInfo([o],r.dtype,a)}if(2===s.shape.length){const t=n.bufferSync(s),e=n.bufferSync(r),a=ez(t,e,o,i);return n.makeTensorInfo(a.shape,r.dtype,a.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+"".concat(s.shape.length,"."))}};class tV{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ".concat(this.getHeightCoordString(),";\n      int w = ").concat(this.getWidthCoordString(),";\n      int d = ").concat(this.getDepthCoordString(),";\n\n      int in_h = h / ").concat(e,";\n      int offset_h = imod(h, ").concat(e,");\n      int in_w = w / ").concat(e,";\n      int offset_w = imod(w, ").concat(e,");\n      int offset_d = (offset_h * ").concat(e," + offset_w) *\n        ").concat(this.getOutputDepthSize(),";\n      int in_d = d + offset_d;\n\n      float result = ").concat(this.getInputSamplingString(),";\n      setOutput(result);\n    }\n  ")}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const eV={kernelName:Ue,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{blockSize:r,dataFormat:o}=a,i=s.shape[0],c=("NHWC"===o?s.shape[1]:s.shape[2])*r,l=("NHWC"===o?s.shape[2]:s.shape[3])*r,u=("NHWC"===o?s.shape[3]:s.shape[1])/(r*r),h=new tV("NHWC"===o?[i,c,l,u]:[i,u,c,l],r,o);return n.runWebGLProgram(h,[s],s.dtype)}};class nV{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=kL(this.outputShape.length);const r=t.filterHeight,o=t.filterWidth,i=t.outChannels/t.inChannels;let c="",l="";n&&(c=a?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ".concat(n,"\n        }"):s?"float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ".concat(n,"\n        }"):"\n          float activation(float x) {\n            ".concat(n,"\n          }\n        "),l="result = activation(result);");const u=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode="\n      ".concat(c,"\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ").concat(i,";\n        int q = d2 - d1 * ").concat(i,";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ").concat(r,"; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ").concat(o,"; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ").concat(u,"\n        ").concat(l,"\n        setOutput(result);\n      }\n    ")}}class aV{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=kL(this.outputShape.length);const r=t.outChannels/t.inChannels,o=t.padInfo.left,i=t.strideWidth,c=t.dilationWidth,l=t.filterHeight,u=t.filterWidth,h=u;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let g=0;g<u;g++)d+="\n          vec4 xTexelC".concat(2*g,";\n          int xTexelC").concat(2*g,"Ready;\n          vec4 xTexelC").concat(2*g+1,";\n          int xTexelC").concat(2*g+1,"Ready;\n          vec4 xC").concat(g,";");d+="\n    for (int r = 0; r < ".concat(l,"; r++) {\n      ");for(let g=0;g<u;g++)d+="\n          xTexelC".concat(2*g," = vec4(0.0);\n          xTexelC").concat(2*g,"Ready = 0;\n          xTexelC").concat(2*g+1," = vec4(0.0);\n          xTexelC").concat(2*g+1,"Ready = 0;\n          xC").concat(g," = vec4(0.0);");d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let g=0;g<(h+1)/2;g++){const t=2*g;if(d+="\n          xC = xCCorner + ".concat(t*c,";\n          "),1===i){if(t<u&&(o%2===1?(d+="\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC".concat(t,"Ready == 0) {\n                  xTexelC").concat(t," = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC").concat(t,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(t,"Ready = 1;\n                }\n              "),d+=1===c&&t>0?"\n                xC".concat(t," = vec4(xTexelC").concat(t-2,".zw, xTexelC").concat(t,".xy);\n                "):"\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC".concat(t," = vec4(previous.zw, xTexelC").concat(t,".xy);\n                  } else {\n                    xC").concat(t," = vec4(0.0, 0.0, xTexelC").concat(t,".xy);\n                  }\n                  ")):d+="\n                if (xC >= 0 && xC < inDims[1] && xTexelC".concat(t,"Ready == 0) {\n                  xTexelC").concat(t," = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC").concat(t,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(t,"Ready = 1;\n                }\n\n                xC").concat(t," = xTexelC").concat(t,";\n                "),t+1<u)){const e=o%2===0?et(c):c;c%2===0&&o%2===1||c%2!==0&&o%2!==1?(d+="\n                  xCOffset = xC + imod(pads[1], 2) + ".concat(e,";\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(t+1,"Ready == 0) {\n                    xTexelC").concat(t+1," = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC").concat(t+1,".zw = vec2(0.0);\n                    }\n                    xTexelC").concat(t+1,"Ready = 1;\n                  }\n                  "),d+=c>1?"\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC".concat(t+1," = vec4(previous.zw, xTexelC").concat(t+1,".xy);\n                    } else {\n                     xC").concat(t+1," = vec4(0.0, 0.0, xTexelC").concat(t+1,".xy);\n                    }\n                    "):"\n                    xC".concat(t+1," = vec4(xTexelC").concat(t,".zw, xTexelC").concat(t+1,".xy);\n                    ")):d+=1===e?"\n                    xC".concat(t+1," = xTexelC").concat(t,";\n                    "):"\n                    xCOffset = xC + ".concat(e,";\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(t+1,"Ready == 0) {\n                      xTexelC").concat(t+1," = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC").concat(t+1,".zw = vec2(0.0);\n                      }\n                      xTexelC").concat(t+1,"Ready = 1;\n                    }\n\n                    xC").concat(t+1," = xTexelC").concat(t+1,";\n                    ")}}else t<u&&(o%2===1?(d+="\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC".concat(t,"Ready == 0) {\n                  xTexelC").concat(t," = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC").concat(t,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(t,"Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC").concat(t+1,"Ready == 0) {\n                  xTexelC").concat(t+1," = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC").concat(t+1,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(t+1,"Ready = 1;\n                }\n\n                xC").concat(t," = vec4(xTexelC").concat(t,".zw, xTexelC").concat(t+1,".zw);\n              "),t+1<u&&(d+="\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC".concat(t+1," = vec4(xTexelC").concat(t+1,".xy, final.xy);\n                "))):(d+="\n                if(xC >= 0 && xC < inDims[1] && xTexelC".concat(t,"Ready == 0) {\n                  xTexelC").concat(t," = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC").concat(t,".zw = vec2(0.0);\n                  }\n                  xTexelC").concat(t,"Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC").concat(t+1,"Ready == 0) {\n                  xTexelC").concat(t+1," = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC").concat(t+1,".zw = vec2(0.);\n                  }\n                  xTexelC").concat(t+1,"Ready = 1;\n                }\n\n                xC").concat(t," = vec4(\n                  xTexelC").concat(t,".xy, xTexelC").concat(t+1,".xy);\n              "),t+1<u&&(d+="\n                  xC".concat(t+1," = vec4(xTexelC").concat(t,".zw, xTexelC").concat(t+1,".zw);\n                "))));t<u&&(d+="\n            wTexel = getW(r, ".concat(t,", d1, q);\n            dotProd += xC").concat(t," * vec4(wTexel.xz, wTexel.xz);\n          "),t+1<u&&(d+="\n              wTexel = getW(r, ".concat(t+1,", d1, q);\n              dotProd += xC").concat(t+1," * vec4(wTexel.xz, wTexel.xz);\n            ")))}d+="\n    }\n  ",d+="\n      }\n    ";let p="",f="";n&&(p=a?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ".concat(n,"\n        }"):s?"vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ".concat(n,"\n        }"):"vec4 activation(vec4 x) {\n          ".concat(n,"\n        }"),f="result = activation(result);");const m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode="\n      ".concat(p,"\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ").concat(r,";\n        int q = d2 - d1 * ").concat(r,";\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ").concat(d,"\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ").concat(m,"\n        ").concat(f,"\n        setOutput(result);\n      }\n    ")}}const sV={kernelName:Ge,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r}=e,{strides:o,pad:i,dilations:c,dimRoundingMode:l}=a;let u=c;null==u&&(u=[1,1]),ot(au(o,u),()=>"Error in depthwiseConv2d: Either strides or dilations must be "+"1. Got strides ".concat(o," and dilations '").concat(u,"'"));const h=Yl(s.shape,r.shape,o,u,i,l,!0);let d;d=Yt().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels===1?new aV(h):new nV(h);const p=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(d,[s,r],"float32",p)}};class rV{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,a=t.padInfo.top,s=t.padInfo.left,r=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ".concat(r," + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ").concat(t.batchSize,"; b++) {\n          for (int yR = 0; yR < ").concat(t.outHeight,"; yR++) {\n            int xR = wR + yR * ").concat(e," - ").concat(a,";\n\n            if (xR < 0 || xR >= ").concat(t.inHeight,") {\n              continue;\n            }\n\n            for (int yC = 0; yC < ").concat(t.outWidth,"; yC++) {\n              int xC = wC + yC * ").concat(n," - ").concat(s,";\n\n              if (xC < 0 || xC >= ").concat(t.inWidth,") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class oV{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,a=t.strideHeight,s=t.strideWidth,r=e-1-t.padInfo.top,o=n-1-t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2(".concat(r,", ").concat(o,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ").concat(e,"; wR++) {\n          float dyR = float(dyRCorner + wR) / ").concat(a,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ").concat(e," - 1 - wR;\n\n          for (int wC = 0; wC < ").concat(n,"; wC++) {\n            float dyC = float(dyCCorner + wC) / ").concat(s,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ").concat(n," - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ").concat(i,"; dm++) {\n              int d2 = d1 * ").concat(i," + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}const iV={kernelName:He,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,dy:r}=e,{strides:o,dilations:i,pad:c,dimRoundingMode:l,filterShape:u}=a,h=Yl(s.shape,u,o,i,c,l,!0),d=new rV(h);return n.runWebGLProgram(d,[s,r],"float32")}};const cV={kernelName:je,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,filter:r}=e,{strides:o,dilations:i,pad:c,dimRoundingMode:l,inputShape:u}=a,h=Yl(u,r.shape,o,i,c,l,!0),d=new oV(h);return n.runWebGLProgram(d,[s,r],"float32")}};class lV{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const uV={kernelName:qe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:a}=e,s=[...a.shape,...a.shape],r=lt(a.shape),o=UP({inputs:{x:a},backend:n,attrs:{shape:[r]}}),i=new lV(r),c=n.runWebGLProgram(i,[o],o.dtype),l=UP({inputs:{x:c},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(c),l}};class hV{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:n,padInfo:a,strideHeight:s,strideWidth:r,filterHeight:o,filterWidth:i,dilationHeight:c,dilationWidth:l}=t,{top:u,left:h}=a;this.userCode="\n      const ivec2 strides = ivec2(".concat(s,", ").concat(r,");\n      const ivec2 pads = ivec2(").concat(u,", ").concat(h,");\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ").concat(o,"; h++) {\n          int hIn = hBeg + h * ").concat(c,";\n\n          if (hIn >= 0 && hIn < ").concat(e,") {\n            for (int w = 0; w < ").concat(i,"; w++) {\n              int wIn = wBeg + w * ").concat(l,";\n\n              if (wIn >= 0 && wIn < ").concat(n,") {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    ")}}const dV={kernelName:Ke,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r}=e,{strides:o,pad:i,dilations:c}=a,l=ql(s.shape,r.shape,o,i,"NHWC",c);let u;const h=new hV(l);u=n.runWebGLProgram(h,[s,r],"float32");const d=UP({inputs:{x:u},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(u),d}};const pV={kernelName:Qe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{equation:s}=a,r=e,{allDims:o,summedDims:i,idDims:c}=Rm(s,r.length);Dm(o.length,c,r);const{path:l,steps:u}=_m(i,c),h=u.length;let d=null,p=o.length;const f=[];for(let m=0;m<h;++m){for(const t of u[m]){const{permutationIndices:e,expandDims:a}=Fm(p,c[t]);let s;Om(e)?s=r[t]:(s=QP({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),f.push(s));const o=s.shape.slice();for(let t=0;t<a.length;++t)o.splice(a[t],0,1);dt(s.shape,o)||(s=UP({inputs:{x:s},backend:n,attrs:{shape:o}}),f.push(s)),null===d?d=s:(d=WP({inputs:{a:s,b:d},backend:n}),f.push(d))}m<h-1&&(l[m]>=0&&(d=ZP({inputs:{x:d},backend:n,attrs:{axis:l[m]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const m of f)m!==d&&n.disposeIntermediateTensorInfo(m);return d}},fV=DP({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),mV={kernelName:$e,backendName:"webgl",kernelFunc:fV},gV={kernelName:tn,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n}=t,{dy:a,y:s}=e,r=Yt().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new wP("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",a.shape,s.shape):new bP("return (b >= 0.0) ? a : a * (b + 1.0);",a.shape,s.shape);return n.runWebGLProgram(r,[a,s],a.dtype)}},yV=_P({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:oz}),bV={kernelName:nn,backendName:"webgl",kernelFunc:yV},xV=DP({opSnippet:'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = '.concat(dm,";\n  float a1 = ").concat(pm,";\n  float a2 = ").concat(fm,";\n  float a3 = ").concat(mm,";\n  float a4 = ").concat(gm,";\n  float a5 = ").concat(ym,";\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n")}),wV={kernelName:en,backendName:"webgl",kernelFunc:xV},vV=DP({opSnippet:FP+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:iz,dtype:"float32"}),kV={kernelName:an,backendName:"webgl",kernelFunc:vV};function IV(t){const{inputs:e,attrs:n,backend:a}=t,{dim:s}=n,{input:r}=e,o=r.shape.length,i=r.shape.slice();let c=s;return s<0&&(ot(-(o+1)<=s,()=>"Axis must be in the interval [".concat(-(o+1),", ").concat(o,"]")),c=o+s+1),i.splice(c,0,1),UP({inputs:{x:r},backend:a,attrs:{shape:i}})}const NV={kernelName:sn,backendName:"webgl",kernelFunc:IV},SV="return exp(x) - 1.0;",TV=DP({opSnippet:SV,packedOpSnippet:SV,cpuKernelImpl:cz}),CV={kernelName:rn,backendName:"webgl",kernelFunc:TV};class EV{constructor(t,e,n){this.variableNames=["real","imag"];const a=e[1];this.outputShape=e;const s=n?"2.0 * ".concat(Math.PI):"-2.0 * ".concat(Math.PI),r=n?"".concat(a,".0"):"1.0";let o;if("real"===t)o="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error('FFT component must be either "real" or "imag", got '.concat(t,"."));o="return real * expI + imag * expR;"}this.userCode="\n      const float exponentMultiplier = ".concat(s,";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ").concat(o,"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(").concat(a,");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ").concat(a,"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ").concat(r,";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ")}}function AV(t,e,n){const a=n.texData.get(t.dataId),s=lt(t.shape),r=t.shape[t.shape.length-1],o=UP({inputs:{x:t},backend:n,attrs:{shape:[s/r,r]}}),i=o.shape,c=new EV("real",i,e),l=new EV("imag",i,e),u=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:i},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:i}],h=n.runWebGLProgram(c,u,"float32"),d=n.runWebGLProgram(l,u,"float32"),p=IP({inputs:{real:h,imag:d},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d);const f=UP({inputs:{x:p},backend:n,attrs:{shape:t.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(p),f}const RV={kernelName:on,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:a}=e;return AV(a,!1,n)}};class FV{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function DV(t){const{backend:e,attrs:n}=t,{shape:a,value:s}=n;let{dtype:r}=n;if(r=r||Dt(s),"string"===r){const t=It(r,lt(a));return t.fill(s),e.makeTensorInfo(a,r,t)}{const t=new FV(a,s),n=[[s]];return e.runWebGLProgram(t,[],r,n)}}const _V={kernelName:cn,backendName:"webgl",kernelFunc:DV};class OV{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode="\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ".concat(e," - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ").concat(e,") {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    ")}}const MV={kernelName:ln,backendName:"webgl",kernelFunc:t=>{let{inputs:e,backend:n}=t;const{image:a}=e,s=n,r=new OV(a.shape);return s.runWebGLProgram(r,[a],a.dtype)}},LV="return floor(x);",zV=DP({opSnippet:LV,packedOpSnippet:LV,cpuKernelImpl:lz}),PV={kernelName:un,backendName:"webgl",kernelFunc:zV},BV=_P({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),WV={kernelName:hn,backendName:"webgl",kernelFunc:BV};class VV{constructor(t){this.variableNames=["A"];const e=tL(),[n,a]=t;this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(".concat(a,".0, ").concat(n,".0);\n\n        vec4 values = ").concat(e.texture2D,"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ")}}class UV{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=tL(),[n,a]=t;this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(".concat(a,".0, ").concat(n,".0);\n            vec4 values = ").concat(e.texture2D,"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ").concat(e.output," = result;\n      }\n    ")}}const GV={kernelName:fs,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t;let{pixels:s}=e;const{numChannels:r}=a,o="undefined"!==typeof HTMLVideoElement&&s instanceof HTMLVideoElement,i="undefined"!==typeof HTMLImageElement&&s instanceof HTMLImageElement,[c,l]=o?[s.videoWidth,s.videoHeight]:[s.width,s.height],u=[l,c],h=[l,c,r];if(i||o){const t=Yt().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=HV&&t===jV||(jV=t,HV=document.createElement("canvas").getContext("2d",{willReadFrequently:jV})),HV.canvas.width=c,HV.canvas.height=l,HV.drawImage(s,0,0,c,l),s=HV.canvas}const d=n.makeTensorInfo(u,"int32");n.texData.get(d.dataId).usage=YO.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),s);const p=Yt().getBool("WEBGL_PACK")?new UV(h):new VV(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let HV,jV=Yt().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const qV={kernelName:ys,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r,bias:o,preluActivationWeights:i}=e,{strides:c,pad:l,dataFormat:u,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=a,m=ru(u),g=Yl(s.shape,r.shape,c,h,l,d,!1,m);let y;const b=[],x=null!=o,w=null!=i,v="leakyrelu"===p,k=()=>{const t=[s,r],e=(t,e)=>{if("NCHW"===e&&1===t.shape.length&&1!==t.shape[0]){const e=UP({inputs:{x:t},backend:n,attrs:{shape:[t.shape[0],1,1]}});return b.push(e),e}return t};if(x&&t.push(e(o,u)),w&&t.push(e(i,u)),v){const e=n.makeTensorInfo([],"float32",Ks(f,"float32"));t.push(e),b.push(e)}return t};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&Yt().getBool("WEBGL_EXP_CONV")){const t=p?OP(p,!0):null,e=new NW(g,x,t,w,v),a=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],s=k();y=n.runWebGLProgram(e,s,"float32",a)}else if(Yt().getBool("WEBGL_CONV_IM2COL"))y=EW({x:s,filter:r,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const t=p?OP(p,!1):null,e=new kW(g,x,t,w,v),a=k();y=n.runWebGLProgram(e,a,"float32")}else y=CW({x:s,filter:r,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const I=UP({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach(t=>n.disposeIntermediateTensorInfo(t)),I}};const KV={kernelName:bs,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,filter:r,bias:o,preluActivationWeights:i}=e,{strides:c,pad:l,dilations:u,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=a,f=[];let m=u;null==m&&(m=[1,1]),ot(au(c,m),()=>"Error in depthwiseConv2d: Either strides or dilations must be "+"1. Got strides ".concat(c," and dilations '").concat(m,"'"));const g=Yl(s.shape,r.shape,c,m,l,h,!0),y=Yt().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=d?OP(d,y):null,x=[s,r],w=null!=o,v=null!=i,k="leakyrelu"===d;if(w&&x.push(o),v&&x.push(i),k){const t=n.makeTensorInfo([],"float32",Ks(p,"float32"));x.push(t),f.push(t)}let I;I=y?new aV(g,w,b,v,k):new nV(g,w,b,v,k);const N=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(I,x,"float32",N);return f.forEach(t=>n.disposeIntermediateTensorInfo(t)),S}};class XV{constructor(t,e,n,a){this.sliceDim=t,this.strides=e,this.paramsShape=a,this.variableNames=["x","indices"],this.outputShape=n;const s=gL(n.length);let r="\n    int index;";for(let o=0;o<this.sliceDim;o++)r+="\n          index = round(getIndices(coords[0], ".concat(o,"));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ").concat(this.paramsShape[o],";\n          flattenIndex += index * ").concat(this.strides[o],";");this.userCode="\n         void main() {\n          ".concat(s," coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ").concat(r,"\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      ")}}const YV={kernelName:fn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{params:a,indices:s}=e,r=s.shape,o=r[r.length-1],i=lt(a.shape),[c,l,u,h]=Yc(a,s),d=UP({inputs:{x:s},backend:n,attrs:{shape:[l,o]}}),p=UP({inputs:{x:a},backend:n,attrs:{shape:[lt(a.shape)/u,u]}});if(n.shouldExecuteOnCPU([a,s])||"string"===a.dtype){const t=n.readSync(s.dataId),e=n.bufferSync(a),r=uz(t,e,a.dtype,l,o,u,h,a.shape,i);return n.makeTensorInfo(c,a.dtype,r.values)}const f=new XV(o,h,[l,u],a.shape),m=n.runWebGLProgram(f,[p,d],p.dtype),g=UP({inputs:{x:m},backend:n,attrs:{shape:c}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),g}};class ZV{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const n=gL(this.rank),a=function(t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let a=0;a<t.length;a++)2===a?n.push("index"):n.push("".concat(e[a]));return n.join()}(t);this.userCode="\n      void main() {\n        ".concat(n," resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ").concat(t[2],") ? 1.0 : 0.0;\n        setOutput(inBounds * getA(").concat(a,"));\n      }\n    ")}}function JV(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,indices:r}=e,{axis:o,batchDims:i}=a,c=wt(o,s.shape)[0];if(Yt().get("DEBUG")){const t=n.readSync(r.dataId),e=s.shape[c];for(let n=0;n<t.length;++n){const a=t[n];ot(a<=e-1&&a>=0,()=>"GatherV2: the index value ".concat(a," is not in [0, ").concat(e-1,"]"))}}const l=Jm(s,r,c,i),u=lt(r.shape),h=[],d=UP({inputs:{x:s},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),p=UP({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});h.push(d),h.push(p);const f=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const t=n.bufferSync(p),e=n.bufferSync(d),a=hz(e,t,f);return h.forEach(t=>n.disposeIntermediateTensorInfo(t)),n.makeTensorInfo(l.outputShape,a.dtype,a.values)}const m=new ZV(d.shape,f),g=n.runWebGLProgram(m,[d,p],d.dtype);h.push(g);const y=UP({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return h.forEach(t=>n.disposeIntermediateTensorInfo(t)),y}const QV={kernelName:pn,backendName:"webgl",kernelFunc:JV},$V=_P({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:dz,dtype:"bool"}),tU={kernelName:mn,backendName:"webgl",kernelFunc:$V},eU=_P({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:pz}),nU={kernelName:gn,backendName:"webgl",kernelFunc:eU};const aU={kernelName:bn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:a}=e;return AV(a,!0,n)}},sU=DP({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),rU={kernelName:wn,backendName:"webgl",kernelFunc:sU},oU=DP({opSnippet:"return float(isinf(x));",dtype:"bool"}),iU={kernelName:vn,backendName:"webgl",kernelFunc:oU},cU=DP({opSnippet:"return float(isnan(x));",dtype:"bool"}),lU={kernelName:kn,backendName:"webgl",kernelFunc:cU},uU=_P({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:fz,dtype:"bool"}),hU={kernelName:Nn,backendName:"webgl",kernelFunc:uU},dU=_P({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:mz,dtype:"bool"}),pU={kernelName:Sn,backendName:"webgl",kernelFunc:dU};const fU={kernelName:Tn,backendName:"webgl",kernelFunc:function(t){const{backend:e,attrs:n}=t,{start:a,stop:s,num:r}=n,o=gz(a,s,r);return e.makeTensorInfo([o.length],"float32",o)}},mU=DP({opSnippet:FP+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:yz}),gU={kernelName:Cn,backendName:"webgl",kernelFunc:mU},yU=DP({opSnippet:FP+"\n  return log(1.0 + x);\n"}),bU={kernelName:En,backendName:"webgl",kernelFunc:yU},xU=_P({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),wU={kernelName:An,backendName:"webgl",kernelFunc:xU},vU=DP({opSnippet:"return float(!(x >= 1.0));"}),kU={kernelName:Rn,backendName:"webgl",kernelFunc:vU},IU=_P({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),NU={kernelName:Fn,backendName:"webgl",kernelFunc:IU};class SU{constructor(t,e,n,a,s){this.variableNames=["x"],this.outputShape=[];const r=e,o=t[3]-1;let i;this.outputShape=t;const c="float(".concat(n,") + float(").concat(a,") * sum");i=.5===s?"inversesqrt(".concat(c,")"):1===s?"1.0/(".concat(c,")"):"exp(log(".concat(c,") * float(-").concat(s,"));"),this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -".concat(r,"; j <= ").concat(r,"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ").concat(o,") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ").concat(i,";\n        setOutput(val);\n      }\n    ")}}class TU{constructor(t,e,n,a,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=e,o=t[3]-1;let i;this.outputShape=t;const c="float(".concat(n,") + float(").concat(a,") * sum");i=.5===s?"inversesqrt(".concat(c,")"):1===s?"1.0/(".concat(c,")"):"exp(log(".concat(c,") * float(-").concat(s,"));"),this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ".concat(this.outputShape[3],";\n        bool hasNextRow = c < ").concat(this.outputShape[2],";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ").concat(r,";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ").concat(r,"; j <= ").concat(r,"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(").concat(o,"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ").concat(i,";\n        setOutput(result);\n      }\n    ")}}const CU={kernelName:Mn,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{depthRadius:r,bias:o,alpha:i,beta:c}=a,l=Yt().getBool("WEBGL_PACK_NORMALIZATION")?new TU(s.shape,r,o,i,c):new SU(s.shape,r,o,i,c);return n.runWebGLProgram(l,[s],s.dtype)}};class EU{constructor(t,e,n,a,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=a,this.beta=s,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ".concat(this.depth,"; ++d) {\n          int depthBegin = int(max(0.0, float(d - ").concat(e,")));\n          int depthEnd = int(min(float(").concat(this.depth,"),\n              float(d + ").concat(e," + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ").concat(this.depth,";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(").concat(a,") * norm + float(").concat(n,");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(").concat(a,")\n                * float(").concat(s,")\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ").concat(s,");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ")}}const AU={kernelName:Ln,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:a}=t,{x:s,y:r,dy:o}=e,{depthRadius:i,bias:c,alpha:l,beta:u}=a,h=new EU(s.shape,i,c,l,u);return n.runWebGLProgram(h,[s,r,o],s.dtype)}};function RU(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{reductionIndices:r,keepDims:o}=a,i=s.shape.length,c=wt(r,s.shape);let l=c;const u=rh(l,i),h=null!=u,d=n.shouldExecuteOnCPU([s]);let p=s;if(h){if(d){const t=n.texData.get(p.dataId).values,e=new Array(i);for(let n=0;n<e.length;n++)e[n]=s.shape[u[n]];const a=qz(t,s.shape,s.dtype,u,e);p=n.makeTensorInfo(e,s.dtype);n.texData.get(p.dataId).values=a}else p=YP(s,u,n);l=ih(l.length,i)}sh("max",l,i);const[f,m]=nh(p.shape,l);let g,y=f;if(o&&(y=ah(f,c)),d){const t=n.texData.get(p.dataId).values,e=bz(t,lt(m),y,s.dtype);g=n.makeTensorInfo(y,s.dtype);n.texData.get(g.dataId).values=e}else g=function(t,e,n,a){const s=lt(e),r=UP({inputs:{x:t},attrs:{shape:[lt(t.shape)/s,s]},backend:a}),o=qP(r,t.dtype,"max",a),i=UP({inputs:{x:o},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(r),a.disposeIntermediateTensorInfo(o),i}(p,m,y,n);return h&&n.disposeIntermediateTensorInfo(p),g}const FU={kernelName:Pn,backendName:"webgl",kernelFunc:RU},DU=_P({opSnippet:yP+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+xP+"\n  return result;\n",cpuKernelImpl:xz}),_U={kernelName:Bn,backendName:"webgl",kernelFunc:DU};const OU={kernelName:Wn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e;QM(s,"maxPool");const{filterSize:r,strides:o,pad:i,dimRoundingMode:c}=a;ot(au(o,1),()=>"Error in maxPool: Either strides or dilations must be 1. "+"Got strides ".concat(o," and dilations '").concat(1,"'"));const l=Kl(s.shape,r,o,1,i,c);if(1===l.filterWidth&&1===l.filterHeight&&dt(l.inShape,l.outShape))return vP({inputs:{x:s},backend:n});const u=new _B(l,"max",!1);return n.runWebGLProgram(u,[s],s.dtype)}};const MU={kernelName:Un,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{filterSize:r,strides:o,pad:i,dataFormat:c,dimRoundingMode:l}=a,u=Xl(s.shape,r,o,[1,1,1],i,l,c),h=new OB(u,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};class LU{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,a=t.dilationHeight,s=t.effectiveFilterHeight,r=t.effectiveFilterWidth,o=s-1-t.padInfo.top,i=r-1-t.padInfo.left,c=s*r-1;this.userCode="\n      const ivec2 pads = ivec2(".concat(o,", ").concat(i,");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ").concat(s,";\n          wR += ").concat(a,") {\n          float dyR = float(dyRCorner + wR) / ").concat(e,".0;\n\n          if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ").concat(r,"; wC++) {\n            float dyC = float(dyCCorner + wC) / ").concat(n,".0;\n\n            if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ").concat(c," - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ").concat(r," + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}class zU{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,r=t.dilationHeight,o=t.dilationWidth,i=t.effectiveFilterDepth,c=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=i-1-t.padInfo.front,h=c-1-t.padInfo.top,d=l-1-t.padInfo.left,p=i*c*l-1;this.userCode="\n      const ivec3 pads = ivec3(".concat(u,", ").concat(h,", ").concat(d,");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ").concat(i,";\n           wD += ").concat(s,") {\n          float dyD = float(dyDCorner + wD) / ").concat(e,".0;\n\n          if (dyD < 0.0 || dyD >= ").concat(t.outDepth,".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ").concat(c,";\n              wR += ").concat(r,") {\n            float dyR = float(dyRCorner + wR) / ").concat(n,".0;\n\n            if (dyR < 0.0 || dyR >= ").concat(t.outHeight,".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ").concat(l,";\n                wC += ").concat(o,") {\n              float dyC = float(dyCCorner + wC) / ").concat(a,".0;\n\n              if (dyC < 0.0 || dyC >= ").concat(t.outWidth,".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ").concat(p," -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ").concat(c," * ").concat(l," +\n                  wR * ").concat(l," + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ")}}const PU={kernelName:Gn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,input:r}=e,o=r,{filterSize:i,strides:c,pad:l,dimRoundingMode:u}=a,h=Xl(o.shape,i,c,[1,1,1],l,u),d=new OB(h,"max",!0),p=n.runWebGLProgram(d,[o],o.dtype),f=new zU(h),m=n.runWebGLProgram(f,[s,p],o.dtype);return n.disposeIntermediateTensorInfo(p),m}};const BU={kernelName:Vn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{dy:s,input:r,output:o}=e,i=r;QM([r,o],"maxPoolGrad");const{filterSize:c,strides:l,pad:u,dimRoundingMode:h}=a,d=Kl(i.shape,c,l,1,u,h),p=new _B(d,"max",!0),f=n.runWebGLProgram(p,[i],i.dtype),m=new LU(d),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};const WU={kernelName:Hn,backendName:"webgl",kernelFunc:t=>{let{inputs:e,attrs:n,backend:a}=t;const{x:s}=e,{filterSize:r,strides:o,pad:i,includeBatchInIndex:c}=n,l=a;ot(4===s.shape.length,()=>"Error in maxPool: input must be rank 4 but got rank ".concat(s.shape.length,"."));const u=[1,1];ot(au(o,u),()=>"Error in maxPool: Either strides or dilations must be 1. "+"Got strides ".concat(o," and dilations '").concat(u,"'"));const h=Kl(s.shape,r,o,u,i),[d,p]=function(t,e,n,a){let s=new _B(n,"max",!1);const r=a.runWebGLProgram(s,[t],"float32");return s=new _B(n,"max",!0,!0,e),[r,a.runWebGLProgram(s,[t],"float32")]}(s,c,h,l);return[d,p]}};const VU={kernelName:jn,backendName:"webgl",kernelFunc:t=>{let{inputs:e,attrs:n,backend:a}=t;const{x:s}=e,{keepDims:r,axis:o}=n,i=a,c=s.shape.length,l=wt(o,s.shape);let u=l;const h=rh(u,c),d=null!=h,p=i.shouldExecuteOnCPU([s]),f=[];let m=s;if(d){if(p){const t=i.texData.get(m.dataId).values,e=new Array(c);for(let a=0;a<e.length;a++)e[a]=s.shape[h[a]];const n=qz(t,s.shape,s.dtype,h,e);m=i.makeTensorInfo(e,s.dtype);i.texData.get(m.dataId).values=n}else m=YP(s,h,i);f.push(m),u=ih(u.length,c)}sh("sum",u,c);const[g,y]=nh(m.shape,u);let b=g;r&&(b=ah(g,l));const x=function(t,e,n,a){const s=lt(e),r=UP({inputs:{x:t},attrs:{shape:[lt(t.shape)/s,s]},backend:a}),o=qP(r,"float32","mean",a),i=UP({inputs:{x:o},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(r),a.disposeIntermediateTensorInfo(o),i}(m,y,b,i);for(const w of f)i.disposeIntermediateTensorInfo(w);return x}};const UU={kernelName:qn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a,i=s.shape.length,c=wt(r,s.shape);let l=c;const u=rh(l,i);let h=s;null!=u&&(h=QP({inputs:{x:s},backend:n,attrs:{perm:u}}),l=ih(l.length,s.shape.length)),sh("min",l,i);const[d,p]=nh(h.shape,l),f=UP({inputs:{x:h},backend:n,attrs:{shape:[-1,lt(p)]}}),m=qP(f,f.dtype,"min",n);let g;if(o){g=UP({inputs:{x:m},backend:n,attrs:{shape:ah(d,c)}})}else g=UP({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=u&&n.disposeIntermediateTensorInfo(h),g}},GU=_P({opSnippet:yP+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+xP+"\n  return result;\n",cpuKernelImpl:wz}),HU={kernelName:Kn,backendName:"webgl",kernelFunc:GU};class jU{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const a=t.length,s=gL(a),r=e.map(t=>t[0]).join(","),o=e.map((e,n)=>e[0]+t[n]).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a),c="reflect"===n?0:1;this.userCode=1!==a?"\n      ".concat(s," start = ").concat(s,"(").concat(r,");\n      ").concat(s," end = ").concat(s,"(").concat(o,");\n\n      void main() {\n        ").concat(s," outC = getOutputCoords();\n        for (int i = 0; i < ").concat(a,"; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ").concat(c,";\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ").concat(c,";\n          }\n        }\n        ").concat(s," coords = outC - start;\n        setOutput(getX(").concat(i,"));\n      }\n    "):"\n        int start = ".concat(r,";\n        int end = ").concat(o,";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ").concat(c,";\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ").concat(c,";\n          }\n          setOutput(getX(outC - start));\n        }\n      ")}}class qU{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const a=t.length,s=gL(a),r=e.map(t=>t[0]).join(","),o=e.map((e,n)=>e[0]+t[n]).join(","),i=Yz("rc",a),c=Yz("source",a),l="".concat(i[a-1]," < ").concat(this.outputShape[a-1]),u=1===a?"source":"vec2(".concat(c.slice(-2).join(),")"),h="reflect"===n?0:1;let d="";if(1===a){const t="\n        ".concat(s," source = rc;\n        if (source < start) {\n          source = start * 2 - source - ").concat(h,";\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ").concat(h,";\n        }\n        source -= start;\n      ");d="\n        ".concat(s," rc = outputLoc;\n        ").concat(t,"\n        result[0] = getChannel(getX(").concat(c.join(),"), ").concat(u,");\n        ").concat(i[a-1]," += 1;\n        if(").concat(l,") {\n          ").concat(t,"\n          result[1] = getChannel(getX(").concat(c.join(),"), ").concat(u,");\n        }\n      ")}else{const t="\n        ".concat(s," source = rc;\n        ").concat(s," lt = ").concat(s,"(lessThan(source, start));\n        ").concat(s," gte = ").concat(s,"(greaterThanEqual(source, end));\n        ").concat(s," orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ").concat(h,") +\n                gte * ((end - 1) * 2 - source + ").concat(h,");\n        source -= start;\n      ");d="\n        ".concat(s," rc = outputLoc;\n        ").concat(t,"\n        result[0] = getChannel(getX(").concat(c.join(),"), ").concat(u,");\n        ").concat(i[a-1]," += 1;\n        if(").concat(l,") {\n          ").concat(t,"\n          result[1] = getChannel(getX(").concat(c.join(),"), ").concat(u,");\n        }\n        rc = outputLoc;\n        ").concat(i[a-2]," += 1;\n        if(").concat(i[a-2]," < ").concat(this.outputShape[a-2],") {\n          ").concat(t,"\n          result[2] = getChannel(getX(").concat(c.join(),"), ").concat(u,");\n          ").concat(i[a-1]," += 1;\n          if(").concat(l,") {\n            ").concat(t,"\n            result[3] = getChannel(getX(").concat(c.join(),"), ").concat(u,");\n          }\n        }\n      ")}this.userCode="\n      const ".concat(s," start = ").concat(s,"(").concat(r,");\n      const ").concat(s," end = ").concat(s,"(").concat(o,");\n\n      void main() {\n        ").concat(s," outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ").concat(d,"\n        setOutput(result);\n      }\n    ")}}const KU={kernelName:Xn,backendName:"webgl",kernelFunc:t=>{let{inputs:e,backend:n,attrs:a}=t;const{x:s}=e,{paddings:r,mode:o}=a,i=Yt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qU(s.shape,r,o):new jU(s.shape,r,o);return n.runWebGLProgram(i,[s],s.dtype)}},XU=_P({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+xP+"\n  return result;\n"}),YU={kernelName:Yn,backendName:"webgl",kernelFunc:XU};class ZU{constructor(t,e,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,n],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ".concat(e-1,"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(").concat(e-1,"));\n      }\n    ")}}const JU=_P({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),QU={kernelName:Je,backendName:"webgl",kernelFunc:JU},$U="return a - b;",tG=_P({opSnippet:$U,packedOpSnippet:$U,supportsComplex:!0,cpuKernelImpl:Gz}),eG={kernelName:es,backendName:"webgl",kernelFunc:tG};function nG(t){const{inputs:e,backend:n,attrs:a}=t,{logits:s}=e,{dim:r}=a,o=wt([r],s.shape),i=RU({inputs:{x:s},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),c=ah(i.shape,o),l=UP({inputs:{x:i},backend:n,attrs:{shape:c}}),u=tG({inputs:{a:s,b:l},backend:n}),h=vV({inputs:{x:u},backend:n}),d=ZP({inputs:{x:h},backend:n,attrs:{axis:o,keepDims:!1}}),p=UP({inputs:{x:d},backend:n,attrs:{shape:c}}),f=JU({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const aG={kernelName:Ua,backendName:"webgl",kernelFunc:nG};const sG={kernelName:Zn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{logits:s}=e,{numSamples:r,seed:o,normalized:i}=a,c=i?s:nG({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=c.shape[0],u=c.shape[1],h=new ZU(l,u,r),d=[[o]],p=n.runWebGLProgram(h,[c],"int32",d);return i||n.disposeIntermediateTensorInfo(c),p}},rG=aP+"\n  return -x;\n";const oG={kernelName:Qn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:a}=e;if(n.shouldExecuteOnCPU([a])){const t=n.texData.get(a.dataId),[e,s]=kz(t.values,a.shape,a.dtype);return n.makeTensorInfo(s,a.dtype,e)}let s;return s=Yt().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new cP(a.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new nP(a.shape,rG),n.runWebGLProgram(s,[a],a.dtype)}},iG=tf;const cG={kernelName:ta,backendName:"webgl",kernelFunc:function(t){xs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:n,attrs:a}=t,{boxes:s,scores:r}=e,{maxOutputSize:o,iouThreshold:i,scoreThreshold:c}=a,l=n.readSync(s.dataId),u=n.readSync(r.dataId),{selectedIndices:h}=iG(l,u,o,i,c);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},lG=ef;const uG={kernelName:ea,backendName:"webgl",kernelFunc:function(t){xs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:n,attrs:a}=t,{boxes:s,scores:r}=e,{maxOutputSize:o,iouThreshold:i,scoreThreshold:c,padToMaxOutputSize:l}=a,u=n.readSync(s.dataId),h=n.readSync(r.dataId),{selectedIndices:d,validOutputs:p}=lG(u,h,o,i,c,l);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},hG=nf;const dG={kernelName:na,backendName:"webgl",kernelFunc:function(t){xs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:e,backend:n,attrs:a}=t,{boxes:s,scores:r}=e,{maxOutputSize:o,iouThreshold:i,scoreThreshold:c,softNmsSigma:l}=a,u=n.readSync(s.dataId),h=n.readSync(r.dataId),d=o,p=i,f=c,m=l,{selectedIndices:g,selectedScores:y}=hG(u,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class pG{constructor(t,e,n,a){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(".concat(a,"), float(").concat(n,"),\n                      float(index == coords.y)));\n      }\n    ")}}const fG={kernelName:sa,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:a}=t,{indices:s}=e,{dtype:r,depth:o,onValue:i,offValue:c}=a,l=lt(s.shape),u=new pG(l,o,i,c),h=UP({inputs:{x:s},backend:n,attrs:{shape:[l]}}),d=n.runWebGLProgram(u,[h],r);n.disposeIntermediateTensorInfo(h);const p=UP({inputs:{x:d},backend:n,attrs:{shape:[...s.shape,o]}});return n.disposeIntermediateTensorInfo(d),p}};function mG(t){const{inputs:e,backend:n}=t,{x:a}=e;if("complex64"===a.dtype){const t=nW({inputs:{input:a},backend:n}),e=mG({inputs:{x:t},backend:n}),s=yW({inputs:{input:a},backend:n}),r=mG({inputs:{x:s},backend:n}),o=IP({inputs:{real:e,imag:r},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),o}return DV({attrs:{shape:a.shape,dtype:a.dtype,value:"string"===a.dtype?"":0},backend:n})}const gG={kernelName:ds,backendName:"webgl",kernelFunc:mG};const yG={kernelName:aa,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:a}=e,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const e=nW({inputs:{input:s},backend:a}),n=t({inputs:{x:e},backend:a}),r=yW({inputs:{input:s},backend:a}),o=mG({inputs:{x:r},backend:a}),i=IP({inputs:{real:n,imag:o},backend:a});return a.disposeIntermediateTensorInfo(e),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(r),a.disposeIntermediateTensorInfo(o),i}return DV({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:a})}};const bG={kernelName:ra,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{axis:s}=a;if(1===e.length)return IV({inputs:{input:e[0]},backend:n,attrs:{dim:s}});const r=e[0].shape,o=e[0].dtype;e.forEach(t=>{it(r,t.shape,"All tensors passed to stack must have matching shapes"),ot(o===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],c=wW({inputs:e.map(t=>{const e=IV({inputs:{input:t},backend:n,attrs:{dim:s}});return i.push(e),e}),backend:n,attrs:{axis:s}});return i.forEach(t=>n.disposeIntermediateTensorInfo(t)),c}};class xG{constructor(t,e,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const a=t.length,s=gL(a),r=e.map(t=>t[0]).join(","),o=e.map((e,n)=>e[0]+t[n]).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a);this.userCode=1!==a?"\n      ".concat(s," start = ").concat(s,"(").concat(r,");\n      ").concat(s," end = ").concat(s,"(").concat(o,");\n\n      void main() {\n        ").concat(s," outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ").concat(s," coords = outC - start;\n          setOutput(getX(").concat(i,"));\n        }\n      }\n    "):"\n        int start = ".concat(r,";\n        int end = ").concat(o,";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ")}}class wG{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const a=t.length,s=gL(a),r=e.map(t=>t[0]).join(","),o=e.map((e,n)=>e[0]+t[n]).join(","),i=Yz("rc",a),c=Yz("source",a),l="".concat(i[a-1]," < ").concat(this.outputShape[a-1]),u=1===a?"source":"vec2(".concat(c.slice(-2).join(),")"),h=["".concat(s," rc = outputLoc;"),"".concat(i[a-1]," += 1;\n       if(").concat(l,") {\n      "),1===a?"":"}\n       rc = outputLoc;\n       ".concat(i[a-2]," += 1;\n       if(").concat(i[a-2]," < ").concat(this.outputShape[a-2],") {"),1===a?"":"  ".concat(i[a-1]," += 1;\n         if(").concat(l,") {")],d=1===a?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let f=0,m=1===a?2:4;f<m;f++)p+="\n        ".concat(h[f],"\n        if (").concat(d,") {\n          result[").concat(f,"] = float(value);\n        } else {\n          ").concat(s," source = rc - start;\n          result[").concat(f,"] = getChannel(getX(").concat(c.join(),"), ").concat(u,");\n        }\n      ");p+=1===a?"} ":"}}",this.userCode="\n      const ".concat(s," start = ").concat(s,"(").concat(r,");\n      const ").concat(s," end = ").concat(s,"(").concat(o,");\n\n      void main() {\n        ").concat(s," outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ").concat(p,"\n        setOutput(result);\n      }\n    ")}}const vG=t=>{const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{paddings:r,constantValue:o}=a;if(0===lt(s.shape)){const t=r.map((t,e)=>t[0]+s.shape[e]+t[1]);return DV({backend:n,attrs:{shape:t,value:o,dtype:s.dtype}})}const i=Yt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new wG(s.shape,r,o):new xG(s.shape,r,o),c=[[o]];return n.runWebGLProgram(i,[s],s.dtype,c)},kG={kernelName:oa,backendName:"webgl",kernelFunc:vG},IG=_P({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+xP+"\n  return result;\n"}),NG={kernelName:ca,backendName:"webgl",kernelFunc:IG};const SG={kernelName:ua,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{axis:r,keepDims:o}=a,i=s.shape.length,c=[],l=wt(r,s.shape);let u=l;const h=rh(u,i);let d,p=s;if(null!=h&&(p=QP({inputs:{x:s},backend:n,attrs:{perm:h}}),u=ih(u.length,i),c.push(p)),sh("prod",u,i),n.shouldExecuteOnCPU([p])){const t=n.texData.get(p.dataId).values,{outVals:e,outShape:a,outDtype:s}=Nz(p.shape,p.dtype,t,u);d=n.makeTensorInfo(a,s,e)}else{const[t,e]=nh(p.shape,u),a=lt(e),r=UP({inputs:{x:p},backend:n,attrs:{shape:[-1,a]}}),o=qP(r,Ir(s.dtype),"prod",n);d=UP({inputs:{x:o},backend:n,attrs:{shape:t}}),c.push(r),c.push(o)}if(o){c.push(d);const t=ah(d.shape,l);d=UP({inputs:{x:d},backend:n,attrs:{shape:t}})}return c.forEach(t=>n.disposeIntermediateTensorInfo(t)),d}};const TG={kernelName:ha,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{paramsNestedSplits:s,paramsDenseValues:r,indices:o}=e,{outputRaggedRank:i}=a,c=s.map(t=>n.readSync(t.dataId)),l=s.map(t=>t.shape),u=n.readSync(r.dataId),h=n.readSync(o.dataId),[d,p,f]=Sz(c,l,u,r.shape,r.dtype,h,o.shape,i),m=d.map(t=>n.makeTensorInfo([t.length],"int32",t)),g=n.makeTensorInfo(f,r.dtype,p);return m.concat([g])}};const CG={kernelName:da,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{starts:a,limits:s,deltas:r}=e,o=n.readSync(a.dataId),i=n.readSync(s.dataId),c=n.readSync(r.dataId),[l,u]=Tz(o,a.shape,a.dtype,i,s.shape,c,r.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([u.length],a.dtype,u)]}};const EG={kernelName:pa,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{shape:s,values:r,defaultValue:o,rowPartitionTensors:i}=e,{rowPartitionTypes:c}=a,l=n.readSync(s.dataId),u=n.readSync(r.dataId),h=n.readSync(o.dataId),d=i.map(t=>n.readSync(t.dataId)),p=i.map(t=>t.shape),[f,m]=Cz(l,s.shape,u,r.shape,r.dtype,h,o.shape,d,p,c);return n.makeTensorInfo(f,r.dtype,m)}},AG=t=>{const{backend:e,attrs:n}=t,{start:a,stop:s,step:r,dtype:o}=n,i=Ez(a,s,r,o);return e.makeTensorInfo([i.length],o,i)},RG={kernelName:fa,backendName:"webgl",kernelFunc:AG},FG=DP({opSnippet:"return 1.0 / x;"}),DG={kernelName:ga,backendName:"webgl",kernelFunc:FG},_G=DP({opSnippet:aP+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),OG={kernelName:ya,backendName:"webgl",kernelFunc:_G},MG=DP({opSnippet:aP+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),LG={kernelName:Ia,backendName:"webgl",kernelFunc:MG};class zG{constructor(t,e,n,a,s){this.variableNames=["A"],this.outputShape=[];const[r,o,i,c]=t;this.outputShape=[r,e,n,c];const l=[a&&e>1?o-1:o,a&&n>1?i-1:i],u=[a&&e>1?e-1:e,a&&n>1?n-1:n];let h;h=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ".concat(l[0]/u[0],",\n          ").concat(l[1]/u[1],");\n      const vec2 inputShapeRC = vec2(").concat(o,".0, ").concat(i,".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ").concat(h,";\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ")}}class PG{constructor(t,e,n,a,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,o,i,c]=t;this.outputShape=[r,e,n,c];const l=[a&&e>1?o-1:o,a&&n>1?i-1:i],u=[a&&e>1?e-1:e,a&&n>1?n-1:n];let h;h=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ".concat(l[0]/u[0],",\n          ").concat(l[1]/u[1],",\n          ").concat(l[1]/u[1],");\n      const vec3 inputShapeRC = vec3(").concat(o,".0, ").concat(i,".0,\n                                     ").concat(i,".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ").concat(h,";\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ").concat(c-1,";\n        bool hasNextRow = coords.z < ").concat(n-1,";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ")}}const BG={kernelName:va,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{images:s}=e,{alignCorners:r,halfPixelCenters:o,size:i}=a,[c,l]=i,u=Yt().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new PG(s.shape,c,l,r,o):new zG(s.shape,c,l,r,o);return n.runWebGLProgram(u,[s],"float32")}};class WG{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,a,s]=e,[,r,o]=t,i=[n&&r>1?a-1:a,n&&o>1?s-1:s],c=[n&&r>1?r-1:r,n&&o>1?o-1:o],l=i[0]/c[0],u=i[1]/c[1],h=1/l,d=1/u,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(".concat(l,");\n        const float widthScale = float(").concat(u,");\n\n        const float invHeightScale = float(").concat(h,");\n        const float invWidthScale = float(").concat(d,");\n\n        const int winHeight = int(").concat(p,");\n        const int winWidth = int(").concat(f,");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ").concat(r,") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ").concat(o,") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ").concat(a-1,".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ").concat(s-1,".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ")}}const VG={kernelName:ka,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{images:s,dy:r}=e,{alignCorners:o}=a,i=new WG(r.shape,s.shape,o);return n.runWebGLProgram(i,[r],r.dtype)}};class UG{constructor(t,e,n,a,s){this.variableNames=["A"],this.outputShape=[];const[r,o,i,c]=t;this.outputShape=[r,e,n,c];const l=[a&&e>1?o-1:o,a&&n>1?i-1:i],u=[a&&e>1?e-1:e,a&&n>1?n-1:n],h=a?"0.5":"0.0";let d;d=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ".concat(l[0]/u[0],",\n          ").concat(l[1]/u[1],");\n      const vec2 inputShapeRC = vec2(").concat(o,".0, ").concat(i,".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ").concat(d,";\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ").concat(h,")));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ")}}class GG{constructor(t,e,n,a,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,o,i,c]=t;this.outputShape=[r,e,n,c];const l=[a&&e>1?o-1:o,a&&n>1?i-1:i],u=[a&&e>1?e-1:e,a&&n>1?n-1:n],h=a?"0.5":"0.0";let d;d=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ".concat(l[0]/u[0],",\n          ").concat(l[1]/u[1],",\n          ").concat(l[1]/u[1],");\n      const vec3 inputShapeRC = vec3(").concat(o,".0, ").concat(i,".0,\n                                     ").concat(i,".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ").concat(d,";\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ").concat(h,")));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ").concat(c-1,";\n        bool hasNextRow = coords.z < ").concat(n-1,";\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    ")}}const HG={kernelName:xa,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{images:s}=e,{alignCorners:r,halfPixelCenters:o,size:i}=a,[c,l]=i,u=Yt().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new GG(s.shape,c,l,r,o):new UG(s.shape,c,l,r,o);return n.runWebGLProgram(u,[s],s.dtype)}};class jG{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,a,s]=e,[,r,o]=t,i=[n&&r>1?a-1:a,n&&o>1?s-1:s],c=[n&&r>1?r-1:r,n&&o>1?o-1:o],l=i[0]/c[0],u=i[1]/c[1],h=1/l,d=1/u,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(".concat(l,");\n        const float widthScale = float(").concat(u,");\n\n        const float invHeightScale = float(").concat(h,");\n        const float invWidthScale = float(").concat(d,");\n\n        const int winHeight = int(").concat(p,");\n        const int winWidth = int(").concat(f,");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ").concat(r,") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ").concat(o,") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(").concat(i[0],") *\n                (float(dyR) / float(").concat(c[0],"));\n\n            float sourceFracCol =\n                float(").concat(i[1],") *\n                  (float(dyC) / float(").concat(c[1],"));\n\n            int sourceNearestRow = int(min(\n                float(int(").concat(a,") - 1),\n                ").concat(n," ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(").concat(s,") - 1),\n                ").concat(n," ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ")}}const qG={kernelName:wa,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{images:s,dy:r}=e,{alignCorners:o}=a,i=new jG(r.shape,s.shape,o);return n.runWebGLProgram(i,[r],r.dtype)}};class KG{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-".concat(n," tensor is not yet supported"));if(this.outputShape=t,1===n)return void(this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(".concat(t[0]," - coord - 1));\n        }\n      "));const a=t.map((n,a)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?"".concat(t[n]," - coords[").concat(n,"] - 1"):"coords[".concat(n,"]"))(a)).join(","),s=gL(n);this.userCode="\n      void main() {\n        ".concat(s," coords = getOutputCoords();\n        setOutput(getX(").concat(a,"));\n      }\n    ")}}class XG{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-".concat(n," tensor is not yet supported"));this.outputShape=t;const a=Yz("rc",n),s="".concat(a[n-1]," + 1 < ").concat(this.outputShape[n-1]),r="".concat(a[n-2]," + 1 < ").concat(this.outputShape[n-2]),o=gL(n);function i(n){const a=t.map((a,s)=>function(n,a){return-1!==e.indexOf(n)&&1!==t[n]?"".concat(t[n]," - ").concat(a[n]," - 1"):"".concat(a[n])}(s,n)),s=a.join(","),r=a.slice(-2).join(",");return"getChannel(getX(".concat(s,"), vec2(").concat(r,"))")}this.userCode=1===n?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(".concat(t[0]," - rc - 1),\n            ").concat(t[0]," - rc - 1);\n          if(").concat(s,"){\n              result.g = getChannel(getX(").concat(t[0]," - (rc  + 1) - 1),\n                ").concat(t[0]," - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      "):"\n        void main() {\n          ".concat(o," rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ").concat(function(t){return i(t)}(a.slice()),";\n          if(").concat(s,"){\n            result.g = ").concat(function(t){return t[n-1]="("+t[n-1]+" + 1)",i(t)}(a.slice()),";\n          }\n          if(").concat(r,") {\n            result.b = ").concat(function(t){return t[n-2]="("+t[n-2]+" + 1)",i(t)}(a.slice()),";\n            if(").concat(s,") {\n              result.a = ").concat(function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",i(t)}(a.slice()),";\n            }\n          }\n          setOutput(result);\n        }\n    ")}}const YG={kernelName:Na,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{dims:r}=a,o=s.shape.length,i=wt(r,s.shape);if(0===o)return vP({inputs:{x:s},backend:n});const c=Yt().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new XG(s.shape,i):new KG(s.shape,i);return n.runWebGLProgram(c,[s],s.dtype)}};class ZG{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=t[1],a=t[2];this.outputShape=t;let s="";s="number"===typeof e?"float outputValue = ".concat(e.toFixed(2),";"):"\n        vec3 fill = vec3(".concat(e.join(","),");\n        float outputValue = fill[coords[3]];"),this.userCode="\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ".concat(s,"\n          if(coordX >= 0 && coordX < ").concat(a," && coordY >= 0 && coordY < ").concat(n,") {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    ")}}const JG={kernelName:ms,backendName:"webgl",kernelFunc:t=>{let{inputs:e,attrs:n,backend:a}=t;const{image:s}=e,{radians:r,fillValue:o,center:i}=n,c=a,l=new ZG(s.shape,o),[u,h]=sm(i,s.shape[1],s.shape[2]),d=[[u,h,Math.sin(r),Math.cos(r)]];return c.runWebGLProgram(l,[s],s.dtype,d)}},QG=DP({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),$G={kernelName:Sa,backendName:"webgl",kernelFunc:QG},tH=DP({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Az}),eH={kernelName:Ta,backendName:"webgl",kernelFunc:tH};class nH{constructor(t,e,n,a,s,r){let o=arguments.length>7&&void 0!==arguments[7]&&arguments[7];this.variableNames=["updates","indices","defaultValue"],this.outputShape=r;const i=gL(s.length),c=gL(r.length);let l="";1===n?l="i":2===n&&(l="i, j");const u="getIndices(".concat(l,")");let h="";1===a?h="i":2===a&&(h="i, coords[1]");const d="getUpdates(".concat(h,")");let p="";o&&(p="coords[0], coords[1]");const f="getDefaultValue(".concat(p,")"),m=e>1?"strides[j]":"strides";this.userCode="\n        ".concat(i," strides = ").concat(i,"(").concat(s,");\n\n        void main() {\n          ").concat(c," coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ").concat(t,"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ").concat(e,"; j++) {\n              int index = round(").concat(u,");\n              flattenedIndex += index * ").concat(m,";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ").concat(d,";\n              found = true;\n            }\n          }\n          setOutput(mix(").concat(f,", sum, float(found)));\n        }\n      ")}}class aH{constructor(t,e,n,a,s,r){let o=arguments.length>7&&void 0!==arguments[7]&&arguments[7];this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r;const i=gL(s.length),c=gL(r.length);let l="";1===n?l="i":2===n&&(l="i, j");const u="getIndices(".concat(l,")");let h="";1===a?h="i":2===a&&(h="i, coords[1]");const d="getUpdates(".concat(h,")");let p="";o&&(p="coords[0], coords[1]");const f="getDefaultValue(".concat(p,")"),m=e>1?"strides[j]":"strides",g=e>1?"strides[j + 1]":"strides";this.userCode="\n        ".concat(i," strides = ").concat(i,"(").concat(s,");\n\n        void main() {\n          ").concat(c," coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ").concat(t,"; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ").concat(e,"; j+=2) {\n              ivec4 index = round(").concat(u,");\n              flattenedIndex += index.xz * ").concat(m,";\n              if (j + 1 < ").concat(e,") {\n                flattenedIndex += index.yw * ").concat(g,";\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ").concat(d,";\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(").concat(f,", sum, found));\n        }\n      ")}}const sH={kernelName:Ca,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{indices:s,updates:r}=e,{shape:o}=a,{sliceRank:i,numUpdates:c,sliceSize:l,strides:u,outputSize:h}=Qc(0,s,o),d=[h/l,l];if(0===h)return n.makeTensorInfo(o,s.dtype);const p=UP({inputs:{x:s},backend:n,attrs:{shape:[c,i]}}),f=UP({inputs:{x:r},backend:n,attrs:{shape:[c,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=Yt().getBool("WEBGL_PACK")?new aH(c,i,p.shape.length,f.shape.length,u,d):new nH(c,i,p.shape.length,f.shape.length,u,d);const y=n.runWebGLProgram(g,[f,p,m],f.dtype),b=UP({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class rH{constructor(t,e,n,a){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,n];const s="for (int i = 0; i < ".concat(Math.ceil(Math.log2(e+1)),"; ++i) { if (left >= right) break;"),r=2===Yt().getNumber("WEBGL_VERSION")?"while (left < right) {":s,o="left"===a?"<":"<=";this.userCode="\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ".concat(r,"\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ").concat(o," value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     ")}}const oH={kernelName:Aa,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{sortedSequence:s,values:r}=e,{side:o}=a,i=new rH(s.shape[0],s.shape[1],r.shape[1],o),c=[[s.shape[1]]];return n.runWebGLProgram(i,[s,r],"int32",c)}};class iH{constructor(t,e,n){let a,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error("Where for rank ".concat(n," is not yet supported"));if(1===n)s="resRC",a="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],o=[];for(let a=0;a<e.length;a++)o.push("".concat(n[a])),a<t&&r.push("".concat(n[a]));a=r.join(),s=o.join()}const r=gL(n);this.userCode="\n      void main() {\n        ".concat(r," resRC = getOutputCoords();\n        float cVal = getC(").concat(a,");\n        if (cVal >= 1.0) {\n          setOutput(getA(").concat(s,"));\n        } else {\n          setOutput(getB(").concat(s,"));\n        }\n      }\n    ")}}const cH={kernelName:Ra,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{condition:a,t:s,e:r}=e,o=new iH(a.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(o,[a,s,r],kr(s.dtype,r.dtype))}},lH=DP({opSnippet:"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ".concat(um,";\n  float scale = ").concat(hm,";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n")}),uH={kernelName:Fa,backendName:"webgl",kernelFunc:lH},hH=DP({opSnippet:FP+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Fz}),dH={kernelName:La,backendName:"webgl",kernelFunc:hH},pH=DP({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),fH={kernelName:Ma,backendName:"webgl",kernelFunc:pH},mH=DP({opSnippet:FP+"\n  return sin(x);\n",packedOpSnippet:"\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ".concat(xP,"\n  return result;\n")}),gH={kernelName:_a,backendName:"webgl",kernelFunc:mH},yH=DP({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),bH={kernelName:Oa,backendName:"webgl",kernelFunc:yH},xH=DP({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),wH={kernelName:za,backendName:"webgl",kernelFunc:xH},vH={kernelName:Wa,backendName:"webgl",kernelFunc:t=>{const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{blockShape:r,paddings:o}=a;ot(s.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const i=r.reduce((t,e)=>t*e),c=[[0,0]];c.push(...o);for(let y=1+r.length;y<s.shape.length;++y)c.push([0,0]);const l=[],u=vG({inputs:{x:s},backend:n,attrs:{paddings:c,constantValue:0}}),h=rm(u.shape,r,i,!1),d=om(h.length,r.length,!1),p=im(u.shape,r,i,!1),f=UP({inputs:{x:u},backend:n,attrs:{shape:h}}),m=QP({inputs:{x:f},backend:n,attrs:{perm:d}}),g=UP({inputs:{x:m},backend:n,attrs:{shape:p}});return l.push(u),l.push(f),l.push(m),l.forEach(t=>n.disposeIntermediateTensorInfo(t)),g}};const kH={kernelName:Ga,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{indices:a,values:s,denseShape:r,defaultValue:o}=e;if(1!==r.shape.length)throw new Error("Dense shape must be a vector, saw:\n         ".concat(r.shape));if(2!==a.shape.length)throw new Error("Indices must be a matrix, saw:\n         ".concat(a.shape));if(1!==s.shape.length)throw new Error("Values must be a vector, saw:\n         ".concat(s.shape));if(0!==o.shape.length)throw new Error("Default value must be a scalar, saw:\n        ".concat(o.shape));const i=n.readSync(a.dataId),c=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(o.dataId)[0],[h,d,p,f,m]=Oz(i,a.shape,a.dtype,c,s.dtype,l,u);return[n.makeTensorInfo(d,a.dtype,h),n.makeTensorInfo([d[0]],s.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(t=>Number(t)))),n.makeTensorInfo([m.length],a.dtype,new Int32Array(m))]}};const IH={kernelName:Ha,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{inputIndices:a,inputShape:s,newShape:r}=e;if(2!==a.shape.length)throw new Error("Input indices should be a matrix but received shape ".concat(a.shape));if(1!==s.shape.length)throw new Error("Input shape should be a vector but received shape ".concat(s.shape));if(1!==r.shape.length)throw new Error("Target shape should be a vector but received shape ".concat(r.shape));const o=Array.from(n.readSync(s.dataId)),i=n.readSync(a.dataId),c=Array.from(n.readSync(r.dataId)),[l,u,h]=Mz(i,a.shape,a.dtype,o,c);return[n.makeTensorInfo(u,a.dtype,l),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}};const NH={kernelName:ja,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{data:a,indices:s,segmentIds:r}=e;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error("Indices should be a vector but received shape\n              ".concat(s.shape));if(1!==r.shape.length)throw new Error("Segment ids should be a vector but received shape\n              ".concat(r.shape));const o=n.readSync(a.dataId),i=n.readSync(s.dataId),c=n.readSync(r.dataId),[l,u]=Lz(o,a.shape,a.dtype,i,c,!0);return n.makeTensorInfo(u,a.dtype,l)}};const SH={kernelName:qa,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{data:a,indices:s,segmentIds:r}=e;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error("Indices should be a vector but received shape\n             ".concat(s.shape));if(1!==r.shape.length)throw new Error("Segment ids should be a vector but received shape\n             ".concat(r.shape));const o=n.readSync(a.dataId),i=n.readSync(s.dataId),c=n.readSync(r.dataId),[l,u]=Lz(o,a.shape,a.dtype,i,c);return n.makeTensorInfo(u,a.dtype,l)}};const TH={kernelName:Ka,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{sparseIndices:s,sparseValues:r,defaultValue:o}=e,{outputShape:i}=a,{sliceRank:c,numUpdates:l,sliceSize:u,strides:h,outputSize:d}=Qc(0,s,i),p=!1;if("string"===r.dtype){const t=n.bufferSync(s),e=n.bufferSync(r),a=Qs(n.readSync(o.dataId)[0]),f=Rz(t,e,i,d,u,l,c,h,a,p);return n.makeTensorInfo(i,f.dtype,f.values)}const f=new nH(l,c,s.shape.length,r.shape.length,h,[d,1],p),m=n.runWebGLProgram(f,[r,s,o],r.dtype),g=UP({inputs:{x:m},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(m),g}};const CH={kernelName:Va,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{numOrSizeSplits:r,axis:o}=a,i=wt(o,s.shape)[0],c=Lm(s,r,i),l=s.shape.length,u=new Array(l).fill(0),h=s.shape.slice();return c.map(t=>{const e=[...h];e[i]=t;const a=XB({inputs:{x:s},backend:n,attrs:{begin:u,size:e}});return u[i]+=t,a})}},EH="return sqrt(x);",AH=DP({opSnippet:EH,packedOpSnippet:EH,cpuKernelImpl:zz}),RH={kernelName:Pa,backendName:"webgl",kernelFunc:AH},FH=DP({opSnippet:"return x * x;"}),DH={kernelName:Ya,backendName:"webgl",kernelFunc:FH},_H="return (a - b) * (a - b);",OH=_P({opSnippet:_H,packedOpSnippet:_H}),MH={kernelName:Xa,backendName:"webgl",kernelFunc:OH};const LH={kernelName:Za,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e;if("string"!==s.dtype)throw new Error("Input must be of datatype string");const r=Qm(n.readSync(s.dataId)),o=Pz(r,"string",a);return n.makeTensorInfo(s.shape,"string",o)}};const zH={kernelName:ps,backendName:"webgl",kernelFunc:function(t){let{inputs:e,attrs:n,backend:a}=t;const{x:s}=e,r=aP+"\n    return x > 0.0 ? 1.0 : float(".concat(n.alpha,");\n  "),o=new nP(s.shape,r);return a.runWebGLProgram(o,[s],s.dtype)}};class PH{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const a=n.length,s=gL(n.length),r=gL(n.length);let o="";if(1===a)o="coords * strides + begin";else{let t=0;o=n.map((e,a)=>(t++,1===n.length?"coords * strides[".concat(a,"] + begin[").concat(a,"]"):"coords[".concat(t-1,"] * strides[").concat(a,"] + begin[").concat(a,"]"))).join(",")}this.userCode="\n      ".concat(s," begin = ").concat(s,"(").concat(t,");\n      ").concat(s," strides = ").concat(s,"(").concat(e,");\n\n      void main() {\n        ").concat(r," coords = getOutputCoords();\n        setOutput(getX(").concat(o,"));\n      }\n    ")}}const BH={kernelName:Ja,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{begin:r,end:o,strides:i,beginMask:c,endMask:l,ellipsisMask:u,newAxisMask:h,shrinkAxisMask:d}=a,{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=gl(s.shape,r,o,i,c,l,u,h,d);let v;if(m)v=UP({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){ot(s.shape.length>=1,()=>"Input must have rank at least 1, got: ".concat(s.shape.length));const t=al(b,x,w),e=XB({inputs:{x:s},backend:n,attrs:{begin:b,size:t}});v=UP({inputs:{x:e},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(e)}else{if(n.shouldExecuteOnCPU([s])){const t=n.readSync(s.dataId),e=Ni(s.shape,s.dtype,t),a=Bz(p,e,w,b);v=n.makeTensorInfo(f,s.dtype,a.values)}else{const t=new PH(b,w,p);v=n.runWebGLProgram(t,[s],s.dtype)}}const k=UP({inputs:{x:v},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(v),k}};const WH={kernelName:Qa,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{separator:s,nGramWidths:r,leftPad:o,rightPad:i,padWidth:c,preserveShortSequences:l}=a,{data:u,dataSplits:h}=e,d=n.readSync(u.dataId),p=n.readSync(h.dataId),[f,m]=Wz(d,p,s,r,o,i,c,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const VH={kernelName:$a,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{skipEmpty:s}=a,{input:r,delimiter:o}=e;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error("Input must be a vector, got shape: ".concat(r.shape));if(0!==o.shape.length)throw new Error("Delimiter must be a scalar, got shape: ".concat(o.shape));const i=n.readSync(r.dataId),c=n.readSync(o.dataId)[0],[l,u,h]=Vz(i,c,s),d=u.length;return[n.makeTensorInfo([d,2],"int32",l),n.makeTensorInfo([d],"string",u),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const UH={kernelName:ts,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{numBuckets:s}=a,{input:r}=e;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(r.dataId),i=Uz(o,s);return n.makeTensorInfo(r.shape,"int32",i)}},GH=DP({opSnippet:"return tan(x);"}),HH={kernelName:ns,backendName:"webgl",kernelFunc:GH},jH=DP({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),qH={kernelName:as,backendName:"webgl",kernelFunc:jH};const KH={kernelName:Ea,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{tensor:s,indices:r,updates:o}=e,{}=a,{sliceRank:i,numUpdates:c,sliceSize:l,strides:u,outputSize:h}=Qc(0,r,s.shape),d=[h/l,l];if(0===h)return n.makeTensorInfo(s.shape,r.dtype);const p=UP({inputs:{x:r},backend:n,attrs:{shape:[c,i]}}),f=UP({inputs:{x:o},backend:n,attrs:{shape:[c,l]}}),m=UP({inputs:{x:s},backend:n,attrs:{shape:d}}),g=new nH(c,i,p.shape.length,f.shape.length,u,d,!1,!0),y=n.runWebGLProgram(g,[f,p,m],m.dtype),b=UP({inputs:{x:y},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),b}};class XH{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const a=gL(this.rank),s=function(t){const e=t.length;if(e>5)throw Error("Tile for rank ".concat(e," is not yet supported"));if(1===e)return"imod(resRC, ".concat(t[0],")");const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],a=[];for(let s=0;s<t.length;s++)a.push("imod(".concat(n[s],", ").concat(t[s],")"));return a.join()}(t);this.userCode="\n      void main() {\n        ".concat(a," resRC = getOutputCoords();\n        setOutput(getA(").concat(s,"));\n      }\n    ")}}function YH(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{reps:r}=a;if("string"===s.dtype||s.shape.length>5){const t=n.readSync(s.dataId),e="string"===s.dtype?t.map(t=>Qs(t)):t,a=Ni(s.shape,s.dtype,e),o=Hz(a,r);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new XH(s.shape,r);return n.runWebGLProgram(o,[s],s.dtype)}const ZH={kernelName:ss,backendName:"webgl",kernelFunc:YH};class JH{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class QH{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function $H(t,e){null!==e&&t.disposeIntermediateTensorInfo(e)}function tj(t){let e=1;for(;e<t;)e*=2;return e}const ej={kernelName:rs,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s}=e,{k:r,sorted:o}=a,i=Yt().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),c=Yt().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=s.shape,u=l[l.length-1];if(n.shouldExecuteOnCPU([s])||u<i||r>c){const t=n.readSync(s.dataId),[e,a]=jz(t,l,s.dtype,r,o);return[n.makeTensorInfo(e.shape,e.dtype,e.values),n.makeTensorInfo(a.shape,a.dtype,a.values)]}if(0===r)return l[l.length-1]=0,[n.makeTensorInfo(l,s.dtype,[]),n.makeTensorInfo(l,"int32",[])];if(1===u)return[s,DV({attrs:{shape:l,dtype:"int32",value:0},backend:n})];const h=n.texData.get(s.dataId),d=null!==h&&h.isPacked,p=d?n.unpackTensor(s):s,f=lt(l)/u,m=UP({inputs:{x:p},attrs:{shape:[f,u]},backend:n});d&&$H(n,p);const g=tj(r),y=tj(u);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(t,e,a)=>{const s=x(),r=new JH(a),o=[[u],[null===b?1:0],[Number.NEGATIVE_INFINITY],[t],[e]],i=b;b=n.runWebGLProgram(r,s,"int32",o),$H(n,i)};for(let S=1;S<g;S*=2){const t=2*S;for(let e=S;e>=1;e/=2)w(t,e,[f,y])}for(let S=y;S>g;S/=2){const t=x(),e=new QH([f,S/2]),a=[[u],[null===b?1:0],[g]],s=b;b=n.runWebGLProgram(e,t,"int32",a),$H(n,s);const r=g/2,o=2*r;for(let n=r;n>=1;n/=2)w(o,n,b.shape)}let v=b;b=XB({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,r]}}),$H(n,v);let k=JV({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});$H(n,m);const I=l.slice(0,-1);I.push(r),v=b,b=UP({inputs:{x:b},attrs:{shape:I},backend:n}),$H(n,v);const N=k;return k=UP({inputs:{x:k},attrs:{shape:I},backend:n}),$H(n,N),[k,b]}};class nj{constructor(t,e,n,a,s,r){this.variableNames=["Image","Transforms"],this.outputShape=r;const o="nearest"===n?1:2;let i;switch(a){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode="\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(".concat(i," == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (").concat(i," == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (").concat(i," == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ").concat(t," && 0 <= coordX && coordX < ").concat(e,") {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(").concat(s,");\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(").concat(s,");\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(").concat(e,"));\n                float mapY = mapCoord(inY, float(").concat(t,"));\n\n                if (").concat(o," == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        ")}}const aj={kernelName:os,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{image:s,transforms:r}=e,{interpolation:o,fillMode:i,fillValue:c,outputShape:l}=a,[u,h,d,p]=s.shape,[f,m]=null!=l?l:[h,d],g=new nj(h,d,o,i,c,[u,f,m,p]);return n.runWebGLProgram(g,[s,r],"float32")}};const sj={kernelName:cs,backendName:"webgl",kernelFunc:function(t){const{inputs:e,attrs:n,backend:a}=t,{axis:s}=n,{x:r}=e;QM(r,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=a.readSync(r.dataId),{outputValues:i,outputShape:c,indices:l}=Kz(o,s,r.shape,r.dtype);return[a.makeTensorInfo(c,r.dtype,i),a.makeTensorInfo([l.length],"int32",l)]}};const rj={kernelName:ls,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{value:s}=e;let{axis:r}=a;r<0&&(r+=s.shape.length);const o=s,i=o.shape.length,c=s.shape[r],l=new Array(i-1);let u=0;for(let m=0;m<i;m++)m!==r&&(l[u++]=o.shape[m]);const h=[],d=new Array(i).fill(0),p=o.shape.slice();p[r]=1;const f=new Array(c);for(let m=0;m<f.length;m++){d[r]=m;const t=XB({inputs:{x:o},backend:n,attrs:{begin:d,size:p}}),e=UP({inputs:{x:t},backend:n,attrs:{shape:l}});f[m]=e,h.push(t)}return h.forEach(t=>n.disposeIntermediateTensorInfo(t)),f}};class oj{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,a=t.batchSize,s=t.inSize,r=t.numSegments,o=r*Math.ceil(s/n);this.outputShape=[a,o];const i=4*Math.floor(n/4),c=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let u="";s%n>0&&(u="\n        if (inIdx < 0 || inIdx >= ".concat(s,") {\n          return initializationValue;\n        }\n      "));let h="";s%n>0&&(h="\n        if (inIdx < 0 || inIdx >= ".concat(s,") {\n          return -1.0;\n        }\n      ")),this.userCode="\n      const float initializationValue = ".concat("0.0",";\n\n      float getValue(int batch, int inIdx) {\n        ").concat(u,"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ").concat(h,"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ").concat(r,")) * float(").concat(n,"));\n        int currentSeg = int(mod(float(outIdx), float(").concat(r,")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ").concat(i,"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ").concat(l,"\n        }\n\n        int inIdx = inOffset + ").concat(i,";\n        if (").concat(1===c,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ").concat(l,"\n        } else if (").concat(2===c,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ").concat(l,"\n        } else if (").concat(3===c,") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ").concat(l,"\n        }\n        setOutput(").concat("sumValue",");\n      }\n    ")}}const ij={kernelName:us,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:a}=t,{x:s,segmentIds:r}=e,{numSegments:o}=a,i=s.shape.length,c=[];let l=0;const u=rh([l],i);let h=s;null!=u&&(h=QP({inputs:{x:s},backend:n,attrs:{perm:u}}),c.push(h),l=ih(1,i)[0]);const d=Zm(h.shape,l,o),p=lt([h.shape[l]]),f=UP({inputs:{x:h},backend:n,attrs:{shape:[-1,p]}});c.push(f);const m=Ir(s.dtype),g=(t,e,a,s,r)=>{const o=t.shape[0],i=t.shape[1],l=Ym(i,r),u=new oj({windowSize:l,inSize:i,batchSize:o,numSegments:r},e),h=n.compileAndRun(u,[t,a],s);if(c.push(h),h.shape[1]===r)return h;const d=AG({backend:n,attrs:{start:0,stop:r,step:1,dtype:"float32"}}),p=YH({inputs:{x:d},backend:n,attrs:{reps:[i/l]}});c.push(d),c.push(p);return g(h,e,p,s,r)},y=UP({inputs:{x:g(f,"unsortedSegmentSum",r,m,o)},backend:n,attrs:{shape:d}});let b=y;if(null!=u){c.push(y);const t=oh(u);b=QP({inputs:{x:b},backend:n,attrs:{perm:t}})}return c.forEach(t=>n.disposeIntermediateTensorInfo(t)),b}},cj=[eB,aB,rB,iB,uB,pB,fB,mB,vB,kB,NB,TB,EB,RB,DB,MB,LB,BB,WB,VB,HB,ZB,JB,QB,$B,sW,iW,uW,NP,pW,vW,AW,OW,LW,zW,PW,BW,VW,GW,jW,JW,QW,$W,eV,sV,iV,cV,uV,dV,pV,mV,gV,bV,wV,kV,NV,CV,RV,_V,MV,PV,WV,GV,qV,KV,YV,QV,tU,nU,kP,aU,bW,rU,iU,lU,CP,hU,pU,fU,gU,bU,wU,kU,NU,CU,AU,FU,_U,OU,MU,PU,BU,WU,VU,UU,HU,KU,YU,sG,VP,oG,cG,uG,dG,eW,fG,yG,bG,kG,NG,RP,SG,TG,CG,EG,RG,aW,QU,DG,OG,LG,GP,BG,VG,HG,qG,YG,JG,$G,eH,sH,oH,cH,uH,dH,fH,gH,bH,YB,aG,wH,vH,kH,IH,NH,SH,TH,CH,RH,DH,MH,LH,zH,BH,WH,VH,UH,eG,JP,HH,qH,KH,ZH,ej,aj,$P,sj,rj,ij,gG];for(const hj of cj)Ts(hj);const lj={"tfjs-core":Dl,"tfjs-backend-cpu":PR,"tfjs-backend-webgl":fP,"tfjs-data":cE,"tfjs-layers":Gw,"tfjs-converter":QT,tfjs:"4.22.0"}},4334:(t,e,n)=>{var a=n(7359),s=n(7066),r=n(9016),o=n(9538),i=n(6288),c=n(5262),l=n(2430);l.alea=a,l.xor128=s,l.xorwow=r,l.xorshift7=o,l.xor4096=i,l.tychei=c,t.exports=l},5262:function(t,e,n){var a;!function(t,s){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,a=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-a|0,a=a<<24^a>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-a|0,e.d=a<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var a=0;a<n.length+20;a++)e.b^=0|n.charCodeAt(a),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function i(t,e){var n=new r(t),a=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,a&&("object"==typeof a&&o(a,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(a=function(){return i}.call(e,n,e,s))||(s.exports=a):this.tychei=i}(0,t=n.nmd(t),n.amdD)},6288:function(t,e,n){var a;!function(t,s){function r(t){var e=this;e.next=function(){var t,n,a=e.w,s=e.X,r=e.i;return e.w=a=a+1640531527|0,n=s[r+34&127],t=s[r=r+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[r]=n^t,e.i=r,n+(a^a>>>16)|0},function(t,e){var n,a,s,r,o,i=[],c=128;for(e===(0|e)?(a=e,e=null):(e+="\0",a=0,c=Math.max(c,e.length)),s=0,r=-32;r<c;++r)e&&(a^=e.charCodeAt((r+32)%e.length)),0===r&&(o=a),a^=a<<10,a^=a>>>15,a^=a<<4,a^=a>>>13,r>=0&&(o=o+1640531527|0,s=0==(n=i[127&r]^=a+o)?s+1:0);for(s>=128&&(i[127&(e&&e.length||0)]=-1),s=127,r=512;r>0;--r)a=i[s+34&127],n=i[s=s+1&127],a^=a<<13,n^=n<<17,a^=a>>>15,n^=n>>>12,i[s]=a^n;t.w=o,t.X=i,t.i=s}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,a&&(a.X&&o(a,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(a=function(){return i}.call(e,n,e,s))||(s.exports=a):this.xor4096=i}(0,t=n.nmd(t),n.amdD)},7066:function(t,e,n){var a;!function(t,s){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var a=0;a<n.length+64;a++)e.x^=0|n.charCodeAt(a),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function i(t,e){var n=new r(t),a=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,a&&("object"==typeof a&&o(a,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(a=function(){return i}.call(e,n,e,s))||(s.exports=a):this.xor128=i}(0,t=n.nmd(t),n.amdD)},7353:t=>{t.exports=n;var e=null;try{e=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(S){}function n(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function a(t){return!0===(t&&t.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=a;var s={},r={};function o(t,e){var n,a,o;return e?(o=0<=(t>>>=0)&&t<256)&&(a=r[t])?a:(n=c(t,(0|t)<0?-1:0,!0),o&&(r[t]=n),n):(o=-128<=(t|=0)&&t<128)&&(a=s[t])?a:(n=c(t,t<0?-1:0,!1),o&&(s[t]=n),n)}function i(t,e){if(isNaN(t))return e?y:g;if(e){if(t<0)return y;if(t>=p)return k}else{if(t<=-f)return I;if(t+1>=f)return v}return t<0?i(-t,e).neg():c(t%d|0,t/d|0,e)}function c(t,e,a){return new n(t,e,a)}n.fromInt=o,n.fromNumber=i,n.fromBits=c;var l=Math.pow;function u(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return g;if("number"===typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var a;if((a=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===a)return u(t.substring(1),e,n).neg();for(var s=i(l(n,8)),r=g,o=0;o<t.length;o+=8){var c=Math.min(8,t.length-o),h=parseInt(t.substring(o,o+c),n);if(c<8){var d=i(l(n,c));r=r.mul(d).add(i(h))}else r=(r=r.mul(s)).add(i(h))}return r.unsigned=e,r}function h(t,e){return"number"===typeof t?i(t,e):"string"===typeof t?u(t,e):c(t.low,t.high,"boolean"===typeof e?e:t.unsigned)}n.fromString=u,n.fromValue=h;var d=4294967296,p=d*d,f=p/2,m=o(1<<24),g=o(0);n.ZERO=g;var y=o(0,!0);n.UZERO=y;var b=o(1);n.ONE=b;var x=o(1,!0);n.UONE=x;var w=o(-1);n.NEG_ONE=w;var v=c(-1,2147483647,!1);n.MAX_VALUE=v;var k=c(-1,-1,!0);n.MAX_UNSIGNED_VALUE=k;var I=c(0,-2147483648,!1);n.MIN_VALUE=I;var N=n.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},N.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var e=i(t),n=this.div(e),a=n.mul(e).sub(this);return n.toString(t)+a.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var s=i(l(t,6),this.unsigned),r=this,o="";;){var c=r.div(s),u=(r.sub(c.mul(s)).toInt()>>>0).toString(t);if((r=c).isZero())return u+o;for(;u.length<6;)u="0"+u;o=""+u+o}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return 1===(1&this.low)},N.isEven=function(){return 0===(1&this.low)},N.equals=function(t){return a(t)||(t=h(t)),(this.unsigned===t.unsigned||this.high>>>31!==1||t.high>>>31!==1)&&(this.high===t.high&&this.low===t.low)},N.eq=N.equals,N.notEquals=function(t){return!this.eq(t)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(t){return this.comp(t)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(t){return this.comp(t)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(t){return this.comp(t)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(t){return this.comp(t)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(t){if(a(t)||(t=h(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(b)},N.neg=N.negate,N.add=function(t){a(t)||(t=h(t));var e=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,o=t.high>>>16,i=65535&t.high,l=t.low>>>16,u=0,d=0,p=0,f=0;return p+=(f+=r+(65535&t.low))>>>16,d+=(p+=s+l)>>>16,u+=(d+=n+i)>>>16,u+=e+o,c((p&=65535)<<16|(f&=65535),(u&=65535)<<16|(d&=65535),this.unsigned)},N.subtract=function(t){return a(t)||(t=h(t)),this.add(t.neg())},N.sub=N.subtract,N.multiply=function(t){if(this.isZero())return g;if(a(t)||(t=h(t)),e)return c(e.mul(this.low,this.high,t.low,t.high),e.get_high(),this.unsigned);if(t.isZero())return g;if(this.eq(I))return t.isOdd()?I:g;if(t.eq(I))return this.isOdd()?I:g;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(m)&&t.lt(m))return i(this.toNumber()*t.toNumber(),this.unsigned);var n=this.high>>>16,s=65535&this.high,r=this.low>>>16,o=65535&this.low,l=t.high>>>16,u=65535&t.high,d=t.low>>>16,p=65535&t.low,f=0,y=0,b=0,x=0;return b+=(x+=o*p)>>>16,y+=(b+=r*p)>>>16,b&=65535,y+=(b+=o*d)>>>16,f+=(y+=s*p)>>>16,y&=65535,f+=(y+=r*d)>>>16,y&=65535,f+=(y+=o*u)>>>16,f+=n*p+s*d+r*u+o*l,c((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(t){if(a(t)||(t=h(t)),t.isZero())throw Error("division by zero");var n,s,r;if(e)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?c((this.unsigned?e.div_u:e.div_s)(this.low,this.high,t.low,t.high),e.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return y;if(t.gt(this.shru(1)))return x;r=y}else{if(this.eq(I))return t.eq(b)||t.eq(w)?I:t.eq(I)?b:(n=this.shr(1).div(t).shl(1)).eq(g)?t.isNegative()?b:w:(s=this.sub(t.mul(n)),r=n.add(s.div(t)));if(t.eq(I))return this.unsigned?y:g;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();r=g}for(s=this;s.gte(t);){n=Math.max(1,Math.floor(s.toNumber()/t.toNumber()));for(var o=Math.ceil(Math.log(n)/Math.LN2),u=o<=48?1:l(2,o-48),d=i(n),p=d.mul(t);p.isNegative()||p.gt(s);)p=(d=i(n-=u,this.unsigned)).mul(t);d.isZero()&&(d=b),r=r.add(d),s=s.sub(p)}return r},N.div=N.divide,N.modulo=function(t){return a(t)||(t=h(t)),e?c((this.unsigned?e.rem_u:e.rem_s)(this.low,this.high,t.low,t.high),e.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return c(~this.low,~this.high,this.unsigned)},N.and=function(t){return a(t)||(t=h(t)),c(this.low&t.low,this.high&t.high,this.unsigned)},N.or=function(t){return a(t)||(t=h(t)),c(this.low|t.low,this.high|t.high,this.unsigned)},N.xor=function(t){return a(t)||(t=h(t)),c(this.low^t.low,this.high^t.high,this.unsigned)},N.shiftLeft=function(t){return a(t)&&(t=t.toInt()),0===(t&=63)?this:t<32?c(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):c(0,this.low<<t-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(t){return a(t)&&(t=t.toInt()),0===(t&=63)?this:t<32?c(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):c(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(t){if(a(t)&&(t=t.toInt()),0===(t&=63))return this;var e=this.high;return t<32?c(this.low>>>t|e<<32-t,e>>>t,this.unsigned):c(32===t?e:e>>>t-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?c(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:c(this.low,this.high,!0)},N.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},N.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},n.fromBytes=function(t,e,a){return a?n.fromBytesLE(t,e):n.fromBytesBE(t,e)},n.fromBytesLE=function(t,e){return new n(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},n.fromBytesBE=function(t,e){return new n(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}},7359:function(t,e,n){var a;!function(t,s){function r(t){var e=this,n=function(){var t=4022871197,e=function(e){e=String(e);for(var n=0;n<e.length;n++){var a=.02519603282416938*(t+=e.charCodeAt(n));a-=t=a>>>0,t=(a*=t)>>>0,t+=4294967296*(a-=t)}return 2.3283064365386963e-10*(t>>>0)};return e}();e.next=function(){var t=2091639*e.s0+2.3283064365386963e-10*e.c;return e.s0=e.s1,e.s1=e.s2,e.s2=t-(e.c=0|t)},e.c=1,e.s0=n(" "),e.s1=n(" "),e.s2=n(" "),e.s0-=n(t),e.s0<0&&(e.s0+=1),e.s1-=n(t),e.s1<0&&(e.s1+=1),e.s2-=n(t),e.s2<0&&(e.s2+=1),n=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function i(t,e){var n=new r(t),a=e&&e.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,a&&("object"==typeof a&&o(a,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(a=function(){return i}.call(e,n,e,s))||(s.exports=a):this.alea=i}(0,t=n.nmd(t),n.amdD)},9016:function(t,e,n){var a;!function(t,s){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var a=0;a<n.length+64;a++)e.x^=0|n.charCodeAt(a),a==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function i(t,e){var n=new r(t),a=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,a&&("object"==typeof a&&o(a,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(a=function(){return i}.call(e,n,e,s))||(s.exports=a):this.xorwow=i}(0,t=n.nmd(t),n.amdD)},9538:function(t,e,n){var a;!function(t,s){function r(t){var e=this;e.next=function(){var t,n,a=e.x,s=e.i;return t=a[s],n=(t^=t>>>7)^t<<24,n^=(t=a[s+1&7])^t>>>10,n^=(t=a[s+3&7])^t>>>3,n^=(t=a[s+4&7])^t<<7,t=a[s+7&7],n^=(t^=t<<13)^t<<9,a[s]=n,e.i=s+1&7,n},function(t,e){var n,a=[];if(e===(0|e))a[0]=e;else for(e=""+e,n=0;n<e.length;++n)a[7&n]=a[7&n]<<15^e.charCodeAt(n)+a[n+1&7]<<13;for(;a.length<8;)a.push(0);for(n=0;n<8&&0===a[n];++n);for(8==n?a[7]=-1:a[n],t.x=a,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,a&&(a.x&&o(a,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(a=function(){return i}.call(e,n,e,s))||(s.exports=a):this.xorshift7=i}(0,t=n.nmd(t),n.amdD)}}]);
//# sourceMappingURL=236.2c625b8b.chunk.js.map