#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Authentication API Server for MIA.vn Clone
Flask API server ƒë·ªÉ x·ª≠ l√Ω x√°c th·ª±c t·ª´ React frontend
"""

import json
import logging
from datetime import datetime
from flask import Flask, request, jsonify
from flask_cors import CORS
from auth_service import AuthenticationService

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for React frontend

# Initialize authentication service
auth_service = AuthenticationService()

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': 'MIA.vn Authentication API'
    })

@app.route('/api/auth/login', methods=['POST'])
def login():
    """Login endpoint"""
    try:
        data = request.get_json()

        if not data:
            return jsonify({
                'success': False,
                'error': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'
            }), 400

        email = data.get('email', '').strip()
        password = data.get('password', '')
        remember_me = data.get('rememberMe', False)

        # Validate input
        if not email or not password:
            return jsonify({
                'success': False,
                'error': 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc'
            }), 400

        # Get client info
        ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.environ.get('REMOTE_ADDR', ''))
        user_agent = request.environ.get('HTTP_USER_AGENT', '')

        # Authenticate user
        success, result = auth_service.authenticate_user(
            email, password, ip_address, user_agent
        )

        if success:
            response_data = {
                'success': True,
                'user': result['user'],
                'session': result['session'],
                'message': 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng'
            }

            # Set session cookie if remember me
            response = jsonify(response_data)
            if remember_me:
                response.set_cookie(
                    'session_id',
                    result['session']['session_id'],
                    max_age=24*60*60,  # 24 hours
                    httponly=True,
                    secure=False,  # Set to True in production with HTTPS
                    samesite='Lax'
                )

            return response

        else:
            return jsonify({
                'success': False,
                'error': result.get('error', 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i')
            }), 401

    except Exception as e:
        logging.error(f"Login error: {e}")
        return jsonify({
            'success': False,
            'error': 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p'
        }), 500

@app.route('/api/auth/verify', methods=['POST'])
def verify_session():
    """Verify session endpoint"""
    try:
        data = request.get_json()
        session_id = data.get('sessionId') if data else None

        # Try to get session from cookie if not provided
        if not session_id:
            session_id = request.cookies.get('session_id')

        if not session_id:
            return jsonify({
                'success': False,
                'error': 'Session kh√¥ng t·ªìn t·∫°i'
            }), 401

        # Verify session
        valid, user_data = auth_service.verify_session(session_id)

        if valid:
            return jsonify({
                'success': True,
                'user': user_data['user'],
                'session': user_data['session']
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Session kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n'
            }), 401

    except Exception as e:
        logging.error(f"Session verification error: {e}")
        return jsonify({
            'success': False,
            'error': 'C√≥ l·ªói x·∫£y ra khi x√°c minh session'
        }), 500

@app.route('/api/auth/logout', methods=['POST'])
def logout():
    """Logout endpoint"""
    try:
        data = request.get_json()
        session_id = data.get('sessionId') if data else None

        # Try to get session from cookie if not provided
        if not session_id:
            session_id = request.cookies.get('session_id')

        if session_id:
            auth_service.logout(session_id)

        response = jsonify({
            'success': True,
            'message': 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
        })

        # Clear session cookie
        response.set_cookie('session_id', '', expires=0)

        return response

    except Exception as e:
        logging.error(f"Logout error: {e}")
        return jsonify({
            'success': False,
            'error': 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng xu·∫•t'
        }), 500

@app.route('/api/auth/register', methods=['POST'])
def register():
    """Register new user endpoint"""
    try:
        data = request.get_json()

        if not data:
            return jsonify({
                'success': False,
                'error': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'
            }), 400

        email = data.get('email', '').strip()
        password = data.get('password', '')
        full_name = data.get('fullName', '').strip()
        role = data.get('role', 'user')
        department = data.get('department', '').strip()

        # Validate input
        if not all([email, password, full_name]):
            return jsonify({
                'success': False,
                'error': 'Email, m·∫≠t kh·∫©u v√† h·ªç t√™n l√† b·∫Øt bu·ªôc'
            }), 400

        # Add user
        success = auth_service.add_user(email, password, full_name, role, department)

        if success:
            return jsonify({
                'success': True,
                'message': 'ƒêƒÉng k√Ω th√†nh c√¥ng'
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Email ƒë√£ t·ªìn t·∫°i ho·∫∑c c√≥ l·ªói x·∫£y ra'
            }), 400

    except Exception as e:
        logging.error(f"Registration error: {e}")
        return jsonify({
            'success': False,
            'error': 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng k√Ω'
        }), 500

@app.route('/api/auth/status', methods=['GET'])
def auth_status():
    """Get authentication service status"""
    try:
        # Check if Google Sheets connection is working
        sheets_connected = auth_service.sheets_service.client is not None

        return jsonify({
            'success': True,
            'status': {
                'sheets_connected': sheets_connected,
                'service': 'Authentication API',
                'timestamp': datetime.now().isoformat()
            }
        })

    except Exception as e:
        logging.error(f"Status check error: {e}")
        return jsonify({
            'success': False,
            'error': 'Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i service'
        }), 500

@app.errorhandler(404)
def not_found(error):
    """Handle 404 errors"""
    return jsonify({
        'success': False,
        'error': 'Endpoint kh√¥ng t·ªìn t·∫°i'
    }), 404

@app.errorhandler(500)
def internal_error(error):
    """Handle 500 errors"""
    return jsonify({
        'success': False,
        'error': 'L·ªói server n·ªôi b·ªô'
    }), 500

def main():
    """Run the Flask application"""
    print("üöÄ STARTING MIA.VN AUTHENTICATION API SERVER")
    print("=" * 60)
    print("üåê API Endpoints:")
    print("   POST /api/auth/login    - ƒêƒÉng nh·∫≠p")
    print("   POST /api/auth/verify   - X√°c minh session")
    print("   POST /api/auth/logout   - ƒêƒÉng xu·∫•t")
    print("   POST /api/auth/register - ƒêƒÉng k√Ω")
    print("   GET  /api/auth/status   - Tr·∫°ng th√°i service")
    print("   GET  /health           - Health check")
    print()
    print("üîß Configuration:")
    print(f"   Debug: {app.debug}")
    print("   Host: 0.0.0.0")
    print("   Port: 5001")  # Updated port number
    print()
    print("üìã Google Sheets Integration:")
    if auth_service.sheets_service.client:
        print("   ‚úÖ Connected to Google Sheets")
        print(f"   üìä Spreadsheet ID: {auth_service.sheets_service.spreadsheet_id}")
    else:
        print("   ‚ùå Google Sheets connection failed")
    print()
    print("üöÄ Server starting...")
    print("   Press Ctrl+C to stop")
    print("=" * 60)

    # Run Flask app
    app.run(
        host='0.0.0.0',
        port=5001,  # Changed from 5000 to avoid AirPlay conflict
        debug=False,  # Disable debug mode for stability
        threaded=True
    )

if __name__ == '__main__':
    main()
