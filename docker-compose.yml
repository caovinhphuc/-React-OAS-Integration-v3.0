version: '3.8'

services:
  # Frontend - React Development Server
  frontend:
    build:
      context: .
      target: frontend-build
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3001
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    command: npm start
    depends_on:
      - backend

  # Backend - Node.js API Server
  backend:
    build:
      context: ./backend
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
      - PORT=3001
    volumes:
      - ./backend/src:/app/src
    depends_on:
      - mongodb
      - redis

  # Automation - Python Services
  automation:
    build:
      context: ./automation
    ports:
      - '5000:5000'
    environment:
      - PYTHON_ENV=development
      - FLASK_PORT=5000
    volumes:
      - ./automation/src:/app/src
      - ./automation/config:/app/config
    depends_on:
      - backend

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=react_oas_integration
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/ssl:ro
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  mongodb_data:
  redis_data:
