{"version":3,"file":"static/js/653.6f76e2ad.chunk.js","mappings":"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","sources":["components/ai/AIDashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CartesianGrid, Cell, Line, LineChart, Pie, PieChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { fetchAIAnalysis, fetchAvailableModels, fetchPrediction, setAIServiceStatus } from '../../store/slices/aiSlice';\nimport './AIDashboard.css';\n\nconst AIDashboard = () => {\n  const dispatch = useDispatch();\n  const {\n    analysisResults,\n    predictions,\n    availableModels,\n    isLoading,\n    isAnalyzing,\n    error,\n    aiServiceStatus\n  } = useSelector(state => state.ai);\n\n  const [selectedModel, setSelectedModel] = useState('prediction_model_v4');\n  const [inputData, setInputData] = useState({\n    feature1: Math.random() * 100,\n    feature2: Math.random() * 100,\n    feature3: Math.random() * 100\n  });\n\n  useEffect(() => {\n    // Kiểm tra AI service status\n    checkAIServiceStatus();\n    // Load available models\n    dispatch(fetchAvailableModels());\n  }, [dispatch]);\n\n  const checkAIServiceStatus = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/health');\n      if (response.ok) {\n        dispatch(setAIServiceStatus('connected'));\n      } else {\n        dispatch(setAIServiceStatus('disconnected'));\n      }\n    } catch (error) {\n      dispatch(setAIServiceStatus('disconnected'));\n    }\n  };\n\n  const handleAnalyze = () => {\n    dispatch(fetchAIAnalysis(inputData));\n  };\n\n  const handlePredict = () => {\n    dispatch(fetchPrediction(selectedModel));\n  };\n\n  const formatTime = (timestamp) => {\n    return new Date(timestamp).toLocaleString('vi-VN', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    });\n  };\n\n  // Chuẩn bị dữ liệu cho biểu đồ\n  const predictionChartData = Object.entries(predictions).map(([model, data]) => ({\n    model: model.replace('_model_v4', ''),\n    prediction: data.prediction,\n    confidence: data.confidence * 100\n  }));\n\n  const confidenceData = [\n    { name: 'Cao', value: analysisResults.filter(r => r.confidence > 0.8).length },\n    { name: 'Trung bình', value: analysisResults.filter(r => r.confidence > 0.5 && r.confidence <= 0.8).length },\n    { name: 'Thấp', value: analysisResults.filter(r => r.confidence <= 0.5).length }\n  ];\n\n  const COLORS = ['#2ecc71', '#f39c12', '#e74c3c'];\n\n  return (\n    <div className=\"ai-dashboard\">\n      <div className=\"dashboard-header\">\n        <h1>🧠 AI Analytics Dashboard</h1>\n        <div className=\"header-info\">\n          <div className={`ai-status ${aiServiceStatus}`}>\n            {aiServiceStatus === 'connected' ? '🟢 AI Service Connected' : '🔴 AI Service Disconnected'}\n          </div>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-banner\">\n          <span>⚠️ Lỗi AI: {error}</span>\n        </div>\n      )}\n\n      {/* AI Controls */}\n      <div className=\"ai-controls\">\n        <div className=\"control-panel\">\n          <h3>🎯 AI Analysis Controls</h3>\n\n          <div className=\"input-group\">\n            <label>Feature 1:</label>\n            <input\n              type=\"number\"\n              value={inputData.feature1}\n              onChange={(e) => setInputData({...inputData, feature1: parseFloat(e.target.value)})}\n              step=\"0.1\"\n            />\n          </div>\n\n          <div className=\"input-group\">\n            <label>Feature 2:</label>\n            <input\n              type=\"number\"\n              value={inputData.feature2}\n              onChange={(e) => setInputData({...inputData, feature2: parseFloat(e.target.value)})}\n              step=\"0.1\"\n            />\n          </div>\n\n          <div className=\"input-group\">\n            <label>Feature 3:</label>\n            <input\n              type=\"number\"\n              value={inputData.feature3}\n              onChange={(e) => setInputData({...inputData, feature3: parseFloat(e.target.value)})}\n              step=\"0.1\"\n            />\n          </div>\n\n          <button\n            onClick={handleAnalyze}\n            disabled={isAnalyzing}\n            className=\"analyze-btn\"\n          >\n            {isAnalyzing ? '🔄 Đang phân tích...' : '🧠 Phân tích AI'}\n          </button>\n        </div>\n\n        <div className=\"control-panel\">\n          <h3>🔮 Prediction Controls</h3>\n\n          <div className=\"input-group\">\n            <label>Model:</label>\n            <select\n              value={selectedModel}\n              onChange={(e) => setSelectedModel(e.target.value)}\n            >\n              {availableModels.map((model, index) => (\n                <option key={index} value={model.name}>\n                  {model.name} ({model.type}) - Accuracy: {(model.accuracy * 100).toFixed(1)}%\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <button\n            onClick={handlePredict}\n            disabled={isLoading}\n            className=\"predict-btn\"\n          >\n            {isLoading ? '🔄 Đang dự đoán...' : '🔮 Dự đoán'}\n          </button>\n        </div>\n      </div>\n\n      {/* Metrics */}\n      <div className=\"metrics-grid\">\n        <div className=\"metric-card\">\n          <div className=\"metric-icon\">🧠</div>\n          <div className=\"metric-content\">\n            <h3>Tổng phân tích</h3>\n            <p className=\"metric-value\">{analysisResults.length}</p>\n          </div>\n        </div>\n\n        <div className=\"metric-card\">\n          <div className=\"metric-icon\">🔮</div>\n          <div className=\"metric-content\">\n            <h3>Dự đoán đã thực hiện</h3>\n            <p className=\"metric-value\">{Object.keys(predictions).length}</p>\n          </div>\n        </div>\n\n        <div className=\"metric-card\">\n          <div className=\"metric-icon\">📊</div>\n          <div className=\"metric-content\">\n            <h3>Models có sẵn</h3>\n            <p className=\"metric-value\">{availableModels.length}</p>\n          </div>\n        </div>\n\n        <div className=\"metric-card\">\n          <div className=\"metric-icon\">⚡</div>\n          <div className=\"metric-content\">\n            <h3>Confidence TB</h3>\n            <p className=\"metric-value\">\n              {analysisResults.length > 0\n                ? (analysisResults.reduce((sum, r) => sum + r.confidence, 0) / analysisResults.length * 100).toFixed(1) + '%'\n                : '0%'\n              }\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Charts */}\n      <div className=\"charts-grid\">\n        <div className=\"chart-container\">\n          <h3>🔮 Predictions Chart</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={predictionChartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"model\" />\n              <YAxis />\n              <Tooltip\n                labelFormatter={(value) => `Model: ${value}`}\n                formatter={(value, name) => [value, name === 'prediction' ? 'Dự đoán' : 'Confidence']}\n              />\n              <Line type=\"monotone\" dataKey=\"prediction\" stroke=\"#3498db\" strokeWidth={2} />\n              <Line type=\"monotone\" dataKey=\"confidence\" stroke=\"#e74c3c\" strokeWidth={2} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"chart-container\">\n          <h3>📊 Confidence Distribution</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={confidenceData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={({name, percent}) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n              >\n                {confidenceData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Recent Analysis Results */}\n      <div className=\"recent-analysis\">\n        <h3>🔄 Kết quả phân tích gần đây</h3>\n        <div className=\"analysis-table\">\n          <div className=\"table-header\">\n            <span>Thời gian</span>\n            <span>Dự đoán</span>\n            <span>Confidence</span>\n            <span>Loại</span>\n          </div>\n          {analysisResults.slice(0, 10).map((result, index) => (\n            <div key={index} className=\"table-row\">\n              <span>{formatTime(result.timestamp)}</span>\n              <span>{result.prediction.toFixed(2)}</span>\n              <span className={`confidence ${result.confidence > 0.8 ? 'high' : result.confidence > 0.5 ? 'medium' : 'low'}`}>\n                {(result.confidence * 100).toFixed(1)}%\n              </span>\n              <span>{result.analysis_type}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AIDashboard;\n"],"names":["AIDashboard","dispatch","useDispatch","analysisResults","predictions","availableModels","isLoading","isAnalyzing","error","aiServiceStatus","useSelector","state","ai","selectedModel","setSelectedModel","useState","inputData","setInputData","feature1","Math","random","feature2","feature3","useEffect","checkAIServiceStatus","fetchAvailableModels","async","fetch","ok","setAIServiceStatus","predictionChartData","Object","entries","map","_ref","model","data","replace","prediction","confidence","confidenceData","name","value","filter","r","length","COLORS","_jsxs","className","children","_jsx","concat","type","onChange","e","_objectSpread","parseFloat","target","step","onClick","handleAnalyze","fetchAIAnalysis","disabled","index","accuracy","toFixed","handlePredict","fetchPrediction","keys","reduce","sum","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","labelFormatter","formatter","Line","stroke","strokeWidth","PieChart","Pie","cx","cy","labelLine","label","_ref2","percent","outerRadius","fill","entry","Cell","slice","result","timestamp","Date","toLocaleString","day","month","year","hour","minute","second","hour12","analysis_type"],"sourceRoot":""}