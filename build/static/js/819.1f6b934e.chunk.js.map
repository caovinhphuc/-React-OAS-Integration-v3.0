{"version":3,"file":"static/js/819.1f6b934e.chunk.js","mappings":"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","sources":["../node_modules/recharts/es6/chart/BarChart.js","components/dashboard/LiveDashboard.jsx"],"sourcesContent":["/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Bar, BarChart, CartesianGrid, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { connectWebSocket, updateMetrics } from '../../store/slices/dashboardSlice';\nimport './LiveDashboard.css';\n\nconst LiveDashboard = () => {\n  const dispatch = useDispatch();\n  const { connectionStatus, realTimeData, metrics, isLoading, error } = useSelector(state => state.dashboard);\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    // Kết nối WebSocket\n    dispatch(connectWebSocket());\n\n    // Cập nhật thời gian mỗi giây\n    const timeInterval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    // Simulate metrics updates\n    const metricsInterval = setInterval(() => {\n      dispatch(updateMetrics({\n        activeConnections: Math.floor(Math.random() * 100) + 10,\n        averageResponseTime: Math.floor(Math.random() * 500) + 100,\n        uptime: Date.now() - (Date.now() - 3600000) // 1 hour uptime\n      }));\n    }, 5000);\n\n    return () => {\n      clearInterval(timeInterval);\n      clearInterval(metricsInterval);\n    };\n  }, [dispatch]);\n\n  const formatTime = (date) => {\n    return date.toLocaleString('vi-VN', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    });\n  };\n\n  const formatUptime = (ms) => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n  };\n\n  // Chuẩn bị dữ liệu cho biểu đồ\n  const chartData = realTimeData.slice(0, 20).reverse().map((item, index) => ({\n    time: index,\n    value: item.value,\n    timestamp: new Date(item.timestamp).toLocaleTimeString('vi-VN')\n  }));\n\n  return (\n    <div className=\"live-dashboard\">\n      <div className=\"dashboard-header\">\n        <h1>📊 Live Dashboard</h1>\n        <div className=\"header-info\">\n          <span className=\"current-time\">{formatTime(currentTime)}</span>\n          <div className={`connection-status ${connectionStatus}`}>\n            {connectionStatus === 'connected' ? '🟢 Đã kết nối' : '🔴 Mất kết nối'}\n          </div>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-banner\">\n          <span>⚠️ Lỗi: {error}</span>\n        </div>\n      )}\n\n      <div className=\"metrics-grid\">\n        <div className=\"metric-card\">\n          <div className=\"metric-icon\">📈</div>\n          <div className=\"metric-content\">\n            <h3>Tổng Request</h3>\n            <p className=\"metric-value\">{metrics.totalRequests}</p>\n          </div>\n        </div>\n\n        <div className=\"metric-card\">\n          <div className=\"metric-icon\">🔗</div>\n          <div className=\"metric-content\">\n            <h3>Kết nối đang hoạt động</h3>\n            <p className=\"metric-value\">{metrics.activeConnections}</p>\n          </div>\n        </div>\n\n        <div className=\"metric-card\">\n          <div className=\"metric-icon\">⚡</div>\n          <div className=\"metric-content\">\n            <h3>Thời gian phản hồi TB</h3>\n            <p className=\"metric-value\">{metrics.averageResponseTime}ms</p>\n          </div>\n        </div>\n\n        <div className=\"metric-card\">\n          <div className=\"metric-icon\">⏱️</div>\n          <div className=\"metric-content\">\n            <h3>Thời gian hoạt động</h3>\n            <p className=\"metric-value\">{formatUptime(metrics.uptime)}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"charts-grid\">\n        <div className=\"chart-container\">\n          <h3>📊 Dữ liệu thời gian thực</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"timestamp\" />\n              <YAxis />\n              <Tooltip\n                labelFormatter={(value, payload) => `Thời gian: ${payload[0]?.payload?.timestamp}`}\n                formatter={(value) => [`${value}`, 'Giá trị']}\n              />\n              <Line type=\"monotone\" dataKey=\"value\" stroke=\"#3498db\" strokeWidth={2} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"chart-container\">\n          <h3>📊 Phân phối dữ liệu</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={chartData.slice(0, 10)}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"timestamp\" />\n              <YAxis />\n              <Tooltip\n                labelFormatter={(value, payload) => `Thời gian: ${payload[0]?.payload?.timestamp}`}\n                formatter={(value) => [`${value}`, 'Giá trị']}\n              />\n              <Bar dataKey=\"value\" fill=\"#2ecc71\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      <div className=\"recent-data\">\n        <h3>🔄 Dữ liệu gần đây</h3>\n        <div className=\"data-table\">\n          <div className=\"table-header\">\n            <span>Thời gian</span>\n            <span>Giá trị</span>\n            <span>Trạng thái</span>\n          </div>\n          {realTimeData.slice(0, 10).map((item, index) => (\n            <div key={index} className=\"table-row\">\n              <span>{formatTime(new Date(item.timestamp))}</span>\n              <span>{item.value.toFixed(2)}</span>\n              <span className={`status ${item.status}`}>{item.status}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LiveDashboard;\n"],"names":["BarChart","generateCategoricalChart","chartName","GraphicalChild","Bar","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","LiveDashboard","dispatch","useDispatch","connectionStatus","realTimeData","metrics","isLoading","error","useSelector","state","dashboard","currentTime","setCurrentTime","useState","Date","useEffect","connectWebSocket","timeInterval","setInterval","metricsInterval","updateMetrics","activeConnections","Math","floor","random","averageResponseTime","uptime","now","clearInterval","formatTime","date","toLocaleString","day","month","year","hour","minute","second","hour12","chartData","slice","reverse","map","item","index","time","value","timestamp","toLocaleTimeString","_jsxs","className","children","_jsx","concat","totalRequests","ms","seconds","minutes","hours","formatUptime","ResponsiveContainer","width","height","LineChart","data","CartesianGrid","strokeDasharray","dataKey","Tooltip","labelFormatter","payload","_payload$","_payload$$payload","formatter","Line","type","stroke","strokeWidth","_payload$2","_payload$2$payload","fill","toFixed","status"],"sourceRoot":""}