#!/usr/bin/env node

/**
 * Test Google Sheets Connection Script
 * Ki·ªÉm tra k·∫øt n·ªëi Google Sheets v√† t·∫°o d·ªØ li·ªáu m·∫´u
 */

const { google } = require("googleapis");
const fs = require("fs");
const path = require("path");

// Load environment variables
require("dotenv").config();

// Google Sheets configuration
const SCOPES = ["https://www.googleapis.com/auth/spreadsheets"];
const CREDENTIALS_PATH = path.join(
  __dirname,
  "automation/config/google-credentials.json"
);

// Sample data
const SAMPLE_DATA = {
  orders: [
    ["Ng√†y", "S·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng", "Gi√°", "Tr·∫°ng th√°i", "Kh√°ch h√†ng"],
    ["2025-09-13", "S·∫£n ph·∫©m A", "5", "150000", "Ho√†n th√†nh", "Nguy·ªÖn VƒÉn A"],
    ["2025-09-13", "S·∫£n ph·∫©m B", "3", "200000", "ƒêang x·ª≠ l√Ω", "Tr·∫ßn Th·ªã B"],
    ["2025-09-12", "S·∫£n ph·∫©m C", "2", "300000", "Ho√†n th√†nh", "L√™ VƒÉn C"],
    ["2025-09-12", "S·∫£n ph·∫©m A", "4", "150000", "Ho√†n th√†nh", "Ph·∫°m Th·ªã D"],
  ],
  dashboard: [
    ["Metric", "Value", "Change", "Status"],
    ["T·ªïng ƒë∆°n h√†ng", "1250", "+12%", "TƒÉng"],
    ["Doanh thu", "1250000000", "+8%", "TƒÉng"],
    ["Kh√°ch h√†ng m·ªõi", "89", "+15%", "TƒÉng"],
    ["T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi", "3.2%", "-0.5%", "Gi·∫£m"],
  ],
};

async function testGoogleSheetsConnection() {
  console.log("üîç KI·ªÇM TRA GOOGLE SHEETS CONNECTION");
  console.log("=====================================");
  console.log("");

  try {
    // 1. Ki·ªÉm tra credentials file
    console.log("üìã B∆∞·ªõc 1: Ki·ªÉm tra credentials file...");
    if (!fs.existsSync(CREDENTIALS_PATH)) {
      throw new Error(
        `‚ùå Kh√¥ng t√¨m th·∫•y credentials file: ${CREDENTIALS_PATH}`
      );
    }
    console.log("‚úÖ Credentials file t·ªìn t·∫°i");

    // 2. Ki·ªÉm tra environment variables
    console.log("üìã B∆∞·ªõc 2: Ki·ªÉm tra environment variables...");
    const spreadsheetId =
      process.env.REACT_APP_GOOGLE_SHEET_ID || process.env.GOOGLE_SHEETS_ID;

    if (!spreadsheetId || spreadsheetId === "your-spreadsheet-id") {
      console.log("‚ö†Ô∏è  Ch∆∞a c√≥ Google Sheets ID th·ª±c t·∫ø");
      console.log("üìù H∆∞·ªõng d·∫´n:");
      console.log("   1. T·∫°o Google Sheets m·ªõi t·∫°i: https://sheets.google.com");
      console.log("   2. Copy Sheet ID t·ª´ URL (gi·ªØa /d/ v√† /edit)");
      console.log("   3. C·∫≠p nh·∫≠t REACT_APP_GOOGLE_SHEET_ID trong .env file");
      console.log("");
      return false;
    }
    console.log(`‚úÖ Google Sheets ID: ${spreadsheetId}`);

    // 3. Load credentials
    console.log("üìã B∆∞·ªõc 3: Load Google credentials...");
    const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf8"));

    if (credentials.project_id === "your-project-id") {
      console.log("‚ö†Ô∏è  Credentials file ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng");
      console.log("üìù H∆∞·ªõng d·∫´n:");
      console.log("   1. T·∫°o Google Cloud Project");
      console.log("   2. Enable Google Sheets API");
      console.log("   3. T·∫°o Service Account v√† download JSON key");
      console.log("   4. Thay th·∫ø n·ªôi dung file google-credentials.json");
      console.log("");
      return false;
    }
    console.log(`‚úÖ Project ID: ${credentials.project_id}`);

    // 4. Authenticate
    console.log("üìã B∆∞·ªõc 4: Authenticate v·ªõi Google APIs...");
    const auth = new google.auth.GoogleAuth({
      credentials: credentials,
      scopes: SCOPES,
    });

    const sheets = google.sheets({ version: "v4", auth });
    console.log("‚úÖ Authentication th√†nh c√¥ng");

    // 5. Test connection
    console.log("üìã B∆∞·ªõc 5: Test k·∫øt n·ªëi v·ªõi Google Sheets...");
    const response = await sheets.spreadsheets.get({
      spreadsheetId: spreadsheetId,
    });

    console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!`);
    console.log(`üìä Spreadsheet title: ${response.data.properties.title}`);
    console.log(
      `üìã Sheets: ${response.data.sheets.map((s) => s.properties.title).join(", ")}`
    );

    // 6. T·∫°o d·ªØ li·ªáu m·∫´u (n·∫øu c·∫ßn)
    console.log("üìã B∆∞·ªõc 6: Ki·ªÉm tra v√† t·∫°o d·ªØ li·ªáu m·∫´u...");

    // Ki·ªÉm tra sheet "Orders"
    const ordersSheet = response.data.sheets.find(
      (s) => s.properties.title === "Orders"
    );
    if (!ordersSheet) {
      console.log('üìù T·∫°o sheet "Orders"...');
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId: spreadsheetId,
        resource: {
          requests: [
            {
              addSheet: {
                properties: {
                  title: "Orders",
                },
              },
            },
          ],
        },
      });
      console.log('‚úÖ ƒê√£ t·∫°o sheet "Orders"');
    } else {
      console.log('‚úÖ Sheet "Orders" ƒë√£ t·ªìn t·∫°i');
    }

    // Ghi d·ªØ li·ªáu m·∫´u v√†o Orders sheet
    console.log("üìù Ghi d·ªØ li·ªáu m·∫´u v√†o Orders sheet...");
    await sheets.spreadsheets.values.update({
      spreadsheetId: spreadsheetId,
      range: "Orders!A1:F10",
      valueInputOption: "RAW",
      resource: {
        values: SAMPLE_DATA.orders,
      },
    });
    console.log("‚úÖ ƒê√£ ghi d·ªØ li·ªáu m·∫´u v√†o Orders sheet");

    // Ki·ªÉm tra sheet "Dashboard"
    const dashboardSheet = response.data.sheets.find(
      (s) => s.properties.title === "Dashboard"
    );
    if (!dashboardSheet) {
      console.log('üìù T·∫°o sheet "Dashboard"...');
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId: spreadsheetId,
        resource: {
          requests: [
            {
              addSheet: {
                properties: {
                  title: "Dashboard",
                },
              },
            },
          ],
        },
      });
      console.log('‚úÖ ƒê√£ t·∫°o sheet "Dashboard"');
    } else {
      console.log('‚úÖ Sheet "Dashboard" ƒë√£ t·ªìn t·∫°i');
    }

    // Ghi d·ªØ li·ªáu m·∫´u v√†o Dashboard sheet
    console.log("üìù Ghi d·ªØ li·ªáu m·∫´u v√†o Dashboard sheet...");
    await sheets.spreadsheets.values.update({
      spreadsheetId: spreadsheetId,
      range: "Dashboard!A1:D10",
      valueInputOption: "RAW",
      resource: {
        values: SAMPLE_DATA.dashboard,
      },
    });
    console.log("‚úÖ ƒê√£ ghi d·ªØ li·ªáu m·∫´u v√†o Dashboard sheet");

    console.log("");
    console.log("üéâ GOOGLE SHEETS SETUP HO√ÄN T·∫§T!");
    console.log("================================");
    console.log(
      `üìä Spreadsheet URL: https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit`
    );
    console.log("üìã Sheets ƒë√£ t·∫°o: Orders, Dashboard");
    console.log("üìä D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c th√™m v√†o");
    console.log("");
    console.log(
      "‚úÖ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ test Google Sheets integration trong frontend!"
    );

    return true;
  } catch (error) {
    console.error("‚ùå L·ªói:", error.message);
    console.log("");
    console.log("üîß TROUBLESHOOTING:");
    console.log("1. Ki·ªÉm tra Google Sheets ID trong .env file");
    console.log("2. Ki·ªÉm tra credentials file c√≥ ƒë√∫ng kh√¥ng");
    console.log("3. ƒê·∫£m b·∫£o ƒë√£ chia s·∫ª sheet v·ªõi Service Account email");
    console.log("4. Ki·ªÉm tra Google Sheets API ƒë√£ ƒë∆∞·ª£c enable");
    return false;
  }
}

// Ch·∫°y test
if (require.main === module) {
  testGoogleSheetsConnection()
    .then((success) => {
      process.exit(success ? 0 : 1);
    })
    .catch((error) => {
      console.error("‚ùå Unexpected error:", error);
      process.exit(1);
    });
}

module.exports = { testGoogleSheetsConnection };
