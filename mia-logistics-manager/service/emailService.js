import sgMail from '@sendgrid/mail';
import nodemailer from 'nodemailer';
import handlebars from 'handlebars';
import mjml from 'mjml';
import { notificationConfig } from '../config/notification.js';

class EmailService {
  constructor() {
    this.sendgridClient = null;
    this.nodemailerTransporter = null;
    this.templates = new Map();
    this.isInitialized = false;
    this.init();
  }

  init() {
    // Initialize SendGrid
    if (notificationConfig.email.sendgrid.enabled) {
      sgMail.setApiKey(notificationConfig.email.sendgrid.apiKey);
      this.sendgridClient = sgMail;
      console.log('‚úÖ D·ªãch v·ª• Email SendGrid: ƒê√£ kh·ªüi t·∫°o');
    }

    // Initialize Nodemailer as fallback
    if (notificationConfig.email.nodemailer.enabled) {
      this.nodemailerTransporter = nodemailer.createTransport({
        host: notificationConfig.email.nodemailer.host,
        port: notificationConfig.email.nodemailer.port,
        secure: notificationConfig.email.nodemailer.secure,
        auth: notificationConfig.email.nodemailer.auth,
      });
      console.log('‚úÖ Nodemailer email service initialized');
    }

    this.loadTemplates();
    this.isInitialized = true;
  }

  loadTemplates() {
    // Load email templates
    this.templates.set('carrier-update', this.getCarrierUpdateTemplate());
    this.templates.set('order-status', this.getOrderStatusTemplate());
    this.templates.set('system-alert', this.getSystemAlertTemplate());
    this.templates.set('daily-report', this.getDailyReportTemplate());
    this.templates.set('weekly-report', this.getWeeklyReportTemplate());
    this.templates.set('monthly-report', this.getMonthlyReportTemplate());

    // Map notification template names to email template names
    this.templateMapping = {
      carrierUpdate: 'carrier-update',
      orderStatus: 'order-status',
      systemAlert: 'system-alert',
      dailyReport: 'daily-report',
      weeklyReport: 'weekly-report',
      monthlyReport: 'monthly-report',
    };
  }

  getCarrierUpdateTemplate() {
    const mjmlTemplate = `
      <mjml>
        <mj-head>
          <mj-title>MIA Logistics - C·∫≠p nh·∫≠t Nh√† v·∫≠n chuy·ªÉn</mj-title>
          <mj-font name="Roboto" href="https://fonts.googleapis.com/css?family=Roboto" />
          <mj-attributes>
            <mj-all font-family="Roboto, Arial, sans-serif" />
          </mj-attributes>
        </mj-head>
        <mj-body background-color="#f4f4f4">
          <mj-section background-color="#ffffff" padding="20px">
            <mj-column>
              <mj-text font-size="24px" font-weight="bold" color="#2c3e50" align="center">
                üöö C·∫≠p nh·∫≠t Nh√† v·∫≠n chuy·ªÉn
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="16px" color="#34495e">
                <strong>T√™n nh√† v·∫≠n chuy·ªÉn:</strong> {{carrierName}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Khu v·ª±c ho·∫°t ƒë·ªông:</strong> {{serviceAreas}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Ph∆∞∆°ng th·ª©c t√≠nh gi√°:</strong> {{pricingMethod}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Li√™n h·ªá:</strong> {{contact}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Tr·∫°ng th√°i:</strong> {{status}}
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="14px" color="#7f8c8d" align="center">
                Th·ªùi gian c·∫≠p nh·∫≠t: {{timestamp}}
              </mj-text>
            </mj-column>
          </mj-section>
        </mj-body>
      </mjml>
    `;

    return handlebars.compile(mjml(mjmlTemplate).html);
  }

  getOrderStatusTemplate() {
    const mjmlTemplate = `
      <mjml>
        <mj-head>
          <mj-title>MIA Logistics - C·∫≠p nh·∫≠t ƒê∆°n h√†ng</mj-title>
          <mj-font name="Roboto" href="https://fonts.googleapis.com/css?family=Roboto" />
          <mj-attributes>
            <mj-all font-family="Roboto, Arial, sans-serif" />
          </mj-attributes>
        </mj-head>
        <mj-body background-color="#f4f4f4">
          <mj-section background-color="#ffffff" padding="20px">
            <mj-column>
              <mj-text font-size="24px" font-weight="bold" color="#2c3e50" align="center">
                üì¶ C·∫≠p nh·∫≠t ƒê∆°n h√†ng
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="16px" color="#34495e">
                <strong>M√£ ƒë∆°n h√†ng:</strong> {{orderId}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Kh√°ch h√†ng:</strong> {{customerName}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>ƒê·ªãa ch·ªâ:</strong> {{address}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Gi√° tr·ªã:</strong> {{value}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Tr·∫°ng th√°i:</strong> {{status}}
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="14px" color="#7f8c8d" align="center">
                C·∫≠p nh·∫≠t l√∫c: {{timestamp}}
              </mj-text>
            </mj-column>
          </mj-section>
        </mj-body>
      </mjml>
    `;

    return handlebars.compile(mjml(mjmlTemplate).html);
  }

  getSystemAlertTemplate() {
    const mjmlTemplate = `
      <mjml>
        <mj-head>
          <mj-title>MIA Logistics - C·∫£nh b√°o H·ªá th·ªëng</mj-title>
          <mj-font name="Roboto" href="https://fonts.googleapis.com/css?family=Roboto" />
          <mj-attributes>
            <mj-all font-family="Roboto, Arial, sans-serif" />
          </mj-attributes>
        </mj-head>
        <mj-body background-color="#f4f4f4">
          <mj-section background-color="#ffffff" padding="20px">
            <mj-column>
              <mj-text font-size="24px" font-weight="bold" color="#e74c3c" align="center">
                ‚ö†Ô∏è C·∫£nh b√°o H·ªá th·ªëng
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="16px" color="#34495e">
                <strong>Lo·∫°i c·∫£nh b√°o:</strong> {{alertType}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>M√¥ t·∫£:</strong> {{description}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>H√†nh ƒë·ªông c·∫ßn thi·∫øt:</strong> {{action}}
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="14px" color="#7f8c8d" align="center">
                Th·ªùi gian: {{timestamp}}
              </mj-text>
            </mj-column>
          </mj-section>
        </mj-body>
      </mjml>
    `;

    return handlebars.compile(mjml(mjmlTemplate).html);
  }

  getDailyReportTemplate() {
    const mjmlTemplate = `
      <mjml>
        <mj-head>
          <mj-title>MIA Logistics - B√°o c√°o H√†ng ng√†y</mj-title>
          <mj-font name="Roboto" href="https://fonts.googleapis.com/css?family=Roboto" />
          <mj-attributes>
            <mj-all font-family="Roboto, Arial, sans-serif" />
          </mj-attributes>
        </mj-head>
        <mj-body background-color="#f4f4f4">
          <mj-section background-color="#ffffff" padding="20px">
            <mj-column>
              <mj-text font-size="24px" font-weight="bold" color="#2c3e50" align="center">
                üìä B√°o c√°o H√†ng ng√†y
              </mj-text>
              <mj-text font-size="18px" color="#7f8c8d" align="center">
                {{date}}
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="16px" color="#34495e">
                <strong>Nh√† v·∫≠n chuy·ªÉn:</strong> {{carrierCount}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>ƒê∆°n h√†ng:</strong> {{orderCount}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Doanh thu:</strong> {{revenue}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>So v·ªõi h√¥m qua:</strong> {{comparison}}
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="14px" color="#7f8c8d" align="center">
                B√°o c√°o t·ª± ƒë·ªông t·ª´ MIA Logistics Manager
              </mj-text>
            </mj-column>
          </mj-section>
        </mj-body>
      </mjml>
    `;

    return handlebars.compile(mjml(mjmlTemplate).html);
  }

  getWeeklyReportTemplate() {
    const mjmlTemplate = `
      <mjml>
        <mj-head>
          <mj-title>MIA Logistics - B√°o c√°o H√†ng tu·∫ßn</mj-title>
          <mj-font name="Roboto" href="https://fonts.googleapis.com/css?family=Roboto" />
          <mj-attributes>
            <mj-all font-family="Roboto, Arial, sans-serif" />
          </mj-attributes>
        </mj-head>
        <mj-body background-color="#f4f4f4">
          <mj-section background-color="#ffffff" padding="20px">
            <mj-column>
              <mj-text font-size="24px" font-weight="bold" color="#2c3e50" align="center">
                üìà B√°o c√°o H√†ng tu·∫ßn
              </mj-text>
              <mj-text font-size="18px" color="#7f8c8d" align="center">
                Tu·∫ßn {{weekNumber}} - {{year}}
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="16px" color="#34495e">
                <strong>T·ªïng ƒë∆°n h√†ng:</strong> {{totalOrders}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Doanh thu tu·∫ßn:</strong> {{weeklyRevenue}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>ƒê∆°n h√†ng th√†nh c√¥ng:</strong> {{successfulOrders}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>T·ª∑ l·ªá th√†nh c√¥ng:</strong> {{successRate}}
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="14px" color="#7f8c8d" align="center">
                B√°o c√°o t·ª± ƒë·ªông t·ª´ MIA Logistics Manager
              </mj-text>
            </mj-column>
          </mj-section>
        </mj-body>
      </mjml>
    `;

    return handlebars.compile(mjml(mjmlTemplate).html);
  }

  getMonthlyReportTemplate() {
    const mjmlTemplate = `
      <mjml>
        <mj-head>
          <mj-title>MIA Logistics - B√°o c√°o H√†ng th√°ng</mj-title>
          <mj-font name="Roboto" href="https://fonts.googleapis.com/css?family=Roboto" />
          <mj-attributes>
            <mj-all font-family="Roboto, Arial, sans-serif" />
          </mj-attributes>
        </mj-head>
        <mj-body background-color="#f4f4f4">
          <mj-section background-color="#ffffff" padding="20px">
            <mj-column>
              <mj-text font-size="24px" font-weight="bold" color="#2c3e50" align="center">
                üìä B√°o c√°o H√†ng th√°ng
              </mj-text>
              <mj-text font-size="18px" color="#7f8c8d" align="center">
                {{month}} {{year}}
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="16px" color="#34495e">
                <strong>T·ªïng ƒë∆°n h√†ng:</strong> {{totalOrders}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Doanh thu th√°ng:</strong> {{monthlyRevenue}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Kh√°ch h√†ng m·ªõi:</strong> {{newCustomers}}
              </mj-text>
              <mj-text font-size="16px" color="#34495e">
                <strong>Nh√† v·∫≠n chuy·ªÉn ho·∫°t ƒë·ªông:</strong> {{activeCarriers}}
              </mj-text>
              <mj-divider border-color="#ecf0f1" />
              <mj-text font-size="14px" color="#7f8c8d" align="center">
                B√°o c√°o t·ª± ƒë·ªông t·ª´ MIA Logistics Manager
              </mj-text>
            </mj-column>
          </mj-section>
        </mj-body>
      </mjml>
    `;

    return handlebars.compile(mjml(mjmlTemplate).html);
  }

  async sendEmail(to, subject, templateName, data, options = {}) {
    if (!this.isInitialized) {
      console.error('‚ùå Email service not initialized');
      return false;
    }

    try {
      console.log(`üìß Attempting to send email to: ${to}`);
      console.log(`üìß Template: ${templateName}`);
      console.log(`üìß Subject: ${subject}`);

      // Map notification template name to email template name
      const emailTemplateName =
        this.templateMapping[templateName] || templateName;
      console.log(`üìß Mapped template name: ${emailTemplateName}`);

      const template = this.templates.get(emailTemplateName);
      if (!template) {
        console.error(`‚ùå Email template '${emailTemplateName}' not found`);
        console.error(
          `‚ùå Available templates: ${Array.from(this.templates.keys()).join(', ')}`
        );
        return false;
      }

      const htmlContent = template(data);
      const emailData = {
        to,
        from: {
          email: notificationConfig.email.sendgrid.fromEmail,
          name: notificationConfig.email.sendgrid.fromName,
        },
        subject,
        html: htmlContent,
        ...options,
      };

      console.log(
        `üìß From email: ${notificationConfig.email.sendgrid.fromEmail}`
      );
      console.log(`üìß SendGrid client available: ${!!this.sendgridClient}`);

      // Try SendGrid first
      if (this.sendgridClient) {
        console.log('üìß Attempting SendGrid send...');
        await this.sendgridClient.send(emailData);
        console.log(`‚úÖ Email sent via SendGrid to ${to}`);
        return true;
      }

      // Fallback to Nodemailer
      if (this.nodemailerTransporter) {
        console.log('üìß Attempting Nodemailer send...');
        await this.nodemailerTransporter.sendMail({
          from: notificationConfig.email.sendgrid.fromEmail,
          to,
          subject,
          html: htmlContent,
          ...options,
        });
        console.log(`‚úÖ Email sent via Nodemailer to ${to}`);
        return true;
      }

      console.error('‚ùå No email service available');
      return false;
    } catch (error) {
      console.error('‚ùå Email send error:', error);
      console.error('‚ùå Error details:', error.message);
      if (error.response) {
        console.error('‚ùå SendGrid response:', error.response.body);
      }
      return false;
    }
  }

  async sendNotification(templateName, data, recipients, priority = 'medium') {
    const channels =
      notificationConfig.channels[priority] ||
      notificationConfig.channels.medium;

    if (channels.includes('email') && recipients && recipients.length > 0) {
      const template = notificationConfig.templates[templateName];
      if (template && template.email) {
        const subject = this.formatTemplate(template.email.subject, data);

        for (const recipient of recipients) {
          await this.sendEmail(recipient.email, subject, templateName, data);
        }
      }
    }
  }

  formatTemplate(template, data) {
    let result = template;

    Object.keys(data).forEach((key) => {
      const placeholder = `{${key}}`;
      result = result.replace(new RegExp(placeholder, 'g'), data[key] || 'N/A');
    });

    return result;
  }

  // Get service info
  getServiceInfo() {
    return {
      isInitialized: this.isInitialized,
      sendgridEnabled: notificationConfig.email.sendgrid.enabled,
      nodemailerEnabled: notificationConfig.email.nodemailer.enabled,
      availableTemplates: Array.from(this.templates.keys()),
    };
  }
}

export default new EmailService();
