import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Grid,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Autocomplete,
  Box,
  Typography,
  IconButton,
  Tooltip,
  Chip,
  Snackbar,
  Alert,
  CircularProgress,
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Comment as CommentIcon,
} from '@mui/icons-material';
// Date pickers for calendar popup
import {
  InboundItem,
  FormFields,
  PackagingItem,
  TimelineItem,
  DocumentStatusItem,
} from '../../types/inbound';
import { getCategoryIcon } from '../../utils/statusUtils';
import { formatDateForInput } from '../../utils/dateUtils';
import {
  getLatestTimelineDescription,
  getLatestDocumentStatusDescription,
  getCurrentUser,
} from '../../utils/descriptionUtils';

// Helper: Parse Vietnamese date format dd/MM/yyyy correctly
const parseVietnamDate = (dateString: string | undefined): Date | null => {
  if (!dateString || !dateString.includes('/')) {
    return dateString ? new Date(dateString) : null;
  }

  const [day, month, year] = dateString.split('/').map(Number);
  if (isNaN(day) || isNaN(month) || isNaN(year)) {
    return null;
  }

  return new Date(year, month - 1, day); // month is 0-indexed
};

// Helper: Format date display
const formatDateDisplay = (dateString: string | undefined): string => {
  if (!dateString) return 'Ch∆∞a c√≥';

  const d = parseVietnamDate(dateString);
  return d && !isNaN(d.getTime()) ? d.toLocaleDateString('vi-VN') : 'Ch∆∞a c√≥';
};

interface AddEditDialogProps {
  open: boolean;
  onClose: () => void;
  onSave: (data: Record<string, unknown>) => void;
  editingItem: InboundItem | null;
  addFromCalendar: Date | null;
  formFields: FormFields;
  onFieldChange: (field: keyof FormFields, value: unknown) => void;
  packagingItems: PackagingItem[];
  timelineItems: TimelineItem[];
  documentStatusItems: DocumentStatusItem[];
  onAddPackagingItem: () => void;
  onDeletePackagingItem: (index: number) => void;
  onAddTimelineItem: () => void;
  onUpdateTimelineItem: (index: number, item: TimelineItem) => void;
  onDeleteTimelineItem: (index: number) => void;
  onAddDocumentStatusItem: () => void;
  onUpdateDocumentStatusItem: (index: number, item: DocumentStatusItem) => void;
  onDeleteDocumentStatusItem: (index: number) => void;
  newPackagingItem: PackagingItem;
  newTimelineItem: TimelineItem;
  newDocumentStatusItem: DocumentStatusItem;
  onNewPackagingItemChange: (
    field: keyof PackagingItem,
    value: unknown
  ) => void;
  onNewTimelineItemChange: (field: keyof TimelineItem, value: unknown) => void;
  onNewDocumentStatusItemChange: (
    field: keyof DocumentStatusItem,
    value: unknown
  ) => void;
  productCategories: string[];
  destinations: string[];
}

const AddEditDialog: React.FC<AddEditDialogProps> = ({
  open,
  onClose,
  onSave,
  editingItem,
  addFromCalendar,
  formFields,
  onFieldChange,
  packagingItems,
  timelineItems,
  documentStatusItems,
  onAddPackagingItem,
  onDeletePackagingItem,
  onAddTimelineItem,
  onUpdateTimelineItem,
  onDeleteTimelineItem,
  onAddDocumentStatusItem,
  onUpdateDocumentStatusItem,
  onDeleteDocumentStatusItem,
  newPackagingItem,
  newTimelineItem,
  newDocumentStatusItem,
  onNewPackagingItemChange,
  onNewTimelineItemChange,
  onNewDocumentStatusItemChange,
  productCategories,
  destinations,
}) => {
  const [snackbarOpen, setSnackbarOpen] = React.useState(false);
  const [snackbarMsg, setSnackbarMsg] = React.useState('');
  const [snackbarSeverity, setSnackbarSeverity] = React.useState<
    'success' | 'info' | 'warning' | 'error'
  >('success');
  const [isSaving, setIsSaving] = React.useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = React.useState(false);

  // Local edit states for inline editing in sections
  const [editingPackagingIndex, setEditingPackagingIndex] = React.useState<
    number | null
  >(null);
  const [editingTimelineIndex, setEditingTimelineIndex] = React.useState<
    number | null
  >(null);
  const [editingDocIndex, setEditingDocIndex] = React.useState<number | null>(
    null
  );

  // States for description dialog
  const [descriptionDialogOpen, setDescriptionDialogOpen] =
    React.useState(false);
  const [descriptionText, setDescriptionText] = React.useState('');
  const [descriptionTarget, setDescriptionTarget] = React.useState<{
    type: 'timeline' | 'document';
    index: number;
    name: string;
  } | null>(null);

  // Helper: Parse date t·ª´ c·∫£ format dd/MM/yyyy v√† yyyy-MM-dd
  const parseVietnamDate = (dateStr: string): Date => {
    if (dateStr.includes('/')) {
      const [day, month, year] = dateStr.split('/');
      return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
    }
    return new Date(dateStr);
  };

  // Reset editing states khi m·ªü dialog
  React.useEffect(() => {
    if (open && !editingItem) {
      // Khi m·ªü dialog cho th√™m m·ªõi (kh√¥ng ph·∫£i edit), reset t·∫•t c·∫£ editing states
      setEditingPackagingIndex(null);
      setEditingTimelineIndex(null);
      setEditingDocIndex(null);
      setDescriptionDialogOpen(false);
      setDescriptionText('');
      setDescriptionTarget(null);

      // Reset newItem fields to defaults
      onNewPackagingItemChange('type', '2PCS/SET');
      onNewPackagingItemChange('quantity', 0);
      onNewPackagingItemChange('description', '');

      onNewTimelineItemChange('name', '');
      onNewTimelineItemChange('estimatedDate', '');
      onNewTimelineItemChange('date', '');
      onNewTimelineItemChange('status', 'pending');
      onNewTimelineItemChange('description', '');

      onNewDocumentStatusItemChange('name', '');
      onNewDocumentStatusItemChange('estimatedDate', '');
      onNewDocumentStatusItemChange('date', '');
      onNewDocumentStatusItemChange('status', 'pending');
      onNewDocumentStatusItemChange('description', '');
    }
  }, [
    open,
    editingItem,
    onNewPackagingItemChange,
    onNewTimelineItemChange,
    onNewDocumentStatusItemChange,
  ]);

  // Auto-clear fields khi type thay ƒë·ªïi ƒë·ªÉ tr√°nh cache sai
  const [previousType, setPreviousType] = React.useState<
    'international' | 'domestic'
  >('international');

  React.useEffect(() => {
    const currentType =
      formFields.origin && formFields.origin.trim()
        ? 'international'
        : 'domestic';

    if (currentType !== previousType && !editingItem && open) {
      // Type ƒë√£ thay ƒë·ªïi v√† kh√¥ng ph·∫£i ƒëang edit ‚Üí clear fields kh√¥ng ph√π h·ª£p
      if (currentType === 'domestic') {
        // Chuy·ªÉn sang Qu·ªëc n·ªôi: Clear PI, carrier
        onFieldChange('pi', '');
        onFieldChange('carrier', '');

        // Clear t·∫•t c·∫£ document status
        for (let i = documentStatusItems.length - 1; i >= 0; i--) {
          onDeleteDocumentStatusItem(i);
        }

        // Ch·ªâ gi·ªØ timeline "Ng√†y nh·∫≠n h√†ng", x√≥a c√°c timeline kh√°c
        const nonReceiveIndices: number[] = [];
        timelineItems.forEach((item, index) => {
          if (
            item.name !== 'Ng√†y nh·∫≠n h√†ng' &&
            item.name !== 'Ng√†y t·∫°o phi·∫øu'
          ) {
            nonReceiveIndices.push(index);
          }
        });

        // X√≥a t·ª´ cu·ªëi ƒë·ªÉ tr√°nh index shift
        nonReceiveIndices.reverse().forEach((index) => {
          onDeleteTimelineItem(index);
        });
      }

      setPreviousType(currentType);
      setHasUnsavedChanges(true);
      openSnack(
        `Chuy·ªÉn sang ${currentType === 'international' ? 'üåç Qu·ªëc t·∫ø' : 'üè† Qu·ªëc n·ªôi'}`,
        'info'
      );
    }
  }, [
    formFields.origin,
    previousType,
    editingItem,
    open,
    timelineItems,
    documentStatusItems,
    onFieldChange,
    onDeleteTimelineItem,
    onDeleteDocumentStatusItem,
  ]);

  const openSnack = (
    message: string,
    severity: 'success' | 'info' | 'warning' | 'error' = 'success'
  ) => {
    setSnackbarMsg(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(true);
  };

  // Helper: M·ªü dialog th√™m m√¥ t·∫£
  const openDescriptionDialog = (
    type: 'timeline' | 'document',
    index: number,
    name: string
  ) => {
    setDescriptionTarget({ type, index, name });
    setDescriptionText('');
    setDescriptionDialogOpen(true);
  };

  // Helper: L∆∞u m√¥ t·∫£ m·ªõi
  const saveDescription = () => {
    if (!descriptionTarget || !descriptionText.trim()) return;

    const { type, index } = descriptionTarget;

    if (type === 'timeline') {
      const currentItem = timelineItems[index];
      if (currentItem) {
        // Import getCurrentUser v√† addTimelineDescription t·ª´ utils
        const updatedItem = {
          ...currentItem,
          descriptions: [
            ...(currentItem.descriptions || []),
            {
              id: `desc-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
              content: descriptionText.trim(),
              author: getCurrentUser(),
              timestamp: new Date().toISOString(),
            },
          ],
        };
        onUpdateTimelineItem(index, updatedItem);
        setHasUnsavedChanges(true);
        openSnack(`ƒê√£ th√™m m√¥ t·∫£ cho ${descriptionTarget.name}`, 'success');
      }
    } else if (type === 'document') {
      const currentItem = documentStatusItems[index];
      if (currentItem) {
        const updatedItem = {
          ...currentItem,
          descriptions: [
            ...(currentItem.descriptions || []),
            {
              id: `desc-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
              content: descriptionText.trim(),
              author: getCurrentUser(),
              timestamp: new Date().toISOString(),
            },
          ],
        };
        onUpdateDocumentStatusItem(index, updatedItem);
        setHasUnsavedChanges(true);
        openSnack(`ƒê√£ th√™m m√¥ t·∫£ cho ${descriptionTarget.name}`, 'success');
      }
    }

    // Close dialog
    setDescriptionDialogOpen(false);
    setDescriptionText('');
    setDescriptionTarget(null);
  };

  const handleAddPackaging = () => {
    onAddPackagingItem();
    setHasUnsavedChanges(true);
    openSnack('ƒê√£ th√™m quy c√°ch ƒë√≥ng g√≥i (ch∆∞a l∆∞u)');
  };

  const handleAddTimeline = () => {
    onAddTimelineItem();
    setHasUnsavedChanges(true);
    openSnack('ƒê√£ th√™m m·ªëc th·ªùi gian (ch∆∞a l∆∞u)');
  };

  const handleAddDocumentStatus = () => {
    onAddDocumentStatusItem();
    setHasUnsavedChanges(true);
    openSnack('ƒê√£ th√™m tr·∫°ng th√°i ch·ª©ng t·ª´ (ch∆∞a l∆∞u)');
  };

  const handleSaveClick = async () => {
    try {
      setIsSaving(true);
      openSnack(editingItem ? 'ƒêang c·∫≠p nh·∫≠t...' : 'ƒêang th√™m m·ªõi...', 'info');
      await Promise.resolve(onSave({} as Record<string, unknown>));
      setHasUnsavedChanges(false);
      // Dialog th∆∞·ªùng s·∫Ω ƒë√≥ng t·ª´ parent; n·∫øu ch∆∞a ƒë√≥ng, b√°o th√†nh c√¥ng
      openSnack(editingItem ? 'C·∫≠p nh·∫≠t th√†nh c√¥ng' : 'Th√™m m·ªõi th√†nh c√¥ng');
    } finally {
      setIsSaving(false);
    }
  };
  const calculateTotalProducts = (items: PackagingItem[]): number => {
    return items.reduce((total, item) => total + item.quantity, 0);
  };

  // T√≠nh t·ªïng PCS = SUM(quantity * PCS/SET)
  const calculateTotalPCS = (items: PackagingItem[]): number => {
    return items.reduce((sum, p) => {
      const match = /^(\d+)\s*PCS\s*\/\s*SET/i.exec(p.type || '');
      const pcsPerSet = match ? parseInt(match[1], 10) : 1;
      const qty = Number.isFinite(p.quantity) ? p.quantity : 0;
      return sum + pcsPerSet * qty;
    }, 0);
  };

  // Load editing item data into form fields
  React.useEffect(() => {
    if (editingItem && open) {
      // Load main form fields
      onFieldChange('id', editingItem.id);
      onFieldChange('date', editingItem.date);
      onFieldChange('supplier', editingItem.supplier);
      onFieldChange('origin', editingItem.origin);
      onFieldChange('destination', editingItem.destination);
      onFieldChange('product', editingItem.product);
      onFieldChange('quantity', editingItem.quantity);
      onFieldChange('status', editingItem.status);
      onFieldChange('estimatedArrival', editingItem.estimatedArrival);
      onFieldChange('actualArrival', editingItem.actualArrival);
      onFieldChange('carrier', editingItem.carrier);
      onFieldChange('pi', editingItem.pi);
      onFieldChange('container', editingItem.container);
      onFieldChange('category', editingItem.category);
      onFieldChange('purpose', editingItem.purpose);
      onFieldChange('receiveTime', editingItem.receiveTime);
      onFieldChange('notes', editingItem.notes);
      onFieldChange('poNumbersInput', editingItem.poNumbers?.join(', ') || '');
      setHasUnsavedChanges(false); // Reset when loading data
    }
  }, [editingItem, open, onFieldChange]);

  React.useEffect(() => {
    const totalPcs = calculateTotalPCS(packagingItems);
    if ((formFields.quantity as number) !== totalPcs) {
      onFieldChange('quantity', totalPcs);
    }
  }, [packagingItems, formFields.quantity, onFieldChange]);
  const handleClose = () => {
    if (hasUnsavedChanges) {
      if (
        window.confirm(
          'B·∫°n c√≥ thay ƒë·ªïi ch∆∞a l∆∞u. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√≥ng? Thay ƒë·ªïi s·∫Ω b·ªã m·∫•t.'
        )
      ) {
        setHasUnsavedChanges(false);
        onClose();
      }
    } else {
      onClose();
    }
  };

  const handleFieldChange = (field: keyof FormFields, value: unknown) => {
    onFieldChange(field, value);
    if (editingItem) {
      setHasUnsavedChanges(true);
    }
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle
        sx={{
          borderBottom: '2px solid',
          borderColor: 'primary.main',
          pb: 2,
          bgcolor: 'primary.50',
        }}
      >
        <Box
          sx={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
          }}
        >
          <Box>
            <Typography
              variant="h5"
              sx={{ fontWeight: 700, color: 'primary.main' }}
            >
              {editingItem ? '‚úèÔ∏è S·ª≠a l·ªãch nh·∫≠p h√†ng' : '‚ûï Th√™m l·ªãch nh·∫≠p h√†ng'}
            </Typography>
            {addFromCalendar && (
              <Typography
                variant="body2"
                sx={{ color: 'text.secondary', mt: 0.5, fontSize: '0.8rem' }}
              >
                üìÖ Ng√†y: {addFromCalendar.toLocaleDateString('vi-VN')}
              </Typography>
            )}
          </Box>

          {/* Type indicator */}
          {!editingItem &&
            (() => {
              const type =
                formFields.origin && formFields.origin.trim()
                  ? 'international'
                  : 'domestic';
              return (
                <Chip
                  label={
                    type === 'international' ? 'üåç Qu·ªëc t·∫ø' : 'üè† Qu·ªëc n·ªôi'
                  }
                  size="medium"
                  color={type === 'international' ? 'primary' : 'secondary'}
                  sx={{
                    fontSize: '0.8rem',
                    fontWeight: 700,
                    px: 2,
                    '& .MuiChip-label': { px: 1.5 },
                  }}
                />
              );
            })()}
        </Box>
      </DialogTitle>
      <DialogContent>
        {/* Alert messages ƒë·∫πp */}
        {editingItem && (
          <Alert
            severity="info"
            sx={{
              mb: 2,
              '& .MuiAlert-message': { fontSize: '0.85rem', fontWeight: 500 },
            }}
            icon="‚úèÔ∏è"
          >
            Ch·ªânh s·ª≠a th√¥ng tin b√™n d∆∞·ªõi v√† nh·∫•n <strong>"C·∫≠p nh·∫≠t"</strong> ƒë·ªÉ
            l∆∞u
          </Alert>
        )}

        {hasUnsavedChanges && (
          <Alert
            severity="warning"
            sx={{
              mb: 2,
              '& .MuiAlert-message': { fontSize: '0.85rem', fontWeight: 500 },
              bgcolor: 'warning.50',
              borderLeft: '4px solid',
              borderColor: 'warning.main',
            }}
          >
            ‚ö†Ô∏è <strong>C√≥ thay ƒë·ªïi ch∆∞a l∆∞u!</strong> Nh·ªõ nh·∫•n n√∫t{' '}
            <strong>"C·∫≠p nh·∫≠t"</strong> ·ªü cu·ªëi ƒë·ªÉ l∆∞u v√†o h·ªá th·ªëng
          </Alert>
        )}

        <Grid
          container
          spacing={2}
          sx={{ mt: hasUnsavedChanges || editingItem ? 0 : 1 }}
        >
          {/* PI - Ch·ªâ hi·ªán cho Qu·ªëc t·∫ø */}
          {formFields.origin && formFields.origin.trim() && (
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="M√£ PI (L√¥ h√†ng)"
                value={formFields.pi}
                onChange={(e) => handleFieldChange('pi', e.target.value)}
                variant="outlined"
                required
              />
            </Grid>
          )}
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Nh√† cung c·∫•p"
              value={formFields.supplier}
              onChange={(e) => handleFieldChange('supplier', e.target.value)}
              variant="outlined"
              required
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="S·∫£n ph·∫©m"
              value={formFields.product}
              onChange={(e) => handleFieldChange('product', e.target.value)}
              variant="outlined"
              required
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <Autocomplete
              freeSolo
              options={productCategories}
              value={formFields.category}
              onInputChange={(_, v) => handleFieldChange('category', v)}
              renderOption={(props, option) => (
                <Box
                  component="li"
                  {...props}
                  sx={{ display: 'flex', alignItems: 'center', gap: 1 }}
                >
                  {getCategoryIcon(option)}
                  {option}
                </Box>
              )}
              renderInput={(params) => (
                <TextField
                  {...params}
                  label="Ph√¢n lo·∫°i h√†ng h√≥a"
                  variant="outlined"
                  required
                />
              )}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Xu·∫•t x·ª©"
              value={formFields.origin}
              onChange={(e) => onFieldChange('origin', e.target.value)}
              variant="outlined"
              helperText="üí° ƒê·ªÉ tr·ªëng = Qu·ªëc n·ªôi, C√≥ d·ªØ li·ªáu = Qu·ªëc t·∫ø"
              FormHelperTextProps={{
                sx: { fontSize: '0.7rem', color: 'info.main' },
              }}
            />
          </Grid>

          {/* Info message cho Qu·ªëc n·ªôi */}
          {!(formFields.origin && formFields.origin.trim()) && (
            <Grid item xs={12}>
              <Alert
                severity="success"
                sx={{
                  bgcolor: 'success.50',
                  borderLeft: '4px solid',
                  borderColor: 'success.main',
                  '& .MuiAlert-message': { fontSize: '0.8rem' },
                }}
              >
                <Typography
                  component="span"
                  sx={{ fontWeight: 600, fontSize: '0.85rem' }}
                >
                  üè† Form ƒë∆°n gi·∫£n cho Qu·ªëc n·ªôi
                </Typography>
                <Box
                  component="ul"
                  sx={{
                    mt: 0.5,
                    mb: 0,
                    fontSize: '0.75rem',
                    color: 'text.secondary',
                    pl: 2,
                  }}
                >
                  <li>Kh√¥ng c·∫ßn M√£ PI, Nh√† v·∫≠n chuy·ªÉn</li>
                  <li>Ch·ªâ c·∫ßn Ng√†y nh·∫≠n h√†ng (ƒë∆°n gi·∫£n)</li>
                  <li>Kh√¥ng c√≥ Tr·∫°ng th√°i ch·ª©ng t·ª´ ph·ª©c t·∫°p</li>
                </Box>
              </Alert>
            </Grid>
          )}
          <Grid item xs={12} sm={6}>
            <Autocomplete
              freeSolo
              options={destinations}
              value={formFields.destination}
              onInputChange={(_, v) => onFieldChange('destination', v)}
              renderInput={(params) => (
                <TextField
                  {...params}
                  label="ƒê√≠ch ƒë·∫øn"
                  variant="outlined"
                  required
                />
              )}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="S·ªë l∆∞·ª£ng"
              type="number"
              value={formFields.quantity}
              onChange={(e) =>
                onFieldChange('quantity', Number(e.target.value))
              }
              variant="outlined"
              required
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="S·ªë l∆∞·ª£ng Container"
              type="number"
              value={formFields.container}
              onChange={(e) =>
                onFieldChange('container', Number(e.target.value))
              }
              variant="outlined"
              required
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth required>
              <InputLabel>M·ª•c ƒë√≠ch</InputLabel>
              <Select
                value={formFields.purpose}
                onChange={(e) => onFieldChange('purpose', e.target.value)}
                label="M·ª•c ƒë√≠ch"
              >
                <MenuItem value="online">Online</MenuItem>
                <MenuItem value="offline">Offline</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Th·ªùi gian nh·∫≠n"
              type="time"
              value={formFields.receiveTime}
              onChange={(e) => onFieldChange('receiveTime', e.target.value)}
              variant="outlined"
              required
              InputLabelProps={{ shrink: true }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Phi·∫øu PO (c√°ch nhau b·∫±ng d·∫•u ph·∫©y)"
              value={formFields.poNumbersInput}
              onChange={(e) => onFieldChange('poNumbersInput', e.target.value)}
              variant="outlined"
              placeholder="PO-2024-001, PO-2024-002"
              helperText="Nh·∫≠p nhi·ªÅu PO c√°ch nhau b·∫±ng d·∫•u ph·∫©y"
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>Tr·∫°ng th√°i</InputLabel>
              <Select
                value={formFields.status}
                onChange={(e) =>
                  onFieldChange(
                    'status',
                    e.target.value as InboundItem['status']
                  )
                }
                label="Tr·∫°ng th√°i"
              >
                <MenuItem value="pending">Ch·ªù x√°c nh·∫≠n</MenuItem>
                <MenuItem value="confirmed">ƒê√£ x√°c nh·∫≠n</MenuItem>
                <MenuItem value="waiting-notification">Ch·ªù th√¥ng b√°o</MenuItem>
                <MenuItem value="notified">ƒê√£ th√¥ng b√°o</MenuItem>
                <MenuItem value="received">ƒê√£ nh·∫≠n</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          {/* Nh√† v·∫≠n chuy·ªÉn - Ch·ªâ hi·ªán cho Qu·ªëc t·∫ø */}
          {formFields.origin && formFields.origin.trim() && (
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="Nh√† v·∫≠n chuy·ªÉn"
                value={formFields.carrier}
                onChange={(e) => onFieldChange('carrier', e.target.value)}
                variant="outlined"
                required
              />
            </Grid>
          )}

          {/* Packaging Section */}
          <Grid item xs={12}>
            <Typography variant="h6" sx={{ mb: 2, fontSize: '1rem' }}>
              üì¶ Quy c√°ch ƒë√≥ng g√≥i
            </Typography>

            {/* Packaging Items List */}
            {packagingItems.map((item, index) => (
              <Box
                key={item.id}
                sx={{
                  mb: 1,
                  p: 2,
                  border: '1px solid #e0e0e0',
                  borderRadius: 1,
                  backgroundColor: '#f5f5f5',
                }}
              >
                {editingPackagingIndex === index ? (
                  // Inline editing form
                  <Box
                    sx={{
                      display: 'flex',
                      gap: 2,
                      alignItems: 'center',
                      flexWrap: 'wrap',
                    }}
                  >
                    <FormControl size="small" sx={{ minWidth: 120 }}>
                      <InputLabel>Lo·∫°i</InputLabel>
                      <Select
                        value={newPackagingItem.type}
                        onChange={(e) =>
                          onNewPackagingItemChange('type', e.target.value)
                        }
                        label="Lo·∫°i"
                      >
                        <MenuItem value="1PCS/SET">1PCS/SET</MenuItem>
                        <MenuItem value="2PCS/SET">2PCS/SET</MenuItem>
                        <MenuItem value="3PCS/SET">3PCS/SET</MenuItem>
                        <MenuItem value="4PCS/SET">4PCS/SET</MenuItem>
                        <MenuItem value="5PCS/SET">5PCS/SET</MenuItem>
                      </Select>
                    </FormControl>
                    <TextField
                      size="small"
                      label="S·ªë l∆∞·ª£ng SET"
                      type="number"
                      value={newPackagingItem.quantity}
                      onChange={(e) =>
                        onNewPackagingItemChange(
                          'quantity',
                          Number(e.target.value)
                        )
                      }
                      sx={{ minWidth: 120 }}
                      inputProps={{ min: 0 }}
                    />
                    <TextField
                      size="small"
                      label="M√¥ t·∫£"
                      value={newPackagingItem.description}
                      onChange={(e) =>
                        onNewPackagingItemChange('description', e.target.value)
                      }
                      sx={{ flex: 1 }}
                      placeholder="VD: Th√πng carton, Pallet g·ªó..."
                    />
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      <Button
                        variant="contained"
                        size="small"
                        onClick={() => {
                          onDeletePackagingItem(editingPackagingIndex);
                          handleAddPackaging();
                          setEditingPackagingIndex(null);
                          setHasUnsavedChanges(true);
                          openSnack('ƒê√£ c·∫≠p nh·∫≠t quy c√°ch (ch∆∞a l∆∞u)');
                        }}
                        disabled={
                          !newPackagingItem.type ||
                          newPackagingItem.quantity <= 0
                        }
                      >
                        L∆∞u
                      </Button>
                      <Button
                        variant="outlined"
                        size="small"
                        onClick={() => setEditingPackagingIndex(null)}
                      >
                        H·ªßy
                      </Button>
                    </Box>
                  </Box>
                ) : (
                  // Display mode
                  <Box
                    sx={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: 2,
                    }}
                  >
                    <Typography
                      variant="body2"
                      sx={{ minWidth: '80px', fontWeight: 500 }}
                    >
                      {item.type}
                    </Typography>
                    <Typography variant="body2" sx={{ minWidth: '60px' }}>
                      {item.quantity} SET
                    </Typography>
                    <Typography
                      variant="body2"
                      sx={{ flex: 1, color: 'text.secondary' }}
                    >
                      {item.description}
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 0.5 }}>
                      <Tooltip title="S·ª≠a">
                        <IconButton
                          size="small"
                          onClick={() => {
                            setEditingPackagingIndex(index);
                            onNewPackagingItemChange('type', item.type);
                            onNewPackagingItemChange('quantity', item.quantity);
                            onNewPackagingItemChange(
                              'description',
                              item.description || ''
                            );
                          }}
                          color="primary"
                        >
                          <EditIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="X√≥a">
                        <IconButton
                          size="small"
                          onClick={() => onDeletePackagingItem(index)}
                          color="error"
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                    </Box>
                  </Box>
                )}
              </Box>
            ))}

            {/* Add New Packaging Item - ·∫®n khi ƒëang edit */}
            {editingPackagingIndex === null && (
              <Box
                sx={{
                  display: 'flex',
                  gap: 2,
                  alignItems: 'center',
                  mt: 2,
                  p: 2,
                  border: '2px dashed #ccc',
                  borderRadius: 1,
                  backgroundColor: '#fafafa',
                }}
              >
                <FormControl size="small" sx={{ minWidth: 120 }}>
                  <InputLabel>Lo·∫°i</InputLabel>
                  <Select
                    value={newPackagingItem.type}
                    onChange={(e) =>
                      onNewPackagingItemChange('type', e.target.value)
                    }
                    label="Lo·∫°i"
                  >
                    <MenuItem value="1PCS/SET">1PCS/SET</MenuItem>
                    <MenuItem value="2PCS/SET">2PCS/SET</MenuItem>
                    <MenuItem value="3PCS/SET">3PCS/SET</MenuItem>
                    <MenuItem value="4PCS/SET">4PCS/SET</MenuItem>
                    <MenuItem value="5PCS/SET">5PCS/SET</MenuItem>
                  </Select>
                </FormControl>
                <TextField
                  size="small"
                  label="S·ªë l∆∞·ª£ng SET"
                  type="number"
                  value={newPackagingItem.quantity}
                  onChange={(e) =>
                    onNewPackagingItemChange('quantity', Number(e.target.value))
                  }
                  sx={{ minWidth: 120 }}
                  inputProps={{ min: 0 }}
                />
                <TextField
                  size="small"
                  label="M√¥ t·∫£"
                  value={newPackagingItem.description}
                  onChange={(e) =>
                    onNewPackagingItemChange('description', e.target.value)
                  }
                  sx={{ flex: 1 }}
                  placeholder="VD: Th√πng carton, Pallet g·ªó..."
                />
                <Button
                  variant="contained"
                  onClick={() => {
                    if (editingPackagingIndex !== null) {
                      // Replace by delete + add
                      onDeletePackagingItem(editingPackagingIndex);
                      handleAddPackaging();
                      setEditingPackagingIndex(null);
                      openSnack('ƒê√£ c·∫≠p nh·∫≠t quy c√°ch');
                    } else {
                      handleAddPackaging();
                    }
                  }}
                  disabled={
                    !newPackagingItem.type || newPackagingItem.quantity <= 0
                  }
                  startIcon={<AddIcon />}
                  sx={{
                    color: 'white',
                    fontWeight: 600,
                    '&.Mui-disabled': {
                      bgcolor: 'primary.200',
                      color: 'white',
                      opacity: 0.7,
                    },
                  }}
                >
                  {editingPackagingIndex !== null ? 'L∆∞u' : 'Th√™m'}
                </Button>
              </Box>
            )}

            {packagingItems.length > 0 && (
              <Box
                sx={{
                  mt: 2,
                  p: 2,
                  backgroundColor: '#e3f2fd',
                  borderRadius: 1,
                  border: '1px solid #2196f3',
                }}
              >
                <Typography
                  variant="h6"
                  sx={{
                    color: 'primary.main',
                    fontWeight: 600,
                    display: 'flex',
                    alignItems: 'center',
                    gap: 1,
                  }}
                >
                  üì¶ T·ªïng s·ªë:{' '}
                  {calculateTotalPCS(packagingItems).toLocaleString()} PCS /{' '}
                  {calculateTotalProducts(packagingItems).toLocaleString()} SET
                </Typography>
                <Typography
                  variant="body2"
                  sx={{ color: 'text.secondary', mt: 0.5 }}
                >
                  T·ª± ƒë·ªông t√≠nh t·ª´ c√°c lo·∫°i quy c√°ch ƒë√≥ng g√≥i
                </Typography>
              </Box>
            )}
          </Grid>

          {/* Timeline Section */}
          <Grid item xs={12}>
            <Typography variant="h6" sx={{ mb: 2, fontSize: '1rem' }}>
              {formFields.origin && formFields.origin.trim()
                ? 'üöö Timeline V·∫≠n Chuy·ªÉn'
                : 'üìÖ L·ªãch Nh·∫≠n H√†ng'}
            </Typography>

            {/* Timeline Items List - Qu·ªëc t·∫ø: t·∫•t c·∫£, Qu·ªëc n·ªôi: ch·ªâ Ng√†y nh·∫≠n h√†ng */}
            {timelineItems
              .filter((item) => {
                const isInternational =
                  formFields.origin && formFields.origin.trim();
                if (isInternational) {
                  return true; // Hi·ªÉn th·ªã t·∫•t c·∫£ timeline cho Qu·ªëc t·∫ø
                } else {
                  // Qu·ªëc n·ªôi: ch·ªâ hi·ªÉn th·ªã "Ng√†y nh·∫≠n h√†ng" v√† "Ng√†y t·∫°o phi·∫øu"
                  return (
                    item.name === 'Ng√†y nh·∫≠n h√†ng' ||
                    item.name === 'Ng√†y t·∫°o phi·∫øu'
                  );
                }
              })
              .map((item, index) => (
                <Box
                  key={item.id}
                  sx={{
                    mb: 1,
                    p: 2,
                    border: '1px solid #e0e0e0',
                    borderRadius: 1,
                    backgroundColor:
                      item.status === 'completed'
                        ? '#e8f5e8'
                        : item.status === 'confirmed'
                          ? '#e3f2fd'
                          : '#f5f5f5',
                  }}
                >
                  {editingTimelineIndex === index ? (
                    // Inline editing form
                    <Box
                      sx={{
                        display: 'flex',
                        gap: 2,
                        alignItems: 'center',
                        flexWrap: 'wrap',
                      }}
                    >
                      <FormControl sx={{ minWidth: '140px' }}>
                        <InputLabel>M·ªëc th·ªùi gian</InputLabel>
                        <Select
                          value={newTimelineItem.name}
                          onChange={(e) =>
                            onNewTimelineItemChange('name', e.target.value)
                          }
                          label="M·ªëc th·ªùi gian"
                        >
                          <MenuItem value="Ng√†y nh·∫≠p h√†ng">
                            Ng√†y nh·∫≠p h√†ng
                          </MenuItem>
                          <MenuItem value="Cargo Ready">Cargo Ready</MenuItem>
                          <MenuItem value="ETD">ETD</MenuItem>
                          <MenuItem value="ETA">ETA</MenuItem>
                          <MenuItem value="Ng√†y h√†ng ƒëi">Ng√†y h√†ng ƒëi</MenuItem>
                          <MenuItem value="Ng√†y h√†ng v·ªÅ c·∫£ng">
                            Ng√†y h√†ng v·ªÅ c·∫£ng
                          </MenuItem>
                          <MenuItem value="Ng√†y nh·∫≠n h√†ng">
                            Ng√†y nh·∫≠n h√†ng
                          </MenuItem>
                        </Select>
                      </FormControl>
                      <TextField
                        label="Ng√†y d·ª± ki·∫øn"
                        type="date"
                        value={newTimelineItem.estimatedDate as string}
                        onChange={(e) => {
                          onNewTimelineItemChange(
                            'estimatedDate',
                            e.target.value
                          );
                          if (
                            newTimelineItem.name === 'Ng√†y nh·∫≠p h√†ng' &&
                            e.target.value
                          ) {
                            onFieldChange('estimatedArrival', e.target.value);
                          }
                        }}
                        sx={{ minWidth: '140px' }}
                        InputLabelProps={{ shrink: true }}
                      />
                      <TextField
                        label="Ng√†y th·ª±c t·∫ø"
                        type="date"
                        value={newTimelineItem.date as string}
                        onChange={(e) => {
                          onNewTimelineItemChange('date', e.target.value);
                          if (
                            newTimelineItem.name === 'Ng√†y nh·∫≠p h√†ng' &&
                            e.target.value
                          ) {
                            onFieldChange('actualArrival', e.target.value);
                            onFieldChange('date', e.target.value);
                          }
                        }}
                        sx={{ minWidth: '140px' }}
                        InputLabelProps={{ shrink: true }}
                      />
                      <FormControl sx={{ minWidth: '120px' }}>
                        <InputLabel>Tr·∫°ng th√°i</InputLabel>
                        <Select
                          value={newTimelineItem.status}
                          onChange={(e) =>
                            onNewTimelineItemChange('status', e.target.value)
                          }
                          label="Tr·∫°ng th√°i"
                        >
                          <MenuItem value="pending">Ch·ªù x·ª≠ l√Ω</MenuItem>
                          <MenuItem value="completed">Ho√†n th√†nh</MenuItem>
                        </Select>
                      </FormControl>
                      <TextField
                        label="M√¥ t·∫£"
                        value={newTimelineItem.description}
                        onChange={(e) =>
                          onNewTimelineItemChange('description', e.target.value)
                        }
                        sx={{ minWidth: '200px', flex: 1 }}
                        placeholder="M√¥ t·∫£ th√™m..."
                      />
                      <Box sx={{ display: 'flex', gap: 1 }}>
                        <Button
                          variant="contained"
                          size="small"
                          onClick={() => {
                            const updatedItem: TimelineItem = {
                              ...newTimelineItem,
                              id: timelineItems[editingTimelineIndex].id,
                            };
                            onUpdateTimelineItem(
                              editingTimelineIndex,
                              updatedItem
                            );
                            setEditingTimelineIndex(null);
                            setHasUnsavedChanges(true);
                            openSnack('ƒê√£ c·∫≠p nh·∫≠t m·ªëc th·ªùi gian (ch∆∞a l∆∞u)');
                          }}
                          disabled={
                            !newTimelineItem.name ||
                            !(
                              (newTimelineItem.estimatedDate as string) ||
                              (newTimelineItem.date as string)
                            )
                          }
                        >
                          L∆∞u
                        </Button>
                        <Button
                          variant="outlined"
                          size="small"
                          onClick={() => setEditingTimelineIndex(null)}
                        >
                          H·ªßy
                        </Button>
                      </Box>
                    </Box>
                  ) : (
                    // Display mode
                    <Box>
                      <Grid container alignItems="center" spacing={1}>
                        <Grid item xs={12} md={3}>
                          <Typography
                            variant="body2"
                            sx={{ fontWeight: 600 }}
                            noWrap
                          >
                            {item.name}
                          </Typography>
                        </Grid>
                        <Grid item xs={12} md={5}>
                          <Box sx={{ display: 'flex', gap: 3 }}>
                            {/* Hide "D·ª± ki·∫øn" for "Ng√†y t·∫°o phi·∫øu" */}
                            {item.name !== 'Ng√†y t·∫°o phi·∫øu' && (
                              <Typography variant="body2" noWrap>
                                D·ª± ki·∫øn: {formatDateDisplay(item.estimatedDate)}
                              </Typography>
                            )}
                            <Typography variant="body2" noWrap>
                              {item.name === 'Ng√†y t·∫°o phi·∫øu'
                                ? 'Ng√†y: '
                                : 'Th·ª±c t·∫ø: '}
                              {formatDateDisplay(item.date)}
                            </Typography>
                          </Box>
                        </Grid>
                        <Grid item xs={12} md={2}>
                          <Chip
                            label={
                              item.status === 'completed'
                                ? 'Ho√†n th√†nh'
                                : item.status === 'confirmed'
                                  ? 'ƒê√£ x√°c nh·∫≠n'
                                  : 'Ch·ªù x·ª≠ l√Ω'
                            }
                            color={
                              item.status === 'completed'
                                ? 'success'
                                : item.status === 'confirmed'
                                  ? 'primary'
                                  : 'default'
                            }
                            size="small"
                            sx={{ fontSize: '0.7rem' }}
                          />
                        </Grid>
                        <Grid item xs={12} md={1.5}>
                          {/* Delay Status - Auto calculated */}
                          {item.estimatedDate &&
                            item.date &&
                            item.name !== 'Ng√†y t·∫°o phi·∫øu' && (
                              <Chip
                                label={(() => {
                                  // Calculate delay status
                                  if (!item.estimatedDate || !item.date)
                                    return '‚ùì';

                                  // Parse dates
                                  const parseDate = (dateStr: string): Date => {
                                    if (dateStr.includes('/')) {
                                      const [day, month, year] =
                                        dateStr.split('/');
                                      return new Date(
                                        parseInt(year),
                                        parseInt(month) - 1,
                                        parseInt(day)
                                      );
                                    }
                                    return new Date(dateStr);
                                  };

                                  const estimated = parseDate(
                                    item.estimatedDate
                                  );
                                  const actual = parseDate(item.date);

                                  if (estimated.getTime() === actual.getTime())
                                    return '‚úÖ ƒê√∫ng h·∫°n';
                                  if (actual < estimated) return '‚ö° Tr∆∞·ªõc h·∫°n';
                                  if (actual > estimated) return 'üö® Tr·ªÖ h·∫°n';
                                  return '‚ùì Ch∆∞a x√°c ƒë·ªãnh';
                                })()}
                                color={(() => {
                                  if (!item.estimatedDate || !item.date)
                                    return 'default';

                                  const parseDate = (dateStr: string): Date => {
                                    if (dateStr.includes('/')) {
                                      const [day, month, year] =
                                        dateStr.split('/');
                                      return new Date(
                                        parseInt(year),
                                        parseInt(month) - 1,
                                        parseInt(day)
                                      );
                                    }
                                    return new Date(dateStr);
                                  };

                                  const estimated = parseDate(
                                    item.estimatedDate
                                  );
                                  const actual = parseDate(item.date);

                                  if (estimated.getTime() === actual.getTime())
                                    return 'success';
                                  if (actual < estimated) return 'info';
                                  if (actual > estimated) return 'error';
                                  return 'default';
                                })()}
                                size="small"
                                sx={{ fontSize: '0.6rem', height: 20 }}
                              />
                            )}
                        </Grid>
                        <Grid item xs={12} md={1.5}>
                          <Box
                            sx={{
                              display: 'flex',
                              justifyContent: 'flex-end',
                              gap: 0.5,
                            }}
                          >
                            {/* Show description button for all, edit/delete for non-created items */}
                            <Tooltip title="Th√™m m√¥ t·∫£">
                              <IconButton
                                size="small"
                                onClick={() =>
                                  openDescriptionDialog(
                                    'timeline',
                                    index,
                                    item.name
                                  )
                                }
                                color="info"
                              >
                                <CommentIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                            {/* Hide edit/delete buttons for "Ng√†y t·∫°o phi·∫øu" */}
                            {item.name !== 'Ng√†y t·∫°o phi·∫øu' && (
                              <>
                                <Tooltip title="S·ª≠a">
                                  <IconButton
                                    size="small"
                                    onClick={() => {
                                      setEditingTimelineIndex(index);
                                      onNewTimelineItemChange(
                                        'name',
                                        item.name
                                      );
                                      onNewTimelineItemChange(
                                        'estimatedDate',
                                        formatDateForInput(
                                          item.estimatedDate || ''
                                        )
                                      );
                                      onNewTimelineItemChange(
                                        'date',
                                        formatDateForInput(item.date || '')
                                      );
                                      onNewTimelineItemChange(
                                        'status',
                                        item.status
                                      );
                                      onNewTimelineItemChange(
                                        'description',
                                        item.description || ''
                                      );
                                    }}
                                    color="primary"
                                  >
                                    <EditIcon fontSize="small" />
                                  </IconButton>
                                </Tooltip>
                                <Tooltip title="X√≥a">
                                  <IconButton
                                    size="small"
                                    onClick={() => onDeleteTimelineItem(index)}
                                    color="error"
                                  >
                                    <DeleteIcon fontSize="small" />
                                  </IconButton>
                                </Tooltip>
                              </>
                            )}
                          </Box>
                        </Grid>
                      </Grid>
                      {(item.description ||
                        (item.descriptions &&
                          item.descriptions.length > 0)) && (
                        <Box sx={{ mt: 1, ml: 1 }}>
                          <Typography
                            variant="body2"
                            sx={{
                              color: 'text.secondary',
                              fontSize: '0.75rem',
                              fontStyle: 'italic',
                            }}
                          >
                            üìù {getLatestTimelineDescription(item)}
                          </Typography>
                          {item.descriptions &&
                            item.descriptions.length > 1 && (
                              <Box sx={{ mt: 1 }}>
                                <Typography
                                  variant="caption"
                                  sx={{
                                    color: 'text.disabled',
                                    fontSize: '0.7rem',
                                  }}
                                >
                                  L·ªãch s·ª≠ m√¥ t·∫£ (
                                  {(item.descriptions || []).length}
                                  ):
                                </Typography>
                                {(item.descriptions || []).map((desc, idx) => (
                                  <Typography
                                    key={desc.id}
                                    variant="caption"
                                    sx={{
                                      display: 'block',
                                      fontSize: '0.65rem',
                                      color: 'text.secondary',
                                      ml: 1,
                                      mt: 0.3,
                                      py: 0.3,
                                      px: 0.5,
                                      bgcolor:
                                        idx ===
                                        (item.descriptions || []).length - 1
                                          ? '#e8f5e8'
                                          : '#f5f5f5',
                                      borderRadius: 0.5,
                                      border: '1px solid',
                                      borderColor:
                                        idx ===
                                        (item.descriptions || []).length - 1
                                          ? '#4caf50'
                                          : '#e0e0e0',
                                    }}
                                  >
                                    <strong>{desc.author}</strong> (
                                    {new Date(
                                      desc.timestamp
                                    ).toLocaleDateString('vi-VN')}{' '}
                                    {new Date(
                                      desc.timestamp
                                    ).toLocaleTimeString('vi-VN', {
                                      hour: '2-digit',
                                      minute: '2-digit',
                                    })}
                                    ):
                                    <br />
                                    {desc.content}
                                  </Typography>
                                ))}
                              </Box>
                            )}
                        </Box>
                      )}
                    </Box>
                  )}
                </Box>
              ))}

            {/* Add New Timeline Item - ·∫®n khi ƒëang edit, ch·ªâ hi·ªán cho Qu·ªëc t·∫ø */}
            {editingTimelineIndex === null &&
              formFields.origin &&
              formFields.origin.trim() && (
                <Box
                  sx={{
                    display: 'flex',
                    gap: 2,
                    alignItems: 'center',
                    mt: 2,
                    p: 2,
                    border: '2px dashed #ccc',
                    borderRadius: 1,
                    backgroundColor: '#fafafa',
                    flexWrap: 'wrap',
                  }}
                >
                  <FormControl sx={{ minWidth: '140px' }}>
                    <InputLabel>M·ªëc th·ªùi gian</InputLabel>
                    <Select
                      value={newTimelineItem.name}
                      onChange={(e) =>
                        onNewTimelineItemChange('name', e.target.value)
                      }
                      label="M·ªëc th·ªùi gian"
                    >
                      <MenuItem value="Ng√†y nh·∫≠p h√†ng">Ng√†y nh·∫≠p h√†ng</MenuItem>
                      <MenuItem value="Cargo Ready">Cargo Ready</MenuItem>
                      <MenuItem value="ETD">ETD</MenuItem>
                      <MenuItem value="ETA">ETA</MenuItem>
                      <MenuItem value="Ng√†y h√†ng ƒëi">Ng√†y h√†ng ƒëi</MenuItem>
                      <MenuItem value="Ng√†y h√†ng v·ªÅ c·∫£ng">
                        Ng√†y h√†ng v·ªÅ c·∫£ng
                      </MenuItem>
                      <MenuItem value="Ng√†y nh·∫≠n h√†ng">Ng√†y nh·∫≠n h√†ng</MenuItem>
                    </Select>
                  </FormControl>
                  <TextField
                    label="Ng√†y d·ª± ki·∫øn"
                    type="date"
                    value={newTimelineItem.estimatedDate as string}
                    onChange={(e) => {
                      onNewTimelineItemChange('estimatedDate', e.target.value);
                      if (
                        newTimelineItem.name === 'Ng√†y nh·∫≠p h√†ng' &&
                        e.target.value
                      ) {
                        onFieldChange('estimatedArrival', e.target.value);
                      }
                    }}
                    sx={{ minWidth: '140px' }}
                    InputLabelProps={{ shrink: true }}
                  />

                  <TextField
                    label="Ng√†y th·ª±c t·∫ø"
                    type="date"
                    value={newTimelineItem.date as string}
                    onChange={(e) => {
                      onNewTimelineItemChange('date', e.target.value);
                      if (
                        newTimelineItem.name === 'Ng√†y nh·∫≠p h√†ng' &&
                        e.target.value
                      ) {
                        onFieldChange('actualArrival', e.target.value);
                        onFieldChange('date', e.target.value);
                      }
                    }}
                    sx={{ minWidth: '140px' }}
                    InputLabelProps={{ shrink: true }}
                  />
                  <FormControl sx={{ minWidth: '120px' }}>
                    <InputLabel>Tr·∫°ng th√°i</InputLabel>
                    <Select
                      value={newTimelineItem.status}
                      onChange={(e) =>
                        onNewTimelineItemChange('status', e.target.value)
                      }
                      label="Tr·∫°ng th√°i"
                    >
                      <MenuItem value="pending">Ch·ªù x·ª≠ l√Ω</MenuItem>
                      <MenuItem value="completed">Ho√†n th√†nh</MenuItem>
                    </Select>
                  </FormControl>
                  <TextField
                    label="M√¥ t·∫£"
                    value={newTimelineItem.description}
                    onChange={(e) =>
                      onNewTimelineItemChange('description', e.target.value)
                    }
                    sx={{ minWidth: '200px', flex: 1 }}
                    placeholder="M√¥ t·∫£ th√™m..."
                  />
                  <Button
                    variant="contained"
                    onClick={() => {
                      if (editingTimelineIndex !== null) {
                        onDeleteTimelineItem(editingTimelineIndex);
                        handleAddTimeline();
                        setEditingTimelineIndex(null);
                        openSnack('ƒê√£ c·∫≠p nh·∫≠t m·ªëc th·ªùi gian');
                      } else {
                        handleAddTimeline();
                      }
                    }}
                    startIcon={<AddIcon />}
                    disabled={
                      !newTimelineItem.name ||
                      !(
                        (newTimelineItem.estimatedDate as string) ||
                        (newTimelineItem.date as string)
                      )
                    }
                    sx={{
                      color: 'white',
                      fontWeight: 600,
                      '&.Mui-disabled': {
                        bgcolor: 'primary.200',
                        color: 'white',
                        opacity: 0.7,
                      },
                    }}
                  >
                    {editingTimelineIndex !== null ? 'L∆∞u' : 'Th√™m'}
                  </Button>
                </Box>
              )}
          </Grid>

          {/* Add Timeline cho Qu·ªëc n·ªôi - Ch·ªâ c√≥ th·ªÉ th√™m Ng√†y nh·∫≠n h√†ng */}
          {editingTimelineIndex === null &&
            !(formFields.origin && formFields.origin.trim()) && (
              <Grid item xs={12}>
                <Box
                  sx={{
                    display: 'flex',
                    gap: 2,
                    alignItems: 'center',
                    mt: 1,
                    p: 2,
                    border: '2px dashed #4caf50',
                    borderRadius: 1,
                    backgroundColor: '#e8f5e8',
                    flexWrap: 'wrap',
                  }}
                >
                  <Typography
                    variant="body2"
                    sx={{
                      fontSize: '0.8rem',
                      color: 'success.main',
                      fontWeight: 600,
                    }}
                  >
                    üè† Qu·ªëc n·ªôi - Ch·ªâ c·∫ßn ng√†y nh·∫≠n h√†ng:
                  </Typography>
                  <Button
                    variant="contained"
                    onClick={() => {
                      onNewTimelineItemChange('name', 'Ng√†y nh·∫≠n h√†ng');
                      onNewTimelineItemChange('status', 'pending');
                      handleAddTimeline();
                    }}
                    startIcon={<AddIcon />}
                    disabled={timelineItems.some(
                      (t) => t.name === 'Ng√†y nh·∫≠n h√†ng'
                    )}
                    size="small"
                    color="success"
                    sx={{
                      color: 'white',
                      fontWeight: 600,
                      '&.Mui-disabled': {
                        bgcolor: 'success.200',
                        color: 'white',
                        opacity: 0.8,
                      },
                    }}
                  >
                    {timelineItems.some((t) => t.name === 'Ng√†y nh·∫≠n h√†ng')
                      ? 'ƒê√£ c√≥ ng√†y nh·∫≠n h√†ng'
                      : 'Th√™m ng√†y nh·∫≠n h√†ng'}
                  </Button>
                </Box>
              </Grid>
            )}

          {/* Document Status Section - Ch·ªâ hi·ªán cho Qu·ªëc t·∫ø */}
          {formFields.origin && formFields.origin.trim() && (
            <Grid item xs={12}>
              <Typography variant="h6" sx={{ mb: 2, fontSize: '1rem' }}>
                üìÑ Tr·∫°ng th√°i ch·ª©ng t·ª´
              </Typography>

              {/* Document Status Items List */}
              {documentStatusItems.map((item, index) => (
                <Box
                  key={item.id}
                  sx={{
                    mb: 1,
                    p: 2,
                    border: '1px solid #e0e0e0',
                    borderRadius: 1,
                    backgroundColor: '#f5f5f5',
                  }}
                >
                  {editingDocIndex === index ? (
                    // Inline editing form
                    <Box
                      sx={{
                        display: 'flex',
                        gap: 2,
                        alignItems: 'center',
                        flexWrap: 'wrap',
                      }}
                    >
                      <FormControl sx={{ minWidth: '140px' }}>
                        <InputLabel>Tr·∫°ng th√°i ch·ª©ng t·ª´</InputLabel>
                        <Select
                          value={newDocumentStatusItem.name}
                          onChange={(e) =>
                            onNewDocumentStatusItemChange(
                              'name',
                              e.target.value
                            )
                          }
                          label="Tr·∫°ng th√°i ch·ª©ng t·ª´"
                        >
                          <MenuItem value="Check bill">Check bill</MenuItem>
                          <MenuItem value="Check CO">Check CO</MenuItem>
                          <MenuItem value="TQ g·ª≠i ch·ª©ng t·ª´ ƒëi">
                            TQ g·ª≠i ch·ª©ng t·ª´ ƒëi
                          </MenuItem>
                          <MenuItem value="L√™n T·ªù Khai H·∫£i Quan">
                            L√™n T·ªù Khai H·∫£i Quan
                          </MenuItem>
                          <MenuItem value="ƒê√≥ng thu·∫ø">ƒê√≥ng thu·∫ø</MenuItem>
                        </Select>
                      </FormControl>
                      <TextField
                        label="Ng√†y d·ª± ki·∫øn"
                        type="date"
                        value={newDocumentStatusItem.estimatedDate as string}
                        onChange={(e) =>
                          onNewDocumentStatusItemChange(
                            'estimatedDate',
                            e.target.value
                          )
                        }
                        sx={{ minWidth: '140px' }}
                        InputLabelProps={{ shrink: true }}
                      />
                      <TextField
                        label="Ng√†y th·ª±c t·∫ø"
                        type="date"
                        value={newDocumentStatusItem.date as string}
                        onChange={(e) =>
                          onNewDocumentStatusItemChange('date', e.target.value)
                        }
                        sx={{ minWidth: '140px' }}
                        InputLabelProps={{ shrink: true }}
                      />
                      <FormControl sx={{ minWidth: '120px' }}>
                        <InputLabel>Tr·∫°ng th√°i</InputLabel>
                        <Select
                          value={newDocumentStatusItem.status}
                          onChange={(e) =>
                            onNewDocumentStatusItemChange(
                              'status',
                              e.target.value
                            )
                          }
                          label="Tr·∫°ng th√°i"
                        >
                          <MenuItem value="pending">Ch·ªù x·ª≠ l√Ω</MenuItem>
                          <MenuItem value="in-progress">ƒêang x·ª≠ l√Ω</MenuItem>
                          <MenuItem value="completed">Ho√†n th√†nh</MenuItem>
                        </Select>
                      </FormControl>
                      <TextField
                        label="M√¥ t·∫£"
                        value={newDocumentStatusItem.description}
                        onChange={(e) =>
                          onNewDocumentStatusItemChange(
                            'description',
                            e.target.value
                          )
                        }
                        sx={{ minWidth: '200px', flex: 1 }}
                        placeholder="M√¥ t·∫£ th√™m..."
                      />
                      <Box sx={{ display: 'flex', gap: 1 }}>
                        <Button
                          variant="contained"
                          size="small"
                          onClick={() => {
                            onDeleteDocumentStatusItem(editingDocIndex);
                            handleAddDocumentStatus();
                            setEditingDocIndex(null);
                            setHasUnsavedChanges(true);
                            openSnack(
                              'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ch·ª©ng t·ª´ (ch∆∞a l∆∞u)'
                            );
                          }}
                          disabled={
                            !newDocumentStatusItem.name ||
                            !(
                              (newDocumentStatusItem.estimatedDate as string) ||
                              (newDocumentStatusItem.date as string)
                            )
                          }
                        >
                          L∆∞u
                        </Button>
                        <Button
                          variant="outlined"
                          size="small"
                          onClick={() => setEditingDocIndex(null)}
                        >
                          H·ªßy
                        </Button>
                      </Box>
                    </Box>
                  ) : (
                    // Display mode
                    <Box>
                      <Grid container alignItems="center" spacing={1}>
                        <Grid item xs={12} md={3}>
                          <Typography
                            variant="body2"
                            sx={{ fontWeight: 600 }}
                            noWrap
                          >
                            {item.name}
                          </Typography>
                        </Grid>
                        <Grid item xs={12} md={5}>
                          <Box sx={{ display: 'flex', gap: 3 }}>
                            {/* Hide "D·ª± ki·∫øn" for "Ng√†y t·∫°o phi·∫øu" */}
                            {item.name !== 'Ng√†y t·∫°o phi·∫øu' && (
                              <Typography variant="body2" noWrap>
                                D·ª± ki·∫øn: {formatDateDisplay(item.estimatedDate)}
                              </Typography>
                            )}
                            <Typography variant="body2" noWrap>
                              {item.name === 'Ng√†y t·∫°o phi·∫øu'
                                ? 'Ng√†y: '
                                : 'Th·ª±c t·∫ø: '}
                              {formatDateDisplay(item.date)}
                            </Typography>
                          </Box>
                        </Grid>
                        <Grid item xs={12} md={2}>
                          <Chip
                            label={
                              item.status === 'completed'
                                ? 'Ho√†n th√†nh'
                                : item.status === 'confirmed'
                                  ? 'ƒê√£ x√°c nh·∫≠n'
                                  : 'Ch·ªù x·ª≠ l√Ω'
                            }
                            color={
                              item.status === 'completed'
                                ? 'success'
                                : item.status === 'confirmed'
                                  ? 'primary'
                                  : 'default'
                            }
                            size="small"
                            sx={{ fontSize: '0.7rem' }}
                          />
                        </Grid>
                        <Grid item xs={12} md={1.5}>
                          {/* Delay Status for Document Status - Auto calculated */}
                          {item.estimatedDate && item.date && (
                            <Chip
                              label={(() => {
                                // Calculate delay status
                                if (!item.estimatedDate || !item.date)
                                  return '‚ùì';

                                // Parse dates
                                const parseDate = (dateStr: string): Date => {
                                  if (dateStr.includes('/')) {
                                    const [day, month, year] =
                                      dateStr.split('/');
                                    return new Date(
                                      parseInt(year),
                                      parseInt(month) - 1,
                                      parseInt(day)
                                    );
                                  }
                                  return new Date(dateStr);
                                };

                                const estimated = parseDate(item.estimatedDate);
                                const actual = parseDate(item.date);

                                if (estimated.getTime() === actual.getTime())
                                  return '‚úÖ ƒê√∫ng h·∫°n';
                                if (actual < estimated) return '‚ö° Tr∆∞·ªõc h·∫°n';
                                if (actual > estimated) return 'üö® Tr·ªÖ h·∫°n';
                                return '‚ùì Ch∆∞a x√°c ƒë·ªãnh';
                              })()}
                              color={(() => {
                                if (!item.estimatedDate || !item.date)
                                  return 'default';

                                const parseDate = (dateStr: string): Date => {
                                  if (dateStr.includes('/')) {
                                    const [day, month, year] =
                                      dateStr.split('/');
                                    return new Date(
                                      parseInt(year),
                                      parseInt(month) - 1,
                                      parseInt(day)
                                    );
                                  }
                                  return new Date(dateStr);
                                };

                                const estimated = parseDate(item.estimatedDate);
                                const actual = parseDate(item.date);

                                if (estimated.getTime() === actual.getTime())
                                  return 'success';
                                if (actual < estimated) return 'info';
                                if (actual > estimated) return 'error';
                                return 'default';
                              })()}
                              size="small"
                              sx={{ fontSize: '0.6rem', height: 20 }}
                            />
                          )}
                        </Grid>
                        <Grid item xs={12} md={1.5}>
                          <Box
                            sx={{
                              display: 'flex',
                              justifyContent: 'flex-end',
                              gap: 0.5,
                            }}
                          >
                            <Tooltip title="S·ª≠a">
                              <IconButton
                                size="small"
                                onClick={() => {
                                  setEditingDocIndex(index);
                                  onNewDocumentStatusItemChange(
                                    'name',
                                    item.name
                                  );
                                  onNewDocumentStatusItemChange(
                                    'estimatedDate',
                                    formatDateForInput(item.estimatedDate || '')
                                  );
                                  onNewDocumentStatusItemChange(
                                    'date',
                                    formatDateForInput(item.date || '')
                                  );
                                  onNewDocumentStatusItemChange(
                                    'status',
                                    item.status
                                  );
                                  onNewDocumentStatusItemChange(
                                    'description',
                                    item.description || ''
                                  );
                                }}
                                color="primary"
                              >
                                <EditIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title="Th√™m m√¥ t·∫£">
                              <IconButton
                                size="small"
                                onClick={() =>
                                  openDescriptionDialog(
                                    'document',
                                    index,
                                    item.name
                                  )
                                }
                                color="info"
                              >
                                <CommentIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title="X√≥a">
                              <IconButton
                                size="small"
                                onClick={() =>
                                  onDeleteDocumentStatusItem(index)
                                }
                                color="error"
                              >
                                <DeleteIcon fontSize="small" />
                              </IconButton>
                            </Tooltip>
                          </Box>
                        </Grid>
                      </Grid>
                      {(item.description ||
                        (item.descriptions &&
                          item.descriptions.length > 0)) && (
                        <Box sx={{ mt: 1 }}>
                          <Typography
                            variant="body2"
                            sx={{ color: 'text.secondary', fontSize: '0.8rem' }}
                          >
                            üìù {getLatestDocumentStatusDescription(item)}
                          </Typography>
                          {item.descriptions &&
                            item.descriptions.length > 1 && (
                              <Box sx={{ mt: 1 }}>
                                <Typography
                                  variant="caption"
                                  sx={{
                                    color: 'text.disabled',
                                    fontSize: '0.7rem',
                                  }}
                                >
                                  L·ªãch s·ª≠ m√¥ t·∫£ (
                                  {(item.descriptions || []).length}
                                  ):
                                </Typography>
                                {(item.descriptions || []).map((desc, idx) => (
                                  <Typography
                                    key={desc.id}
                                    variant="caption"
                                    sx={{
                                      display: 'block',
                                      fontSize: '0.65rem',
                                      color: 'text.secondary',
                                      ml: 1,
                                      mt: 0.3,
                                      py: 0.3,
                                      px: 0.5,
                                      bgcolor:
                                        idx ===
                                        (item.descriptions || []).length - 1
                                          ? '#e8f5e8'
                                          : '#f5f5f5',
                                      borderRadius: 0.5,
                                      border: '1px solid',
                                      borderColor:
                                        idx ===
                                        (item.descriptions || []).length - 1
                                          ? '#4caf50'
                                          : '#e0e0e0',
                                    }}
                                  >
                                    <strong>{desc.author}</strong> (
                                    {new Date(
                                      desc.timestamp
                                    ).toLocaleDateString('vi-VN')}{' '}
                                    {new Date(
                                      desc.timestamp
                                    ).toLocaleTimeString('vi-VN', {
                                      hour: '2-digit',
                                      minute: '2-digit',
                                    })}
                                    ):
                                    <br />
                                    {desc.content}
                                  </Typography>
                                ))}
                              </Box>
                            )}
                        </Box>
                      )}
                    </Box>
                  )}
                </Box>
              ))}

              {/* Add New Document Status Item - ·∫®n khi ƒëang edit */}
              {editingDocIndex === null && (
                <Box
                  sx={{
                    display: 'flex',
                    gap: 2,
                    alignItems: 'center',
                    mt: 2,
                    p: 2,
                    border: '2px dashed #ccc',
                    borderRadius: 1,
                    backgroundColor: '#fafafa',
                    flexWrap: 'wrap',
                  }}
                >
                  <FormControl sx={{ minWidth: '140px' }}>
                    <InputLabel>Tr·∫°ng th√°i ch·ª©ng t·ª´</InputLabel>
                    <Select
                      value={newDocumentStatusItem.name}
                      onChange={(e) =>
                        onNewDocumentStatusItemChange('name', e.target.value)
                      }
                      label="Tr·∫°ng th√°i ch·ª©ng t·ª´"
                    >
                      <MenuItem value="Check bill">Check bill</MenuItem>
                      <MenuItem value="Check CO">Check CO</MenuItem>
                      <MenuItem value="TQ g·ª≠i ch·ª©ng t·ª´ ƒëi">
                        TQ g·ª≠i ch·ª©ng t·ª´ ƒëi
                      </MenuItem>
                      <MenuItem value="L√™n T·ªù Khai H·∫£i Quan">
                        L√™n T·ªù Khai H·∫£i Quan
                      </MenuItem>
                      <MenuItem value="ƒê√≥ng thu·∫ø">ƒê√≥ng thu·∫ø</MenuItem>
                    </Select>
                  </FormControl>

                  <TextField
                    label="Ng√†y d·ª± ki·∫øn"
                    type="date"
                    value={newDocumentStatusItem.estimatedDate as string}
                    onChange={(e) =>
                      onNewDocumentStatusItemChange(
                        'estimatedDate',
                        e.target.value
                      )
                    }
                    sx={{ minWidth: '140px' }}
                    InputLabelProps={{ shrink: true }}
                  />

                  <TextField
                    label="Ng√†y th·ª±c t·∫ø"
                    type="date"
                    value={newDocumentStatusItem.date as string}
                    onChange={(e) =>
                      onNewDocumentStatusItemChange('date', e.target.value)
                    }
                    sx={{ minWidth: '140px' }}
                    InputLabelProps={{ shrink: true }}
                  />

                  <FormControl sx={{ minWidth: '120px' }}>
                    <InputLabel>Tr·∫°ng th√°i</InputLabel>
                    <Select
                      value={newDocumentStatusItem.status}
                      onChange={(e) =>
                        onNewDocumentStatusItemChange('status', e.target.value)
                      }
                      label="Tr·∫°ng th√°i"
                    >
                      <MenuItem value="pending">Ch·ªù x·ª≠ l√Ω</MenuItem>
                      <MenuItem value="in-progress">ƒêang x·ª≠ l√Ω</MenuItem>
                      <MenuItem value="completed">Ho√†n th√†nh</MenuItem>
                    </Select>
                  </FormControl>

                  <TextField
                    label="M√¥ t·∫£"
                    value={newDocumentStatusItem.description}
                    onChange={(e) =>
                      onNewDocumentStatusItemChange(
                        'description',
                        e.target.value
                      )
                    }
                    sx={{ minWidth: '200px', flex: 1 }}
                    placeholder="M√¥ t·∫£ th√™m..."
                  />

                  <Button
                    variant="contained"
                    onClick={() => {
                      if (editingDocIndex !== null) {
                        onDeleteDocumentStatusItem(editingDocIndex);
                        handleAddDocumentStatus();
                        setEditingDocIndex(null);
                        openSnack('ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ch·ª©ng t·ª´');
                      } else {
                        handleAddDocumentStatus();
                      }
                    }}
                    startIcon={<AddIcon />}
                    disabled={
                      !newDocumentStatusItem.name ||
                      !(
                        (newDocumentStatusItem.estimatedDate as string) ||
                        (newDocumentStatusItem.date as string)
                      )
                    }
                    sx={{
                      color: 'white',
                      fontWeight: 600,
                      '&.Mui-disabled': {
                        bgcolor: 'primary.200',
                        color: 'white',
                        opacity: 0.7,
                      },
                    }}
                  >
                    {editingDocIndex !== null ? 'L∆∞u' : 'Th√™m'}
                  </Button>
                </Box>
              )}
            </Grid>
          )}

          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Ghi ch√∫"
              value={formFields.notes}
              onChange={(e) => onFieldChange('notes', e.target.value)}
              variant="outlined"
              multiline
              rows={3}
            />
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions>
        <Button onClick={handleClose}>H·ªßy</Button>
        <Button
          onClick={handleSaveClick}
          variant="contained"
          color="primary"
          disabled={isSaving}
          startIcon={
            isSaving ? (
              <CircularProgress size={18} color="inherit" />
            ) : undefined
          }
        >
          {isSaving
            ? editingItem
              ? 'ƒêang c·∫≠p nh·∫≠t...'
              : 'ƒêang th√™m...'
            : editingItem
              ? 'C·∫≠p nh·∫≠t'
              : 'Th√™m m·ªõi'}
        </Button>
      </DialogActions>
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={1500}
        onClose={() => setSnackbarOpen(false)}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setSnackbarOpen(false)}
          severity={snackbarSeverity}
          sx={{ width: '100%' }}
        >
          {snackbarMsg}
        </Alert>
      </Snackbar>

      {/* Description Dialog */}
      <Dialog
        open={descriptionDialogOpen}
        onClose={() => setDescriptionDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>üí¨ Th√™m m√¥ t·∫£ cho: {descriptionTarget?.name}</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            fullWidth
            multiline
            rows={4}
            label="N·ªôi dung m√¥ t·∫£"
            placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt..."
            value={descriptionText}
            onChange={(e) => setDescriptionText(e.target.value)}
            sx={{ mt: 1 }}
            helperText={`Ng∆∞·ªùi th√™m: ${getCurrentUser()} | Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDescriptionDialogOpen(false)}>H·ªßy</Button>
          <Button
            onClick={saveDescription}
            variant="contained"
            disabled={!descriptionText.trim()}
            startIcon={<CommentIcon />}
          >
            Th√™m m√¥ t·∫£
          </Button>
        </DialogActions>
      </Dialog>
    </Dialog>
  );
};

export default AddEditDialog;
