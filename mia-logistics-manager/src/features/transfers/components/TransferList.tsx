import React, { useState, useRef, useMemo, useEffect } from 'react';
import {
  Avatar,
  Box,
  Card,
  CardContent,
  IconButton,
  Paper,
  Toolbar,
  Tooltip,
  Typography,
  Alert,
  Snackbar,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Popover,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Divider,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Autocomplete,
} from '@mui/material';
import { alpha } from '@mui/material/styles';
import {
  DataTable,
  StatusChip,
  ActionButton,
  ActionIcons,
  Icon,
} from '@/shared/components/ui';
import { useUIStore } from '@/config/store';
import { GoogleMapsService } from '../../../services/maps/mapsService';
import {
  Edit as EditIcon,
  Delete as DeleteIcon,
  Refresh as RefreshIcon,
  Upload as UploadIcon,
  Download as DownloadIcon,
  Print as PrintIcon,
  ReceiptLong as ExportIcon,
  GridView as GridViewIcon,
  Campaign as CampaignIcon,
  LocalShipping as ShippingIcon,
  CheckCircle as CheckCircleIcon,
  Pending as PendingIcon,
  Schedule as ScheduleIcon,
  MoreVert as MoreVertIcon,
  FilterList as FilterListIcon,
} from '@mui/icons-material';

interface Transfer {
  transfer_id: string; // ID phi·∫øu CK (ID ch√≠nh)
  orderCode: string; // M√£ ƒë∆°n h√†ng
  hasVali: string; // C√≥ vali
  date: string; // Th·ªùi gian
  source: string; // Kho ngu·ªìn
  dest: string; // Kho ƒë√≠ch
  quantity: number; // S·ªë l∆∞·ª£ng SP
  state: string; // Tr·∫°ng th√°i
  note: string; // Ghi ch√∫
  dest_id: string; // ID Kho ƒë√≠ch
  source_id: string; // ID Kho ngu·ªìn
  employee: string; // Nh√¢n vi√™n
  // Tr·∫°ng th√°i v·∫≠n chuy·ªÉn
  transportStatus?: string;
  // C√°c c·ªôt Ki·ªán (s·ªë nguy√™n)
  pkgS?: number;
  pkgM?: number;
  pkgL?: number;
  pkgBagSmall?: number;
  pkgBagMedium?: number;
  pkgBagLarge?: number;
  pkgOther?: number;
  // C√°c c·ªôt Kh·ªëi (m3 - s·ªë th·ª±c)
  volS?: number;
  volM?: number;
  volL?: number;
  volBagSmall?: number;
  volBagMedium?: number;
  volBagLarge?: number;
  volOther?: number;
  // C√°c c·ªôt th√¥ng tin ƒë·ªãa ƒëi·ªÉm
  address?: string;
  ward?: string;
  district?: string;
  province?: string;
}

interface Location {
  id: string;
  code: string;
  address: string;
  ward: string;
  district: string;
  province: string;
}

// Helpers for safe value extraction
const getStringFrom = (obj: Record<string, unknown>, key: string): string => {
  const v = obj[key];
  if (v == null) return '';
  return typeof v === 'string' ? v : String(v);
};

const getNumberFrom = (obj: Record<string, unknown>, key: string): number => {
  const v = obj[key];
  if (v == null || v === '') return 0;

  // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p string ch·ª©a to√†n s·ªë 0 ho·∫∑c chu·ªói r·ªóng
  if (typeof v === 'string') {
    const trimmed = v.trim();
    if (trimmed === '' || trimmed === '0' || /^0+$/.test(trimmed)) return 0;

    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p string c√≥ format sai nh∆∞ "0.000.000.00" ho·∫∑c "42.000.000.000.000.000"
    if (/^0\.0+\.0+\.0+$/.test(trimmed) || /^\d+\.0+\.0+\.0+$/.test(trimmed))
      return 0;

    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p string c√≥ d·∫•u ph·∫©y (thousands separator)
    let cleanValue = trimmed.replace(/,/g, '');

    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p c√≥ nhi·ªÅu d·∫•u ch·∫•m (decimal separators)
    const dotCount = (cleanValue.match(/\./g) || []).length;
    if (dotCount > 1) {
      // Gi·ªØ l·∫°i d·∫•u ch·∫•m cu·ªëi c√πng l√†m decimal separator
      const parts = cleanValue.split('.');
      const lastPart = parts.pop();
      const firstParts = parts.join('');
      cleanValue = firstParts + '.' + lastPart;
    }

    const n = Number(cleanValue);

    // Validation: ƒë·∫£m b·∫£o k·∫øt qu·∫£ h·ª£p l√Ω
    if (!Number.isFinite(n)) return 0;
    if (n > 1000000) return 0; // Gi·ªõi h·∫°n h·ª£p l√Ω cho volume
    if (n < 0) return 0; // Kh√¥ng cho ph√©p s·ªë √¢m

    return n;
  }

  const n = Number(v);

  // Validation: ƒë·∫£m b·∫£o k·∫øt qu·∫£ h·ª£p l√Ω
  if (!Number.isFinite(n)) return 0;
  if (n > 1000000) return 0; // Gi·ªõi h·∫°n h·ª£p l√Ω cho volume
  if (n < 0) return 0; // Kh√¥ng cho ph√©p s·ªë √¢m

  return n;
};

// Mock data ƒë√£ ƒë∆∞·ª£c x√≥a ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ load t·ª´ Google Sheet

const getStatusLabel = (state: string) => {
  // Chu·∫©n h√≥a t√™n tr·∫°ng th√°i
  switch (state) {
    // === TR·∫†NG TH√ÅI PHI·∫æU (4 lo·∫°i) ===
    case 'ƒê·ªÅ ngh·ªã chuy·ªÉn kho':
    case 'Xu·∫•t chuy·ªÉn kho':
    case 'Nh·∫≠p chuy·ªÉn kho':
    case 'ƒê√£ h·ªßy':
      return state;

    // === TR·∫†NG TH√ÅI V·∫¨N CHUY·ªÇN (9 lo·∫°i) ===
    case 'Ch·ªù b√°o ki·ªán':
    case 'Ch·ªù chuy·ªÉn giao':
    case 'ƒêang chuy·ªÉn giao':
    case 'ƒê√£ chuy·ªÉn giao':
    case 'Ch·ªù x√°c nh·∫≠n':
    case 'ƒê√£ x√°c nh·∫≠n':
    case 'ƒêang v·∫≠n chuy·ªÉn':
    case 'ƒê√£ giao h√†ng':
      return state;

    default:
      return state;
  }
};

// Helper: round number to n decimals safely
const roundTo = (value: number, decimals: number): number => {
  const factor = Math.pow(10, decimals);
  return Math.round((Number(value) || 0) * factor) / factor;
};

const TransferList: React.FC = () => {
  const sidebarOpen = useUIStore((state) => state.sidebarOpen);
  const [transfers, setTransfers] = useState<Transfer[]>([]);

  // Debug: Log whenever transfers state changes
  useEffect(() => {
    console.log('üîç Transfers state changed:', transfers);
    console.log('üîç Transfers length:', transfers.length);
    if (transfers.length > 0) {
      console.log('üîç First transfer:', transfers[0]);
      console.log('üîç All transfers:', transfers);
      console.log('üîç Stack trace:', new Error().stack);
      console.log('üîç Component re-render count:', Date.now());
      console.log('üîç Browser URL:', window.location.href);
      console.log('üîç Local Storage:', localStorage.getItem('transfers'));
      console.log('üîç Session Storage:', sessionStorage.getItem('transfers'));
      console.log('üîç IndexedDB:', indexedDB.databases());
    }
  }, [transfers]);
  const [loading, setLoading] = useState(false);
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error' | 'info';
  }>({ open: false, message: '', severity: 'info' });
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Filter states
  const [filters, setFilters] = useState({
    search: '',
    hasVali: '',
    status: '',
    transportStatus: '',
    source: '',
    dest: '',
    dateFrom: '',
    dateTo: '',
  });

  // Selection states
  const [selected, setSelected] = useState<string[]>([]);

  // Pagination states
  const [page, setPage] = useState(0);
  const [rowsPerPage] = useState(10);

  // Date filter states
  const [dateFilterAnchor, setDateFilterAnchor] = useState<null | HTMLElement>(
    null
  );
  const [showCustomDateRange, setShowCustomDateRange] = useState(false);
  const [showFilters, setShowFilters] = useState(false);

  // Gridview dialog state
  const [gridOpen, setGridOpen] = useState(false);
  const [gridTransfer, setGridTransfer] = useState<Transfer | null>(null);
  const [gridIndex, setGridIndex] = useState<number>(-1); // -1: single mode; >=0: index in selected
  const [reportOpen, setReportOpen] = useState(false);
  const [reportTransfer, setReportTransfer] = useState<Transfer | null>(null);
  const [volumeRules, setVolumeRules] = useState<
    Array<{ id: string; name: string; unitVolume: number }>
  >([]);
  const [reportCounts, setReportCounts] = useState<Record<string, number>>({});
  const SHEET_ID = '18B1PIhCDmBWyHZytvOcfj_1QbYBwczLf1x1Qbu0E5As';

  // Location dialog states
  const [locationDialogOpen, setLocationDialogOpen] = useState(false);
  const [locationData, setLocationData] = useState<Location>({
    id: '',
    code: '',
    address: '',
    ward: '',
    district: '',
    province: '',
  });

  // Edit dialog states (ch·ªânh s·ª≠a ƒë·ªãa ch·ªâ)
  const [editOpen, setEditOpen] = useState(false);
  const [editTransfer, setEditTransfer] = useState<Transfer | null>(null);
  const [editForm, setEditForm] = useState({
    address: '',
    ward: '',
    district: '',
    province: '',
  });

  // Statistics state
  const [stats, setStats] = useState({
    pendingReport: 0,
    pendingTransfer: 0,
    inTransfer: 0,
    completed: 0,
    totalProducts: 0,
    totalPackages: 0,
    totalVolume: 0,
    // Ch·ªù b√°o ki·ªán details
    pendingReportWithLuggage: 0,
    pendingReportWithoutLuggage: 0,
    pendingReportProductsWithLuggage: 0,
    pendingReportProductsWithoutLuggage: 0,
    // Ch·ªù chuy·ªÉn giao details
    pendingTransferDeliveryPoints: 0,
    pendingTransferPackages: 0,
    pendingTransferVolume: 0,
  });

  // Dialog states

  // Action menu dropdown state
  const [actionMenuAnchor, setActionMenuAnchor] = useState<null | HTMLElement>(
    null
  );
  const [selectedTransferForAction, setSelectedTransferForAction] =
    useState<Transfer | null>(null);

  // Helper to reload transfers from server

  const reloadTransfers = async (): Promise<void> => {
    try {
      const res = await fetch(
        `/api/transfers?spreadsheetId=${encodeURIComponent(SHEET_ID)}`
      );
      if (!res.ok) throw new Error('reload failed');
      const data = await res.json();
      const mapped: Transfer[] = (data as Array<Record<string, unknown>>).map(
        (r) => ({
          id: getStringFrom(r, 'id') || getStringFrom(r, 'transfer_id') || '',
          orderCode: getStringFrom(r, 'orderCode'),
          hasVali: getStringFrom(r, 'hasVali'),
          date: getStringFrom(r, 'date'),
          source: getStringFrom(r, 'source'),
          dest: getStringFrom(r, 'dest'),
          quantity: getNumberFrom(r, 'quantity'),
          state: getStringFrom(r, 'state'),
          note: getStringFrom(r, 'note'),
          dest_id: getStringFrom(r, 'dest_id'),
          transfer_id:
            getStringFrom(r, 'transfer_id') || getStringFrom(r, 'id') || '',
          source_id: getStringFrom(r, 'source_id'),
          employee: getStringFrom(r, 'employee'),
          transportStatus:
            getStringFrom(r, 'transportStatus') || 'Ch·ªù b√°o ki·ªán',
          pkgS: getNumberFrom(r, 'pkgS'),
          pkgM: getNumberFrom(r, 'pkgM'),
          pkgL: getNumberFrom(r, 'pkgL'),
          pkgBagSmall: getNumberFrom(r, 'pkgBagSmall'),
          pkgBagMedium: getNumberFrom(r, 'pkgBagMedium'),
          pkgBagLarge: getNumberFrom(r, 'pkgBagLarge'),
          pkgOther: getNumberFrom(r, 'pkgOther'),
          volS: getNumberFrom(r, 'volS'),
          volM: getNumberFrom(r, 'volM'),
          volL: getNumberFrom(r, 'volL'),
          volBagSmall: getNumberFrom(r, 'volBagSmall'),
          volBagMedium: getNumberFrom(r, 'volBagMedium'),
          volBagLarge: getNumberFrom(r, 'volBagLarge'),
          volOther: getNumberFrom(r, 'volOther'),
          // Th√™m c√°c c·ªôt ƒë·ªãa ƒëi·ªÉm
          address: getStringFrom(r, 'address'),
          ward: getStringFrom(r, 'ward'),
          district: getStringFrom(r, 'district'),
          province: getStringFrom(r, 'province'),
        })
      );
      setTransfers(mapped);
    } catch {
      // ignore reload error
    }
  };

  // Load t·ª´ Google Sheets qua server n·∫øu c√≥ c·∫•u h√¨nh
  useEffect(() => {
    console.log('üöÄ Component mounted, calling fetchTransfers...');
    fetchTransfers();
  }, []);

  const handleRefresh = async () => {
    setLoading(true);
    try {
      await fetchTransfers();
      console.log('üîÑ ƒê√£ l√†m m·ªõi d·ªØ li·ªáu t·ª´ sheet');
    } catch (error) {
      console.error('‚ùå L·ªói khi l√†m m·ªõi:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddTransfer = () => {
    // TODO: Implement add transfer
    console.log('Add transfer');
  };

  const handleEditTransfer = (transfer: Transfer) => {
    setEditTransfer(transfer);
    setEditForm({
      address: transfer.address || '',
      ward: transfer.ward || '',
      district: transfer.district || '',
      province: transfer.province || '',
    });
    setEditOpen(true);
  };

  const handleEditFormChange = (
    field: keyof typeof editForm,
    value: string
  ) => {
    setEditForm((prev) => ({ ...prev, [field]: value }));
  };

  const submitEdit = async () => {
    if (!editTransfer) return;
    const updateId = editTransfer.transfer_id;
    try {
      const res = await fetch(
        `/api/transfers/${encodeURIComponent(updateId)}?spreadsheetId=${encodeURIComponent(
          SHEET_ID
        )}`,
        {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(editForm),
        }
      );
      if (!res.ok) throw new Error('Update failed');
      const updated = await res.json();

      // Update UI optimistic
      setTransfers((prev) =>
        prev.map((t) =>
          t.transfer_id === updateId ? { ...t, ...editForm } : t
        )
      );
      setEditOpen(false);
      setEditTransfer(null);
      await reloadTransfers();
    } catch (e) {
      console.error('C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ l·ªói:', e);
      alert('C·∫≠p nh·∫≠t th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  // Cascading location selectors using Google Maps places (simple text-search fallback)
  const mapsServiceRef = useRef<GoogleMapsService | null>(null);
  const [cityOptions, setCityOptions] = useState<string[]>([]);
  const [districtOptions, setDistrictOptions] = useState<string[]>([]);
  const [wardOptions, setWardOptions] = useState<string[]>([]);

  useEffect(() => {
    mapsServiceRef.current = new GoogleMapsService();
  }, []);

  const fetchCities = async (q: string) => {
    const svc = mapsServiceRef.current;
    if (!svc) return;
    const results = await svc.searchPlaces(q || 'Vi·ªát Nam');
    const cities = Array.from(
      new Set(
        results
          .map((r) => r.formatted_address || '')
          .flatMap((addr) => addr.split(','))
          .map((s) => s.trim())
      )
    ).filter(Boolean);
    setCityOptions(cities.slice(0, 50));
  };

  const fetchDistricts = async (city: string) => {
    const svc = mapsServiceRef.current;
    if (!svc || !city) return;
    const results = await svc.searchPlaces(`Qu·∫≠n ${city}`);
    const districts = Array.from(
      new Set(
        results
          .map((r) => r.formatted_address || '')
          .flatMap((addr) => addr.split(','))
          .map((s) => s.trim())
          .filter(
            (s) =>
              s.toLowerCase().includes('qu·∫≠n') ||
              s.toLowerCase().includes('huy·ªán')
          )
      )
    );
    setDistrictOptions(districts.slice(0, 50));
  };

  const fetchWards = async (city: string, district: string) => {
    const svc = mapsServiceRef.current;
    if (!svc || !city || !district) return;
    const results = await svc.searchPlaces(`Ph∆∞·ªùng ${district} ${city}`);
    const wards = Array.from(
      new Set(
        results
          .map((r) => r.formatted_address || '')
          .flatMap((addr) => addr.split(','))
          .map((s) => s.trim())
          .filter(
            (s) =>
              s.toLowerCase().includes('ph∆∞·ªùng') ||
              s.toLowerCase().includes('x√£')
          )
      )
    );
    setWardOptions(wards.slice(0, 50));
  };

  // Action menu handlers
  const handleActionMenuOpen = (
    event: React.MouseEvent<HTMLElement>,
    transfer: Transfer
  ) => {
    setActionMenuAnchor(event.currentTarget);
    setSelectedTransferForAction(transfer);
  };

  const handleActionMenuClose = () => {
    setActionMenuAnchor(null);
    setSelectedTransferForAction(null);
  };

  const handleActionClick = (action: string) => {
    if (!selectedTransferForAction) return;

    switch (action) {
      case 'report':
        openReportDialog(selectedTransferForAction);
        break;
      case 'view':
        handleViewTransfer(selectedTransferForAction);
        break;
      case 'print':
        handlePrintPicking(selectedTransferForAction);
        break;
      case 'export':
        handleExportTransfer(selectedTransferForAction);
        break;
      case 'edit':
        handleEditTransfer(selectedTransferForAction);
        break;
      case 'delete':
        handleDeleteTransfer(selectedTransferForAction);
        break;
    }
    handleActionMenuClose();
  };

  const handleDeleteTransfer = async (transfer: Transfer) => {
    const confirmText = `B·∫°n c√≥ ch·∫Øc mu·ªën xo√° phi·∫øu ${transfer.orderCode} (ID: ${transfer.transfer_id})?\n\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`;
    const ok = window.confirm(confirmText);
    if (!ok) return;

    try {
      const res = await fetch(
        `/api/transfers/${encodeURIComponent(transfer.transfer_id)}?spreadsheetId=${encodeURIComponent(
          SHEET_ID
        )}`,
        { method: 'DELETE' }
      );
      if (!res.ok) throw new Error('Delete failed');

      // Xo√° ngay tr√™n UI ƒë·ªÉ ph·∫£n h·ªìi nhanh
      setTransfers((prev) =>
        prev.filter((t) => t.transfer_id !== transfer.transfer_id)
      );
      setSelected((prev) => prev.filter((id) => id !== transfer.transfer_id));

      // L√†m m·ªõi l·∫°i t·ª´ server ƒë·ªÉ ƒë·ªìng b·ªô tuy·ªát ƒë·ªëi
      await reloadTransfers();
    } catch (e) {
      console.error('Xo√° phi·∫øu l·ªói:', e);
      alert('Xo√° phi·∫øu th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleViewTransfer = (transfer: Transfer) => {
    console.log('View transfer:', transfer);
    // M·ªü link in phi·∫øu ƒë∆°n l·∫ª
    const url = `https://one.tga.com.vn/so/ckprint/goods?id=${transfer.transfer_id}`;
    window.open(url, '_blank');
  };

  const handlePrintPicking = (transfer: Transfer) => {
    console.log('Print picking:', transfer);
    // M·ªü link in phi·∫øu picking ƒë∆°n l·∫ª
    const url = `https://one.tga.com.vn/so/ckprint/picking?id=${transfer.transfer_id}`;
    window.open(url, '_blank');
  };

  const handleExportTransfer = (transfer: Transfer) => {
    console.log('Export transfer:', transfer);
    // M·ªü link xu·∫•t phi·∫øu ƒë∆°n l·∫ª (detail/{id})
    const url = `https://one.tga.com.vn/picking/goodsdeliverynote/inventorytransfer/detail/${transfer.transfer_id}`;
    window.open(url, '_blank');
  };

  const handlePrintMultipleTransfers = () => {
    if (selected.length === 0) {
      alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt phi·∫øu ƒë·ªÉ in');
      return;
    }

    // L·∫•y c√°c transfer_id c·ªßa c√°c phi·∫øu ƒë√£ ch·ªçn
    const selectedTransfers = transfers.filter((transfer) =>
      selected.includes(transfer.transfer_id)
    );

    const transferIds = selectedTransfers
      .map((transfer) => transfer.transfer_id)
      .filter((id) => id) // L·ªçc b·ªè c√°c id r·ªóng
      .join(',');

    if (transferIds) {
      const url = `https://one.tga.com.vn/so/ckprint/goods?id=${transferIds}`;
      window.open(url, '_blank');
    } else {
      alert('Kh√¥ng t√¨m th·∫•y ID phi·∫øu h·ª£p l·ªá ƒë·ªÉ in');
    }
  };

  const handlePrintMultiplePicking = () => {
    if (selected.length === 0) {
      alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt phi·∫øu ƒë·ªÉ in');
      return;
    }

    // L·∫•y c√°c transfer_id c·ªßa c√°c phi·∫øu ƒë√£ ch·ªçn
    const selectedTransfers = transfers.filter((transfer) =>
      selected.includes(transfer.transfer_id)
    );

    const transferIds = selectedTransfers
      .map((transfer) => transfer.transfer_id)
      .filter((id) => id) // L·ªçc b·ªè c√°c id r·ªóng
      .join(',');

    if (transferIds) {
      const url = `https://one.tga.com.vn/so/ckprint/picking?id=${transferIds}`;
      window.open(url, '_blank');
    } else {
      alert('Kh√¥ng t√¨m th·∫•y ID phi·∫øu h·ª£p l·ªá ƒë·ªÉ in');
    }
  };

  const handleImportCSV = () => {
    fileInputRef.current?.click();
  };

  const openGridView = (transfer: Transfer) => {
    setGridTransfer(transfer);
    setGridOpen(true);
    setGridIndex(-1);
  };

  const openReportDialog = async (transfer: Transfer) => {
    setReportTransfer(transfer);

    // Ki·ªÉm tra xem phi·∫øu ƒë√£ c√≥ d·ªØ li·ªáu ki·ªán ch∆∞a
    const totalPackages =
      (transfer.pkgS || 0) +
      (transfer.pkgM || 0) +
      (transfer.pkgL || 0) +
      (transfer.pkgBagSmall || 0) +
      (transfer.pkgBagMedium || 0) +
      (transfer.pkgBagLarge || 0) +
      (transfer.pkgOther || 0);

    if (totalPackages > 0) {
      // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu, h·ªèi ng∆∞·ªùi d√πng mu·ªën b√°o m·ªõi hay ch·ªânh s·ª≠a
      const userChoice = window.confirm(
        `Phi·∫øu ${transfer.orderCode} ƒë√£ c√≥ ${totalPackages} ki·ªán. B·∫°n mu·ªën:\n\n` +
          `- B√°o m·ªõi: X√≥a d·ªØ li·ªáu c≈© v√† nh·∫≠p l·∫°i t·ª´ ƒë·∫ßu\n` +
          `- Ch·ªânh s·ª≠a: Gi·ªØ l·∫°i d·ªØ li·ªáu hi·ªán t·∫°i ƒë·ªÉ ch·ªânh s·ª≠a\n\n` +
          `Nh·∫•n "OK" ƒë·ªÉ b√°o m·ªõi, "Cancel" ƒë·ªÉ ch·ªânh s·ª≠a.`
      );

      if (userChoice) {
        // B√°o m·ªõi - reset v·ªÅ 0
        setReportCounts({});
      } else {
        // Ch·ªânh s·ª≠a - gi·ªØ d·ªØ li·ªáu hi·ªán t·∫°i
        setReportCounts({
          S: transfer.pkgS || 0,
          M: transfer.pkgM || 0,
          L: transfer.pkgL || 0,
          BAG_S: transfer.pkgBagSmall || 0,
          BAG_M: transfer.pkgBagMedium || 0,
          BAG_L: transfer.pkgBagLarge || 0,
          OTHER: transfer.pkgOther || 0,
        });
      }
    } else {
      // Ch∆∞a c√≥ d·ªØ li·ªáu - reset v·ªÅ 0
      setReportCounts({});
    }

    try {
      const SHEET_ID = '18B1PIhCDmBWyHZytvOcfj_1QbYBwczLf1x1Qbu0E5As';
      const res = await fetch(
        `/api/settings/volume-rules?spreadsheetId=${encodeURIComponent(SHEET_ID)}`
      );
      if (res.ok) {
        const data = (await res.json()) as Array<Record<string, unknown>>;
        const parse = (v: unknown) => {
          const s = String(v ?? '').trim();
          if (/^\d{1,3}(\.\d{3})*(,\d+)?$/.test(s))
            return Number(s.replace(/\./g, '').replace(',', '.'));
          return Number(String(v ?? '').replace(',', '.')) || 0;
        };
        const mapped = data.map((r) => ({
          id: String(r.id || ''),
          name: String(r.name || ''),
          unitVolume: parse(r.unitVolume),
        }));
        setVolumeRules(mapped);
      }
    } catch {
      // ignore
    }
    setReportOpen(true);
  };

  const handleSubmitReport = async () => {
    if (!reportTransfer) return;
    const pkgS = reportCounts['S'] || 0;
    const pkgM = reportCounts['M'] || 0;
    const pkgL = reportCounts['L'] || 0;
    const pkgBagSmall = reportCounts['BAG_S'] || 0;
    const pkgBagMedium = reportCounts['BAG_M'] || 0;
    const pkgBagLarge = reportCounts['BAG_L'] || 0;
    const pkgOther = reportCounts['OTHER'] || 0;

    const getUnit = (id: string) =>
      volumeRules.find((r) => r.id === id)?.unitVolume || 0;
    const volS = pkgS * getUnit('S');
    const volM = pkgM * getUnit('M');
    const volL = pkgL * getUnit('L');
    const volBagSmall = pkgBagSmall * getUnit('BAG_S');
    const volBagMedium = pkgBagMedium * getUnit('BAG_M');
    const volBagLarge = pkgBagLarge * getUnit('BAG_L');
    const volOther = pkgOther * getUnit('OTHER');

    // T√¨m ki·∫øm th√¥ng tin ƒë·ªãa ƒëi·ªÉm t·ª´ sheet Locations
    let locationInfo: Location | null = null;
    try {
      const locationRes = await fetch(
        `/api/locations?spreadsheetId=${encodeURIComponent(SHEET_ID)}`
      );
      if (locationRes.ok) {
        const locationData = await locationRes.json();
        console.log(
          'üîç T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm cho dest_id:',
          reportTransfer.dest_id
        );
        console.log('üìã T·ªïng s·ªë ƒë·ªãa ƒëi·ªÉm:', locationData.length);

        const foundLocation = (
          locationData as Array<Record<string, unknown>>
        ).find((loc) => String(loc.id || '') === reportTransfer.dest_id);

        if (foundLocation) {
          console.log('‚úÖ T√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm:', foundLocation);
          locationInfo = {
            id: String(foundLocation.id || ''),
            code: String(foundLocation.code || ''),
            address: String(foundLocation.address || ''),
            ward: String(foundLocation.ward || ''),
            district: String(foundLocation.district || ''),
            province: String(foundLocation.province || ''),
          };
        } else {
          console.log(
            '‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm cho dest_id:',
            reportTransfer.dest_id
          );
        }
      }
    } catch (error) {
      console.error('Error fetching location data:', error);
    }

    // N·∫øu t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm, t·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin
    if (locationInfo) {
      const next = {
        ...reportTransfer,
        pkgS,
        pkgM,
        pkgL,
        pkgBagSmall,
        pkgBagMedium,
        pkgBagLarge,
        pkgOther,
        volS: roundTo(volS, 3),
        volM: roundTo(volM, 3),
        volL: roundTo(volL, 3),
        volBagSmall: roundTo(volBagSmall, 3),
        volBagMedium: roundTo(volBagMedium, 3),
        volBagLarge: roundTo(volBagLarge, 3),
        volOther: roundTo(volOther, 3),
        state: 'Xu·∫•t chuy·ªÉn kho',
        transportStatus: 'Ch·ªù chuy·ªÉn giao',
        // T·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin ƒë·ªãa ƒëi·ªÉm v√†o c√°c c·ªôt ri√™ng bi·ªát
        // Gi·ªØ nguy√™n dest, ch·ªâ ƒëi·ªÅn v√†o c√°c c·ªôt ƒë·ªãa ƒëi·ªÉm ri√™ng bi·ªát
        address: locationInfo.address,
        ward: locationInfo.ward,
        district: locationInfo.district,
        province: locationInfo.province,
      } as Transfer;

      try {
        const updateId = next.transfer_id || (next as any).id;
        const res = await fetch(
          `/api/transfers/${encodeURIComponent(updateId)}?spreadsheetId=${encodeURIComponent(SHEET_ID)}`,
          {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              ...next,
              // L√†m tr√≤n tr∆∞·ªõc khi ghi sheet ƒë·ªÉ tr√°nh s·ªë d√†i (floating point)
              volS: roundTo(volS, 3),
              volM: roundTo(volM, 3),
              volL: roundTo(volL, 3),
              volBagSmall: roundTo(volBagSmall, 3),
              volBagMedium: roundTo(volBagMedium, 3),
              volBagLarge: roundTo(volBagLarge, 3),
              volOther: roundTo(volOther, 3),
              totalPackages: Number(
                pkgS +
                  pkgM +
                  pkgL +
                  pkgBagSmall +
                  pkgBagMedium +
                  pkgBagLarge +
                  pkgOther
              ),
              totalVolume: roundTo(
                volS +
                  volM +
                  volL +
                  volBagSmall +
                  volBagMedium +
                  volBagLarge +
                  volOther,
                2
              ),
            }),
          }
        );
        if (!res.ok) throw new Error('update failed');

        // update local list
        setTransfers((prev) =>
          prev.map((t) => (t.transfer_id === updateId ? next : t))
        );

        setSnackbar({
          open: true,
          message: 'ƒê√£ b√°o ki·ªán v√† t·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin ƒë·ªãa ƒëi·ªÉm',
          severity: 'success',
        });
      } catch {
        setSnackbar({
          open: true,
          message: 'C·∫≠p nh·∫≠t Sheet th·∫•t b·∫°i',
          severity: 'error',
        });
      }
    } else {
      // N·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm, hi·ªÉn th·ªã dialog ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p th·ªß c√¥ng
      setLocationData({
        id: reportTransfer.dest_id,
        code: reportTransfer.dest,
        address: '',
        ward: '',
        district: '',
        province: '',
      });
      setLocationDialogOpen(true);
      return; // Kh√¥ng ƒë√≥ng dialog b√°o ki·ªán
    }

    // reload from sheet to reflect any normalization done server-side
    try {
      const r = await fetch(
        `/api/transfers?spreadsheetId=${encodeURIComponent(SHEET_ID)}`
      );
      if (r.ok) {
        const data = await r.json();
        const mapped: Transfer[] = (data as Array<Record<string, unknown>>).map(
          (rr) => ({
            id:
              getStringFrom(rr, 'id') || getStringFrom(rr, 'transfer_id') || '',
            orderCode: getStringFrom(rr, 'orderCode'),
            hasVali: getStringFrom(rr, 'hasVali'),
            date: getStringFrom(rr, 'date'),
            source: getStringFrom(rr, 'source'),
            dest: getStringFrom(rr, 'dest'),
            quantity: getNumberFrom(rr, 'quantity'),
            state: getStringFrom(rr, 'state'),
            note: getStringFrom(rr, 'note'),
            dest_id: getStringFrom(rr, 'dest_id'),
            transfer_id:
              getStringFrom(rr, 'transfer_id') || getStringFrom(rr, 'id') || '',
            source_id: getStringFrom(rr, 'source_id'),
            employee: getStringFrom(rr, 'employee'),
            transportStatus:
              getStringFrom(rr, 'transportStatus') || 'Ch·ªù b√°o ki·ªán',
            pkgS: getNumberFrom(rr, 'pkgS'),
            pkgM: getNumberFrom(rr, 'pkgM'),
            pkgL: getNumberFrom(rr, 'pkgL'),
            pkgBagSmall: getNumberFrom(rr, 'pkgBagSmall'),
            pkgBagMedium: getNumberFrom(rr, 'pkgBagMedium'),
            pkgBagLarge: getNumberFrom(rr, 'pkgBagLarge'),
            pkgOther: getNumberFrom(rr, 'pkgOther'),
            volS: getNumberFrom(rr, 'volS'),
            volM: getNumberFrom(rr, 'volM'),
            volL: getNumberFrom(rr, 'volL'),
            volBagSmall: getNumberFrom(rr, 'volBagSmall'),
            volBagMedium: getNumberFrom(rr, 'volBagMedium'),
            volBagLarge: getNumberFrom(rr, 'volBagLarge'),
            volOther: getNumberFrom(rr, 'volOther'),
            // Th√™m c√°c c·ªôt ƒë·ªãa ƒëi·ªÉm
            address: getStringFrom(rr, 'address'),
            ward: getStringFrom(rr, 'ward'),
            district: getStringFrom(rr, 'district'),
            province: getStringFrom(rr, 'province'),
          })
        );
        setTransfers(mapped);
      }
    } catch {
      // ignore
    }
    setReportOpen(false);
    setReportTransfer(null);
  };

  const handleLocationSubmit = async () => {
    if (!reportTransfer) return;

    const pkgS = reportCounts['S'] || 0;
    const pkgM = reportCounts['M'] || 0;
    const pkgL = reportCounts['L'] || 0;
    const pkgBagSmall = reportCounts['BAG_S'] || 0;
    const pkgBagMedium = reportCounts['BAG_M'] || 0;
    const pkgBagLarge = reportCounts['BAG_L'] || 0;
    const pkgOther = reportCounts['OTHER'] || 0;

    const getUnit = (id: string) =>
      volumeRules.find((r) => r.id === id)?.unitVolume || 0;
    const volS = pkgS * getUnit('S');
    const volM = pkgM * getUnit('M');
    const volL = pkgL * getUnit('L');
    const volBagSmall = pkgBagSmall * getUnit('BAG_S');
    const volBagMedium = pkgBagMedium * getUnit('BAG_M');
    const volBagLarge = pkgBagLarge * getUnit('BAG_L');
    const volOther = pkgOther * getUnit('OTHER');

    const next = {
      ...reportTransfer,
      pkgS,
      pkgM,
      pkgL,
      pkgBagSmall,
      pkgBagMedium,
      pkgBagLarge,
      pkgOther,
      volS: roundTo(volS, 3),
      volM: roundTo(volM, 3),
      volL: roundTo(volL, 3),
      volBagSmall: roundTo(volBagSmall, 3),
      volBagMedium: roundTo(volBagMedium, 3),
      volBagLarge: roundTo(volBagLarge, 3),
      volOther: roundTo(volOther, 3),
      state: 'Xu·∫•t chuy·ªÉn kho',
      transportStatus: 'Ch·ªù chuy·ªÉn giao',
      // S·ª≠ d·ª•ng th√¥ng tin t·ª´ dialog v√†o c√°c c·ªôt ri√™ng bi·ªát
      // Gi·ªØ nguy√™n dest, ch·ªâ ƒëi·ªÅn v√†o c√°c c·ªôt ƒë·ªãa ƒëi·ªÉm ri√™ng bi·ªát
      address: locationData.address,
      ward: locationData.ward,
      district: locationData.district,
      province: locationData.province,
    } as Transfer;

    try {
      const updateId = next.transfer_id || (next as any).id;
      const res = await fetch(
        `/api/transfers/${encodeURIComponent(updateId)}?spreadsheetId=${encodeURIComponent(SHEET_ID)}`,
        {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ...next,
            totalPackages:
              pkgS +
              pkgM +
              pkgL +
              pkgBagSmall +
              pkgBagMedium +
              pkgBagLarge +
              pkgOther,
            totalVolume:
              volS +
              volM +
              volL +
              volBagSmall +
              volBagMedium +
              volBagLarge +
              volOther,
          }),
        }
      );
      if (!res.ok) throw new Error('update failed');

      // update local list
      setTransfers((prev) =>
        prev.map((t) => (t.transfer_id === updateId ? next : t))
      );

      setSnackbar({
        open: true,
        message: 'ƒê√£ b√°o ki·ªán v√† c·∫≠p nh·∫≠t th√¥ng tin ƒë·ªãa ƒëi·ªÉm',
        severity: 'success',
      });
    } catch {
      setSnackbar({
        open: true,
        message: 'C·∫≠p nh·∫≠t Sheet th·∫•t b·∫°i',
        severity: 'error',
      });
    }

    setLocationDialogOpen(false);
    setReportOpen(false);
    setReportTransfer(null);
  };

  const handleLocationChange = (field: keyof Location, value: string) => {
    setLocationData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const openGridViewForSelected = () => {
    if (selected.length === 0) return;
    const t = transfers.find((x) => x.transfer_id === selected[0]);
    if (t) {
      setGridTransfer(t);
      setGridIndex(0);
      setGridOpen(true);
    }
  };

  const navigateGrid = (direction: 'prev' | 'next') => {
    if (gridIndex < 0) return;
    const newIndex = direction === 'prev' ? gridIndex - 1 : gridIndex + 1;
    if (newIndex < 0 || newIndex >= selected.length) return;
    const t = transfers.find((x) => x.transfer_id === selected[newIndex]);
    if (t) {
      setGridTransfer(t);
      setGridIndex(newIndex);
    }
  };

  const handleFileUpload = async (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const csv = e.target?.result as string;
        const lines = csv.split('\n');

        const newTransfers: Transfer[] = [];

        for (let i = 1; i < lines.length; i++) {
          if (lines[i].trim()) {
            // Parse CSV line properly, handling quoted values
            const line = lines[i];
            const values: string[] = [];
            let current = '';
            let inQuotes = false;

            for (let j = 0; j < line.length; j++) {
              const char = line[j];
              if (char === '"') {
                inQuotes = !inQuotes;
              } else if (char === ',' && !inQuotes) {
                values.push(current.trim());
                current = '';
              } else {
                current += char;
              }
            }
            values.push(current.trim()); // Add the last value

            // CSV c√≥ 13 c·ªôt theo format th·ª±c t·∫ø: "", "M√£ ƒë∆°n h√†ng", "C√≥ vali", "Th·ªùi gian", "Kho ngu·ªìn", "Kho ƒë√≠ch", "S·ªë l∆∞·ª£ng SP", "Tr·∫°ng th√°i", "Ghi ch√∫", "ID Kho ƒë√≠ch", "ID phi·∫øu CK", "ID Kho ngu·ªìn", "Nh√¢n vi√™n"

            // Debug: Log the parsed values
            console.log(`Row ${i}:`, values);
            console.log(`Values length:`, values.length);
            console.log(
              `Quantity value: "${values[6]}" -> ${parseInt(values[6])}`
            );

            const clean = (v: string | undefined) =>
              (v ?? '').trim().replace(/^"|"$/g, '');

            const transfer: Transfer = {
              transfer_id: clean(values[10]) || `import-${i}`, // ID phi·∫øu CK (c·ªôt 11) - S·ª¨ D·ª§NG ID TH·ª∞C
              orderCode: clean(values[1]) || '', // M√£ ƒë∆°n h√†ng (c·ªôt 2)
              hasVali: clean(values[2]) || '', // C√≥ vali (c·ªôt 3)
              date: clean(values[3]) || '', // Th·ªùi gian (c·ªôt 4)
              source: clean(values[4]) || '', // Kho ngu·ªìn (c·ªôt 5)
              dest: clean(values[5]) || '', // Kho ƒë√≠ch (c·ªôt 6)
              quantity: parseInt(clean(values[6]) || '0', 10) || 0, // S·ªë l∆∞·ª£ng SP (c·ªôt 7)
              state: clean(values[7]) || '', // Tr·∫°ng th√°i (c·ªôt 8)
              transportStatus: 'Ch·ªù b√°o ki·ªán', // M·∫∑c ƒë·ªãnh
              note: clean(values[8]) || '', // Ghi ch√∫ (c·ªôt 9)
              // M·∫∑c ƒë·ªãnh c√°c c·ªôt package v√† volume = 0
              pkgS: 0,
              pkgM: 0,
              pkgL: 0,
              pkgBagSmall: 0,
              pkgBagMedium: 0,
              pkgBagLarge: 0,
              pkgOther: 0,
              volS: 0,
              volM: 0,
              volL: 0,
              volBagSmall: 0,
              volBagMedium: 0,
              volBagLarge: 0,
              volOther: 0,
              dest_id: clean(values[9]) || '', // ID Kho ƒë√≠ch (c·ªôt 10)
              source_id: clean(values[11]) || '', // ID Kho ngu·ªìn (c·ªôt 12)
              employee: clean(values[12]) || '', // Nh√¢n vi√™n (c·ªôt 13)
              // Th√™m c√°c c·ªôt ƒë·ªãa ƒëi·ªÉm (m·∫∑c ƒë·ªãnh tr·ªëng)
              address: '',
              ward: '',
              district: '',
              province: '',
            };
            newTransfers.push(transfer);
          }
        }

        // G·ª≠i l√™n server ƒë·ªÉ ghi v√†o Google Sheets v√† ch·ªëng tr√πng theo id
        try {
          const SHEET_ID = '18B1PIhCDmBWyHZytvOcfj_1QbYBwczLf1x1Qbu0E5As';
          const res = await fetch(
            `/api/transfers/import?spreadsheetId=${encodeURIComponent(SHEET_ID)}`,
            {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ rows: newTransfers }),
            }
          );
          if (!res.ok) throw new Error('Import API failed');
          const result = await res.json();

          // Reload danh s√°ch t·ª´ sheet sau import b·∫±ng fetchTransfers
          console.log('üîÑ Reloading data from sheet after import...');
          await fetchTransfers();

          setSnackbar({
            open: true,
            message: `Import: th√†nh c√¥ng ${result.imported}, tr√πng ${result.duplicated} / t·ªïng ${result.total}`,
            severity: 'success',
          });
        } catch (err) {
          console.error('Import to sheet error:', err);
          // Kh√¥ng set d·ªØ li·ªáu gi·∫£ khi import fail
          setSnackbar({
            open: true,
            message: `Import th·∫•t b·∫°i: ${err}`,
            severity: 'error',
          });
        }
      } catch {
        setSnackbar({
          open: true,
          message: 'L·ªói khi import file CSV',
          severity: 'error',
        });
      }
    };
    reader.readAsText(file);
  };

  const handleDownloadTemplate = () => {
    const csvContent = [
      'id,orderCode,hasVali,date,source,dest,quantity,state,transportStatus,note,pkgS,pkgM,pkgL,pkgBagSmall,pkgBagMedium,pkgBagLarge,pkgOther,totalPackages,volS,volM,volL,volBagSmall,volBagMedium,volBagLarge,volOther,totalVolume,dest_id,transfer_id,source_id,employee',
      // Template tr·ªëng - kh√¥ng c√≥ d·ªØ li·ªáu m·∫´u
    ].join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'transfer-template.csv';
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  // Filtered and paginated data
  const filteredTransfers = useMemo(() => {
    return transfers.filter((transfer) => {
      const matchesSearch =
        transfer.orderCode
          .toLowerCase()
          .includes(filters.search.toLowerCase()) ||
        transfer.note.toLowerCase().includes(filters.search.toLowerCase()) ||
        transfer.employee
          .toLowerCase()
          .includes(filters.search.toLowerCase()) ||
        transfer.hasVali.toLowerCase().includes(filters.search.toLowerCase());

      const matchesHasVali =
        !filters.hasVali || transfer.hasVali === filters.hasVali;
      const matchesStatus =
        !filters.status || transfer.state === filters.status;
      const matchesSource =
        !filters.source || transfer.source === filters.source;
      const matchesDest = !filters.dest || transfer.dest === filters.dest;
      const matchesTransportStatus =
        !filters.transportStatus ||
        transfer.transportStatus === filters.transportStatus;

      const transferDate = new Date(
        transfer.date.split('/').reverse().join('-')
      );
      const fromDate = filters.dateFrom ? new Date(filters.dateFrom) : null;
      const toDate = filters.dateTo ? new Date(filters.dateTo) : null;

      const matchesDateFrom = !fromDate || transferDate >= fromDate;
      const matchesDateTo = !toDate || transferDate <= toDate;

      return (
        matchesSearch &&
        matchesHasVali &&
        matchesStatus &&
        matchesTransportStatus &&
        matchesSource &&
        matchesDest &&
        matchesDateFrom &&
        matchesDateTo
      );
    });
  }, [transfers, filters]);

  const paginatedTransfers = useMemo(() => {
    const startIndex = page * rowsPerPage;
    return filteredTransfers.slice(startIndex, startIndex + rowsPerPage);
  }, [filteredTransfers, page, rowsPerPage]);

  // Get unique values for filter options
  const uniqueStatuses = useMemo(
    () => [...new Set(transfers.map((t) => t.state))],
    [transfers]
  );
  const uniqueTransportStatuses = useMemo(
    () =>
      [...new Set(transfers.map((t) => t.transportStatus || ''))].filter(
        Boolean
      ),
    [transfers]
  );
  const uniqueSources = useMemo(
    () => [...new Set(transfers.map((t) => t.source))],
    [transfers]
  );
  const uniqueDests = useMemo(
    () => [...new Set(transfers.map((t) => t.dest))],
    [transfers]
  );

  // Selection handlers
  // Selection handled by DataTable

  // Filter handlers
  const handleFilterChange = (field: string, value: string) => {
    setFilters((prev) => ({ ...prev, [field]: value }));
    setPage(0); // Reset to first page when filtering
  };

  const clearFilters = () => {
    setFilters({
      search: '',
      hasVali: '',
      status: '',
      transportStatus: '',
      source: '',
      dest: '',
      dateFrom: '',
      dateTo: '',
    });
    setPage(0);
  };

  // Date filter functions
  const handleDateFilterClick = (event: React.MouseEvent<HTMLElement>) => {
    setDateFilterAnchor(event.currentTarget);
  };

  const handleDateFilterClose = () => {
    setDateFilterAnchor(null);
    setShowCustomDateRange(false);
  };

  const applyDatePreset = (preset: string) => {
    const today = new Date();
    let dateFrom = '';
    let dateTo = '';

    switch (preset) {
      case 'today':
        dateFrom = today.toISOString().split('T')[0];
        dateTo = today.toISOString().split('T')[0];
        break;
      case 'yesterday': {
        const yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);
        dateFrom = yesterday.toISOString().split('T')[0];
        dateTo = yesterday.toISOString().split('T')[0];
        break;
      }
      case 'thisWeek': {
        const startOfWeek = new Date(today);
        startOfWeek.setDate(today.getDate() - today.getDay());
        const endOfWeek = new Date(today);
        endOfWeek.setDate(today.getDate() + (6 - today.getDay()));
        dateFrom = startOfWeek.toISOString().split('T')[0];
        dateTo = endOfWeek.toISOString().split('T')[0];
        break;
      }
      case 'lastWeek': {
        const lastWeekStart = new Date(today);
        lastWeekStart.setDate(today.getDate() - today.getDay() - 7);
        const lastWeekEnd = new Date(today);
        lastWeekEnd.setDate(today.getDate() - today.getDay() - 1);
        dateFrom = lastWeekStart.toISOString().split('T')[0];
        dateTo = lastWeekEnd.toISOString().split('T')[0];
        break;
      }
      case 'thisMonth': {
        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        const endOfMonth = new Date(
          today.getFullYear(),
          today.getMonth() + 1,
          0
        );
        dateFrom = startOfMonth.toISOString().split('T')[0];
        dateTo = endOfMonth.toISOString().split('T')[0];
        break;
      }
      case 'lastMonth': {
        const lastMonthStart = new Date(
          today.getFullYear(),
          today.getMonth() - 1,
          1
        );
        const lastMonthEnd = new Date(today.getFullYear(), today.getMonth(), 0);
        dateFrom = lastMonthStart.toISOString().split('T')[0];
        dateTo = lastMonthEnd.toISOString().split('T')[0];
        break;
      }
      case 'clear':
        dateFrom = '';
        dateTo = '';
        break;
    }

    setFilters((prev) => ({
      ...prev,
      dateFrom,
      dateTo,
    }));
    setShowCustomDateRange(false);
    handleDateFilterClose();
  };

  const getDateFilterLabel = () => {
    if (!filters.dateFrom && !filters.dateTo) return 'Ch·ªçn ng√†y';
    if (filters.dateFrom === filters.dateTo) {
      return new Date(filters.dateFrom).toLocaleDateString('vi-VN');
    }
    return `${new Date(filters.dateFrom).toLocaleDateString('vi-VN')} - ${new Date(filters.dateTo).toLocaleDateString('vi-VN')}`;
  };

  // Pagination handled by DataTable

  // Calculate statistics from transfers data
  const calculateStats = (transfers: Transfer[]) => {
    const stats = {
      pendingReport: 0,
      pendingTransfer: 0,
      inTransfer: 0,
      completed: 0,
      totalProducts: 0,
      totalPackages: 0,
      totalVolume: 0,
      // Ch·ªù b√°o ki·ªán details
      pendingReportWithLuggage: 0,
      pendingReportWithoutLuggage: 0,
      pendingReportProductsWithLuggage: 0,
      pendingReportProductsWithoutLuggage: 0,
      // Ch·ªù chuy·ªÉn giao details
      pendingTransferDeliveryPoints: 0,
      pendingTransferPackages: 0,
      pendingTransferVolume: 0,
    };

    // Track unique delivery addresses for pending transfers
    const pendingTransferAddresses = new Set();

    transfers.forEach((transfer) => {
      // L·∫•y ri√™ng hai ngu·ªìn tr·∫°ng th√°i ƒë·ªÉ ƒë·∫øm ch√≠nh x√°c
      const stateStatus = (transfer.state || '').trim();
      const transportStatus = (transfer.transportStatus || '').trim();

      // ∆Øu ti√™n ƒë·∫øm "ƒêang chuy·ªÉn giao" theo TT v·∫≠n chuy·ªÉn; c√°c nh√≥m kh√°c theo state
      let bucket:
        | 'pendingReport'
        | 'pendingTransfer'
        | 'inTransfer'
        | 'completed' = 'pendingReport';
      if (
        transportStatus === 'ƒêang chuy·ªÉn giao' ||
        stateStatus === 'ƒêang chuy·ªÉn giao' ||
        stateStatus === 'ƒêang chuy·ªÉn kho'
      ) {
        bucket = 'inTransfer';
      } else if (
        stateStatus === 'ƒê√£ chuy·ªÉn giao' ||
        stateStatus === 'Ho√†n th√†nh' ||
        stateStatus === 'ƒê√£ ho√†n th√†nh' ||
        transportStatus === 'ƒê√£ chuy·ªÉn giao' ||
        transportStatus === 'Ho√†n th√†nh' ||
        transportStatus === 'ƒê√£ ho√†n th√†nh'
      ) {
        bucket = 'completed';
      } else if (
        stateStatus === 'Ch·ªù chuy·ªÉn giao' ||
        stateStatus === 'Xu·∫•t chuy·ªÉn kho' ||
        transportStatus === 'Ch·ªù chuy·ªÉn giao'
      ) {
        bucket = 'pendingTransfer';
      } else {
        bucket = 'pendingReport';
      }

      if (bucket === 'pendingReport') {
        stats.pendingReport++;
        const hasLuggage =
          (Number(transfer.pkgS) || 0) +
            (Number(transfer.pkgM) || 0) +
            (Number(transfer.pkgL) || 0) +
            (Number(transfer.pkgBagSmall) || 0) +
            (Number(transfer.pkgBagMedium) || 0) +
            (Number(transfer.pkgBagLarge) || 0) +
            (Number(transfer.pkgOther) || 0) >
          0;
        if (hasLuggage) {
          stats.pendingReportWithLuggage++;
          stats.pendingReportProductsWithLuggage +=
            Number(transfer.quantity) || 0;
        } else {
          stats.pendingReportWithoutLuggage++;
          stats.pendingReportProductsWithoutLuggage +=
            Number(transfer.quantity) || 0;
        }
      } else if (bucket === 'pendingTransfer') {
        stats.pendingTransfer++;
        const deliveryAddress =
          `${transfer.address || ''} ${transfer.ward || ''} ${transfer.district || ''} ${transfer.province || ''}`.trim();
        if (deliveryAddress) {
          pendingTransferAddresses.add(deliveryAddress);
        }
      } else if (bucket === 'inTransfer') {
        stats.inTransfer++;
      } else if (bucket === 'completed') {
        stats.completed++;
      } else {
        stats.pendingReport++;
      }

      // Calculate totals
      stats.totalProducts += Number(transfer.quantity) || 0;

      // Calculate total packages
      const packages =
        (Number(transfer.pkgS) || 0) +
        (Number(transfer.pkgM) || 0) +
        (Number(transfer.pkgL) || 0) +
        (Number(transfer.pkgBagSmall) || 0) +
        (Number(transfer.pkgBagMedium) || 0) +
        (Number(transfer.pkgBagLarge) || 0) +
        (Number(transfer.pkgOther) || 0);
      stats.totalPackages += packages;

      // Calculate total volume
      const volume =
        (Number(transfer.volS) || 0) +
        (Number(transfer.volM) || 0) +
        (Number(transfer.volL) || 0) +
        (Number(transfer.volBagSmall) || 0) +
        (Number(transfer.volBagMedium) || 0) +
        (Number(transfer.volBagLarge) || 0) +
        (Number(transfer.volOther) || 0);
      stats.totalVolume += volume;

      // Calculate pending transfer specific totals
      if (
        stateStatus === 'Ch·ªù chuy·ªÉn giao' ||
        stateStatus === 'Xu·∫•t chuy·ªÉn kho' ||
        transportStatus === 'Ch·ªù chuy·ªÉn giao'
      ) {
        stats.pendingTransferPackages += packages;
        stats.pendingTransferVolume += volume;
      }
    });

    // Set unique delivery points count
    stats.pendingTransferDeliveryPoints = pendingTransferAddresses.size;

    return stats;
  };

  // Update fetchTransfers to calculate stats
  const fetchTransfers = async () => {
    console.log('üîç fetchTransfers called...');
    setLoading(true);
    try {
      const response = await fetch(
        '/api/transfers?spreadsheetId=18B1PIhCDmBWyHZytvOcfj_1QbYBwczLf1x1Qbu0E5As'
      );
      if (response.ok) {
        const data = await response.json();
        console.log('üîç Data loaded from API:', data);
        console.log('üîç Data length:', data.length);

        // Map ki·ªÉu s·ªë cho c√°c c·ªôt s·ªë
        const mapped: Transfer[] = (data as Array<Record<string, unknown>>).map(
          (r) => {
            return {
              id:
                getStringFrom(r, 'id') || getStringFrom(r, 'transfer_id') || '',
              orderCode: getStringFrom(r, 'orderCode'),
              hasVali: getStringFrom(r, 'hasVali'),
              date: getStringFrom(r, 'date'),
              source: getStringFrom(r, 'source'),
              dest: getStringFrom(r, 'dest'),
              quantity: getNumberFrom(r, 'quantity'),
              state: getStringFrom(r, 'state'),
              note: getStringFrom(r, 'note'),
              dest_id: getStringFrom(r, 'dest_id'),
              transfer_id:
                getStringFrom(r, 'transfer_id') || getStringFrom(r, 'id') || '',
              source_id: getStringFrom(r, 'source_id'),
              employee: getStringFrom(r, 'employee'),
              transportStatus:
                getStringFrom(r, 'transportStatus') || 'Ch·ªù b√°o ki·ªán',
              pkgS: getNumberFrom(r, 'pkgS'),
              pkgM: getNumberFrom(r, 'pkgM'),
              pkgL: getNumberFrom(r, 'pkgL'),
              pkgBagSmall: getNumberFrom(r, 'pkgBagSmall'),
              pkgBagMedium: getNumberFrom(r, 'pkgBagMedium'),
              pkgBagLarge: getNumberFrom(r, 'pkgBagLarge'),
              pkgOther: getNumberFrom(r, 'pkgOther'),
              volS: getNumberFrom(r, 'volS'),
              volM: getNumberFrom(r, 'volM'),
              volL: getNumberFrom(r, 'volL'),
              volBagSmall: getNumberFrom(r, 'volBagSmall'),
              volBagMedium: getNumberFrom(r, 'volBagMedium'),
              volBagLarge: getNumberFrom(r, 'volBagLarge'),
              volOther: getNumberFrom(r, 'volOther'),
              // Th√™m c√°c c·ªôt ƒë·ªãa ƒëi·ªÉm
              address: getStringFrom(r, 'address'),
              ward: getStringFrom(r, 'ward'),
              district: getStringFrom(r, 'district'),
              province: getStringFrom(r, 'province'),
            };
          }
        );

        console.log('üîç Setting transfers from fetchTransfers:', mapped);
        console.log('üîç Transfers count from fetchTransfers:', mapped.length);
        setTransfers(mapped);
        setStats(calculateStats(mapped));
      }
    } catch (error) {
      console.error('Error fetching transfers:', error);
      setTransfers([]);
    } finally {
      setLoading(false);
    }
  };

  // Load data on component mount
  useEffect(() => {
    console.log('üîç Component mounted, calling fetchTransfers...');
    fetchTransfers();
  }, []);

  return (
    <Box
      sx={{
        maxWidth: '100%',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        gap: { xs: 0.5, sm: 1 },
        overflow: 'auto',
        p: { xs: 1, sm: 1.5, md: 2 },
        backgroundColor: 'transparent',
      }}
    >
      {/* Statistics Cards - Centered Fixed Height */}
      <Box
        sx={{
          height: { xs: '100px', sm: '120px', md: '140px' },
          flexShrink: 0,
          mb: { xs: 0.5, sm: 1 },
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        <Grid
          container
          spacing={{ xs: 1, sm: 1.5, md: 2 }}
          sx={{
            height: '100%',
            maxWidth: sidebarOpen ? '1200px' : '1400px',
            mx: 'auto',
            '& .MuiGrid-item': {
              height: '100%',
              display: 'flex',
            },
            '& .MuiCard-root': {
              height: '100%',
              width: '100%',
              display: 'flex',
              flexDirection: 'column',
              minHeight: 'unset',
            },
            '& .MuiCardContent-root': {
              flex: 1,
              display: 'flex',
              flexDirection: 'column',
              p: { xs: 1, sm: 1.5 },
            },
          }}
        >
          {/* Card 1: Ch·ªù b√°o ki·ªán */}
          <Grid item xs={6} sm={6} lg={3}>
            <Card
              sx={{
                height: '100%',
                transition: 'all 0.3s ease',
                background: 'linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%)',
                border: '1px solid #e9ecef',
                borderRadius: 3,
                position: 'relative',
                '&:hover': {
                  transform: 'translateY(-3px)',
                  boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
                  background:
                    'linear-gradient(135deg, #ffffff 0%, #fff3e0 100%)',
                },
                '&::before': {
                  content: '""',
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  right: 0,
                  height: '4px',
                  background: 'linear-gradient(90deg, #f57c00, #ff9800)',
                  borderRadius: '3px 3px 0 0',
                },
              }}
            >
              <CardContent>
                <Box
                  display="flex"
                  alignItems="flex-start"
                  sx={{ height: '100%' }}
                >
                  <PendingIcon
                    sx={{
                      color: '#f57c00',
                      fontSize: { xs: 24, sm: 28, md: 32 },
                      mr: { xs: 0.75, sm: 1 },
                      flexShrink: 0,
                      mt: 0.25,
                    }}
                  />
                  <Box
                    sx={{
                      minWidth: 0,
                      flex: 1,
                      display: 'flex',
                      flexDirection: 'column',
                      justifyContent: 'space-between',
                      height: '100%',
                    }}
                  >
                    <Typography
                      color="textSecondary"
                      gutterBottom
                      sx={{
                        fontSize: { xs: '0.7rem', sm: '0.8rem' },
                        fontWeight: 500,
                        mb: 0.5,
                      }}
                    >
                      Ch·ªù b√°o ki·ªán
                    </Typography>
                    <Typography
                      variant="h5"
                      component="div"
                      sx={{
                        fontSize: {
                          xs: '1.25rem',
                          sm: '1.5rem',
                          md: '1.75rem',
                        },
                        fontWeight: 600,
                        mb: 0.5,
                      }}
                    >
                      {stats.pendingReport}
                    </Typography>
                    <Box sx={{ mt: 'auto' }}>
                      <Typography
                        variant="caption"
                        color="textSecondary"
                        display="block"
                        sx={{
                          fontSize: { xs: '0.6rem', sm: '0.7rem' },
                          lineHeight: 1.2,
                          mb: 0.25,
                        }}
                      >
                        C√≥ vali: {stats.pendingReportWithLuggage} | Kh√¥ng vali:{' '}
                        {stats.pendingReportWithoutLuggage}
                      </Typography>
                      <Typography
                        variant="caption"
                        color="textSecondary"
                        display="block"
                        sx={{
                          fontSize: { xs: '0.6rem', sm: '0.7rem' },
                          lineHeight: 1.2,
                        }}
                      >
                        SP c√≥ vali:{' '}
                        {stats.pendingReportProductsWithLuggage.toLocaleString()}{' '}
                        | SP kh√¥ng vali:{' '}
                        {stats.pendingReportProductsWithoutLuggage.toLocaleString()}
                      </Typography>
                    </Box>
                  </Box>
                </Box>
              </CardContent>
            </Card>
          </Grid>

          {/* Card 2: Ch·ªù chuy·ªÉn giao */}
          <Grid item xs={6} sm={6} lg={3}>
            <Card
              sx={{
                height: '100%',
                transition: 'all 0.3s ease',
                background: 'linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%)',
                border: '1px solid #e9ecef',
                borderRadius: 3,
                position: 'relative',
                '&:hover': {
                  transform: 'translateY(-3px)',
                  boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
                  background:
                    'linear-gradient(135deg, #ffffff 0%, #e8f5e8 100%)',
                },
                '&::before': {
                  content: '""',
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  right: 0,
                  height: '4px',
                  background: 'linear-gradient(90deg, #388e3c, #4caf50)',
                  borderRadius: '3px 3px 0 0',
                },
              }}
            >
              <CardContent>
                <Box
                  display="flex"
                  alignItems="flex-start"
                  sx={{ height: '100%' }}
                >
                  <ScheduleIcon
                    sx={{
                      color: '#388e3c',
                      fontSize: { xs: 24, sm: 28, md: 32 },
                      mr: { xs: 0.75, sm: 1 },
                      flexShrink: 0,
                      mt: 0.25,
                    }}
                  />
                  <Box
                    sx={{
                      minWidth: 0,
                      flex: 1,
                      display: 'flex',
                      flexDirection: 'column',
                      justifyContent: 'space-between',
                      height: '100%',
                    }}
                  >
                    <Typography
                      color="textSecondary"
                      gutterBottom
                      sx={{
                        fontSize: { xs: '0.7rem', sm: '0.8rem' },
                        fontWeight: 500,
                        mb: 0.5,
                      }}
                    >
                      Ch·ªù chuy·ªÉn giao
                    </Typography>
                    <Typography
                      variant="h5"
                      component="div"
                      sx={{
                        fontSize: {
                          xs: '1.25rem',
                          sm: '1.5rem',
                          md: '1.75rem',
                        },
                        fontWeight: 600,
                        mb: 0.5,
                      }}
                    >
                      {stats.pendingTransfer}
                    </Typography>
                    <Box sx={{ mt: 'auto' }}>
                      <Typography
                        variant="caption"
                        color="textSecondary"
                        display="block"
                        sx={{
                          fontSize: { xs: '0.6rem', sm: '0.7rem' },
                          lineHeight: 1.2,
                          mb: 0.25,
                        }}
                      >
                        ƒêi·ªÉm giao: {stats.pendingTransferDeliveryPoints} | Ki·ªán:{' '}
                        {stats.pendingTransferPackages.toLocaleString()}
                      </Typography>
                      <Typography
                        variant="caption"
                        color="textSecondary"
                        display="block"
                        sx={{
                          fontSize: { xs: '0.6rem', sm: '0.7rem' },
                          lineHeight: 1.2,
                        }}
                      >
                        Kh·ªëi:{' '}
                        {Number(stats.pendingTransferVolume).toLocaleString(
                          'vi-VN',
                          { minimumFractionDigits: 2, maximumFractionDigits: 2 }
                        )}{' '}
                        m¬≥
                      </Typography>
                    </Box>
                  </Box>
                </Box>
              </CardContent>
            </Card>
          </Grid>

          {/* Card 3: ƒêang chuy·ªÉn giao */}
          <Grid item xs={6} sm={6} lg={3}>
            <Card
              sx={{
                height: '100%',
                transition: 'all 0.3s ease',
                background: 'linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%)',
                border: '1px solid #e9ecef',
                borderRadius: 3,
                position: 'relative',
                '&:hover': {
                  transform: 'translateY(-3px)',
                  boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
                  background:
                    'linear-gradient(135deg, #ffffff 0%, #e3f2fd 100%)',
                },
                '&::before': {
                  content: '""',
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  right: 0,
                  height: '4px',
                  background: 'linear-gradient(90deg, #1976d2, #2196f3)',
                  borderRadius: '3px 3px 0 0',
                },
              }}
            >
              <CardContent>
                <Box
                  display="flex"
                  alignItems="flex-start"
                  sx={{ height: '100%' }}
                >
                  <ShippingIcon
                    sx={{
                      color: '#1976d2',
                      fontSize: { xs: 24, sm: 28, md: 32 },
                      mr: { xs: 0.75, sm: 1 },
                      flexShrink: 0,
                      mt: 0.25,
                    }}
                  />
                  <Box
                    sx={{
                      minWidth: 0,
                      flex: 1,
                      display: 'flex',
                      flexDirection: 'column',
                      justifyContent: 'space-between',
                      height: '100%',
                    }}
                  >
                    <Typography
                      color="textSecondary"
                      gutterBottom
                      sx={{
                        fontSize: { xs: '0.7rem', sm: '0.8rem' },
                        fontWeight: 500,
                        mb: 0.5,
                      }}
                    >
                      ƒêang chuy·ªÉn giao
                    </Typography>
                    <Typography
                      variant="h5"
                      component="div"
                      sx={{
                        fontSize: {
                          xs: '1.25rem',
                          sm: '1.5rem',
                          md: '1.75rem',
                        },
                        fontWeight: 600,
                      }}
                    >
                      {stats.inTransfer}
                    </Typography>
                  </Box>
                </Box>
              </CardContent>
            </Card>
          </Grid>

          {/* Card 4: ƒê√£ chuy·ªÉn giao */}
          <Grid item xs={6} sm={6} lg={3}>
            <Card
              sx={{
                height: '100%',
                transition: 'all 0.3s ease',
                background: 'linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%)',
                border: '1px solid #e9ecef',
                borderRadius: 3,
                position: 'relative',
                '&:hover': {
                  transform: 'translateY(-3px)',
                  boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
                  background:
                    'linear-gradient(135deg, #ffffff 0%, #f3e5f5 100%)',
                },
                '&::before': {
                  content: '""',
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  right: 0,
                  height: '4px',
                  background: 'linear-gradient(90deg, #7b1fa2, #9c27b0)',
                  borderRadius: '3px 3px 0 0',
                },
              }}
            >
              <CardContent>
                <Box
                  display="flex"
                  alignItems="flex-start"
                  sx={{ height: '100%' }}
                >
                  <CheckCircleIcon
                    sx={{
                      color: '#7b1fa2',
                      fontSize: { xs: 24, sm: 28, md: 32 },
                      mr: { xs: 0.75, sm: 1 },
                      flexShrink: 0,
                      mt: 0.25,
                    }}
                  />
                  <Box
                    sx={{
                      minWidth: 0,
                      flex: 1,
                      display: 'flex',
                      flexDirection: 'column',
                      justifyContent: 'space-between',
                      height: '100%',
                    }}
                  >
                    <Typography
                      color="textSecondary"
                      gutterBottom
                      sx={{
                        fontSize: { xs: '0.7rem', sm: '0.8rem' },
                        fontWeight: 500,
                        mb: 0.5,
                      }}
                    >
                      ƒê√£ chuy·ªÉn giao
                    </Typography>
                    <Typography
                      variant="h5"
                      component="div"
                      sx={{
                        fontSize: {
                          xs: '1.25rem',
                          sm: '1.5rem',
                          md: '1.75rem',
                        },
                        fontWeight: 600,
                      }}
                    >
                      {stats.completed}
                    </Typography>
                  </Box>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Box>

      {/* Header actions - Left aligned */}
      <Box
        display="flex"
        justifyContent="flex-start"
        alignItems="center"
        mb={{ xs: 0.25, sm: 0.5 }}
        flexWrap="wrap"
        gap={1}
        sx={{
          minHeight: { xs: '36px', sm: '40px' },
          maxWidth: sidebarOpen ? '1200px' : '1400px',
          mx: 'auto',
          width: '100%',
          px: { xs: 0.75, sm: 1, md: 1.5 },
        }}
      >
        {/* Actions */}
        <Box
          display="flex"
          gap={{ xs: 0.5, sm: 1 }}
          flexWrap="wrap"
          justifyContent="flex-start"
        >
          <ActionButton
            variant="secondary"
            onClick={() => setShowFilters(!showFilters)}
            startIcon={<ActionIcons.filter />}
            size="small"
            sx={{
              fontSize: { xs: '0.75rem', sm: '0.875rem' },
              px: { xs: 1, sm: 2 },
            }}
          >
            {showFilters ? '·∫®n l·ªçc' : 'L·ªçc'}
          </ActionButton>
          <ActionButton
            variant="primary"
            onClick={() => setOpen(true)}
            startIcon={<ActionIcons.add />}
            size="small"
            sx={{
              fontSize: { xs: '0.75rem', sm: '0.875rem' },
              px: { xs: 1, sm: 2 },
            }}
          >
            Th√™m phi·∫øu
          </ActionButton>
        </Box>
      </Box>

      {/* Filter Section - Professional Design */}
      {showFilters && (
        <Paper
          sx={{
            p: { xs: 1.5, sm: 2 },
            mb: { xs: 1, sm: 1.5 },
            backgroundColor: 'white',
            border: '1px solid',
            borderColor: 'grey.200',
            borderRadius: 3,
            boxShadow: '0 4px 12px rgba(0,0,0,0.08)',
            maxWidth: sidebarOpen ? '1200px' : '1400px',
            mx: 'auto',
            width: '100%',
            position: 'relative',
            '&::before': {
              content: '""',
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              height: '3px',
              background: 'linear-gradient(90deg, #1976d2, #42a5f5)',
              borderRadius: '3px 3px 0 0',
            },
          }}
        >
          {/* Filter Header */}
          <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              mb: 2,
              pb: 1,
              borderBottom: '1px solid',
              borderColor: 'grey.100',
            }}
          >
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <FilterListIcon
                sx={{
                  color: 'primary.main',
                  fontSize: '1.2rem',
                }}
              />
              <Typography
                variant="h6"
                sx={{
                  fontSize: '1rem',
                  fontWeight: 600,
                  color: 'text.primary',
                }}
              >
                B·ªô l·ªçc n√¢ng cao
              </Typography>
            </Box>
            <ActionButton
              variant="secondary"
              onClick={() => clearFilters()}
              size="small"
              sx={{
                fontSize: '0.75rem',
                color: 'error.main',
                '&:hover': {
                  backgroundColor: 'error.50',
                },
              }}
            >
              X√≥a t·∫•t c·∫£
            </ActionButton>
          </Box>

          {/* Filter Grid - Single Row */}
          <Grid container spacing={1} sx={{ width: '100%' }}>
            <Grid item xs={12} sm={6} md={2}>
              <TextField
                fullWidth
                size="small"
                label="T√¨m ki·∫øm"
                placeholder="M√£ phi·∫øu, s·∫£n ph·∫©m, nh√¢n vi√™n..."
                value={filters.search}
                onChange={(e) => handleFilterChange('search', e.target.value)}
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: 2,
                    backgroundColor: 'white',
                    transition: 'all 0.2s ease-in-out',
                    '&:hover': {
                      backgroundColor: 'grey.50',
                    },
                    '&.Mui-focused': {
                      backgroundColor: 'primary.50',
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'primary.main',
                        borderWidth: 2,
                      },
                    },
                  },
                  '& .MuiInputLabel-root': {
                    color: 'text.secondary',
                    fontWeight: 500,
                    fontSize: { xs: '0.5rem', sm: '0.55rem' },
                    '&.Mui-focused': {
                      color: 'primary.main',
                      fontWeight: 600,
                    },
                  },
                  '& .MuiOutlinedInput-input': {
                    fontSize: { xs: '0.55rem', sm: '0.6rem' },
                  },
                }}
              />
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <FormControl fullWidth size="small">
                <InputLabel>C√≥ vali</InputLabel>
                <Select
                  value={filters.hasVali || ''}
                  label="C√≥ vali"
                  onChange={(e) =>
                    handleFilterChange('hasVali', e.target.value)
                  }
                  sx={{
                    '& .MuiSelect-select': {
                      fontSize: { xs: '0.55rem', sm: '0.6rem' },
                    },
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                      backgroundColor: 'white',
                      transition: 'all 0.2s ease-in-out',
                      '&:hover': {
                        backgroundColor: 'grey.50',
                      },
                      '&.Mui-focused': {
                        backgroundColor: 'primary.50',
                        '& .MuiOutlinedInput-notchedOutline': {
                          borderColor: 'primary.main',
                          borderWidth: 2,
                        },
                      },
                    },
                    '& .MuiInputLabel-root': {
                      color: 'text.secondary',
                      fontWeight: 500,
                      fontSize: { xs: '0.65rem', sm: '0.7rem' },
                      '&.Mui-focused': {
                        color: 'primary.main',
                        fontWeight: 600,
                      },
                    },
                  }}
                >
                  <MenuItem
                    value=""
                    sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                  >
                    T·∫•t c·∫£
                  </MenuItem>
                  <MenuItem
                    value="C√≥ vali"
                    sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                  >
                    C√≥ vali
                  </MenuItem>
                  <MenuItem
                    value="Kh√¥ng vali"
                    sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                  >
                    Kh√¥ng vali
                  </MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <FormControl fullWidth size="small">
                <InputLabel>Tr·∫°ng th√°i</InputLabel>
                <Select
                  value={filters.status}
                  label="Tr·∫°ng th√°i"
                  onChange={(e) => handleFilterChange('status', e.target.value)}
                  sx={{
                    '& .MuiSelect-select': {
                      fontSize: { xs: '0.55rem', sm: '0.6rem' },
                    },
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                      backgroundColor: 'white',
                      transition: 'all 0.2s ease-in-out',
                      '&:hover': {
                        backgroundColor: 'grey.50',
                      },
                      '&.Mui-focused': {
                        backgroundColor: 'primary.50',
                        '& .MuiOutlinedInput-notchedOutline': {
                          borderColor: 'primary.main',
                          borderWidth: 2,
                        },
                      },
                    },
                    '& .MuiInputLabel-root': {
                      color: 'text.secondary',
                      fontWeight: 500,
                      fontSize: { xs: '0.5rem', sm: '0.55rem' },
                      '&.Mui-focused': {
                        color: 'primary.main',
                        fontWeight: 600,
                      },
                    },
                  }}
                >
                  <MenuItem
                    value=""
                    sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                  >
                    T·∫•t c·∫£
                  </MenuItem>
                  {uniqueStatuses.map((status) => (
                    <MenuItem
                      key={status}
                      value={status}
                      sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                    >
                      {status}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <FormControl fullWidth size="small">
                <InputLabel>TT v·∫≠n chuy·ªÉn</InputLabel>
                <Select
                  value={filters.transportStatus}
                  label="TT v·∫≠n chuy·ªÉn"
                  onChange={(e) =>
                    handleFilterChange('transportStatus', e.target.value)
                  }
                  sx={{
                    '& .MuiSelect-select': {
                      fontSize: { xs: '0.55rem', sm: '0.6rem' },
                    },
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                      backgroundColor: 'white',
                      transition: 'all 0.2s ease-in-out',
                      '&:hover': { backgroundColor: 'grey.50' },
                      '&.Mui-focused': {
                        backgroundColor: 'primary.50',
                        '& .MuiOutlinedInput-notchedOutline': {
                          borderColor: 'primary.main',
                          borderWidth: 2,
                        },
                      },
                    },
                    '& .MuiInputLabel-root': {
                      color: 'text.secondary',
                      fontWeight: 500,
                      fontSize: { xs: '0.65rem', sm: '0.7rem' },
                      '&.Mui-focused': {
                        color: 'primary.main',
                        fontWeight: 600,
                      },
                    },
                  }}
                >
                  <MenuItem
                    value=""
                    sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                  >
                    T·∫•t c·∫£
                  </MenuItem>
                  {uniqueTransportStatuses.map((status) => (
                    <MenuItem
                      key={status}
                      value={status}
                      sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                    >
                      {status}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <FormControl fullWidth size="small">
                <InputLabel>Kho ngu·ªìn</InputLabel>
                <Select
                  value={filters.source}
                  label="Kho ngu·ªìn"
                  onChange={(e) => handleFilterChange('source', e.target.value)}
                  sx={{
                    '& .MuiSelect-select': {
                      fontSize: { xs: '0.55rem', sm: '0.6rem' },
                    },
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                      backgroundColor: 'white',
                      transition: 'all 0.2s ease-in-out',
                      '&:hover': {
                        backgroundColor: 'grey.50',
                      },
                      '&.Mui-focused': {
                        backgroundColor: 'primary.50',
                        '& .MuiOutlinedInput-notchedOutline': {
                          borderColor: 'primary.main',
                          borderWidth: 2,
                        },
                      },
                    },
                    '& .MuiInputLabel-root': {
                      color: 'text.secondary',
                      fontWeight: 500,
                      fontSize: { xs: '0.5rem', sm: '0.55rem' },
                      '&.Mui-focused': {
                        color: 'primary.main',
                        fontWeight: 600,
                      },
                    },
                  }}
                >
                  <MenuItem
                    value=""
                    sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                  >
                    T·∫•t c·∫£
                  </MenuItem>
                  {uniqueSources.map((source) => (
                    <MenuItem
                      key={source}
                      value={source}
                      sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                    >
                      {source}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <FormControl fullWidth size="small">
                <InputLabel>Kho ƒë√≠ch</InputLabel>
                <Select
                  value={filters.dest}
                  label="Kho ƒë√≠ch"
                  onChange={(e) => handleFilterChange('dest', e.target.value)}
                  sx={{
                    '& .MuiSelect-select': {
                      fontSize: { xs: '0.55rem', sm: '0.6rem' },
                    },
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                      backgroundColor: 'white',
                      transition: 'all 0.2s ease-in-out',
                      '&:hover': {
                        backgroundColor: 'grey.50',
                      },
                      '&.Mui-focused': {
                        backgroundColor: 'primary.50',
                        '& .MuiOutlinedInput-notchedOutline': {
                          borderColor: 'primary.main',
                          borderWidth: 2,
                        },
                      },
                    },
                    '& .MuiInputLabel-root': {
                      color: 'text.secondary',
                      fontWeight: 500,
                      fontSize: { xs: '0.5rem', sm: '0.55rem' },
                      '&.Mui-focused': {
                        color: 'primary.main',
                        fontWeight: 600,
                      },
                    },
                  }}
                >
                  <MenuItem
                    value=""
                    sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                  >
                    T·∫•t c·∫£
                  </MenuItem>
                  {uniqueDests.map((dest) => (
                    <MenuItem
                      key={dest}
                      value={dest}
                      sx={{ fontSize: { xs: '0.55rem', sm: '0.6rem' } }}
                    >
                      {dest}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <ActionButton
                fullWidth
                variant="secondary"
                size="small"
                onClick={handleDateFilterClick}
                startIcon={<Icon name="calendar" />}
                endIcon={<Icon name="expand" />}
                sx={{
                  borderRadius: 2,
                  backgroundColor: 'white',
                  borderColor:
                    filters.dateFrom || filters.dateTo
                      ? 'primary.main'
                      : '#e0e0e0',
                  color:
                    filters.dateFrom || filters.dateTo
                      ? 'primary.main'
                      : 'text.secondary',
                  fontWeight: 500,
                  textTransform: 'none',
                  justifyContent: 'space-between',
                  px: 2,
                  fontSize: { xs: '0.55rem', sm: '0.6rem' },
                  '&:hover': {
                    borderColor: 'primary.main',
                    backgroundColor: 'primary.50',
                  },
                }}
              >
                {getDateFilterLabel()}
              </ActionButton>
            </Grid>
            <Grid item xs={12} sm={6} md={2}>
              <ActionButton
                fullWidth
                variant="error"
                size="small"
                onClick={clearFilters}
                startIcon={<ActionIcons.clear />}
                sx={{
                  borderRadius: 2,
                  textTransform: 'none',
                  fontWeight: 600,
                  borderWidth: 2,
                  px: 1,
                  minWidth: 'auto',
                  fontSize: { xs: '0.55rem', sm: '0.6rem' },
                  '&:hover': {
                    borderWidth: 2,
                    backgroundColor: 'error.50',
                    transform: 'translateY(-1px)',
                    boxShadow: '0 4px 12px rgba(211, 47, 47, 0.2)',
                  },
                  transition: 'all 0.2s ease-in-out',
                }}
              >
                X√≥a
              </ActionButton>
            </Grid>
          </Grid>
        </Paper>
      )}

      {/* Date Filter Popover */}
      <Popover
        open={Boolean(dateFilterAnchor)}
        anchorEl={dateFilterAnchor}
        onClose={handleDateFilterClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
        PaperProps={{
          sx: {
            mt: 1,
            borderRadius: 2,
            boxShadow: '0 4px 20px rgba(0,0,0,0.15)',
            minWidth: 250,
          },
        }}
      >
        <List sx={{ py: 0 }}>
          <ListItem sx={{ py: 1 }}>
            <Typography variant="subtitle2" color="primary">
              Ch·ªçn kho·∫£ng th·ªùi gian
            </Typography>
          </ListItem>
          <Divider />
          <ListItemButton
            onClick={() => applyDatePreset('today')}
            sx={{ py: 1.5 }}
          >
            <ListItemText
              primary="H√¥m nay"
              primaryTypographyProps={{ fontSize: '0.9rem' }}
            />
          </ListItemButton>
          <ListItemButton
            onClick={() => applyDatePreset('yesterday')}
            sx={{ py: 1.5 }}
          >
            <ListItemText
              primary="H√¥m qua"
              primaryTypographyProps={{ fontSize: '0.9rem' }}
            />
          </ListItemButton>
          <ListItemButton
            onClick={() => applyDatePreset('thisWeek')}
            sx={{ py: 1.5 }}
          >
            <ListItemText
              primary="Tu·∫ßn n√†y"
              primaryTypographyProps={{ fontSize: '0.9rem' }}
            />
          </ListItemButton>
          <ListItemButton
            onClick={() => applyDatePreset('lastWeek')}
            sx={{ py: 1.5 }}
          >
            <ListItemText
              primary="Tu·∫ßn tr∆∞·ªõc"
              primaryTypographyProps={{ fontSize: '0.9rem' }}
            />
          </ListItemButton>
          <ListItemButton
            onClick={() => applyDatePreset('thisMonth')}
            sx={{ py: 1.5 }}
          >
            <ListItemText
              primary="Th√°ng n√†y"
              primaryTypographyProps={{ fontSize: '0.9rem' }}
            />
          </ListItemButton>
          <ListItemButton
            onClick={() => applyDatePreset('lastMonth')}
            sx={{ py: 1.5 }}
          >
            <ListItemText
              primary="Th√°ng tr∆∞·ªõc"
              primaryTypographyProps={{ fontSize: '0.9rem' }}
            />
          </ListItemButton>
          <Divider />
          <ListItemButton
            onClick={() => setShowCustomDateRange(!showCustomDateRange)}
            sx={{ py: 1.5 }}
          >
            <ListItemText
              primary="Kho·∫£ng th·ªùi gian"
              primaryTypographyProps={{ fontSize: '0.9rem' }}
            />
          </ListItemButton>
          {showCustomDateRange && (
            <Box sx={{ p: 2, backgroundColor: 'grey.50' }}>
              <Grid container spacing={1}>
                <Grid item xs={6}>
                  <TextField
                    fullWidth
                    size="small"
                    label="T·ª´ ng√†y"
                    type="date"
                    value={filters.dateFrom}
                    onChange={(e) =>
                      handleFilterChange('dateFrom', e.target.value)
                    }
                    InputLabelProps={{ shrink: true }}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 1,
                        backgroundColor: 'white',
                      },
                    }}
                  />
                </Grid>
                <Grid item xs={6}>
                  <TextField
                    fullWidth
                    size="small"
                    label="ƒê·∫øn ng√†y"
                    type="date"
                    value={filters.dateTo}
                    onChange={(e) =>
                      handleFilterChange('dateTo', e.target.value)
                    }
                    InputLabelProps={{ shrink: true }}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 1,
                        backgroundColor: 'white',
                      },
                    }}
                  />
                </Grid>
              </Grid>
            </Box>
          )}
          <Divider />
          <ListItemButton
            onClick={() => applyDatePreset('clear')}
            sx={{ py: 1.5 }}
          >
            <ListItemText
              primary="X√≥a b·ªô l·ªçc ng√†y"
              primaryTypographyProps={{
                fontSize: '0.9rem',
                color: 'error.main',
              }}
            />
          </ListItemButton>
        </List>
      </Popover>

      {/* Action Toolbar */}
      <Toolbar
        sx={{
          pl: { sm: 1.5 },
          pr: { xs: 1, sm: 1 },
          mb: 1.5,
          backgroundColor: 'white',
          border: '1px solid #e0e0e0',
          borderRadius: 1,
        }}
      >
        <Box sx={{ flexGrow: 1 }}>
          <Typography
            variant="body2"
            color="text.secondary"
            sx={{ fontSize: '0.8rem' }}
          >
            {transfers.length === 0
              ? 'Ch∆∞a c√≥ d·ªØ li·ªáu phi·∫øu chuy·ªÉn kho'
              : `Hi·ªÉn th·ªã ${filteredTransfers.length} / ${transfers.length} phi·∫øu chuy·ªÉn kho`}
            {selected.length > 0 && ` (${selected.length} ƒë√£ ch·ªçn)`}
          </Typography>
        </Box>
        <Tooltip title="In so·∫°n h√†ng (nhi·ªÅu phi·∫øu)">
          <IconButton
            onClick={handlePrintMultipleTransfers}
            color="success"
            disabled={selected.length === 0}
          >
            <PrintIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="In phi·∫øu (nhi·ªÅu phi·∫øu)">
          <IconButton
            onClick={handlePrintMultiplePicking}
            color="primary"
            disabled={selected.length === 0}
          >
            <PrintIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="Gridview (nhi·ªÅu phi·∫øu)">
          <span>
            <IconButton
              onClick={openGridViewForSelected}
              disabled={selected.length === 0}
              color="default"
            >
              <GridViewIcon />
            </IconButton>
          </span>
        </Tooltip>
        <Tooltip title="T·∫£i template CSV">
          <IconButton onClick={handleDownloadTemplate} color="primary">
            <DownloadIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="Import CSV">
          <IconButton onClick={handleImportCSV} color="primary">
            <UploadIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="L√†m m·ªõi">
          <IconButton
            onClick={handleRefresh}
            disabled={loading}
            color="primary"
          >
            <RefreshIcon />
          </IconButton>
        </Tooltip>
      </Toolbar>

      <input
        type="file"
        ref={fileInputRef}
        accept=".csv"
        style={{ display: 'none' }}
        onChange={handleFileUpload}
      />

      {/* DataTable Section - Full Height with Scroll */}
      <Box
        sx={{
          flex: 1,
          display: 'flex',
          flexDirection: 'column',
          minHeight: 0,
          overflow: 'visible',
          position: 'relative',
          maxWidth: sidebarOpen ? '1200px' : '1400px',
          mx: 'auto',
          backgroundColor: 'transparent',
        }}
      >
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            backgroundColor: 'transparent',
            minHeight: 0,
          }}
        >
          <DataTable
            title={`Danh s√°ch phi·∫øu chuy·ªÉn kho (${filteredTransfers.length})`}
            columns={[
              {
                id: 'orderCode',
                label: 'M√É PHI·∫æU',
                width: 150,
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  return (
                    <Box
                      sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}
                    >
                      <Avatar
                        sx={{
                          width: { xs: 24, sm: 28 },
                          height: { xs: 24, sm: 28 },
                          bgcolor: 'primary.main',
                          borderColor: 'primary.main',
                          fontSize: { xs: '0.65rem', sm: '0.7rem' },
                          fontWeight: 600,
                        }}
                      >
                        {row.orderCode ? row.orderCode[0] : 'T'}
                      </Avatar>
                      <Box>
                        <Typography
                          variant="body2"
                          sx={{
                            fontFamily: 'monospace',
                            fontWeight: 600,
                            fontSize: { xs: '0.65rem', sm: '0.7rem' },
                            color: 'text.primary',
                            letterSpacing: '0.3px',
                            cursor: 'pointer',
                            '&:hover': {
                              color: 'primary.main',
                            },
                          }}
                          onClick={() => openGridView(row)}
                        >
                          {row.orderCode || '‚Äî'}
                        </Typography>
                        <Typography
                          variant="caption"
                          sx={{
                            color: 'text.secondary',
                            fontSize: { xs: '0.55rem', sm: '0.6rem' },
                            fontWeight: 500,
                          }}
                        >
                          ID: {row.transfer_id || '‚Äî'}
                        </Typography>
                      </Box>
                    </Box>
                  );
                },
              },
              {
                id: 'hasVali',
                label: 'C√ì VALI',
                width: 80,
                align: 'center',
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  return (
                    <Typography
                      sx={{
                        fontSize: { xs: '0.65rem', sm: '0.7rem' },
                        fontWeight: 500,
                        color: row.hasVali ? 'success.main' : 'error.main',
                        backgroundColor: row.hasVali
                          ? 'success.50'
                          : 'error.50',
                        border: '1px solid',
                        borderColor: row.hasVali
                          ? 'success.main'
                          : 'error.main',
                        borderRadius: 1,
                        px: 0.5,
                        py: 0.25,
                        textAlign: 'center',
                        display: 'inline-block',
                        minWidth: 'fit-content',
                      }}
                    >
                      {row.hasVali ? 'C√≥ vali' : 'Kh√¥ng vali'}
                    </Typography>
                  );
                },
              },
              {
                id: 'date',
                label: 'TH·ªúI GIAN',
                width: 80,
                align: 'center',
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  return (
                    <Typography
                      sx={{
                        fontSize: { xs: '0.65rem', sm: '0.7rem' },
                        fontWeight: 500,
                        color: 'text.primary',
                      }}
                    >
                      {row.date || '‚Äî'}
                    </Typography>
                  );
                },
              },
              {
                id: 'source',
                label: 'KHO NGU·ªíN',
                width: 130,
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  return (
                    <Box>
                      <Typography
                        variant="body2"
                        sx={{ fontSize: '0.65rem', fontWeight: 500 }}
                      >
                        {row.source?.split(' - ')[0] || row.source || '‚Äî'}
                      </Typography>
                      {row.source?.includes(' - ') && (
                        <Typography
                          variant="caption"
                          color="text.secondary"
                          sx={{ fontSize: '0.55rem' }}
                        >
                          {row.source.split(' - ').slice(1).join(' - ')}
                        </Typography>
                      )}
                    </Box>
                  );
                },
              },
              {
                id: 'dest',
                label: 'KHO ƒê√çCH',
                width: 130,
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  return (
                    <Box>
                      <Typography
                        variant="body2"
                        sx={{ fontSize: '0.65rem', fontWeight: 500 }}
                      >
                        {row.dest?.split(' - ')[0] || row.dest || '‚Äî'}
                      </Typography>
                      {row.dest?.includes(' - ') && (
                        <Typography
                          variant="caption"
                          color="text.secondary"
                          sx={{ fontSize: '0.55rem' }}
                        >
                          {row.dest.split(' - ').slice(1).join(' - ')}
                        </Typography>
                      )}
                    </Box>
                  );
                },
              },
              {
                id: 'quantity',
                label: 'S·∫¢N PH·∫®M',
                width: 60,
                align: 'center',
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  return (
                    <Typography
                      sx={{
                        fontFamily: 'monospace',
                        fontWeight: 600,
                        fontSize: { xs: '0.65rem', sm: '0.7rem' },
                        color: (theme) =>
                          row.quantity > 0
                            ? theme.palette.success.main
                            : theme.palette.text.secondary,
                        backgroundColor: (theme) =>
                          row.quantity > 0
                            ? alpha(theme.palette.success.main, 0.08)
                            : 'transparent',
                        borderRadius: 1,
                        px: 0.4,
                        py: 0.2,
                      }}
                    >
                      {row.quantity || 0}
                    </Typography>
                  );
                },
              },
              {
                id: 'pkgS',
                label: 'KI·ªÜN',
                width: 60,
                align: 'center',
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  const pkg = [
                    'pkgS',
                    'pkgM',
                    'pkgL',
                    'pkgBagSmall',
                    'pkgBagMedium',
                    'pkgBagLarge',
                    'pkgOther',
                  ]
                    .map((k) =>
                      getNumberFrom(
                        row as unknown as Record<string, unknown>,
                        k
                      )
                    )
                    .reduce((a, b) => a + b, 0);
                  const safePkg = Number.isFinite(pkg) ? pkg : 0;
                  return (
                    <Typography
                      sx={{
                        fontFamily: 'monospace',
                        fontWeight: 600,
                        fontSize: { xs: '0.65rem', sm: '0.7rem' },
                        color: (theme) =>
                          safePkg > 0
                            ? theme.palette.primary.main
                            : theme.palette.text.disabled,
                        backgroundColor: (theme) =>
                          safePkg > 0
                            ? alpha(theme.palette.primary.main, 0.08)
                            : 'transparent',
                        borderRadius: 1,
                        px: 0.4,
                        py: 0.2,
                      }}
                    >
                      {safePkg === 0 ? '0' : safePkg.toLocaleString('vi-VN')}
                    </Typography>
                  );
                },
              },
              {
                id: 'volS',
                label: 'KH·ªêI (M¬≥)',
                width: 60,
                align: 'right',
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  const vol = [
                    'volS',
                    'volM',
                    'volL',
                    'volBagSmall',
                    'volBagMedium',
                    'volBagLarge',
                    'volOther',
                  ]
                    .map((k) =>
                      getNumberFrom(
                        row as unknown as Record<string, unknown>,
                        k
                      )
                    )
                    .reduce((a, b) => a + b, 0);
                  const valid = Number.isFinite(vol) && vol <= 1000000;
                  const display =
                    !valid || vol === 0
                      ? '0,00'
                      : Number(vol).toLocaleString('vi-VN', {
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2,
                        });
                  return (
                    <Typography
                      sx={{
                        fontFamily: 'monospace',
                        fontWeight: 600,
                        fontSize: { xs: '0.65rem', sm: '0.7rem' },
                        color: (theme) =>
                          vol > 0
                            ? theme.palette.info.main
                            : theme.palette.text.disabled,
                        backgroundColor: (theme) =>
                          vol > 0
                            ? alpha(theme.palette.info.main, 0.08)
                            : 'transparent',
                        borderRadius: 1,
                        px: 0.5,
                        py: 0.25,
                      }}
                    >
                      {display}
                    </Typography>
                  );
                },
              },
              {
                id: 'state',
                label: 'TR·∫†NG TH√ÅI',
                width: 110,
                align: 'center',
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  const status = getStatusLabel(row.state);
                  const isWarning =
                    status.includes('Xu·∫•t') || status.includes('Nh·∫≠p');
                  const isSuccess =
                    status.includes('ƒê√£') || status.includes('Ho√†n');
                  const isError = status.includes('H·ªßy');

                  let color = 'primary.main';
                  let bgColor = 'primary.50';

                  if (isWarning) {
                    color = 'warning.main';
                    bgColor = 'warning.50';
                  } else if (isSuccess) {
                    color = 'success.main';
                    bgColor = 'success.50';
                  } else if (isError) {
                    color = 'error.main';
                    bgColor = 'error.50';
                  }

                  return (
                    <Typography
                      sx={{
                        fontSize: { xs: '0.65rem', sm: '0.7rem' },
                        fontWeight: 500,
                        color: color,
                        backgroundColor: bgColor,
                        border: '1px solid',
                        borderColor: color,
                        borderRadius: 1,
                        px: 0.5,
                        py: 0.25,
                        textAlign: 'center',
                        display: 'inline-block',
                        minWidth: 'fit-content',
                        maxWidth: '100%',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap',
                      }}
                    >
                      {status}
                    </Typography>
                  );
                },
              },
              {
                id: 'transportStatus',
                label: 'TT V·∫¨N CHUY·ªÇN',
                width: 110,
                align: 'center',
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  const transportStatus = row.transportStatus || 'Ch·ªù b√°o ki·ªán';
                  const isPending = transportStatus.includes('Ch·ªù');
                  const isInProgress = transportStatus.includes('ƒêang');
                  const isCompleted =
                    transportStatus.includes('ƒê√£') ||
                    transportStatus.includes('Ho√†n');

                  let color = 'primary.main';
                  let bgColor = 'primary.50';

                  if (isPending) {
                    color = 'warning.main';
                    bgColor = 'warning.50';
                  } else if (isInProgress) {
                    color = 'info.main';
                    bgColor = 'info.50';
                  } else if (isCompleted) {
                    color = 'success.main';
                    bgColor = 'success.50';
                  }

                  return (
                    <Typography
                      sx={{
                        fontSize: { xs: '0.65rem', sm: '0.7rem' },
                        fontWeight: 500,
                        color: color,
                        backgroundColor: bgColor,
                        border: '1px solid',
                        borderColor: color,
                        borderRadius: 1,
                        px: 0.5,
                        py: 0.25,
                        textAlign: 'center',
                        display: 'inline-block',
                        minWidth: 'fit-content',
                        maxWidth: '100%',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap',
                      }}
                    >
                      {transportStatus}
                    </Typography>
                  );
                },
              },
              {
                id: 'transfer_id',
                label: 'Thao t√°c',
                align: 'center',
                width: 70,
                render: (row: Transfer) => {
                  if (!row) return <Typography>‚Äî</Typography>;
                  return (
                    <Box onClick={(e) => e.stopPropagation()}>
                      <Tooltip title="Thao t√°c">
                        <IconButton
                          size="small"
                          onClick={(e) => handleActionMenuOpen(e, row)}
                          sx={{
                            color: 'primary.main',
                            '&:hover': {
                              backgroundColor: 'primary.light',
                              color: 'white',
                            },
                          }}
                        >
                          <MoreVertIcon />
                        </IconButton>
                      </Tooltip>
                    </Box>
                  );
                },
              },
            ]}
            data={filteredTransfers}
            selectable
            onSelectionChange={(ids) => setSelected(ids)}
            getRowId={(row: any) => row.transfer_id}
            rowsPerPageOptions={[5, 10, 25, 50]}
            defaultRowsPerPage={rowsPerPage}
            emptyMessage="Ch∆∞a c√≥ phi·∫øu chuy·ªÉn kho n√†o trong h·ªá th·ªëng"
          />
        </Box>
      </Box>
      {/* Toolbar Gridview button gi·ªØ nguy√™n, ƒë√£ c√≥ ·ªü action bar ph√≠a tr√™n */}

      {/* Gridview Dialog */}
      <Dialog
        open={gridOpen}
        onClose={() => setGridOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box
            display="flex"
            justifyContent="space-between"
            alignItems="center"
          >
            <Typography variant="h6">
              Th√¥ng s·ªë chi ti·∫øt phi·∫øu chuy·ªÉn kho
            </Typography>
            {gridIndex >= 0 && (
              <StatusChip
                status="primary"
                label={`${gridIndex + 1}/${selected.length}`}
              />
            )}
          </Box>
        </DialogTitle>
        <DialogContent dividers>
          {gridTransfer && (
            <Box>
              <Grid container spacing={2}>
                {/* Th√¥ng tin chung */}
                <Grid item xs={12} md={6}>
                  <Card sx={{ p: 2, height: '100%' }} elevation={1}>
                    <Typography
                      variant="subtitle1"
                      gutterBottom
                      fontWeight={600}
                      color="primary"
                    >
                      üìã Th√¥ng tin chung
                    </Typography>
                    <Grid container spacing={1}>
                      <Grid item xs={5}>
                        <Typography variant="body2" color="text.secondary">
                          M√£ ƒë∆°n h√†ng
                        </Typography>
                      </Grid>
                      <Grid item xs={7}>
                        <Typography
                          variant="body1"
                          fontWeight={600}
                          color="primary"
                        >
                          {gridTransfer.orderCode || '‚Äî'}
                        </Typography>
                      </Grid>
                      <Grid item xs={5}>
                        <Typography variant="body2" color="text.secondary">
                          Th·ªùi gian
                        </Typography>
                      </Grid>
                      <Grid item xs={7}>
                        <Typography variant="body2">
                          {gridTransfer.date || '‚Äî'}
                        </Typography>
                      </Grid>
                      <Grid item xs={5}>
                        <Typography variant="body2" color="text.secondary">
                          Kho ngu·ªìn
                        </Typography>
                      </Grid>
                      <Grid item xs={7}>
                        <Typography variant="body2">
                          {gridTransfer.source || '‚Äî'}
                        </Typography>
                      </Grid>
                      <Grid item xs={5}>
                        <Typography variant="body2" color="text.secondary">
                          Kho ƒë√≠ch
                        </Typography>
                      </Grid>
                      <Grid item xs={7}>
                        <Typography variant="body2">
                          {gridTransfer.dest || '‚Äî'}
                        </Typography>
                      </Grid>
                      <Grid item xs={5}>
                        <Typography variant="body2" color="text.secondary">
                          Tr·∫°ng th√°i
                        </Typography>
                      </Grid>
                      <Grid item xs={7}>
                        <StatusChip
                          status={getStatusLabel(
                            gridTransfer.state
                          ).toLowerCase()}
                          label={getStatusLabel(gridTransfer.state)}
                        />
                      </Grid>
                      <Grid item xs={5}>
                        <Typography variant="body2" color="text.secondary">
                          V·∫≠n chuy·ªÉn
                        </Typography>
                      </Grid>
                      <Grid item xs={7}>
                        <StatusChip
                          status={(
                            gridTransfer.transportStatus || 'Ch∆∞a c√≥'
                          ).toLowerCase()}
                          label={gridTransfer.transportStatus || 'Ch∆∞a c√≥'}
                        />
                      </Grid>
                      <Grid item xs={5}>
                        <Typography variant="body2" color="text.secondary">
                          Nh√¢n vi√™n
                        </Typography>
                      </Grid>
                      <Grid item xs={7}>
                        <Typography variant="body2">
                          {gridTransfer.employee || '‚Äî'}
                        </Typography>
                      </Grid>
                      <Grid item xs={5}>
                        <Typography variant="body2" color="text.secondary">
                          Ghi ch√∫
                        </Typography>
                      </Grid>
                      <Grid item xs={7}>
                        <Typography
                          variant="body2"
                          sx={{ fontStyle: 'italic' }}
                        >
                          {gridTransfer.note || 'Kh√¥ng c√≥ ghi ch√∫'}
                        </Typography>
                      </Grid>
                    </Grid>
                  </Card>
                </Grid>

                {/* Th√¥ng tin ƒë·ªãa ch·ªâ */}
                <Grid item xs={12} md={6}>
                  <Card sx={{ p: 2, height: '100%' }} elevation={1}>
                    <Typography
                      variant="subtitle1"
                      gutterBottom
                      fontWeight={600}
                      color="primary"
                    >
                      üìç Th√¥ng tin ƒë·ªãa ch·ªâ
                    </Typography>
                    <Box>
                      <Typography
                        variant="body2"
                        color="text.secondary"
                        gutterBottom
                      >
                        ƒê·ªãa ch·ªâ giao h√†ng
                      </Typography>
                      {gridTransfer.address ? (
                        <Box>
                          <Typography
                            variant="body2"
                            fontWeight={600}
                            color="primary"
                            gutterBottom
                          >
                            {gridTransfer.address}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            {[
                              gridTransfer.ward,
                              gridTransfer.district,
                              gridTransfer.province,
                            ]
                              .filter(Boolean)
                              .join(', ')}
                          </Typography>
                          <Box display="flex" gap={0.5} flexWrap="wrap" mt={1}>
                            {gridTransfer.ward && (
                              <StatusChip
                                status="primary"
                                label={gridTransfer.ward}
                              />
                            )}
                            {gridTransfer.district && (
                              <StatusChip
                                status="secondary"
                                label={gridTransfer.district}
                              />
                            )}
                            {gridTransfer.province && (
                              <StatusChip
                                status="info"
                                label={gridTransfer.province}
                              />
                            )}
                          </Box>
                        </Box>
                      ) : (
                        <Typography
                          variant="body2"
                          color="text.secondary"
                          sx={{ fontStyle: 'italic' }}
                        >
                          Ch∆∞a c√≥ th√¥ng tin ƒë·ªãa ch·ªâ
                        </Typography>
                      )}
                    </Box>
                  </Card>
                </Grid>

                {/* Chi ti·∫øt ki·ªán */}
                <Grid item xs={12} md={6}>
                  <Card sx={{ p: 2 }} elevation={1}>
                    <Typography
                      variant="subtitle1"
                      gutterBottom
                      fontWeight={600}
                      color="primary"
                    >
                      üì¶ Chi ti·∫øt ki·ªán
                    </Typography>
                    <Grid container spacing={1}>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="primary"
                            fontWeight={600}
                          >
                            {gridTransfer.pkgS ?? 0}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Size S
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="secondary"
                            fontWeight={600}
                          >
                            {gridTransfer.pkgM ?? 0}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Size M
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="info"
                            fontWeight={600}
                          >
                            {gridTransfer.pkgL ?? 0}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Size L
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="warning"
                            fontWeight={600}
                          >
                            {gridTransfer.pkgBagSmall ?? 0}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Bao nh·ªè
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="success"
                            fontWeight={600}
                          >
                            {gridTransfer.pkgBagMedium ?? 0}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Bao trung
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="error"
                            fontWeight={600}
                          >
                            {gridTransfer.pkgBagLarge ?? 0}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Bao l·ªõn
                          </Typography>
                        </Box>
                      </Grid>
                      {gridTransfer.pkgOther > 0 && (
                        <Grid item xs={12}>
                          <Box
                            textAlign="center"
                            p={1}
                            sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                          >
                            <Typography
                              variant="h6"
                              color="text.secondary"
                              fontWeight={600}
                            >
                              {gridTransfer.pkgOther}
                            </Typography>
                            <Typography
                              variant="caption"
                              color="text.secondary"
                            >
                              Kh√°c
                            </Typography>
                          </Box>
                        </Grid>
                      )}
                      <Grid item xs={12}>
                        <Box
                          textAlign="center"
                          p={1.5}
                          sx={{
                            backgroundColor: 'primary.main',
                            color: 'white',
                            borderRadius: 1,
                            mt: 1,
                          }}
                        >
                          <Typography variant="h6">
                            {(gridTransfer.pkgS || 0) +
                              (gridTransfer.pkgM || 0) +
                              (gridTransfer.pkgL || 0) +
                              (gridTransfer.pkgBagSmall || 0) +
                              (gridTransfer.pkgBagMedium || 0) +
                              (gridTransfer.pkgBagLarge || 0) +
                              (gridTransfer.pkgOther || 0)}
                          </Typography>
                          <Typography variant="caption">T·ªîNG KI·ªÜN</Typography>
                        </Box>
                      </Grid>
                    </Grid>
                  </Card>
                </Grid>

                {/* Chi ti·∫øt kh·ªëi */}
                <Grid item xs={12} md={6}>
                  <Card sx={{ p: 2 }} elevation={1}>
                    <Typography
                      variant="subtitle1"
                      gutterBottom
                      fontWeight={600}
                      color="primary"
                    >
                      üìä Chi ti·∫øt kh·ªëi (m¬≥)
                    </Typography>
                    <Grid container spacing={1}>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="primary"
                            fontWeight={600}
                          >
                            {(Number(gridTransfer.volS) || 0).toLocaleString(
                              'vi-VN',
                              {
                                minimumFractionDigits: 3,
                                maximumFractionDigits: 3,
                              }
                            )}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Size S
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="secondary"
                            fontWeight={600}
                          >
                            {(Number(gridTransfer.volM) || 0).toLocaleString(
                              'vi-VN',
                              {
                                minimumFractionDigits: 3,
                                maximumFractionDigits: 3,
                              }
                            )}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Size M
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="info"
                            fontWeight={600}
                          >
                            {(Number(gridTransfer.volL) || 0).toLocaleString(
                              'vi-VN',
                              {
                                minimumFractionDigits: 3,
                                maximumFractionDigits: 3,
                              }
                            )}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Size L
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="warning"
                            fontWeight={600}
                          >
                            {(
                              Number(gridTransfer.volBagSmall) || 0
                            ).toLocaleString('vi-VN', {
                              minimumFractionDigits: 3,
                              maximumFractionDigits: 3,
                            })}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Bao nh·ªè
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="success"
                            fontWeight={600}
                          >
                            {(
                              Number(gridTransfer.volBagMedium) || 0
                            ).toLocaleString('vi-VN', {
                              minimumFractionDigits: 3,
                              maximumFractionDigits: 3,
                            })}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Bao trung
                          </Typography>
                        </Box>
                      </Grid>
                      <Grid item xs={4}>
                        <Box
                          textAlign="center"
                          p={1}
                          sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                        >
                          <Typography
                            variant="h6"
                            color="error"
                            fontWeight={600}
                          >
                            {(
                              Number(gridTransfer.volBagLarge) || 0
                            ).toLocaleString('vi-VN', {
                              minimumFractionDigits: 3,
                              maximumFractionDigits: 3,
                            })}
                          </Typography>
                          <Typography variant="caption" color="text.secondary">
                            Bao l·ªõn
                          </Typography>
                        </Box>
                      </Grid>
                      {gridTransfer.volOther > 0 && (
                        <Grid item xs={12}>
                          <Box
                            textAlign="center"
                            p={1}
                            sx={{ backgroundColor: '#f5f5f5', borderRadius: 1 }}
                          >
                            <Typography
                              variant="h6"
                              color="text.secondary"
                              fontWeight={600}
                            >
                              {(
                                Number(gridTransfer.volOther) || 0
                              ).toLocaleString('vi-VN', {
                                minimumFractionDigits: 3,
                                maximumFractionDigits: 3,
                              })}
                            </Typography>
                            <Typography
                              variant="caption"
                              color="text.secondary"
                            >
                              Kh√°c
                            </Typography>
                          </Box>
                        </Grid>
                      )}
                      <Grid item xs={12}>
                        <Box
                          textAlign="center"
                          p={1.5}
                          sx={{
                            backgroundColor: 'success.main',
                            color: 'white',
                            borderRadius: 1,
                            mt: 1,
                          }}
                        >
                          <Typography variant="h6">
                            {(
                              (Number(gridTransfer.volS) || 0) +
                              (Number(gridTransfer.volM) || 0) +
                              (Number(gridTransfer.volL) || 0) +
                              (Number(gridTransfer.volBagSmall) || 0) +
                              (Number(gridTransfer.volBagMedium) || 0) +
                              (Number(gridTransfer.volBagLarge) || 0) +
                              (Number(gridTransfer.volOther) || 0)
                            ).toLocaleString('vi-VN', {
                              minimumFractionDigits: 3,
                              maximumFractionDigits: 3,
                            })}
                          </Typography>
                          <Typography variant="caption">
                            T·ªîNG KH·ªêI (m¬≥)
                          </Typography>
                        </Box>
                      </Grid>
                    </Grid>
                  </Card>
                </Grid>
              </Grid>
            </Box>
          )}
        </DialogContent>
        <DialogActions sx={{ p: 2, backgroundColor: '#f5f5f5' }}>
          {gridIndex >= 0 && (
            <>
              <ActionButton
                onClick={() => navigateGrid('prev')}
                disabled={gridIndex <= 0}
                variant="secondary"
                size="small"
                startIcon={<ActionIcons.back />}
              >
                Tr∆∞·ªõc
              </ActionButton>
              <ActionButton
                onClick={() => navigateGrid('next')}
                disabled={gridIndex >= selected.length - 1}
                variant="secondary"
                size="small"
                startIcon={<ActionIcons.forward />}
              >
                Sau
              </ActionButton>
            </>
          )}
          <ActionButton
            onClick={() => setGridOpen(false)}
            variant="primary"
            size="small"
            sx={{ ml: 'auto' }}
          >
            ƒê√≥ng
          </ActionButton>
        </DialogActions>
      </Dialog>

      {/* Edit Transfer (ƒë·ªãa ch·ªâ) */}
      <Dialog
        open={editOpen}
        onClose={() => setEditOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Ch·ªânh s·ª≠a ƒë·ªãa ch·ªâ</DialogTitle>
        <DialogContent dividers>
          <Grid container spacing={2} sx={{ mt: 0.5 }}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="ƒê·ªãa ch·ªâ"
                value={editForm.address}
                onChange={(e) =>
                  handleEditFormChange('address', e.target.value)
                }
                size="small"
                multiline
                rows={2}
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <Autocomplete
                freeSolo
                options={wardOptions}
                value={editForm.ward}
                onInputChange={(_, val) => handleEditFormChange('ward', val)}
                renderInput={(params) => (
                  <TextField {...params} label="Ph∆∞·ªùng/X√£" size="small" />
                )}
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <Autocomplete
                freeSolo
                options={districtOptions}
                value={editForm.district}
                onInputChange={(_, val) =>
                  handleEditFormChange('district', val)
                }
                onChange={(_, val) => {
                  handleEditFormChange('district', String(val || ''));
                  fetchWards(editForm.province, String(val || ''));
                }}
                renderInput={(params) => (
                  <TextField {...params} label="Qu·∫≠n/Huy·ªán" size="small" />
                )}
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <Autocomplete
                freeSolo
                options={cityOptions}
                value={editForm.province}
                onInputChange={(_, val) =>
                  handleEditFormChange('province', val)
                }
                onChange={(_, val) => {
                  handleEditFormChange('province', String(val || ''));
                  fetchDistricts(String(val || ''));
                }}
                renderInput={(params) => (
                  <TextField {...params} label="T·ªânh/Th√†nh ph·ªë" size="small" />
                )}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <ActionButton variant="secondary" onClick={() => setEditOpen(false)}>
            H·ªßy
          </ActionButton>
          <ActionButton variant="primary" onClick={submitEdit}>
            L∆∞u
          </ActionButton>
        </DialogActions>
      </Dialog>

      {/* B√°o ki·ªán Dialog */}
      <Dialog
        open={reportOpen}
        onClose={() => setReportOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          B√°o ki·ªán
          {reportTransfer &&
            (() => {
              const totalPackages = Object.values(reportCounts).reduce(
                (sum, count) => sum + (count || 0),
                0
              );
              const totalVolume = volumeRules.reduce((sum, rule) => {
                const count = reportCounts[rule.id] || 0;
                return sum + count * rule.unitVolume;
              }, 0);
              return (
                <Typography
                  variant="subtitle2"
                  color="text.secondary"
                  sx={{ mt: 0.5 }}
                >
                  {reportTransfer.orderCode} ‚Ä¢ {reportTransfer.dest} ‚Ä¢{' '}
                  {totalPackages} Ki·ªán (
                  {Number(totalVolume).toLocaleString('vi-VN', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  })}{' '}
                  m¬≥)
                </Typography>
              );
            })()}
        </DialogTitle>
        <DialogContent dividers>
          {reportTransfer && (
            <Box>
              <Grid container spacing={1.5}>
                {volumeRules.map((r) => (
                  <Grid key={r.id} item xs={12} sm={6}>
                    <TextField
                      fullWidth
                      size="small"
                      type="number"
                      label={`${r.name} (${Number(r.unitVolume || 0).toLocaleString('vi-VN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} m3/ki·ªán)`}
                      value={reportCounts[r.id] || 0}
                      onChange={(e) =>
                        setReportCounts((prev) => ({
                          ...prev,
                          [r.id]: Number(e.target.value) || 0,
                        }))
                      }
                    />
                  </Grid>
                ))}
              </Grid>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <ActionButton
            variant="secondary"
            onClick={() => setReportOpen(false)}
          >
            H·ªßy
          </ActionButton>
          <ActionButton variant="primary" onClick={handleSubmitReport}>
            L∆∞u
          </ActionButton>
        </DialogActions>
      </Dialog>

      {/* Dialog th√¥ng tin ƒë·ªãa ƒëi·ªÉm */}
      <Dialog
        open={locationDialogOpen}
        onClose={() => setLocationDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          Th√¥ng tin ƒë·ªãa ƒëi·ªÉm kh√¥ng t√¨m th·∫•y
          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
            Vui l√≤ng nh·∫≠p th√¥ng tin ƒë·ªãa ƒëi·ªÉm cho phi·∫øu{' '}
            {reportTransfer?.orderCode}
          </Typography>
        </DialogTitle>
        <DialogContent dividers>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="M√£ ƒëi·ªÉm"
                value={locationData.code}
                onChange={(e) => handleLocationChange('code', e.target.value)}
                size="small"
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="ID ƒëi·ªÉm"
                value={locationData.id}
                onChange={(e) => handleLocationChange('id', e.target.value)}
                size="small"
                disabled
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="ƒê·ªãa ch·ªâ"
                value={locationData.address}
                onChange={(e) =>
                  handleLocationChange('address', e.target.value)
                }
                size="small"
                multiline
                rows={2}
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                label="Ph∆∞·ªùng/X√£"
                value={locationData.ward}
                onChange={(e) => handleLocationChange('ward', e.target.value)}
                size="small"
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                label="Qu·∫≠n/Huy·ªán"
                value={locationData.district}
                onChange={(e) =>
                  handleLocationChange('district', e.target.value)
                }
                size="small"
              />
            </Grid>
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                label="T·ªânh/Th√†nh ph·ªë"
                value={locationData.province}
                onChange={(e) =>
                  handleLocationChange('province', e.target.value)
                }
                size="small"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <ActionButton
            variant="secondary"
            onClick={() => setLocationDialogOpen(false)}
          >
            H·ªßy
          </ActionButton>
          <ActionButton variant="primary" onClick={handleLocationSubmit}>
            L∆∞u v√† b√°o ki·ªán
          </ActionButton>
        </DialogActions>
      </Dialog>

      {/* Action Menu Popover */}
      <Popover
        open={Boolean(actionMenuAnchor)}
        anchorEl={actionMenuAnchor}
        onClose={handleActionMenuClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'right',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
        PaperProps={{
          sx: {
            minWidth: 180,
            boxShadow: '0 4px 20px rgba(0,0,0,0.15)',
            borderRadius: 2,
          },
        }}
      >
        <List sx={{ py: 0 }}>
          <ListItem disablePadding>
            <ListItemButton onClick={() => handleActionClick('report')}>
              <CampaignIcon sx={{ mr: 2, color: 'warning.main' }} />
              <ListItemText primary="B√°o ki·ªán" />
            </ListItemButton>
          </ListItem>
          <ListItem disablePadding>
            <ListItemButton onClick={() => handleActionClick('view')}>
              <PrintIcon sx={{ mr: 2, color: 'success.main' }} />
              <ListItemText primary="In so·∫°n h√†ng" />
            </ListItemButton>
          </ListItem>
          <ListItem disablePadding>
            <ListItemButton onClick={() => handleActionClick('print')}>
              <PrintIcon sx={{ mr: 2, color: 'primary.main' }} />
              <ListItemText primary="In phi·∫øu" />
            </ListItemButton>
          </ListItem>
          <ListItem disablePadding>
            <ListItemButton onClick={() => handleActionClick('export')}>
              <ExportIcon sx={{ mr: 2, color: 'info.main' }} />
              <ListItemText primary="Xu·∫•t phi·∫øu" />
            </ListItemButton>
          </ListItem>
          <Divider />
          <ListItem disablePadding>
            <ListItemButton onClick={() => handleActionClick('edit')}>
              <EditIcon sx={{ mr: 2, color: 'primary.main' }} />
              <ListItemText primary="S·ª≠a" />
            </ListItemButton>
          </ListItem>
          <ListItem disablePadding>
            <ListItemButton onClick={() => handleActionClick('delete')}>
              <DeleteIcon sx={{ mr: 2, color: 'error.main' }} />
              <ListItemText primary="X√≥a" />
            </ListItemButton>
          </ListItem>
        </List>
      </Popover>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default TransferList;
