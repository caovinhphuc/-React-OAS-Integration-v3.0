import { useState, useCallback } from 'react';
import { DistanceService } from '../services/distanceService';
import { getFallbackDistance } from '../config/mapsConfig';

interface DistanceCalculationResult {
  distances: { [stopKey: string]: number };
  totalDistance: number;
  isCalculating: boolean;
  error: string | null;
}

export const useDistanceCalculation = () => {
  const [distances, setDistances] = useState<{ [stopKey: string]: number }>({});
  const [isCalculating, setIsCalculating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const calculateStopDistances = useCallback(
    async (
      pickupLocation: any,
      selectedStopPoints: Set<string>,
      stopPoints: { [key: string]: any },
      locations: any[]
    ): Promise<DistanceCalculationResult> => {
      if (!pickupLocation || selectedStopPoints.size === 0) {
        return {
          distances: {},
          totalDistance: 0,
          isCalculating: false,
          error: null,
        };
      }

      setIsCalculating(true);
      setError(null);
      const newDistances: { [stopKey: string]: number } = {};

      try {
        // L·∫•y ƒë·ªãa ch·ªâ ƒëi·ªÉm ngu·ªìn
        const pickupLocationData = locations.find(
          (loc) => loc.id === pickupLocation
        );
        if (!pickupLocationData) {
          throw new Error('Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm ngu·ªìn');
        }

        const origin = `${pickupLocationData.address}, ${pickupLocationData.ward}, ${pickupLocationData.district}, ${pickupLocationData.province}`;
        let currentOrigin = origin;

        // T√≠nh kho·∫£ng c√°ch theo th·ª© t·ª± ƒëi·ªÉm d·ª´ng
        const stopPointsArray = Array.from(selectedStopPoints);
        for (let i = 0; i < stopPointsArray.length; i++) {
          const stopKey = stopPointsArray[i];
          const stopPoint = stopPoints[stopKey];
          if (!stopPoint) continue;

          // T√¨m ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß t·ª´ m√£ ƒëi·ªÉm d·ª´ng trong Locations
          const destinationLocation = locations.find(
            (loc) => loc.id === stopPoint.address
          );
          const destinationAddress = destinationLocation
            ? `${destinationLocation.address}, ${destinationLocation.ward}, ${destinationLocation.district}, ${destinationLocation.province}`
            : stopPoint.address;

          // T√≠nh kho·∫£ng c√°ch t·ª´ ƒëi·ªÉm hi·ªán t·∫°i ƒë·∫øn ƒëi·ªÉm d·ª´ng n√†y
          console.log(
            `üîÑ Calculating distance from ${currentOrigin} to ${stopKey}: ${destinationAddress}`
          );
          const result = await DistanceService.calculateDistance(
            currentOrigin,
            destinationAddress
          );

          let segmentDistance = 0;

          if (result.success && result.distance && result.distance > 0) {
            segmentDistance = result.distance;
            console.log(
              `‚úÖ Google Apps Script distance: ${segmentDistance.toFixed(2)} km`
            );
          } else {
            // Fallback: S·ª≠ d·ª•ng kho·∫£ng c√°ch th·ª±c t·∫ø t·ª´ config n·∫øu Google Apps Script kh√¥ng ho·∫°t ƒë·ªông
            console.log(
              '‚ö†Ô∏è Google Apps Script not available, trying fallback distances'
            );
            console.log(`‚ùå Google Apps Script error: ${result.error}`);

            const fallbackDistance = getFallbackDistance(
              currentOrigin,
              destinationAddress
            );

            if (fallbackDistance > 0 && fallbackDistance !== 10.0) {
              segmentDistance = fallbackDistance;
              console.log(
                `‚úÖ Using fallback distance: ${segmentDistance.toFixed(2)} km`
              );
            } else {
              // Kh√¥ng s·ª≠ d·ª•ng 10km m·∫∑c ƒë·ªãnh, thay v√†o ƒë√≥ b√°o l·ªói
              console.error('‚ùå No valid fallback distance found');
              throw new Error(
                `Kh√¥ng th·ªÉ t√≠nh kho·∫£ng c√°ch t·ª´ "${currentOrigin}" ƒë·∫øn "${destinationAddress}". Vui l√≤ng ki·ªÉm tra ƒë·ªãa ch·ªâ ho·∫∑c th·ª≠ l·∫°i sau.`
              );
            }
          }

          // L∆∞u kho·∫£ng c√°ch c·ªßa t·ª´ng ƒëo·∫°n ri√™ng bi·ªát
          newDistances[stopKey] = segmentDistance;

          console.log(
            `‚úÖ Segment distance for stop ${i + 1}: ${segmentDistance.toFixed(2)} km`
          );

          // C·∫≠p nh·∫≠t ƒëi·ªÉm xu·∫•t ph√°t cho ƒëo·∫°n ti·∫øp theo
          currentOrigin = destinationAddress;
        }

        // T√≠nh t·ªïng kho·∫£ng c√°ch
        const totalDistance = Object.values(newDistances).reduce(
          (sum, distance) => sum + distance,
          0
        );

        setDistances(newDistances);
        console.log('‚úÖ All stop point distances calculated:', newDistances);
        console.log('‚úÖ Total distance:', totalDistance);

        return {
          distances: newDistances,
          totalDistance,
          isCalculating: false,
          error: null,
        };
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : 'L·ªói t√≠nh kho·∫£ng c√°ch';
        setError(errorMessage);
        console.error('‚ùå Error calculating stop point distances:', error);
        return {
          distances: {},
          totalDistance: 0,
          isCalculating: false,
          error: errorMessage,
        };
      } finally {
        setIsCalculating(false);
      }
    },
    []
  );

  const getDistancePayload = useCallback(
    (
      selectedStopPoints: Set<string>,
      distances: { [stopKey: string]: number }
    ) => {
      const stopDistances: { [key: string]: number } = {};
      const totalDistance = Object.values(distances).reduce(
        (sum, distance) => sum + distance,
        0
      );

      // Map kho·∫£ng c√°ch theo th·ª© t·ª± ƒëi·ªÉm d·ª´ng
      Array.from(selectedStopPoints).forEach((stopKey, index) => {
        const distanceForStop = distances[stopKey] || 0;
        stopDistances[`distance${index + 1}`] = Number(
          distanceForStop.toFixed(2)
        );

        console.log(
          `üîç DEBUG - Mapping distance: stopKey=${stopKey}, index=${index}, distance=${distanceForStop}`
        );
      });

      console.log('üîç DEBUG - Distance payload:', {
        ...stopDistances,
        totalDistance: Number(totalDistance.toFixed(2)),
      });

      return {
        ...stopDistances,
        totalDistance: Number(totalDistance.toFixed(2)),
      };
    },
    []
  );

  return {
    distances,
    isCalculating,
    error,
    calculateStopDistances,
    getDistancePayload,
  };
};
