// Google Maps API Configuration
export const GOOGLE_MAPS_CONFIG = {
  // Thay th·∫ø YOUR_GOOGLE_MAPS_API_KEY b·∫±ng API key th·ª±c t·∫ø
  API_KEY:
    import.meta.env.VITE_GOOGLE_MAPS_API_KEY || 'YOUR_GOOGLE_MAPS_API_KEY',

  // Distance Matrix API endpoint
  DISTANCE_MATRIX_URL:
    'https://maps.googleapis.com/maps/api/distancematrix/json',

  // Geocoding API endpoint
  GEOCODING_URL: 'https://maps.googleapis.com/maps/api/geocode/json',
};

// Fallback distance calculation (khi kh√¥ng c√≥ API key)
export const FALLBACK_DISTANCES = {
  // Kho·∫£ng c√°ch m·∫∑c ƒë·ªãnh cho c√°c tuy·∫øn ƒë∆∞·ªùng ph·ªï bi·∫øn t·∫°i TP.HCM
  'KTT - l√¥2-5, ƒê∆∞·ªùng CN1': {
    '605 Nguy·ªÖn Th·ªã Th·∫≠p, Ph∆∞·ªùng T√¢n H∆∞ng, Qu·∫≠n 7': 15.2,
    '415 C·ªông H√≤a, Ph∆∞·ªùng 15, Qu·∫≠n T√¢n B√¨nh': 12.8,
    '400 L≈©y B√°n B√≠ch, Ph∆∞·ªùng H√≤a Th·∫°nh, Qu·∫≠n T√¢n Ph√∫': 8.5,
    '185H C·ªëng Qu·ª≥nh, Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh, Qu·∫≠n 1': 18.3,
  },
  // Th√™m key ƒë·∫ßy ƒë·ªß ƒë·ªÉ match v·ªõi origin th·ª±c t·∫ø
  'l√¥2-5, ƒê∆∞·ªùng CN1, Ph∆∞·ªùng T√¢y Th·∫°nh, Qu·∫≠n T√¢n Ph√∫': {
    '605 Nguy·ªÖn Th·ªã Th·∫≠p, Ph∆∞·ªùng T√¢n H∆∞ng, Qu·∫≠n 7, Th√†nh ph·ªë H·ªì Ch√≠ Minh': 15.2,
    '415 C·ªông H√≤a, Ph∆∞·ªùng 15, Qu·∫≠n T√¢n B√¨nh, Th√†nh ph·ªë H·ªì Ch√≠ Minh': 12.8,
    '400 L≈©y B√°n B√≠ch, Ph∆∞·ªùng H√≤a Th·∫°nh, Qu·∫≠n T√¢n Ph√∫, Th√†nh ph·ªë H·ªì Ch√≠ Minh': 8.5,
    '185H C·ªëng Qu·ª≥nh, Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh, Qu·∫≠n 1, Th√†nh ph·ªë H·ªì Ch√≠ Minh': 18.3,
    '219 Quang Trung, Ph∆∞·ªùng 10, Qu·∫≠n G√≤ V·∫•p, Th√†nh ph·ªë H·ªì Ch√≠ Minh': 14.5,
  },
  // Th√™m c√°c tuy·∫øn ƒë∆∞·ªùng kh√°c t·ª´ Google Sheets locations
  KHA: {
    COD: 12.5,
    'COD-W': 8.3,
    'H·ªôi ch·ª£ 2': 15.7,
  },
  COD: {
    KHA: 12.5,
    'COD-W': 4.2,
    'H·ªôi ch·ª£ 2': 8.1,
  },
  'COD-W': {
    KHA: 8.3,
    COD: 4.2,
    'H·ªôi ch·ª£ 2': 12.3,
  },
  'H·ªôi ch·ª£ 2': {
    KHA: 15.7,
    COD: 8.1,
    'COD-W': 12.3,
  },
  // Th√™m kho·∫£ng c√°ch cho c√°c ƒë·ªãa ƒëi·ªÉm MIA ph·ªï bi·∫øn t·ª´ KTT
  KTT: {
    MIA1: 18.3, // 185H C·ªëng Qu·ª≥nh, Qu·∫≠n 1
    MIA11: 14.5, // 219 Quang Trung, Qu·∫≠n G√≤ V·∫•p
    MIA19: 15.2, // 605 Nguy·ªÖn Th·ªã Th·∫≠p, Qu·∫≠n 7
    MIA16: 8.5, // 400 L≈©y B√°n B√≠ch, Qu·∫≠n T√¢n Ph√∫
    MIA5: 12.8, // 415 C·ªông H√≤a, Qu·∫≠n T√¢n B√¨nh
  },
};

// Helper function ƒë·ªÉ l·∫•y kho·∫£ng c√°ch fallback
export const getFallbackDistance = (
  origin: string,
  destination: string
): number => {
  console.log('üîç Looking for fallback distance:');
  console.log(`üìç Origin: ${origin}`);
  console.log(`üìç Destination: ${destination}`);

  // T√¨m trong fallback distances v·ªõi logic matching t·ªët h∆°n
  for (const [key, distances] of Object.entries(FALLBACK_DISTANCES)) {
    console.log(`üîç Checking key: ${key}`);

    // Ki·ªÉm tra origin match (c√≥ th·ªÉ l√† code ho·∫∑c ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß)
    const originMatch =
      origin.includes(key) ||
      key.includes(origin) ||
      origin.toLowerCase().includes(key.toLowerCase()) ||
      key.toLowerCase().includes(origin.toLowerCase());

    if (originMatch) {
      console.log(`‚úÖ Found matching origin key: ${key}`);

      for (const [dest, distance] of Object.entries(distances)) {
        console.log(`üîç Checking destination: ${dest}`);

        // Ki·ªÉm tra destination match
        const destMatch =
          destination.includes(dest) ||
          dest.includes(destination) ||
          destination.toLowerCase().includes(dest.toLowerCase()) ||
          dest.toLowerCase().includes(destination.toLowerCase());

        if (destMatch) {
          console.log(
            `‚úÖ Found matching destination: ${dest} = ${distance} km`
          );
          return distance;
        }
      }
    }
  }

  // Th·ª≠ t√¨m ki·∫øm theo pattern ƒë·ªãa ch·ªâ
  const originCode = extractLocationCode(origin);
  const destCode = extractLocationCode(destination);

  if (originCode && destCode) {
    console.log(`üîç Trying location codes: ${originCode} -> ${destCode}`);

    for (const [key, distances] of Object.entries(FALLBACK_DISTANCES)) {
      if (key.includes(originCode)) {
        for (const [dest, distance] of Object.entries(distances)) {
          if (dest.includes(destCode)) {
            console.log(
              `‚úÖ Found matching by codes: ${originCode} -> ${destCode} = ${distance} km`
            );
            return distance;
          }
        }
      }
    }
  }

  console.log('‚ùå No fallback distance found');
  // Kh√¥ng tr·∫£ v·ªÅ kho·∫£ng c√°ch m·∫∑c ƒë·ªãnh, ƒë·ªÉ hook x·ª≠ l√Ω l·ªói
  return 0;
};

// Helper function ƒë·ªÉ extract location code t·ª´ ƒë·ªãa ch·ªâ
const extractLocationCode = (address: string): string | null => {
  // T√¨m c√°c pattern ph·ªï bi·∫øn
  const patterns = [
    /^([A-Z]+)\s*\(/, // KHA (...
    /^([A-Z]+)\s*$/, // KHA
    /^([A-Z]+-[A-Z]+)\s*\(/, // COD-W (...
    /^([A-Z]+-[A-Z]+)\s*$/, // COD-W
    /^([A-Z]+[0-9]+)\s*\(/, // MIA11 (...
    /^([A-Z]+[0-9]+)\s*$/, // MIA11
  ];

  for (const pattern of patterns) {
    const match = address.match(pattern);
    if (match) {
      return match[1];
    }
  }

  return null;
};
