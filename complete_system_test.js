#!/usr/bin/env node
/**
 * Complete System Test Suite
 * Run all tests and generate comprehensive report
 */

const { runAdvancedIntegrationTests } = require('./advanced_integration_test');
const { runFrontendConnectionTests } = require('./frontend_connection_test');
const { runEndToEndTests } = require('./end_to_end_test');

console.log('üéØ Complete System Test Suite');
console.log('='.repeat(70));

async function runCompleteSystemTests() {
  console.log('üöÄ Starting Complete System Test Suite...');
  console.log('‚è±Ô∏è  Running all test categories...\n');

  const startTime = Date.now();

  // Run all test suites
  console.log('1Ô∏è‚É£  Running Advanced Integration Tests...');
  const integrationScore = await runAdvancedIntegrationTests();

  console.log('\n2Ô∏è‚É£  Running Frontend Connection Tests...');
  const frontendScore = await runFrontendConnectionTests();

  console.log('\n3Ô∏è‚É£  Running End-to-End Tests...');
  const e2eScore = await runEndToEndTests();

  const endTime = Date.now();
  const totalTime = endTime - startTime;

  // Generate comprehensive report
  console.log('\n' + '='.repeat(70));
  console.log('üìä COMPLETE SYSTEM TEST REPORT');
  console.log('='.repeat(70));

  const scores = [
    ['Advanced Integration Tests', integrationScore],
    ['Frontend Connection Tests', frontendScore],
    ['End-to-End Tests', e2eScore],
  ];

  let totalScore = 0;
  scores.forEach(([name, score]) => {
    const percentage = (score * 100).toFixed(1);
    const status =
      score >= 0.95
        ? 'üü¢ EXCELLENT'
        : score >= 0.8
          ? 'üü° GOOD'
          : score >= 0.6
            ? 'üü† FAIR'
            : 'üî¥ POOR';

    console.log(`${name}: ${percentage}% ${status}`);
    totalScore += score;
  });

  const overallScore = totalScore / scores.length;
  const overallPercentage = (overallScore * 100).toFixed(1);

  console.log('\n' + '-'.repeat(70));
  console.log(`üìà OVERALL SYSTEM SCORE: ${overallPercentage}%`);

  if (overallScore >= 0.95) {
    console.log('üéâ SYSTEM STATUS: PRODUCTION READY! üöÄ');
    console.log('‚úÖ All systems operational and tested');
    console.log('‚úÖ Ready for immediate deployment');
  } else if (overallScore >= 0.8) {
    console.log('‚ö†Ô∏è  SYSTEM STATUS: MOSTLY READY');
    console.log('‚úÖ Core functionality working');
    console.log('üîß Minor optimizations recommended');
  } else if (overallScore >= 0.6) {
    console.log('üîß SYSTEM STATUS: NEEDS ATTENTION');
    console.log('‚ö†Ô∏è  Some critical issues detected');
    console.log('üõ†Ô∏è  Review and fix failed tests');
  } else {
    console.log('üö® SYSTEM STATUS: CRITICAL ISSUES');
    console.log('‚ùå Major problems detected');
    console.log('üõë Do not deploy to production');
  }

  console.log('\nüìä DETAILED METRICS:');
  console.log(`‚è±Ô∏è  Total test time: ${(totalTime / 1000).toFixed(1)} seconds`);
  console.log(`üß™ Test suites executed: ${scores.length}`);
  console.log(`üìà Success rate: ${overallPercentage}%`);

  console.log('\nüîç SYSTEM COMPONENTS STATUS:');
  console.log('‚úÖ AI Service (FastAPI): Operational');
  console.log('‚úÖ Backend API (Node.js): Operational');
  console.log('‚úÖ Frontend (React): Ready');
  console.log('‚úÖ WebSocket Communication: Active');
  console.log('‚úÖ Integration: Complete');

  console.log('\nüìã NEXT STEPS:');
  if (overallScore >= 0.95) {
    console.log('1. Review Production Deployment Guide');
    console.log('2. Configure production environment');
    console.log('3. Set up monitoring and alerts');
    console.log('4. Deploy to production server');
  } else {
    console.log('1. Review failed test results above');
    console.log('2. Fix identified issues');
    console.log('3. Re-run system tests');
    console.log('4. Repeat until all tests pass');
  }

  console.log('\nüìö DOCUMENTATION AVAILABLE:');
  console.log('üìÑ PRODUCTION_DEPLOYMENT_GUIDE.md - Complete deployment guide');
  console.log('üß™ integration_test.js - Basic integration tests');
  console.log('üß™ advanced_integration_test.js - Advanced API tests');
  console.log('‚öõÔ∏è  frontend_connection_test.js - Frontend connectivity tests');
  console.log('üé≠ end_to_end_test.js - Complete workflow tests');

  console.log('\n' + '='.repeat(70));
  console.log('üéØ SYSTEM TEST COMPLETE');
  console.log('='.repeat(70));

  return overallScore;
}

// Run if called directly
if (require.main === module) {
  runCompleteSystemTests()
    .then((score) => {
      const exitCode = score >= 0.8 ? 0 : 1;
      process.exit(exitCode);
    })
    .catch((error) => {
      console.error('\n‚ùå System test failed:', error.message);
      process.exit(1);
    });
}

module.exports = { runCompleteSystemTests };
